// Game.cpp: implementation of the CGame class.
// Cliente Helbreath Argentina version 13.00 - 200/200
//////////////////////////////////////////////////////////////////////
#pragma warning(disable : 4996)

#include "../Headers/Game.h"
#include "../Language/lan_eng.h"
//added resolution
#include "..\Resolution\Resolution.h"
#include <algorithm>
#include <thread>
#include <chrono>
#include <thread>
#include <iomanip>  // Para std::fixed y std::setprecision

#define SERVER_IP "207.246.116.137"
#define SERVER_PORT 8888
#define UDP_BUFFER_SIZE 1 // Tamaño mínimo

// Resolution 1024x768
extern void start();
extern class cResolution * c_reso;
extern char G_cSpriteAlphaDegree;

extern char G_cCmdLine[256], G_cCmdLineTokenA[120], G_cCmdLineTokenA_Lowercase[120], G_cCmdLineTokenB[120], G_cCmdLineTokenC[120], G_cCmdLineTokenD[120], G_cCmdLineTokenE[120];
extern class XSocket * G_pCalcSocket;
extern BOOL G_bIsCalcSocketConnected;
extern DWORD G_dwCalcSocketTime, G_dwCalcSocketSendTime;
extern HWND	G_hWnd, G_hEditWnd;
extern HINSTANCE G_hInstance;

bool _tmp_bSpriteOmit;

char _cDrawingOrder[] = { 0, 1, 0, 0, 0, 0, 0, 1, 1 };
char _cMantleDrawingOrder[] = { 0, 1, 1, 1, 0, 0, 0, 2, 2 };
char _cMantleDrawingOrderOnRun[] = { 0, 1, 1, 1, 1, 1, 1, 1, 1 };

// Variables para almacenar los colores actuales y el incremento
int ar = 255, ag = 255, ab = 0;
int dr = -5, dg = 0, db = 5; // Incrementos para cada canal de color

bool useYellow = true; // Controla si el color actual es amarillo
int frameCounter = 0; // Contador de frames
extern void SetKeyboardHook(bool enable);

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CGame::CGame()
{
	
	/*m_pXSocketUDP = new XSocketUDP();
	InitClientSocket();*/
	int i;
	srand((unsigned)time(NULL));
	ReadSettings();
	confirmoperation = -1;
	ZeroMemory(m_cAmmount, sizeof(m_cAmmount));
	vec_fighters.clear();
	//added resolution
	//b800x600 = true;
	b800x600 = true;
	b1024x768 = false;//true
	b640x480 = false;
	showbar = false;
	eventcount = 0;
	//heaton max level client side
	m_iPlayerMaxLevel = 200;
	udpPort = -1;
	reqfree = false;
	g_lastUpdateTime = 0;
	g_animationSpeed = 10;

	tmptrade = -1;
	tmpquant = 1;
	trade_mode = DEF_NOTSELECTED;

	m_iMaxDMKills = 100;
	m_iDMDeaths = 0;
	m_iDMKills = 0;

	//HeatoN rebirth
	m_iRebirthLevel = 0;
	m_sRebirthStatus = 0;
	m_sRebirthEnabled = 0;
	showsetts = true;
	//Start HeatoN 2024
	m_sLang = LANG_ESP;
	isComboBoxOpen = false;
	selectedOptionIndex = -1;
	isClickProcessed = false;
	selectedType = 0;
	
	for (int i = 0; i < 20; i++)
	{
		m_stDialogBoxInfo[72].m_iEnchantingItem[i] = -1;
	}

	selectedoption = 0;
	tmpquest = -1;
	vec_questlist.clear();
	vec_charquest.clear();

	ZeroMemory(templog, sizeof(templog));

	ZeroMemory(costMessage, sizeof(costMessage));
	ZeroMemory(displayStr, sizeof(displayStr));

	shard_light = 0;
	shard_strong = 0;

	fragment_hp = 0;
	fragment_dr = 0;
	fragment_hprec = 0;
	fragment_sprec = 0;
	fragment_mprec = 0;
	fragment_mr = 0;
	fragment_pa = 0;
	fragment_ma = 0;
	fragment_exp = 0;


	//End HeatoN 2024

	m_iMaxRankExp = 0;
	m_sRankAddStr = 0;
	m_sRankAddVit = 0;
	m_sRankAddInt = 0;
	m_sRankAddDex = 0;
	m_sRankAddMag = 0;

	vObjects.clear();

	//rank system hbarg
	m_iRankExp = 0;
	m_sRankLevel = 0;
	m_iRankPoints = 0;

	m_bToggleScreen = FALSE;
	m_windowsKey = true;
	MarketOpen = FALSE; // EncriptBool(FALSE);
	ZeroMemory(OpenSellName, sizeof(OpenSellName));

	m_bAfk = FALSE;
	m_bShowFPS = FALSE;
	m_cDetailLevel = 2;
	m_cLoading = 0;
	m_bGrid = FALSE;
	m_bGridTrans = FALSE;
	AutoSSEK = FALSE;
	TotalActive = TRUE;
	m_sGrid = 0;
	m_bIsFirstConn = TRUE;
	m_iItemDropCnt = EncriptInt(0);
	m_bItemDrop = FALSE;
	m_bIsSpecial = FALSE;
	m_cGameMode = DEF_GAMEMODE_ONLOADING;
	m_cWhisperIndex = DEF_MAXWHISPERMSG;
	m_cGameModeCount = 0;
	ZeroMemory(m_cMapName, sizeof(m_cMapName));
	m_pGSock = NULL;
	m_pLSock = NULL;
	m_pMapData = NULL;
	m_cCommandCount = 0;
	m_dwCommandTime = 0; //v2.15 SpeedHack
	m_sPlayerX = NULL;//0
	m_sPlayerY = NULL;//0
	m_sViewDX = NULL;
	m_sViewDY = NULL;

	m_bCandyInsert = false;
	m_bCandyDelete = false;

	m_cCommand = DEF_OBJECTSTOP;
	m_bIsObserverMode = EncriptBool(FALSE);
	for (i = 0; i < DEF_MAXSPRITES; i++) m_pSprite[i] = NULL;
	for (i = 0; i < DEF_MAXTILES; i++) m_pTileSpr[i] = NULL;
	for (i = 0; i < DEF_MAXEFFECTSPR; i++) m_pEffectSpr[i] = NULL;
	m_pBGM = NULL;
	for (i = 0; i < DEF_MAXSOUNDEFFECTS; i++) {
		m_pCSound[i] = NULL;
		m_pESound[i] = NULL;

		m_pMSound[i] = NULL;
	}

	for (i = 0; i < DEF_MAXCHATMSGS; i++) m_pChatMsgList[i] = NULL;

	for (i = 0; i < DEF_MAXEFFECTS; i++) m_pEffectList[i] = NULL;

	for (i = 0; i < DEF_MAXITEMS; i++) m_pItemList[i] = NULL;

	for (i = 0; i < DEF_MAXBANKITEMS; i++) m_pBankList[i] = NULL;

	for (i = 0; i < DEF_MAXSELLITEMSLIST; i++) m_pItemSellList[i] = NULL;

	for (i = 0; i < 4; i++) m_pCharList[i] = NULL;

	for (i = 0; i < DEF_MAXDIALOGBOX; i++) m_cDialogBoxOrder[i] = NULL;

	for (i = 0; i < DEF_MAXMAGICTYPE; i++) m_pMagicCfgList[i] = NULL;

	for (i = 0; i < DEF_MAXSKILLTYPE; i++) m_pSkillCfgList[i] = NULL;

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++) {
		m_pMsgTextList[i] = NULL;
		m_pMsgTextList2[i] = NULL;
		m_pAgreeMsgTextList[i] = NULL;
	}

	for (i = 0; i < DEF_MAXBUILDITEMS; i++) m_pBuildItemList[i] = NULL;
	for (i = 0; i < DEF_MAXBUILDITEMS; i++) m_pDispBuildItemList[i] = NULL;
	// Crafting:
	for (i = 0; i < DEF_MAXBUILDITEMS; i++) m_pCraftItemList[i] = NULL;
	for (i = 0; i < DEF_MAXBUILDITEMS; i++) m_pDispCraftItemList[i] = NULL;

	for (i = 0; i < DEF_MAXGAMEMSGS; i++) m_pGameMsgList[i] = NULL;
	for (i = 0; i < DEF_MAXITEMNAMES; i++) m_pItemNameList[i] = NULL;

	m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
	m_stMCursor.dwSelectClickTime = NULL;

	ZeroMemory(m_cLogServerAddr, sizeof(m_cLogServerAddr));
	m_iGameServerMode = 2; // Snoopy: Default is INTERNET

	for (i = 0; i < DEF_MAXMENUITEMS; i++) m_pItemForSaleList[i] = NULL;




	m_bCtrlPressed = FALSE;
	m_bShiftPressed = FALSE;
	m_bEnterPressed = FALSE;
	m_bEscPressed = FALSE;
	m_bSoundFlag = FALSE;
	m_dwDialogCloseTime = 0;
	m_iTimeLeftSecAccount = EncriptInt(0);
	m_iTimeLeftSecIP = EncriptInt(0);
	m_bWhisper = TRUE;
	m_bShout = TRUE;
	//Barra activacion - ZeroEoyPnk
	m_bSpecialBarActivated = FALSE;

	BigBar = 0;
	Disconect = FALSE;

	RedSteeps = false;
	CandySize = false;
	StaggerDmg = false;
	bPlayerShines = true;
	Roofs = false;
	BarraNpc = false;
	LowSprites = false;
	m_bSetting = true;
	ShowShin = false;

	CVCEvent = FALSE;
	//WorldWar - LaloRamos
	WWEvent = FALSE;
	WorldEvent = FALSE;

	//WorldWarII - LaloRamos
	WWEventII = FALSE;
	WorldEventII = FALSE;

	Questx2 = FALSE;
	Questx3 = FALSE;

	DKEvent = FALSE;

	SummonEvent = FALSE;
	Assasain = FALSE;
	m_iActualRound = m_iTotalRound = -1;
	SummonTimer = FALSE;
	m_iRoundCount = -1;

	for (i = 0; i <= 90; i++) {
		ZeroMemory(TopList[i].Name, sizeof(TopList[i].Name));
		TopList[i].side = -1;
		ZeroMemory(TopList[i].City, sizeof(TopList[i].City));
		TopList[i].Points = -1;
	}

	for (i = 0; i <= 2; i++) {
		ExchangeLog[i].Me = FALSE;
		ExchangeLog[i].Added = FALSE;
		ZeroMemory(ExchangeLog[i].ItemName, sizeof(ExchangeLog[i].ItemName));
	}

	for (i = 0; i < 100; i++) {
		ZeroMemory(Process[i], sizeof(Process[i]));
		ZeroMemory(Dll[i], sizeof(Dll[i]));
	}

	m_sTiming = 0;
	m_bShowTiming = TRUE;
	m_bShowQuestData = TRUE;
}

CGame::~CGame()
{}

void CGame::Quit()
{
	int i;
	WriteSettings();
	GoHomepage(0);
	ChangeGameMode(DEF_GAMEMODE_NULL);

	for (i = 0; i < DEF_MAXSPRITES; i++)
		if (m_pSprite[i] != NULL) delete m_pSprite[i];
	for (i = 0; i < DEF_MAXTILES; i++)
		if (m_pTileSpr[i] != NULL) delete m_pTileSpr[i];
	for (i = 0; i < DEF_MAXEFFECTSPR; i++)
		if (m_pEffectSpr[i] != NULL) delete m_pEffectSpr[i];

	for (i = 0; i < DEF_MAXSOUNDEFFECTS; i++) {
		if (m_pCSound[i] != NULL) delete m_pCSound[i];
		if (m_pMSound[i] != NULL) delete m_pMSound[i];
		if (m_pESound[i] != NULL) delete m_pESound[i];
	}

	if (m_pBGM != NULL) delete m_pBGM;

	for (i = 0; i < 4; i++)
		if (m_pCharList[i] != NULL) delete m_pCharList[i];

	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pItemList[i] != NULL)	delete m_pItemList[i];

	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pBankList[i] != NULL)	delete m_pBankList[i];

	for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
		if (m_pItemSellList[i] != NULL)	delete m_pItemSellList[i];

	for (i = 0; i < DEF_MAXEFFECTS; i++)
		if (m_pEffectList[i] != NULL) delete m_pEffectList[i];

	for (i = 0; i < DEF_MAXCHATMSGS; i++)
		if (m_pChatMsgList[i] != NULL) delete m_pChatMsgList[i];

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
		if (m_pChatScrollList[i] != NULL) delete m_pChatScrollList[i];

	for (i = 0; i < DEF_MAXWHISPERMSG; i++)
		if (m_pWhisperMsg[i] != NULL) delete m_pWhisperMsg[i];

	for (i = 0; i < DEF_MAXMENUITEMS; i++)
		if (m_pItemForSaleList[i] != NULL) delete m_pItemForSaleList[i];

	for (i = 0; i < DEF_MAXMAGICTYPE; i++)
		if (m_pMagicCfgList[i] != NULL) delete m_pMagicCfgList[i];

	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		if (m_pSkillCfgList[i] != NULL) delete m_pSkillCfgList[i];

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++) {
		if (m_pMsgTextList[i] != NULL)  delete m_pMsgTextList[i];
		if (m_pMsgTextList2[i] != NULL) delete m_pMsgTextList2[i];
		if (m_pAgreeMsgTextList[i] != NULL) delete m_pAgreeMsgTextList[i];
	}

	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		if (m_pBuildItemList[i] != NULL) delete m_pBuildItemList[i];

	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		if (m_pDispBuildItemList[i] != NULL) delete m_pDispBuildItemList[i];

	// Crafting:
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		if (m_pCraftItemList[i] != NULL) delete m_pCraftItemList[i];
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		if (m_pDispCraftItemList[i] != NULL) delete m_pDispCraftItemList[i];

	for (i = 0; i < DEF_MAXGAMEMSGS; i++)
		if (m_pGameMsgList[i] != NULL) delete m_pGameMsgList[i];

	for (i = 0; i < DEF_MAXITEMNAMES; i++)
		if (m_pItemNameList[i] != NULL) delete m_pItemNameList[i];

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
		if (m_pEnemyKillList[i] != NULL) delete m_pEnemyKillList[i];

	delete m_pMapData;

	if (m_pGSock != NULL) delete m_pGSock;
	if (m_pLSock != NULL) delete m_pLSock;
	if (G_pCalcSocket != NULL) delete G_pCalcSocket;
	if (m_pCGameMonitor != NULL) delete m_pCGameMonitor;
}

void CGame::UpdateScreen()
{
	G_dwGlobalTime = timeGetTime();
	switch (m_cGameMode) {
	case DEF_GAMEMODE_ONAGREEMENT:
		break;

	case DEF_GAMEMODE_ONCREATENEWACCOUNT:
		UpdateScreen_OnCreateNewAccount();
		break;

	case DEF_GAMEMODE_ONVERSIONNOTMATCH:
		UpdateScreen_OnVersionNotMatch();
		break;

	case DEF_GAMEMODE_ONCONNECTING:
		UpdateScreen_OnConnecting();
		break;

	case DEF_GAMEMODE_ONMAINMENU:
		UpdateScreen_OnMainMenu();
		break;

	case DEF_GAMEMODE_ONLOADING:
		UpdateScreen_OnLoading(TRUE);
		break;

	case DEF_GAMEMODE_ONMAINGAME:
		//if (clientUDP) receiveMessage();
		UpdateScreen_OnGame();
		break;

	case DEF_GAMEMODE_ONWAITINGINITDATA:
		//		UpdateScreen_OnWaitInitData();
		break;

	case DEF_GAMEMODE_ONCONNECTIONLOST:
		UpdateScreen_OnConnectionLost();
		break;

	case DEF_GAMEMODE_ONMSG:
		UpdateScreen_OnMsg();
		break;

	case DEF_GAMEMODE_ONLOGIN:
		UpdateScreen_OnLogin();
		break;

	case DEF_GAMEMODE_ONSELECTSERVER:
		UpdateScreen_OnSelectServer();
		break;

	case DEF_GAMEMODE_ONQUIT:
		UpdateScreen_OnQuit();
		break;

	case DEF_GAMEMODE_ONQUERYFORCELOGIN:
		UpdateScreen_OnQueryForceLogin();
		break;

	case DEF_GAMEMODE_ONSELECTCHARACTER:
		UpdateScreen_OnSelectCharacter();
		break;

	case DEF_GAMEMODE_ONCREATENEWCHARACTER:
		UpdateScreen_OnCreateNewCharacter();
		break;

	case DEF_GAMEMODE_ONWAITINGRESPONSE:
		UpdateScreen_OnWaitingResponse();
		break;

	case DEF_GAMEMODE_ONQUERYDELETECHARACTER:
		UpdateScreen_OnQueryDeleteCharacter();
		break;

	case DEF_GAMEMODE_ONLOGRESMSG:
		UpdateScreen_OnLogResMsg();
		break;

	case DEF_GAMEMODE_ONCHANGEPASSWORD:
		UpdateScreen_OnChangePassword();
		break;
	}

#ifdef DEF_USING_WIN_IME

	if (GetAsyncKeyState(VK_RETURN) != NULL) m_cEnterCheck = 1;
	if ((m_cEnterCheck == 1) && (GetAsyncKeyState(VK_RETURN) == NULL)) {
		m_bEnterPressed = TRUE;
		m_cEnterCheck = NULL;
	}
	if (GetAsyncKeyState(VK_TAB) != NULL) m_cTabCheck = 1;
	if ((m_cTabCheck == 1) && (GetAsyncKeyState(VK_TAB) == NULL)) {
		m_cCurFocus++;
		if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
		if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME) bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
		m_cTabCheck = NULL;
	}
	if (m_bInputStatus) {
		if (GetAsyncKeyState(VK_LEFT) != NULL) m_cLeftArrowCheck = 1;
		if ((m_cLeftArrowCheck == 1) && (GetAsyncKeyState(VK_LEFT) == NULL)) {
			m_cLeftArrowCheck = NULL;
			if (G_hEditWnd != NULL) {
				int iStrLen = strlen(m_pInputBuffer);
				SendMessage(G_hEditWnd, EM_SETSEL, iStrLen, iStrLen);
			}
		}
	}
#endif
}
/*
OLD HB ARG MOVEMENT
void CGame::CalcViewPoint()
{
short dX, dY;
dX = m_sViewPointX - m_sViewDstX;
dY = m_sViewPointY - m_sViewDstY;
if (abs(dX) < abs(m_sViewDX)) {
m_sViewPointX = m_sViewDstX;
m_sViewDX = 0;
}
else {
if (dX > 0) m_sViewDX--;
if (dX < 0) m_sViewDX++;
if (dX == 0) m_sViewDX = 0;
if (abs(dX) < 40) {
if (m_sViewDX > 4)  m_sViewDX = 4;
else if (m_sViewDX < -4) m_sViewDX = -4;
}
m_sViewPointX += m_sViewDX;
}

if (abs(dY) < abs(m_sViewDY)) {
m_sViewPointY = m_sViewDstY;
m_sViewDY = 0;
}
else {
if (dY > 0) m_sViewDY--;
if (dY < 0) m_sViewDY++;
if (dY == 0) m_sViewDY = 0;
if (abs(dY) < 40) {
if (m_sViewDY > 4)  m_sViewDY = 4;
else if (m_sViewDY < -4) m_sViewDY = -4;
}
m_sViewPointY += m_sViewDY;
}
}*/



void CGame::CalcViewPoint()
{
	if (m_bOldCamera)
	{
		short dX, dY;
		dX = m_sViewPointX - m_sViewDstX;
		dY = m_sViewPointY - m_sViewDstY;
		if (abs(dX) < abs(m_sViewDX))
		{
			m_sViewPointX = m_sViewDstX;
			m_sViewDX = 0;
		}
		else
		{
			if (dX > 0) m_sViewDX--;
			if (dX < 0) m_sViewDX++;
			if (dX == 0) m_sViewDX = 0;
			if (abs(dX) < 40) {
				if (m_sViewDX > 2)  m_sViewDX = 2;
				else if (m_sViewDX < -2) m_sViewDX = -2;
			}
			m_sViewPointX += m_sViewDX;
		}

		if (abs(dY) < abs(m_sViewDY))
		{
			m_sViewPointY = m_sViewDstY;
			m_sViewDY = 0;
		}
		else
		{
			if (dY > 0) m_sViewDY--;
			if (dY < 0) m_sViewDY++;
			if (dY == 0) m_sViewDY = 0;
			if (abs(dY) < 40) {
				if (m_sViewDY > 2)  m_sViewDY = 2;
				else if (m_sViewDY < -2) m_sViewDY = -2;
			}
			m_sViewPointY += m_sViewDY;
		}
	}
	else
	{
		short dX = m_sViewPointX - m_sViewDstX;
		short dY = m_sViewPointY - m_sViewDstY;

		// Optimización en X
		if (abs(dX) < abs(m_sViewDX)) { // abs utilizado para asegurar correcto comportamiento
			m_sViewPointX = m_sViewDstX;
			m_sViewDX = 0;
		}
		else {
			if (dX > 0) m_sViewDX--;
			else if (dX < 0) m_sViewDX++;
			else m_sViewDX = 0;

			if ((unsigned)abs(dX) < 40) { // Absuelto con unsigned para optimización
				if (m_sViewDX > 2) m_sViewDX = 2;
				else if (m_sViewDX < -2) m_sViewDX = -2;
			}

			m_sViewPointX += m_sViewDX;
		}

		// Optimización en Y
		if (abs(dY) < abs(m_sViewDY)) { // abs utilizado para asegurar correcto comportamiento
			m_sViewPointY = m_sViewDstY;
			m_sViewDY = 0;
		}
		else {
			if (dY > 0) m_sViewDY--;
			else if (dY < 0) m_sViewDY++;
			else m_sViewDY = 0;

			if ((unsigned)abs(dY) < 40) { // Absuelto con unsigned para optimización
				if (m_sViewDY > 2) m_sViewDY = 2;
				else if (m_sViewDY < -2) m_sViewDY = -2;
			}

			m_sViewPointY += m_sViewDY;
		}
	}
}

/*

void CGame::CalcViewPoint()
{
	short dX = m_sViewPointX - m_sViewDstX;
	short dY = m_sViewPointY - m_sViewDstY;

	// Optimización en X
	if (abs(dX) < abs(m_sViewDX)) { // abs utilizado para asegurar correcto comportamiento
		m_sViewPointX = m_sViewDstX;
		m_sViewDX = 0;
	}
	else {
		if (dX > 0) m_sViewDX--;
		else if (dX < 0) m_sViewDX++;
		else m_sViewDX = 0;

		if ((unsigned)abs(dX) < 40) { // Absuelto con unsigned para optimización
			if (m_sViewDX > 2) m_sViewDX = 2;
			else if (m_sViewDX < -2) m_sViewDX = -2;
		}

		m_sViewPointX += m_sViewDX;
	}

	// Optimización en Y
	if (abs(dY) < abs(m_sViewDY)) { // abs utilizado para asegurar correcto comportamiento
		m_sViewPointY = m_sViewDstY;
		m_sViewDY = 0;
	}
	else {
		if (dY > 0) m_sViewDY--;
		else if (dY < 0) m_sViewDY++;
		else m_sViewDY = 0;

		if ((unsigned)abs(dY) < 40) { // Absuelto con unsigned para optimización
			if (m_sViewDY > 2) m_sViewDY = 2;
			else if (m_sViewDY < -2) m_sViewDY = -2;
		}

		m_sViewPointY += m_sViewDY;
	}
}
*/

/*

void CGame::CalcViewPoint()
{
	short dX = m_sViewPointX - m_sViewDstX;
	short dY = m_sViewPointY - m_sViewDstY;

	// Optimización en X
	if (abs(dX) < abs(m_sViewDX)) {
		m_sViewPointX = m_sViewDstX;
		m_sViewDX = 0;
	}
	else {
		if (dX > 0) m_sViewDX -= (abs(dX) > 40) ? 2 : 1;
		else if (dX < 0) m_sViewDX += (abs(dX) > 40) ? 2 : 1;

		// Limitar velocidad máxima a ±2
		if (m_sViewDX > 2) m_sViewDX = 2;
		else if (m_sViewDX < -2) m_sViewDX = -2;

		m_sViewPointX += m_sViewDX;
	}

	// Optimización en Y
	if (abs(dY) < abs(m_sViewDY)) {
		m_sViewPointY = m_sViewDstY;
		m_sViewDY = 0;
	}
	else {
		if (dY > 0) m_sViewDY -= (abs(dY) > 40) ? 2 : 1;
		else if (dY < 0) m_sViewDY += (abs(dY) > 40) ? 2 : 1;

		// Limitar velocidad máxima a ±2
		if (m_sViewDY > 2) m_sViewDY = 2;
		else if (m_sViewDY < -2) m_sViewDY = -2;

		m_sViewPointY += m_sViewDY;
	}
}
*/
/*

void CGame::CalcViewPoint()
{
	short dX = m_sViewPointX - m_sViewDstX;
	short dY = m_sViewPointY - m_sViewDstY;

	// Optimización en X
	if (abs(dX) <= 2) {
		m_sViewPointX = m_sViewDstX;
		m_sViewDX = 0;
	}
	else {
		m_sViewDX = (dX > 0) ? -2 : 2; // Ajuste directo según la dirección
		m_sViewPointX += m_sViewDX;
	}

	// Optimización en Y
	if (abs(dY) <= 2) {
		m_sViewPointY = m_sViewDstY;
		m_sViewDY = 0;
	}
	else {
		m_sViewDY = (dY > 0) ? -2 : 2; // Ajuste directo según la dirección
		m_sViewPointY += m_sViewDY;
	}
}
*//*
void CGame::CalcViewPoint()
{
	short dX = m_sViewPointX - m_sViewDstX;
	short dY = m_sViewPointY - m_sViewDstY;

	// Optimización en X
	if (abs(dX) <= 2) {
		m_sViewPointX = m_sViewDstX;
		m_sViewDX = 0;
	}
	else {
		m_sViewDX = (dX > 0) ? -2 : 2; // Desplazamiento máximo hacia el objetivo
		m_sViewPointX += m_sViewDX;
	}

	// Optimización en Y
	if (abs(dY) <= 2) {
		m_sViewPointY = m_sViewDstY;
		m_sViewDY = 0;
	}
	else {
		m_sViewDY = (dY > 0) ? -2 : 2; // Desplazamiento máximo hacia el objetivo
		m_sViewPointY += m_sViewDY;
	}
}
*/

/*

void CGame::CalcViewPoint()
{
	// Diferencia entre la posición actual y la de destino
	short dX = m_sViewPointX - m_sViewDstX;
	short dY = m_sViewPointY - m_sViewDstY;

	// Ajuste en X
	if (abs(dX) <= 2) {
		m_sViewPointX = m_sViewDstX; // Si la distancia es pequeña, ajusta directamente
	}
	else {
		m_sViewPointX += (dX > 0) ? -2 : 2; // Movimiento máximo hacia el objetivo
	}

	// Ajuste en Y
	if (abs(dY) <= 2) {
		m_sViewPointY = m_sViewDstY; // Si la distancia es pequeña, ajusta directamente
	}
	else {
		m_sViewPointY += (dY > 0) ? -2 : 2; // Movimiento máximo hacia el objetivo
	}
}
*/

void CGame::OnGameSocketEvent(WPARAM wParam, LPARAM lParam)
{
	int iRet;
	char * pData;
	DWORD  dwMsgSize;

	if (m_pGSock == NULL) return;

	iRet = m_pGSock->iOnSocketEvent(wParam, lParam);
	switch (iRet) {
	case DEF_XSOCKEVENT_CONNECTIONESTABLISH:
		ConnectionEstablishHandler(DEF_SERVERTYPE_GAME);
		break;

	case DEF_XSOCKEVENT_READCOMPLETE:
		pData = m_pGSock->pGetRcvDataPointer(&dwMsgSize);
		GameRecvMsgHandler(dwMsgSize, pData);
		m_dwTime = G_dwGlobalTime;
		break;

	case DEF_XSOCKEVENT_SOCKETCLOSED:
		ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);
		delete m_pGSock;
		m_pGSock = NULL;
		break;

	case DEF_XSOCKEVENT_SOCKETERROR:
		ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);
		delete m_pGSock;
		m_pGSock = NULL;
		break;

	case DEF_XSOCKEVENT_CRITICALERROR:
		delete m_pGSock;
		m_pGSock = NULL;
		if (G_pCalcSocket != NULL) {
			delete G_pCalcSocket;
			G_pCalcSocket = NULL;
		}
		break;
	}
}

void CGame::RestoreSprites()
{
	for (int i = 0; i < DEF_MAXSPRITES; i++)
		if (m_pSprite[i] != NULL) m_pSprite[i]->iRestore();
}

char _tmp_cTmpDirX[9] = { 0, 0, 1, 1, 1, 0, -1, -1, -1 };
char _tmp_cTmpDirY[9] = { 0, -1, -1, 0, 1, 1, 1, 0, -1 };
char CGame::cGetNextMoveDir(short sX, short sY, short dstX, short dstY, BOOL bMoveCheck, BOOL bMIM)
{
	char  cDir, cTmpDir;
	int   aX, aY, dX, dY;
	int   i;
	if ((sX == dstX) && (sY == dstY)) return 0;
	dX = sX;
	dY = sY;

	cDir = m_Misc.cGetNextMoveDir(dX, dY, dstX, dstY);

	if (m_cPlayerTurn == 0) {
		for (i = cDir; i <= cDir + 2; i++) {
			cTmpDir = i;
			if (cTmpDir > 8) cTmpDir -= 8;
			aX = _tmp_cTmpDirX[cTmpDir];
			aY = _tmp_cTmpDirY[cTmpDir];
			if (((dX + aX) == m_iPrevMoveX) && ((dY + aY) == m_iPrevMoveY) && (m_bIsPrevMoveBlocked == TRUE) && (bMoveCheck == TRUE)) {
				m_bIsPrevMoveBlocked = FALSE;
			}
			else if (m_pMapData->bGetIsLocateable(dX + aX, dY + aY) == TRUE) {
				if (m_pMapData->bIsTeleportLoc(dX + aX, dY + aY) == TRUE) {
					if (_bCheckMoveable(dX + aX, dY + aY) == TRUE) return cTmpDir;
					else SetTopMsg(DEF_MSG_GETNEXTMOVEDIR, 5);
				}
				else return cTmpDir;
			}
		}
	}

	if (m_cPlayerTurn == 1) {
		for (i = cDir; i >= cDir - 2; i--) {
			cTmpDir = i;
			if (cTmpDir < 1) cTmpDir += 8;
			aX = _tmp_cTmpDirX[cTmpDir];
			aY = _tmp_cTmpDirY[cTmpDir];
			if (((dX + aX) == m_iPrevMoveX) && ((dY + aY) == m_iPrevMoveY) && (m_bIsPrevMoveBlocked == TRUE) && (bMoveCheck == TRUE)) {
				m_bIsPrevMoveBlocked = FALSE;
			}
			else if (m_pMapData->bGetIsLocateable(dX + aX, dY + aY) == TRUE) {
				if (m_pMapData->bIsTeleportLoc(dX + aX, dY + aY) == TRUE) {
					if (_bCheckMoveable(dX + aX, dY + aY) == TRUE) return cTmpDir;
					else SetTopMsg(DEF_MSG_GETNEXTMOVEDIR, 5);
				}
				else return cTmpDir;
			}
		}
	}
	return 0;
}

BOOL CGame::_bCheckMoveable(short sx, short sy)
{
	return TRUE;
}

void CGame::DrawObjects(short sPivotX, short sPivotY, short sDivX, short sDivY, short sModX, short sModY, short msX, short msY)
{
	int ix, iy, indexX, indexY, dX, dY, iDvalue;
	char cItemColor;
	BOOL bIsPlayerDrawed = FALSE;
	BOOL bContact = FALSE;
	BOOL bRet = FALSE;
	short sItemSprite, sItemSpriteFrame, sObjSpr, sObjSprFrame, sDynamicObject, sDynamicObjectFrame;
	static DWORD dwMCAnimTime = G_dwGlobalTime;
	static short sMCAnimFrame = 1;
	// Xmas
	static int ix1[100];
	static int iy2[100];
	static int iXmasTreeBulbDelay = 76;
	int idelay = 75;

	bool frame_omit = false;

	int res_x = 0;
	int res_y = 0;
	int res_msy = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 800;
		res_y = 547;
		res_msy = 551;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1024;
		res_y = 715;
		res_msy = 719;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 600;
		res_y = 427;
		res_msy = 431;
	}

	if (sDivY < 0 || sDivX < 0) return;
	m_sMCX = NULL;
	m_sMCY = NULL;
	ZeroMemory(m_cMCName, sizeof(m_cMCName));

	//dwTime = G_dwGlobalTime;
	DWORD dwTime = m_dwCurTime;
	m_stMCursor.sCursorFrame = 0;

	indexY = sDivY + sPivotY - 7;
	for (iy = -sModY - 224; iy <= res_y + 352; iy += 32)
	{
		indexX = sDivX + sPivotX - 4;
		for (ix = -sModX - 128; ix <= res_x + 128; ix += 32)
		{
			sDynamicObject = NULL;
			bRet = FALSE;
			if ((ix >= -sModX) && (ix <= res_x + 16) && (iy >= -sModY) && (iy <= res_y + 32 + 16))
			{
				_tmp_wObjectID = _tmp_sOwnerType = _tmp_sAppr1 = _tmp_sAppr2 = _tmp_sAppr3 = _tmp_sAppr4 = _tmp_iStatus = NULL;
				_tmp_cDir = _tmp_cFrame = 0;
				_tmp_iEffectType = _tmp_iEffectFrame = _tmp_iChatIndex = 0;
				ZeroMemory(_tmp_cName, sizeof(_tmp_cName));
				if ((indexX < m_pMapData->m_sPivotX) || (indexX > m_pMapData->m_sPivotX + MAPDATASIZEX) ||
					(indexY < m_pMapData->m_sPivotY) || (indexY > m_pMapData->m_sPivotY + MAPDATASIZEY))
				{
					sItemSprite = NULL;
					sItemSpriteFrame = NULL;
					bRet = FALSE;
					cItemColor = NULL;
				}
				else {
					_tmp_dX = dX = indexX - m_pMapData->m_sPivotX;
					_tmp_dY = dY = indexY - m_pMapData->m_sPivotY;
					_tmp_wObjectID = m_pMapData->m_pData[dX][dY].m_wDeadObjectID;
					_tmp_sOwnerType = m_pMapData->m_pData[dX][dY].m_sDeadOwnerType;
					_tmp_cDir = m_pMapData->m_pData[dX][dY].m_cDeadDir;
					_tmp_sAppr1 = m_pMapData->m_pData[dX][dY].m_sDeadAppr1;
					_tmp_sAppr2 = m_pMapData->m_pData[dX][dY].m_sDeadAppr2;
					_tmp_sAppr3 = m_pMapData->m_pData[dX][dY].m_sDeadAppr3;
					_tmp_sAppr4 = m_pMapData->m_pData[dX][dY].m_sDeadAppr4;
					_tmp_iApprColor = m_pMapData->m_pData[dX][dY].m_iDeadApprColor;
					_tmp_iApprColor2 = m_pMapData->m_pData[dX][dY].m_iDeadApprColor2;
					_tmp_cFrame = m_pMapData->m_pData[dX][dY].m_cDeadOwnerFrame;
					_tmp_iChatIndex = m_pMapData->m_pData[dX][dY].m_iDeadChatMsg;
					_tmp_iStatus = m_pMapData->m_pData[dX][dY].m_iDeadStatus;
					strcpy(_tmp_cName, m_pMapData->m_pData[dX][dY].m_cDeadOwnerName);
					sItemSprite = m_pMapData->m_pData[dX][dY].m_sItemSprite;
					sItemSpriteFrame = m_pMapData->m_pData[dX][dY].m_sItemSpriteFrame;
					cItemColor = m_pMapData->m_pData[dX][dY].m_cItemColor;
					sDynamicObject = m_pMapData->m_pData[dX][dY].m_sDynamicObjectType;
					sDynamicObjectFrame = (short)m_pMapData->m_pData[dX][dY].m_cDynamicObjectFrame;
					cDynamicObjectData1 = m_pMapData->m_pData[dX][dY].m_cDynamicObjectData1;
					cDynamicObjectData2 = m_pMapData->m_pData[dX][dY].m_cDynamicObjectData2;
					cDynamicObjectData3 = m_pMapData->m_pData[dX][dY].m_cDynamicObjectData3;
					cDynamicObjectData4 = m_pMapData->m_pData[dX][dY].m_cDynamicObjectData4;
					_tmp_bSpriteOmit = m_pMapData->m_pData[dX][dY].m_bSpriteOmit;
					bRet = TRUE;
				}

				if ((bRet == TRUE) && (sItemSprite != 0)) {
					if (cItemColor == 0)
						m_pSprite[ItemGround + sItemSprite]->PutSpriteFast(ix, iy, sItemSpriteFrame, dwTime);
					else {
						switch (sItemSprite) {
						case 1: // Swds
						case 2: // Bows
						case 3: // Shields
						case 15: // Axes hammers
							m_pSprite[ItemGround + sItemSprite]->PutSpriteRGB(ix, iy
								, sItemSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
							break;
						default:
							m_pSprite[ItemGround + sItemSprite]->PutSpriteRGB(ix, iy
								, sItemSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
							break;
						}
					}

					if ((ix - 13 < msX) && (ix + 13 > msX) && (iy - 13 < msY) && (iy + 13 > msY)) {
						if ((dwTime - dwMCAnimTime) > 200) {
							dwMCAnimTime = dwTime;
							if (sMCAnimFrame == 1)
								sMCAnimFrame = 2;
							else sMCAnimFrame = 1;
						}
						m_stMCursor.sCursorFrame = sMCAnimFrame;
					}
				}

				if ((bRet == TRUE) && (_tmp_wObjectID != NULL)) {
					bContact = DrawObject_OnDead(indexX, indexY, ix, iy, FALSE, dwTime, msX, msY, _tmp_wObjectID);
				}

				if ((bContact == TRUE) && (msY <= res_msy)) {
					m_sMCX = indexX;
					m_sMCY = indexY;
					sFocusX = ix;
					sFocusY = iy;
					sFocusOwnerType = _tmp_sOwnerType;
					cFocusAction = DEF_OBJECTDEAD;
					wFocusObjectID = _tmp_wObjectID;
					cFocusFrame = _tmp_cFrame;
					cFocusDir = _tmp_cDir;
					sFocusAppr1 = _tmp_sAppr1;
					sFocusAppr2 = _tmp_sAppr2;
					sFocusAppr3 = _tmp_sAppr3;
					sFocusAppr4 = _tmp_sAppr4;
					iFocusApprColor = _tmp_iApprColor;
					iFocusApprColor2 = _tmp_iApprColor2;
					iFocuiStatus = _tmp_iStatus;
					ZeroMemory(cFocusName, sizeof(cFocusName));
					strcpy(cFocusName, _tmp_cName);
					ZeroMemory(m_cMCName, sizeof(m_cMCName));
					strcpy(m_cMCName, _tmp_cName);
					EncriptString(m_cMCName);

					sFocus_dX = _tmp_dX;
					sFocus_dY = _tmp_dY;
					bContact = FALSE;
					_tmp_bSpriteOmit = m_pMapData->m_pData[dX][dY].m_bSpriteOmit;
				}

				_tmp_wObjectID = _tmp_sOwnerType = _tmp_sAppr1 = _tmp_sAppr2 = _tmp_sAppr3 = _tmp_sAppr4 = _tmp_iStatus = NULL;
				_tmp_cFrame = _tmp_cDir = _tmp_AdminLevel = 0;
				_tmp_iEffectType = _tmp_iEffectFrame = _tmp_iApprColor = _tmp_iApprColor2 = _tmp_iChatIndex = 0;
				ZeroMemory(_tmp_cName, sizeof(_tmp_cName));

				if ((indexX < m_pMapData->m_sPivotX) || (indexX > m_pMapData->m_sPivotX + MAPDATASIZEX) ||
					(indexY < m_pMapData->m_sPivotY) || (indexY > m_pMapData->m_sPivotY + MAPDATASIZEY)) {
					sItemSprite = NULL;
					bRet = FALSE;
				}
				else {
					_tmp_dX = dX = indexX - m_pMapData->m_sPivotX; // v2.171 2002-6-14
					_tmp_dY = dY = indexY - m_pMapData->m_sPivotY; // v2.171 2002-6-14
					_tmp_wObjectID = m_pMapData->m_pData[dX][dY].m_wObjectID;
					_tmp_sOwnerType = m_pMapData->m_pData[dX][dY].m_sOwnerType;
					_tmp_cAction = m_pMapData->m_pData[dX][dY].m_cOwnerAction;
					_tmp_iStatus = m_pMapData->m_pData[dX][dY].m_iStatus;
					_tmp_AdminLevel = m_pMapData->m_pData[dX][dY].m_cAdminLevel;
					_tmp_cDir = m_pMapData->m_pData[dX][dY].m_cDir;
					_tmp_sAppr1 = m_pMapData->m_pData[dX][dY].m_sAppr1;
					_tmp_sAppr2 = m_pMapData->m_pData[dX][dY].m_sAppr2;
					_tmp_sAppr3 = m_pMapData->m_pData[dX][dY].m_sAppr3;
					_tmp_sAppr4 = m_pMapData->m_pData[dX][dY].m_sAppr4;
					_tmp_iApprColor = m_pMapData->m_pData[dX][dY].m_iApprColor; // v1.4
					_tmp_iApprColor2 = m_pMapData->m_pData[dX][dY].m_iApprColor2; // v1.4
					_tmp_cFrame = m_pMapData->m_pData[dX][dY].m_cOwnerFrame;
					_tmp_iChatIndex = m_pMapData->m_pData[dX][dY].m_iChatMsg;
					_tmp_iEffectType = m_pMapData->m_pData[dX][dY].m_iEffectType;
					_tmp_iEffectFrame = m_pMapData->m_pData[dX][dY].m_iEffectFrame;

					strcpy(_tmp_cName, m_pMapData->m_pData[dX][dY].m_cOwnerName);

					_tmp_bSpriteOmit = m_pMapData->m_pData[dX][dY].m_bSpriteOmit;
					bRet = TRUE;

					if (DecriptInt(m_iIlusionOwnerH) != 0) {
						if ((strcmp(_tmp_cName, m_cPlayerName) != 0) && (_tmp_sOwnerType < 10)) {
							_tmp_sOwnerType = m_cIlusionOwnerType;
							_tmp_iStatus = _tmp_iStatus & 0xf00000f0 | m_iStatus_IE & 0x0fffff0f;
							_tmp_sAppr1 = m_sAppr1_IE;
							_tmp_sAppr2 = m_sAppr2_IE;
							_tmp_sAppr3 = m_sAppr3_IE;
							_tmp_sAppr4 = m_sAppr4_IE;
							_tmp_iApprColor = m_iApprColor_IE;
							_tmp_iApprColor2 = m_iApprColor_IE2;
						}
					}
				}

				if ((bRet == TRUE) && (strlen(_tmp_cName) > 0)) {
					_tmp_dx = 0;
					_tmp_dy = 0;
					switch (_tmp_cAction) {
					case DEF_OBJECTSTOP:
					case DEF_OBJECTMOVE:
					case DEF_OBJECTRUN:
					case DEF_OBJECTDAMAGEMOVE:
					case DEF_OBJECTATTACK:
					case DEF_OBJECTATTACKMOVE:
					case DEF_OBJECTMAGIC:
					case DEF_OBJECTDAMAGE:
					case DEF_OBJECTGETITEM:
					case DEF_OBJECTDYING:
						bContact = DrawObject(indexX, indexY, ix, iy, FALSE, dwTime, msX, msY, _tmp_wObjectID, _tmp_cAction, _tmp_bSpriteOmit);
						break;
						
					}

					if ((bContact == TRUE) && (msY <= res_msy)) {
						m_sMCX = indexX;
						m_sMCY = indexY;
						sFocusX = ix;
						sFocusY = iy;
						wFocusObjectID = _tmp_wObjectID;
						sFocusOwnerType = _tmp_sOwnerType;
						cFocusAction = _tmp_cAction;
						cFocusFrame = _tmp_cFrame;
						cFocusDir = _tmp_cDir;
						sFocusAppr1 = _tmp_sAppr1;
						sFocusAppr2 = _tmp_sAppr2;
						sFocusAppr3 = _tmp_sAppr3;
						sFocusAppr4 = _tmp_sAppr4;
						iFocusApprColor = _tmp_iApprColor; // v1.4
						iFocusApprColor2 = _tmp_iApprColor2; // v1.4
						iFocuiStatus = _tmp_iStatus;
						fFocusAdminLevel = _tmp_AdminLevel;
						ZeroMemory(cFocusName, sizeof(cFocusName));
						strcpy(cFocusName, _tmp_cName);
						ZeroMemory(m_cMCName, sizeof(m_cMCName));
						strcpy(m_cMCName, _tmp_cName);
						EncriptString(m_cMCName);

						sFocus_dX = _tmp_dX; // v2.171
						sFocus_dY = _tmp_dY; // v2.171
						bContact = FALSE;
						frame_omit = m_pMapData->m_pData[dX][dY].m_bSpriteOmit;;
					}

					if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) {
						if (DecriptBool(m_bIsObserverMode) == FALSE) {
							if (c_reso->IsResolution() == C800x600)
							{
								m_sViewDstX = (indexX * 32) - 288 - 32 - 32 - 32 - 16;//400
								m_sViewDstY = (indexY * 32) - 224 - 32 - 32 - 16;//304
							}
							else if (c_reso->IsResolution() == C640x480)
							{
								m_sViewDstX = (indexX * 32) - 288 - 32;//320
								m_sViewDstY = (indexY * 32) - 224;//224
							}
							else if (c_reso->IsResolution() == C1024x768)
							{
								m_sViewDstX = (indexX * 32) - 288 - 224;//512
								m_sViewDstY = (indexY * 32) - 224 - 192;//416
							}
						}

						SetRect(&m_rcPlayerRect, m_rcBodyRect.left, m_rcBodyRect.top, m_rcBodyRect.right, m_rcBodyRect.bottom);
						bIsPlayerDrawed = TRUE;
					}
				}
			}

			sObjSpr = m_pMapData->m_tile[indexX][indexY].m_sObjectSprite;
			sObjSprFrame = m_pMapData->m_tile[indexX][indexY].m_sObjectSpriteFrame;

			if (sObjSpr != 0 && sObjSpr != 224) {
				if ((sObjSpr < 100) || (sObjSpr >= 200)) {
					switch (sObjSpr) {
					case 200:
					case 223:
						m_pTileSpr[sObjSpr]->PutShadowSprite(ix - 16, iy - 16, sObjSprFrame, dwTime);
						break;

					case 224:
						switch (sObjSprFrame) {
						case 20:
						case 21:
						case 24:
						case 34:
						case 35:
						case 36:
						case 37:
						case 38:
							break;
						default:
							m_pTileSpr[sObjSpr]->PutShadowSprite(ix - 16, iy - 16, sObjSprFrame, dwTime);
							break;
						}
					}
					if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && Trees)) { // Special Grass & Flowers
						if ((sObjSpr != 6) && (sObjSpr != 9))
							m_pTileSpr[sObjSpr]->PutSpriteFast(ix - 16, iy - 16, sObjSprFrame, dwTime);
					}
					else m_pTileSpr[sObjSpr]->PutSpriteFast(ix - 16, iy - 16, sObjSprFrame, dwTime);

					switch (sObjSpr) {
					case 223:
						if (sObjSprFrame == 4) {
							if (G_cSpriteAlphaDegree == 2) {
								int iDvalue1 = -1 * (rand() % 5);
								int iDvalue2 = -1 * (rand() % 5);
								int iDvalue3 = -1 * (rand() % 5);
								m_pEffectSpr[0]->PutTransSpriteRGB(ix + 2 - 17, iy - 147 - 15, 1, iDvalue1, iDvalue1, iDvalue1, dwTime);
								m_pEffectSpr[0]->PutTransSpriteRGB(ix + 16 - 17, iy - 96 - 15, 1, iDvalue2, iDvalue2, iDvalue2, dwTime);
								m_pEffectSpr[0]->PutTransSpriteRGB(ix - 19 - 17, iy - 126 - 15, 1, iDvalue3, iDvalue3, iDvalue3, dwTime);
							}
						}
						break;

					case 370: // nuit
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 9) && (G_cSpriteAlphaDegree == 2)) bAddNewEffect(65, m_sViewPointX + ix - 16 + 30, m_sViewPointY + iy - 16 - 334, NULL, NULL, NULL, 0);
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 11) && (G_cSpriteAlphaDegree == 2)) bAddNewEffect(65, m_sViewPointX + ix - 16 + 17, m_sViewPointY + iy - 16 - 300, NULL, NULL, NULL, 0);
						break;

					case 374: // nuit
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 2) && (G_cSpriteAlphaDegree == 2)) bAddNewEffect(65, m_sViewPointX + ix - 7, m_sViewPointY + iy - 122, NULL, NULL, NULL, 0);
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 6) && (G_cSpriteAlphaDegree == 2)) bAddNewEffect(65, m_sViewPointX + ix - 14, m_sViewPointY + iy - 321, NULL, NULL, NULL, 0);
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 7) && (G_cSpriteAlphaDegree == 2)) bAddNewEffect(65, m_sViewPointX + ix + 7, m_sViewPointY + iy - 356, NULL, NULL, NULL, 0);
						break;

					case 376: // nuit
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 12) && (G_cSpriteAlphaDegree == 2)) {
							bAddNewEffect(65, m_sViewPointX + ix - 16, m_sViewPointY + iy - 346, NULL, NULL, NULL, 0);
							bAddNewEffect(65, m_sViewPointX + ix + 11, m_sViewPointY + iy - 308, NULL, NULL, NULL, 0);
						}
						break;

					case 378: // nuit
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 11) && (G_cSpriteAlphaDegree == 2)) bAddNewEffect(65, m_sViewPointX + ix, m_sViewPointY + iy - 91, NULL, NULL, NULL, 0);
						break;

					case 382: // nuit
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 9) && (G_cSpriteAlphaDegree == 2)) {
							bAddNewEffect(65, m_sViewPointX + ix + 73, m_sViewPointY + iy - 264, NULL, NULL, NULL, 0);
							bAddNewEffect(65, m_sViewPointX + ix + 23, m_sViewPointY + iy - 228, NULL, NULL, NULL, 0);
						}
						break;

					case 429:
						if (((dwTime - m_dwEnvEffectTime) > 400) && (sObjSprFrame == 2)) bAddNewEffect(65, m_sViewPointX + ix - 15, m_sViewPointY + iy - 224, NULL, NULL, NULL, 0);
						break;
					}
				}
				else { // sprites 100..199: Trees and tree shadows
					m_pTileSpr[sObjSpr]->_GetSpriteRect(ix - 16, iy - 16, sObjSprFrame);
					if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && Trees)) {
						if (sObjSpr < 100 + 11) m_pTileSpr[100 + 4]->PutSpriteFast(ix - 16, iy - 16, sObjSprFrame, dwTime);
						else if (sObjSpr < 100 + 23) m_pTileSpr[100 + 9]->PutSpriteFast(ix - 16, iy - 16, sObjSprFrame, dwTime);
						else if (sObjSpr < 100 + 32) m_pTileSpr[100 + 23]->PutSpriteFast(ix - 16, iy - 16, sObjSprFrame, dwTime);
						else m_pTileSpr[100 + 32]->PutSpriteFast(ix - 16, iy - 16, sObjSprFrame, dwTime);
					}
					else {
						if (m_pTileSpr[sObjSpr] != NULL) {
							if ((bIsPlayerDrawed == TRUE) && (m_pTileSpr[sObjSpr]->m_rcBound.top <= m_rcPlayerRect.top) && (m_pTileSpr[sObjSpr]->m_rcBound.bottom >= m_rcPlayerRect.bottom) &&
								(m_cDetailLevel >= 2) && (m_pTileSpr[sObjSpr]->m_rcBound.left <= m_rcPlayerRect.left)
								&& (m_pTileSpr[sObjSpr]->m_rcBound.right >= m_rcPlayerRect.right)) {
								m_pTileSpr[sObjSpr + 50]->PutFadeSprite(ix, iy, sObjSprFrame, dwTime);
								m_pTileSpr[sObjSpr]->PutTransSprite2(ix - 16, iy - 16, sObjSprFrame, dwTime);
							}
							else {
								m_pTileSpr[sObjSpr + 50]->PutSpriteFast(ix, iy, sObjSprFrame, dwTime);
								m_pTileSpr[sObjSpr]->PutSpriteFast(ix - 16, iy - 16, sObjSprFrame, dwTime);
							}
						}
						if (m_bIsXmas == TRUE) {
							if (G_cSpriteAlphaDegree == 2) { // nuit
								if (iXmasTreeBulbDelay < 0 || iXmasTreeBulbDelay > idelay + 1) iXmasTreeBulbDelay = 0;
								if (iXmasTreeBulbDelay > idelay) {
									for (int i = 0; i < 100; i++) {
										ix1[i] = 1 * (rand() % 400) - 200;
										iy2[i] = -1 * (rand() % 300);
									}
									iXmasTreeBulbDelay = 0;
								}
								else iXmasTreeBulbDelay++;

								for (int j = 0; j < 100; j++) {
									if (m_pTileSpr[sObjSpr]->_bCheckCollison(ix - 16, iy - 16, sObjSprFrame, ix + ix1[j], iy + iy2[j])) {
										m_pEffectSpr[66 + (j % 6)]->PutTransSprite(ix + ix1[j], iy + iy2[j], (iXmasTreeBulbDelay >> 2), dwTime);
									}
								}
							}
						}
					}
				}
			}

			// Dynamic Object
			if ((bRet == TRUE) && (sDynamicObject != NULL)) {
				switch (sDynamicObject) {
				case DEF_DYNAMICOBJECT_PCLOUD_BEGIN:	// 10
					if (sDynamicObjectFrame >= 0)
						m_pEffectSpr[23]->PutTransSprite50_NoColorKey(ix + (rand() % 2), iy + (rand() % 2), sDynamicObjectFrame, dwTime);
					break;

				case DEF_DYNAMICOBJECT_PCLOUD_LOOP:		// 11
					m_pEffectSpr[23]->PutTransSprite50_NoColorKey(ix + (rand() % 2), iy + (rand() % 2), sDynamicObjectFrame + 8, dwTime);
					break;

				case DEF_DYNAMICOBJECT_PCLOUD_END:		// 12
					m_pEffectSpr[23]->PutTransSprite50_NoColorKey(ix + (rand() % 2), iy + (rand() % 2), sDynamicObjectFrame + 16, dwTime);
					break;

				case DEF_DYNAMICOBJECT_HEALSPOT:	// 10
					if (sDynamicObjectFrame >= 0)
						m_pEffectSpr[170]->PutTransSprite50_NoColorKey(ix, iy, sDynamicObjectFrame, dwTime);
					break;

				case DEF_DYNAMICOBJECT_HEALSPOT_LOOP:		// 11
					m_pEffectSpr[170]->PutTransSprite50_NoColorKey(ix, iy, sDynamicObjectFrame + 8, dwTime);
					break;

				case DEF_DYNAMICOBJECT_ICESTORM:		// 8
					iDvalue = (rand() % 5)*(-1);
					m_pEffectSpr[0]->PutTransSpriteRGB(ix, iy, 1, iDvalue, iDvalue, iDvalue, dwTime);
					m_pEffectSpr[13]->PutTransSprite70_NoColorKey(ix, iy, sDynamicObjectFrame, dwTime);
					break;

				case DEF_DYNAMICOBJECT_BLUEFIRE:		// 8
					iDvalue = (rand() % 5)*(-1);
					m_pEffectSpr[169]->PutTransSprite70_NoColorKey(ix, iy, sDynamicObjectFrame, dwTime);
					break;

				case DEF_DYNAMICOBJECT_FIRE:			// 1
				case DEF_DYNAMICOBJECT_FIRE3:			// 14
					switch (rand() % 3) {
					case 0: m_pEffectSpr[0]->PutTransSprite25_NoColorKey(ix, iy, 1, dwTime); break;
					case 1: m_pEffectSpr[0]->PutTransSprite50_NoColorKey(ix, iy, 1, dwTime); break;
					case 2: m_pEffectSpr[0]->PutTransSprite70_NoColorKey(ix, iy, 1, dwTime); break;
					}
					m_pEffectSpr[9]->PutTransSprite70_NoColorKey(ix, iy, sDynamicObjectFrame / 3, dwTime);
					break;

				case DEF_DYNAMICOBJECT_FIRE2:			// 13
					switch (rand() % 3) {
					case 0: m_pEffectSpr[0]->PutTransSprite25_NoColorKey(ix, iy, 1, dwTime); break;
					case 1: m_pEffectSpr[0]->PutTransSprite50_NoColorKey(ix, iy, 1, dwTime); break;
					case 2: m_pEffectSpr[0]->PutTransSprite70_NoColorKey(ix, iy, 1, dwTime); break;
					}
					break;

				case DEF_DYNAMICOBJECT_FISH:			// 2
					char cTmpDOdir, cTmpDOframe;
					cTmpDOdir = m_Misc.cCalcDirection(cDynamicObjectData1, cDynamicObjectData2, cDynamicObjectData1 + cDynamicObjectData3, cDynamicObjectData2 + cDynamicObjectData4);
					cTmpDOframe = ((cTmpDOdir - 1) * 4) + (rand() % 4);
					m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 0]->PutTransSprite2(ix + cDynamicObjectData1, iy + cDynamicObjectData2, cTmpDOframe, dwTime);
					break;

				case DEF_DYNAMICOBJECT_MINERAL1:		// 4
					if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && Shadows)) m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->PutShadowSprite(ix, iy, 0, dwTime);
					m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->PutSpriteFast(ix, iy, 0, dwTime);
					if ((m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.top != -1)
						&& (m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.top < msY)
						&& (m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.bottom > msY)
						&& (m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.left < msX)
						&& (m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.right > msX)) {
						m_sMCX = indexX;
						m_sMCY = indexY;
						iFocuiStatus = 0;
						ZeroMemory(cFocusName, sizeof(cFocusName));
						ZeroMemory(m_cMCName, sizeof(m_cMCName));
					}
					break;

				case DEF_DYNAMICOBJECT_MINERAL2:		// 5
					if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && Shadows)) m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->PutShadowSprite(ix, iy, 1, dwTime);
					m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->PutSpriteFast(ix, iy, 1, dwTime);
					if ((m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.top != -1)
						&& (m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.top < msY)
						&& (m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.bottom > msY)
						&& (m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.left < msX)
						&& (m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 1]->m_rcBound.right > msX)) {
						m_sMCX = indexX;
						m_sMCY = indexY;
						iFocuiStatus = 0;
						ZeroMemory(cFocusName, sizeof(cFocusName));
						ZeroMemory(m_cMCName, sizeof(m_cMCName));
					}
					break;

				case DEF_DYNAMICOBJECT_SPIKE:			// 9
					m_pEffectSpr[17]->PutTransSprite70_NoColorKey(ix, iy, sDynamicObjectFrame, dwTime);
					break;

				case DEF_DYNAMICOBJECT_ARESDENFLAG1:  // 6
					m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 2]->PutSpriteFast(ix, iy, sDynamicObjectFrame, dwTime);
					break;

				case DEF_DYNAMICOBJECT_ELVINEFLAG1: // 7
					m_pSprite[DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT + 2]->PutSpriteFast(ix, iy, sDynamicObjectFrame, dwTime);
					break;
				}
			}
			indexX++;
		}
		indexY++;
	}

	if ((dwTime - m_dwEnvEffectTime) > 400) m_dwEnvEffectTime = dwTime;

	if (m_sMCX != NULL) { // CLEROTH - STATUS
		DecriptString(m_cCurLocation);
		if ((_iGetFOE(iFocuiStatus, _tmp_sOwnerType) < 0) || (memcmp(m_cCurLocation, "avaevent", 10) == 0) && (AllVsAll == TRUE) ||
			(memcmp(m_cCurLocation, "evento13", 8) == 0) && (AllEks == TRUE) ||
			(memcmp(m_cCurLocation, "evento14", 8) == 0) && (AllDkEks == TRUE))

			m_stMCursor.sCursorFrame = 3;
		else m_stMCursor.sCursorFrame = 6;
		EncriptString(m_cCurLocation);

		_tmp_wObjectID = wFocusObjectID;
		_tmp_sOwnerType = sFocusOwnerType;
		_tmp_cAction = cFocusAction;
		_tmp_AdminLevel = fFocusAdminLevel;
		_tmp_cFrame = cFocusFrame;
		_tmp_cDir = cFocusDir;
		_tmp_sAppr1 = sFocusAppr1;
		_tmp_sAppr2 = sFocusAppr2;
		_tmp_sAppr3 = sFocusAppr3;
		_tmp_sAppr4 = sFocusAppr4;
		_tmp_iApprColor = iFocusApprColor; // v1.
		_tmp_iApprColor2 = iFocusApprColor2;
		_tmp_iStatus = iFocuiStatus;
		strcpy(_tmp_cName, cFocusName);
		_tmp_dX = sFocus_dX; // v2.171
		_tmp_dY = sFocus_dY; // v2.171

		if ((_tmp_cAction != DEF_OBJECTDEAD) && (_tmp_cFrame < 0)) return;

		if (_tmp_cAction == DEF_OBJECTMOVE)
		{
			switch (_tmp_sOwnerType) {
			case 1:
			case 2:
			case 3: // Human M
			case 4:
			case 5:
			case 6: // Human F
			case 28: // Troll.
			case 29: // Ogre
			case 30: // Liche
			case 31: // DD
			case 32: // Uni
			case 33: // WW
			case 43: // LWB
			case 44: // GHK
			case 45: // GHKABS
			case 46: // TK
			case 47: // BG
			case 48: // SK
			case 49: // HC
			case 50: // TW
			case 51: // CP
			case 52: // GG
			case 53: // BB
			case 54: // DE
			case 55: // Rabbit
			case 56: // Cat
			case 57: // Frog
			case 58: // MG
			case 59: // Ettin
			case 60: // Plant
			case 61: // Rudolph
			case 62: // DireBoar
			case 63: // Frost
			case 65: // Ice-Golem
			case 66: // Wyvern
			case 70: // Dragon..........Ajouts par Snoopy
			case 71: // Centaur
			case 72: // ClawTurtle
			case 73: // FireWyvern //probando
			case 74: // GiantCrayfish
			case 75: // Gi Lizard
			case 76: // Gi Tree
			case 77: // Master Orc
			case 78: // Minaus
			case 79: // Nizie
			case 80: // Tentocle
			case 81: // Abaddon
			case 82: // Sorceress
			case 83: // ATK
			case 84: // MasterElf
			case 85: // DSK
			case 86: // HBT
			case 87: // CT
			case 88: // Barbarian
			case 89: // AGC
			case 91: // Gate
			case 108: //HellDeath
			case 109: // 
				//case 112: // HounHell
			case 113: // Hell Liche
			case 114: // Death Wyvern
				//case 115: // Hell Butcher
			case 116: // Hell Troll
			case 117: // Mount Death
			case 118: // Hell Goyle
			case 119: // Hell Demon
			case 128: //BlackWyvern
				//case 120:
				break;

			default: // 10..27
				_tmp_cFrame = _tmp_cFrame * 2; //
				break;
			}
		}
		switch (_tmp_cAction) {
		
		case DEF_OBJECTMOVE:
		case DEF_OBJECTSTOP:
		case DEF_OBJECTDAMAGEMOVE:
		case DEF_OBJECTRUN:
		case DEF_OBJECTATTACK:
		case DEF_OBJECTATTACKMOVE:
		case DEF_OBJECTMAGIC:
		case DEF_OBJECTDAMAGE:
		case DEF_OBJECTDYING: //10
		case DEF_OBJECTDEAD: //101
			DrawObject(m_sMCX, m_sMCY, sFocusX, sFocusY, TRUE, dwTime, msX, msY, _tmp_wObjectID, _tmp_cAction, frame_omit);
			break;
		}
	}

	if (m_bIsGetPointingMode == TRUE) {
		if ((DecriptInt(m_iPointCommandType) >= 100) && (DecriptInt(m_iPointCommandType) < 200)) { // spell
			if (m_bCommandAvailable == TRUE) {
				if (m_sMCX != NULL) {
					if (_iGetFOE(iFocuiStatus, _tmp_sOwnerType) < 0)
						m_stMCursor.sCursorFrame = 5;   // Red enemi for spell
					else m_stMCursor.sCursorFrame = 4;  // Blue friend for spell
				}
				else m_stMCursor.sCursorFrame = 4;     // Blue friend for spell
			}
			else m_stMCursor.sCursorFrame = 8;
		}
		else if ((DecriptInt(m_iPointCommandType) >= 0) && (DecriptInt(m_iPointCommandType) < 50)) { // item
			m_stMCursor.sCursorFrame = 10;				// hand to grap item
		}
	}
}

void CGame::MotionEventHandler(char * pData)
{
	WORD  * wp, wEventType, wObjectID;
	short * sp, sX, sY, sType, sAppr1, sAppr2, sAppr3, sAppr4, sV1, sV2, sV3, sPrevAppr2;
	int iStatus;
	unsigned short iDamage = 0;
	char  * cp, cDir, cName[12];
	int   * ip, iApprColor, iApprColor2, iLoc;
	char    cTxt[120], AdminLevel;
	int i;
	ZeroMemory(cName, sizeof(cName));
	sV1 = sV2 = sV3 = NULL;
	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	wEventType = *wp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	wp = (WORD *)cp;
	wObjectID = *wp;
	cp += 2; // 8

	iLoc = 0;
	if (wObjectID < 30000) {
		if (wObjectID < 10000) {	// Player
			sp = (short *)cp;
			sX = *sp;
			cp += 2; // 10

			sp = (short *)cp;
			sY = *sp;
			cp += 2; // 12

			sp = (short *)cp;
			sType = *sp;
			cp += 2; // 14

			cDir = *cp;
			cp++; // 15

			memcpy(cName, cp, 10);
			cp += 10; // 25

			sp = (short *)cp;
			sAppr1 = *sp;
			cp += 2; // 27

			sp = (short *)cp;
			sAppr2 = *sp;
			cp += 2; // 29

			sp = (short *)cp;
			sAppr3 = *sp;
			cp += 2; // 31

			sp = (short *)cp;
			sAppr4 = *sp;
			cp += 2; // 33

			ip = (int *)cp; // v1.4
			iApprColor = *ip;
			cp += 4; // 37

			// New Colors -> ZeroEoyPnk
			ip = (int *)cp;
			iApprColor2 = *ip;
			cp += 4;

			ip = (int *)cp;
			iStatus = *ip;
			cp += 4; // 41

			AdminLevel = *cp;
			cp++; // 42

			iLoc = *cp;
			cp++; // 43	
		}
		else {	// Npc or mob
			sp = (short *)cp;
			sX = *sp;
			cp += 2; // 10

			sp = (short *)cp;
			sY = *sp;
			cp += 2; // 12

			sp = (short *)cp;
			sType = *sp;
			cp += 2; // 14

			cDir = *cp;
			cp++; // 15 

			memcpy(cName, cp, 5);
			cp += 5; // 20

			sAppr1 = sAppr3 = sAppr4 = 0;

			sp = (short *)cp;
			sAppr2 = *sp;
			cp += 2; // 22

			ip = (int *)cp;
			iStatus = *ip;
			cp += 4; // 26

			iLoc = *cp;
			cp++; // 27

			AdminLevel = 0;
		}
	}
	else {
		switch (wEventType) {
		case DEF_OBJECTMAGIC:
			cDir = *cp;
			cp++;
			sV1 = (short)*cp;
			cp++;
			sV2 = (short)*cp;
			cp++;
			break;

		case DEF_OBJECTDAMAGEMOVE:
		case DEF_OBJECTDAMAGE:
			cDir = *cp;
			cp++;

			sp = (short *)cp;
			iDamage = *sp;
			cp += 2;

			sV2 = (short)*cp;
			cp++;

			break;

		case DEF_OBJECTDYING:
			cDir = *cp;
			cp++;

			sp = (short *)cp;
			iDamage = *sp;
			cp += 2;

			sV2 = (short)*cp; //
			cp++;
			sp = (short *)cp;
			sX = *sp;
			cp += 2;
			sp = (short *)cp;
			sY = *sp;
			cp += 2;
			break;

		case DEF_OBJECTATTACK:
			cDir = *cp;
			cp++;
			sV1 = *cp;
			cp++;
			sV2 = *cp;
			cp++;
			sp = (short *)cp;
			sV3 = *sp;
			cp += 2;
			break;

		default:
			cDir = *cp;
			cp++;
			break;
		}
	}

	if ((wEventType == DEF_OBJECTNULLACTION) && (memcmp(cName, m_cPlayerName, 10) == 0)) {
		m_sPlayerType = sType;
		m_sPlayerAppr1 = sAppr1;
		sPrevAppr2 = m_sPlayerAppr2;
		m_sPlayerAppr2 = sAppr2;
		m_sPlayerAppr3 = sAppr3;
		m_sPlayerAppr4 = sAppr4;
		m_iPlayerApprColor = iApprColor;
		m_iPlayerApprColor2 = iApprColor2;
		m_iPlayerStatus = iStatus;
		MyAdminLevel = AdminLevel;
		if ((sPrevAppr2 & 0xF000) == 0) {
			if ((sAppr2 & 0xF000) != 0) {
				AddEventList(MOTION_EVENT_HANDLER1, 10);
				m_bIsCombatMode = EncriptBool(TRUE);
			}
		}
		else {
			if ((sAppr2 & 0xF000) == 0) {
				AddEventList(MOTION_EVENT_HANDLER2, 10);
				m_bIsCombatMode = EncriptBool(FALSE);
			}
		}

		if ((m_cCommand != DEF_OBJECTRUN) && (m_cCommand != DEF_OBJECTMOVE) && (m_cCommand != DEF_OBJECTMAGIC))
			m_pMapData->bSetOwner(wObjectID, sX, sY, sType, cDir, sAppr1, sAppr2, sAppr3, sAppr4, iApprColor, iApprColor2, iStatus, cName, (char)wEventType, sV1, sV2, sV3, iLoc, 0, MyAdminLevel);
	}
	else {
		m_pMapData->bSetOwner(wObjectID, sX, sY, sType, cDir, sAppr1, sAppr2, sAppr3, sAppr4, iApprColor, iApprColor2, iStatus, cName, (char)wEventType, sV1, sV2, sV3, iLoc, 0, AdminLevel);
	}

	switch (wEventType) {
	case DEF_OBJECTMAGIC: // Casting
		_RemoveChatMsgListByObjectID(wObjectID - 30000);
		for (i = 1; i < DEF_MAXCHATMSGS; i++) {
			if (m_pChatMsgList[i] == NULL) {
				ZeroMemory(cTxt, sizeof(cTxt));
				if (m_pMagicCfgList[m_iCastingMagicType] != NULL) {
					wsprintf(cTxt, "%s!", m_pMagicCfgList[sV1]->m_cName);
					m_pChatMsgList[i] = new class CMsg(41, cTxt, m_dwCurTime);//41
					m_pChatMsgList[i]->m_iObjectID = wObjectID - 30000;
					if (m_pMapData->bSetChatMsgOwner(wObjectID - 30000, -10, -10, i) == FALSE) {
						delete m_pChatMsgList[i];
						m_pChatMsgList[i] = NULL;
					}
				}
				return;
			}
		}
		break;

	case DEF_OBJECTDYING://lalo Crit

		if (StaggerDmg)
		{
			for (i = 1; i < DEF_MAXCHATMSGS; i++)
				if (m_pChatMsgList[i] == NULL)
				{
					for (int x = 1; x < DEF_MAXCHATMSGS; x++)
					{
						if (m_pChatMsgList[x] != NULL)
						{
							if ((wObjectID - 30000) == m_pChatMsgList[x]->m_iObjectID)
							{
								if ((m_pChatMsgList[x]->m_cType == 21) ||
									(m_pChatMsgList[x]->m_cType == 22) ||
									(m_pChatMsgList[x]->m_cType == 23))
								{
									m_pChatMsgList[x]->iDispLines++;
								}
							}
						}
					}

					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, "-%dPts!", iDamage);
					int iFontType;
					if ((iDamage >= 0) && (iDamage < 12))        iFontType = 21;
					else if ((iDamage >= 12) && (iDamage < 40)) iFontType = 22;
					else if ((iDamage >= 40) || (iDamage < 0))    iFontType = 23;
					m_pChatMsgList[i] = new class CMsg(iFontType, cTxt, m_dwCurTime);
					m_pChatMsgList[i]->m_iObjectID = wObjectID - 30000;
					m_pChatMsgList[i]->iDispLines = 1;
					if (m_pMapData->bSetChatMsgOwner(wObjectID - 30000, -10, -10, i) == FALSE)
					{
						delete m_pChatMsgList[i];
						m_pChatMsgList[i] = NULL;
					}
					return;
				}
		}
		else
		{
			_RemoveChatMsgListByObjectID(wObjectID - 30000);
			for (i = 1; i < DEF_MAXCHATMSGS; i++) {
				if (m_pChatMsgList[i] == NULL) {
					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, "-%dPts!", iDamage); //pts
					int iFontType;
					if ((iDamage >= 0) && (iDamage < 12))		iFontType = 21;
					else if ((iDamage >= 12) && (iDamage < 40)) iFontType = 22;
					else if ((iDamage >= 40) || (iDamage < 0))	iFontType = 23;

					m_pChatMsgList[i] = new class CMsg(iFontType, cTxt, m_dwCurTime);
					m_pChatMsgList[i]->m_iObjectID = wObjectID - 30000;

					if (m_pMapData->bSetChatMsgOwner(wObjectID - 30000, -10, -10, i) == FALSE) {
						delete m_pChatMsgList[i];
						m_pChatMsgList[i] = NULL;
					}
					return;
				}
			}
		}


		break;

	case DEF_OBJECTDAMAGEMOVE:
	case DEF_OBJECTDAMAGE:
		if (memcmp(cName, m_cPlayerName, 10) == 0) {
			m_bIsGetPointingMode = FALSE;
			m_iPointCommandType = EncriptInt(-1);
			m_stMCursor.sCursorFrame = 0;
			ClearSkillUsingStatus();
		}

		if (StaggerDmg)
		{
			for (i = 1; i < DEF_MAXCHATMSGS; i++)
				if (m_pChatMsgList[i] == NULL)
				{
					for (int x = 1; x < DEF_MAXCHATMSGS; x++)
					{
						if (m_pChatMsgList[x] != NULL)
						{
							if ((wObjectID - 30000) == m_pChatMsgList[x]->m_iObjectID)
							{
								if ((m_pChatMsgList[x]->m_cType == 21) ||
									(m_pChatMsgList[x]->m_cType == 22) ||
									(m_pChatMsgList[x]->m_cType == 23))
								{
									m_pChatMsgList[x]->iDispLines++;
								}
							}
						}
					}

					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, "-%dPts", iDamage);
					int iFontType;
					if ((iDamage >= 0) && (iDamage < 12))        iFontType = 21;
					else if ((iDamage >= 12) && (iDamage < 40)) iFontType = 22;
					else if ((iDamage >= 40) || (iDamage < 0))    iFontType = 23;
					m_pChatMsgList[i] = new class CMsg(iFontType, cTxt, m_dwCurTime);
					m_pChatMsgList[i]->m_iObjectID = wObjectID - 30000;
					m_pChatMsgList[i]->iDispLines = 1;
					if (m_pMapData->bSetChatMsgOwner(wObjectID - 30000, -10, -10, i) == FALSE)
					{
						delete m_pChatMsgList[i];
						m_pChatMsgList[i] = NULL;
					}
					return;
				}
		}
		else
		{
			_RemoveChatMsgListByObjectID(wObjectID - 30000);

			for (i = 1; i < DEF_MAXCHATMSGS; i++) {
				if (m_pChatMsgList[i] == NULL) {
					ZeroMemory(cTxt, sizeof(cTxt));
					if (iDamage != 0) {
						wsprintf(cTxt, "-%dPts", iDamage); //pts

						int iFontType;
						if ((iDamage >= 0) && (iDamage < 12))		iFontType = 21;
						else if ((iDamage >= 12) && (iDamage < 40)) iFontType = 22;
						else if ((iDamage >= 40) || (iDamage < 0))	iFontType = 23;

						m_pChatMsgList[i] = new class CMsg(iFontType, cTxt, m_dwCurTime);
					}
					else {
						strcpy(cTxt, " * Failed! *");
						m_pChatMsgList[i] = new class CMsg(22, cTxt, m_dwCurTime);
						PlaySound('C', 17, 0);
					}
					m_pChatMsgList[i]->m_iObjectID = wObjectID - 30000;
					if (m_pMapData->bSetChatMsgOwner(wObjectID - 30000, -10, -10, i) == FALSE) {
						delete m_pChatMsgList[i];
						m_pChatMsgList[i] = NULL;
					}
					return;
				}
			}
		}

		break;
	}
}

void CGame::InitPlayerResponseHandler(char * pData)
{
	WORD * wp;
	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	switch (*wp) {
	case DEF_MSGTYPE_CONFIRM:
		bSendCommand(CLIENT_REQUEST_INITDATA, NULL, NULL, NULL, NULL, NULL, NULL);
		ChangeGameMode(DEF_GAMEMODE_ONWAITINGINITDATA);
		break;

	case DEF_MSGTYPE_REJECT:
		ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
		ZeroMemory(m_cMsg, sizeof(m_cMsg));
		strcpy(m_cMsg, "3J");
		break;
	}
}

void CGame::UpdateScreen_OnMainMenu()
{
	short msX, msY, msZ;
	char cLB, cRB, cMIresult;
	int  iMIbuttonNum;
	static class CMouseInterface * pMI;
	DWORD dwTime = G_dwGlobalTime;

	int rec_res_x = 0, rec_res_x2 = 0, rec1_res_y = 0, rec1_res_y2 = 0, rec2_res_y = 0, rec2_res_y2 = 0, rec3_res_y = 0, rec3_res_y2 = 0, rec_more = 0;
	int newres_x = 0, newres_y = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		rec_res_x = 96;
		rec_res_x2 = 135;
		rec1_res_y = 44;
		rec1_res_y2 = 49;
		rec2_res_y = 53;
		rec2_res_y2 = 58;
		rec3_res_y = 62;
		rec3_res_y2 = 67;
		rec_more = 1;
		newres_x = 80;
		newres_y = 60;
	}
	if (c_reso->IsResolution() == C1024x768)
	{
		rec_res_x = 231;
		rec_res_x2 = 327;
		rec1_res_y = 107;
		rec1_res_y2 = 116;
		rec2_res_y = 131;
		rec2_res_y2 = 139;
		rec3_res_y = 153;
		rec3_res_y2 = 165;
		//rec_more = 1;
		newres_x = 192;
		newres_y = 144;
	}

	m_iItemDropCnt = EncriptInt(0);
	m_bItemDrop = FALSE;


	if (m_cGameModeCount == 0) {
		if (G_pCalcSocket != NULL) {
			delete G_pCalcSocket;
			G_pCalcSocket = NULL;
		}

		if (m_pSprite[DEF_SPRID_INTERFACE_ND_LOADING] != NULL) {
			delete m_pSprite[DEF_SPRID_INTERFACE_ND_LOADING];
			m_pSprite[DEF_SPRID_INTERFACE_ND_LOADING] = NULL;
		}

		EndInputString();

		pMI = new class CMouseInterface;

		pMI->AddRect(384 + rec_res_x, 177 + rec1_res_y, 548 + rec_res_x2, 198 + rec1_res_y2);
		pMI->AddRect(384 + rec_res_x, 215 + rec2_res_y, 548 + rec_res_x2, 236 + rec2_res_y2);
		pMI->AddRect(384 + rec_res_x, 254 + rec3_res_y, 548 + rec_res_x2, 275 + rec3_res_y2);
		m_DInput.m_sX = 320 + newres_x;
		m_DInput.m_sY = 240 + newres_y;

		m_cCurFocus = 1;
		m_cMaxFocus = 3;

		m_bEnterPressed = FALSE;
		m_cArrowPressed = 0;
	}

	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	m_DDraw.ClearBackB4();

	if (c_reso->IsResolution() == C640x480)
		m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, dwTime);
	else if (c_reso->IsResolution() == C800x600)
		m_pSprite[SPRID_BACKGROUND + 1]->PutSpriteFast(0, 0, 0, dwTime);
	else if (c_reso->IsResolution() == C1024x768)
		m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, dwTime);

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);

	if ((msX >= 384 + rec_res_x) && (msY >= 177 + rec1_res_y) && (msX <= 548 + rec_res_x2) && (msY <= 198 + rec1_res_y2)) m_cCurFocus = 1;
	if ((msX >= 384 + rec_res_x) && (msY >= 215 + rec2_res_y) && (msX <= 548 + rec_res_x2) && (msY <= 236 + rec2_res_y2)) m_cCurFocus = 2;
	if ((msX >= 384 + rec_res_x) && (msY >= 254 + rec3_res_y) && (msX <= 548 + rec_res_x2) && (msY <= 275 + rec3_res_y2)) m_cCurFocus = 3;

	if (c_reso->IsResolution() == C640x480)
	{
		m_pSprite[SPRID_BUTTONS]->PutSpriteFast(384 + rec_res_x, 177 + rec1_res_y, 3, dwTime);
		m_pSprite[SPRID_BUTTONS]->PutSpriteFast(384 + rec_res_x + rec_more, 215 + rec2_res_y, 4, dwTime);
		m_pSprite[SPRID_BUTTONS]->PutSpriteFast(384 + rec_res_x + rec_more, 254 + rec3_res_y + rec_more, 5, dwTime);
	}
	else if (c_reso->IsResolution() == C800x600)
	{
		m_pSprite[SPRID_BUTTONS + 1]->PutSpriteFast(384 + rec_res_x, 177 + rec1_res_y, 3, dwTime);
		m_pSprite[SPRID_BUTTONS + 1]->PutSpriteFast(384 + rec_res_x + rec_more, 215 + rec2_res_y, 4, dwTime);
		m_pSprite[SPRID_BUTTONS + 1]->PutSpriteFast(384 + rec_res_x + rec_more, 254 + rec3_res_y + rec_more, 5, dwTime);
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		m_pSprite[SPRID_BUTTONS + 2]->PutSpriteFast(384 + rec_res_x, 177 + rec1_res_y, 3, dwTime);
		m_pSprite[SPRID_BUTTONS + 2]->PutSpriteFast(384 + rec_res_x + rec_more, 215 + rec2_res_y, 4, dwTime);
		m_pSprite[SPRID_BUTTONS + 2]->PutSpriteFast(384 + rec_res_x + rec_more, 254 + rec3_res_y + rec_more, 5, dwTime);
	}

	switch (m_cCurFocus) {
	case 1:
		if (c_reso->IsResolution() == C640x480)
			m_pSprite[SPRID_BUTTONS]->PutSpriteFast(384 + rec_res_x, 177 + rec1_res_y, 0, dwTime);
		else if (c_reso->IsResolution() == C800x600)
			m_pSprite[SPRID_BUTTONS + 1]->PutSpriteFast(384 + rec_res_x, 177 + rec1_res_y, 0, dwTime);
		else if (c_reso->IsResolution() == C1024x768)
			m_pSprite[SPRID_BUTTONS + 2]->PutSpriteFast(384 + rec_res_x, 177 + rec1_res_y, 0, dwTime);
		break;
	case 2:
		if (c_reso->IsResolution() == C640x480)
			m_pSprite[SPRID_BUTTONS]->PutSpriteFast(384 + rec_res_x + rec_more, 215 + rec2_res_y, 1, dwTime);
		else if (c_reso->IsResolution() == C800x600)
			m_pSprite[SPRID_BUTTONS + 1]->PutSpriteFast(384 + rec_res_x + rec_more, 215 + rec2_res_y, 1, dwTime);
		else if (c_reso->IsResolution() == C1024x768)
			m_pSprite[SPRID_BUTTONS + 2]->PutSpriteFast(384 + rec_res_x + rec_more, 215 + rec2_res_y, 1, dwTime);
		break;
	case 3:
		if (c_reso->IsResolution() == C640x480)
			m_pSprite[SPRID_BUTTONS]->PutSpriteFast(384 + rec_res_x + rec_more, 254 + rec3_res_y + rec_more, 2, dwTime);
		else if (c_reso->IsResolution() == C800x600)
			m_pSprite[SPRID_BUTTONS + 1]->PutSpriteFast(384 + rec_res_x + rec_more, 254 + rec3_res_y + rec_more, 2, dwTime);
		else if (c_reso->IsResolution() == C1024x768)
			m_pSprite[SPRID_BUTTONS + 2]->PutSpriteFast(384 + rec_res_x + rec_more, 254 + rec3_res_y + rec_more, 2, dwTime);
		break;
	}

	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);

	if (m_cArrowPressed != 0) {
		switch (m_cArrowPressed) {
		case 1:
			m_cCurFocus--;
			if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
			break;
			//agregado account case 2
		case 2:
			m_cCurFocus++;
			if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 2;
			break;
		case 3:
			m_cCurFocus++;
			if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
			break;
		}
		m_cArrowPressed = 0;
	}

	if (m_bEnterPressed == TRUE) {
		PlaySound('E', 14, 5);
		m_bEnterPressed = FALSE;
		switch (m_cCurFocus) {
		case 1:
			delete pMI;
			ChangeGameMode(DEF_GAMEMODE_ONSELECTSERVER);
			return;
		case 2:
			//GoHomepage(1);
			delete pMI;
			ChangeGameMode(DEF_GAMEMODE_ONCREATENEWACCOUNT);
			return;
		case 3:
			delete pMI;
			ChangeGameMode(DEF_GAMEMODE_ONQUIT);
			return;
		}
	}

	DrawVersion(TRUE);

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK) {
		PlaySound('E', 14, 5);
		m_cCurFocus = iMIbuttonNum;
		switch (iMIbuttonNum) {
		case 1:
			ChangeGameMode(DEF_GAMEMODE_ONSELECTSERVER);
			delete pMI;
			break;
		case 2:
			//GoHomepage(1);
			delete pMI;
			ChangeGameMode(DEF_GAMEMODE_ONCREATENEWACCOUNT);
			return;
			//	delete pMI;
			//	break;
		case 3:
			delete pMI;
			ChangeGameMode(DEF_GAMEMODE_ONQUIT);
			return;
		}
	}

	DrawCords(msX, msY);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::MakeSprite(char* FileName, short sStart, short sCount, bool bAlphaEffect, bool Pak)
{
	int iTotalimage;
	DWORD nCount;
	char PathName[28];

	if (Pak) wsprintf(PathName, "sprites\\%s.pak", FileName);
	else wsprintf(PathName, "sprites\\%s.apk", FileName);
	HANDLE m_hPakFile = CreateFile(PathName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	if (m_hPakFile == INVALID_HANDLE_VALUE) return;

	SetFilePointer(m_hPakFile, 20, NULL, FILE_BEGIN);
	ReadFile(m_hPakFile, (char *)&iTotalimage, 4, &nCount, NULL);
	if (!Pak) iTotalimage = ((((iTotalimage - 51) / 3) - 17) / 44);
	for (short i = 0; i < sCount; i++) {
		if (i < iTotalimage) m_pSprite[i + sStart] = new class CSprite(m_hPakFile, &m_DDraw, FileName, i, bAlphaEffect, Pak);
	}
	CloseHandle(m_hPakFile);
}

//HeatoN added read common sprites 2024
void CGame::MakeCommonSprite(char* FileName, int sStart, int sCount, bool bAlphaEffect)
{
	int iTotalimage;
	DWORD nCount;
	char PathName[50];
	std::vector<int> framePositions;

	wsprintf(PathName, "sprites\\%s.pak", FileName);
	HANDLE m_hPakFile = CreateFile(PathName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);

	if (m_hPakFile == INVALID_HANDLE_VALUE) return;
	ReadFramePositions(m_hPakFile, framePositions, sCount);
	SetFilePointer(m_hPakFile, 20, NULL, FILE_BEGIN);
	ReadFile(m_hPakFile, (char *)&iTotalimage, 4, &nCount, NULL);
	for (short i = 0; i < sCount; i++) {
		if (i < iTotalimage) m_pSprite[i + sStart] = new class CSprite(m_hPakFile, &m_DDraw, FileName, i, bAlphaEffect);
	}
	CloseHandle(m_hPakFile);
}

void CGame::MakeTileSpr(char* FileName, short sStart, short sCount, bool bAlphaEffect, bool Pak)
{
	int iTotalimage;
	DWORD nCount;
	char PathName[28];

	if (Pak) wsprintf(PathName, "sprites\\%s.pak", FileName);
	else wsprintf(PathName, "sprites\\%s.apk", FileName);
	HANDLE m_hPakFile = CreateFile(PathName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	if (m_hPakFile == INVALID_HANDLE_VALUE) return;
	SetFilePointer(m_hPakFile, 20, NULL, FILE_BEGIN);
	ReadFile(m_hPakFile, (char *)&iTotalimage, 4, &nCount, NULL);
	if (!Pak) iTotalimage = ((((iTotalimage - 51) / 3) - 17) / 44);
	for (short i = 0; i < sCount; i++) {
		if (i < iTotalimage) m_pTileSpr[i + sStart] = new class CSprite(m_hPakFile, &m_DDraw, FileName, i, bAlphaEffect, Pak);
	}
	CloseHandle(m_hPakFile);
}

void CGame::MakeEffectSpr(char* FileName, short sStart, short sCount, bool bAlphaEffect, bool Pak)
{
	int iTotalimage;
	DWORD nCount;
	char PathName[28];
	if (Pak) wsprintf(PathName, "sprites\\%s.pak", FileName);
	else wsprintf(PathName, "sprites\\%s.apk", FileName);
	HANDLE m_hPakFile = CreateFile(PathName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	if (m_hPakFile == INVALID_HANDLE_VALUE) return;
	SetFilePointer(m_hPakFile, 20, NULL, FILE_BEGIN);
	ReadFile(m_hPakFile, (char *)&iTotalimage, 4, &nCount, NULL);
	if (!Pak) iTotalimage = ((((iTotalimage - 51) / 3) - 17) / 44);
	for (short i = 0; i < sCount; i++) {
		if (i < iTotalimage) m_pEffectSpr[i + sStart] = new class CSprite(m_hPakFile, &m_DDraw, FileName, i, bAlphaEffect, Pak);
	}
	CloseHandle(m_hPakFile);
}

void CGame::DrawDialogBox_SkillDlg(short msX, short msY, short msZ, char cLB)
{
	int i, iLoc, iAdjX, iAdjY;
	char cTemp[120], cTemp2[120];
	short sX, sY, szX;
	char cStr1[64], cStr2[64], cStr3[64];
	DWORD dwTime = m_dwCurTime;
	//short MpLevel, MaxLevel ,ContribLevel;

	iAdjX = 5;
	iAdjY = 8;

	switch (m_stDialogBoxInfo[26].cMode) {
	case 1: // Alchemy waiting incredients
		if (m_stDialogBoxInfo[26].cStr[0] != 0) {
			sX = m_stDialogBoxInfo[26].sX + iAdjX + (m_stDialogBoxInfo[26].cStr[0] - (rand() % (m_stDialogBoxInfo[26].cStr[0] * 2)));
			sY = m_stDialogBoxInfo[26].sY + iAdjY + (m_stDialogBoxInfo[26].cStr[0] - (rand() % (m_stDialogBoxInfo[26].cStr[0] * 2)));
		}
		else {
			sX = m_stDialogBoxInfo[26].sX;
			sY = m_stDialogBoxInfo[26].sY;
		}

		m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX, sY, 1, dwTime);

		if (m_stDialogBoxInfo[26].sV1 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV2 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + 45 * 1 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV3 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + 45 * 2 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV4 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV5 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + 45 * 1 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV6 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + 45 * 2 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSpriteFrame, dwTime);
		}

		if ((msX >= sX + iAdjX + 60) && (msX <= sX + iAdjX + 153) && (msY >= sY + iAdjY + 175) && (msY <= sY + iAdjY + 195))
			PutString_SprFont(sX + iAdjX + 60, sY + iAdjY + 175, "Try Now!", 16, 16, 30);
		else PutString_SprFont(sX + iAdjX + 60, sY + iAdjY + 175, "Try Now!", 6, 6, 20);

		break;

	case 2: // Alchemy, creating a potion
		if (m_stDialogBoxInfo[26].cStr[0] != 0) {
			sX = m_stDialogBoxInfo[26].sX + iAdjX + (m_stDialogBoxInfo[26].cStr[0] - (rand() % (m_stDialogBoxInfo[26].cStr[0] * 2)));
			sY = m_stDialogBoxInfo[26].sY + iAdjY + (m_stDialogBoxInfo[26].cStr[0] - (rand() % (m_stDialogBoxInfo[26].cStr[0] * 2)));
		}
		else {
			sX = m_stDialogBoxInfo[26].sX;
			sY = m_stDialogBoxInfo[26].sY;
		}
		m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX, sY, 1, dwTime);

		if (m_stDialogBoxInfo[26].sV1 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV2 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + 45 * 1 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV3 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + 45 * 2 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV4 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV5 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + 45 * 1 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV6 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSprite]->PutTransSprite50(sX + iAdjX + 55 + 45 * 2 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSpriteFrame, dwTime);
		}

		PutString_SprFont(sX + iAdjX + 60, sY + iAdjY + 175, "Creating...", 20, 6, 6);

		if ((dwTime - m_stDialogBoxInfo[26].dwT1) > 1000) {
			m_stDialogBoxInfo[26].dwT1 = dwTime;
			m_stDialogBoxInfo[26].cStr[0]++;
		}

		if (m_stDialogBoxInfo[26].cStr[0] >= 5) {
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CREATEPOTION, NULL, NULL, NULL, NULL, NULL);
			DisableDialogBox(26);
			PlaySound('E', 42, 0);
		}
		break;

	case 3: // Manuf: Choose what you want to create
		sX = m_stDialogBoxInfo[26].sX;
		sY = m_stDialogBoxInfo[26].sY;
		szX = m_stDialogBoxInfo[26].sSizeX;
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 0);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 8);
		PutString(sX + iAdjX + 44, sY + iAdjY + 38, "Name", RGB(0, 0, 0));
		PutString(sX + iAdjX + 171, sY + iAdjY + 38, "Max.Skill", RGB(0, 0, 0));

		iLoc = 0;
		for (i = 0; i < 13; i++) {
			if (m_pDispBuildItemList[i + m_stDialogBoxInfo[26].sView] != NULL) {

				ZeroMemory(cTemp, sizeof(cTemp));
				GetItemName(m_pDispBuildItemList[i + m_stDialogBoxInfo[26].sView]->m_cName, NULL, cStr1, cStr2, cStr3);
				wsprintf(cTemp, "%s", cStr1);
				ZeroMemory(cTemp2, sizeof(cTemp2));
				wsprintf(cTemp2, "%d%%", m_pDispBuildItemList[i + m_stDialogBoxInfo[26].sView]->m_iMaxSkill);

				if ((msX >= sX + 30) && (msX <= sX + 180) && (msY >= sY + iAdjY + 55 + iLoc * 15) && (msY <= sY + iAdjY + 69 + iLoc * 15)) {
					PutString(sX + 30 - 1, sY + iAdjY + 55 - 1 + iLoc * 15, cTemp, RGB(0, 0, 0));
					PutString(sX + 30, sY + iAdjY + 55 + iLoc * 15, cTemp, RGB(255, 255, 255));
					PutString(sX + 190 - 1, sY + iAdjY + 55 - 1 + iLoc * 15, cTemp2, RGB(0, 0, 0));
					PutString(sX + 190, sY + iAdjY + 55 + iLoc * 15, cTemp2, RGB(255, 255, 255));
				}
				else {
					if (m_pDispBuildItemList[i + m_stDialogBoxInfo[26].sView]->m_bBuildEnabled == TRUE) {
						PutString(sX + 30 - 1, sY + iAdjY + 55 - 1 + iLoc * 15, cTemp, RGB(0, 0, 0));
						PutString(sX + 30, sY + iAdjY + 55 + iLoc * 15, cTemp, RGB(0, 255, 0));
						PutString(sX + 190 - 1, sY + iAdjY + 55 - 1 + iLoc * 15, cTemp2, RGB(0, 0, 0));
						PutString(sX + 190, sY + iAdjY + 55 + iLoc * 15, cTemp2, RGB(0, 255, 0));
					}
					else {
						PutString(sX + 30 - 1, sY + iAdjY + 55 - 1 + iLoc * 15, cTemp, RGB(0, 0, 0));
						PutString(sX + 30, sY + iAdjY + 55 + iLoc * 15, cTemp, RGB(255, 0, 0));
						PutString(sX + 190 - 1, sY + iAdjY + 55 - 1 + iLoc * 15, cTemp2, RGB(0, 0, 0));
						PutString(sX + 190, sY + iAdjY + 55 + iLoc * 15, cTemp2, RGB(255, 0, 0));
					}
				}
				iLoc++;
			}
		}

		if ((m_stDialogBoxInfo[26].sView >= 1) && (m_pDispBuildItemList[m_stDialogBoxInfo[26].sView - 1] != NULL))
			m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutSpriteFast(sX + iAdjX + 225, sY + iAdjY + 210, 23, dwTime);
		else m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutTransSpriteRGB(sX + iAdjX + 225, sY + iAdjY + 210, 23, 5, 5, 5, dwTime);

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].sView + 13] != NULL)
			m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutSpriteFast(sX + iAdjX + 225, sY + iAdjY + 230, 24, dwTime);
		else m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutTransSpriteRGB(sX + iAdjX + 225, sY + iAdjY + 230, 24, 5, 5, 5, dwTime);

		if ((cLB != 0) && (iGetTopDialogBoxIndex() == 26)) {
			if ((msX >= sX + 224) && (msX <= sX + 235) && (msY >= sY + 213) && (msY <= sY + 224)) {
				m_stDialogBoxInfo[26].sView--;
			}

			if ((msX >= sX + 224) && (msX <= sX + 235) && (msY >= sY + 233) && (msY <= sY + 244)) {
				if (m_pDispBuildItemList[m_stDialogBoxInfo[26].sView + 13] != NULL)
					m_stDialogBoxInfo[26].sView++;
			}
		}
		if ((msZ != 0) && (iGetTopDialogBoxIndex() == 26)) {
			m_stDialogBoxInfo[26].sView = m_stDialogBoxInfo[26].sView - msZ / 60;
			m_DInput.m_sZ = 0;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].sView + 12] == NULL) {
			while (1) {
				m_stDialogBoxInfo[26].sView--;
				if (m_stDialogBoxInfo[26].sView < 1) break;
				if (m_pDispBuildItemList[m_stDialogBoxInfo[26].sView + 12] != NULL) break;
			}
		}
		if (m_stDialogBoxInfo[26].sView < 0) m_stDialogBoxInfo[26].sView = 0;

		PutAlignedString(sX - 1, sX + m_stDialogBoxInfo[26].sSizeX - 1, sY + 265 - 1, DRAW_DIALOGBOX_SKILLDLG2, 0, 0, 0);//" List of items which you can make with"
		PutAlignedString(sX, sX + m_stDialogBoxInfo[26].sSizeX, sY + 265, DRAW_DIALOGBOX_SKILLDLG2, 255, 255, 255);//" List of items which you can make with"
		PutAlignedString(sX - 1, sX + m_stDialogBoxInfo[26].sSizeX - 1, sY + 280 - 1, DRAW_DIALOGBOX_SKILLDLG3, 0, 0, 0);//"your current skill. The items you can"
		PutAlignedString(sX, sX + m_stDialogBoxInfo[26].sSizeX, sY + 280, DRAW_DIALOGBOX_SKILLDLG3, 255, 255, 255);//"your current skill. The items you can"
		PutAlignedString(sX - 1, sX + m_stDialogBoxInfo[26].sSizeX - 1, sY + 295 - 1, DRAW_DIALOGBOX_SKILLDLG4, 0, 0, 0);//"make now with your current stuff will"
		PutAlignedString(sX, sX + m_stDialogBoxInfo[26].sSizeX, sY + 295, DRAW_DIALOGBOX_SKILLDLG4, 255, 255, 255);//"make now with your current stuff will"
		PutAlignedString(sX - 1, sX + m_stDialogBoxInfo[26].sSizeX - 1, sY + 310 - 1, DRAW_DIALOGBOX_SKILLDLG5, 0, 0, 0);//"be displayed in blue. "
		PutAlignedString(sX, sX + m_stDialogBoxInfo[26].sSizeX, sY + 310, DRAW_DIALOGBOX_SKILLDLG5, 255, 255, 255);//"be displayed in blue. "
		PutAlignedString(sX - 1, sX + m_stDialogBoxInfo[26].sSizeX - 1, sY + 340 - 1, DRAW_DIALOGBOX_SKILLDLG6, 0, 0, 0);//"Select an item you want to manufacture."
		PutAlignedString(sX, sX + m_stDialogBoxInfo[26].sSizeX, sY + 340, DRAW_DIALOGBOX_SKILLDLG6, 255, 255, 255);//"Select an item you want to manufacture."
		break;

	case 4: // Manuf: Waiting for incredients
		sX = m_stDialogBoxInfo[26].sX;
		sY = m_stDialogBoxInfo[26].sY;
		szX = m_stDialogBoxInfo[26].sSizeX;
		iAdjX = -1;
		iAdjY = -7;
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 0);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 8);
		m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iSprH]->PutSpriteFast(sX + iAdjX + 62 + 5, sY + iAdjY + 84 + 17,
			m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iSprFrame, dwTime);

		ZeroMemory(cTemp, sizeof(cTemp));
		GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cName, 0, cStr1, cStr2, cStr3);
		wsprintf(cTemp, "%s", cStr1);
		PutString(sX + iAdjX + 44 + 10 + 60 - 1, sY + iAdjY + 45 - 1, cTemp, RGB(0, 0, 0));
		PutString(sX + iAdjX + 44 + 10 + 60, sY + iAdjY + 45, cTemp, RGB(255, 255, 255));

		wsprintf(cTemp, DRAW_DIALOGBOX_SKILLDLG7 // "Skill level: %d/%d"
			, m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iSkillLimit
			, m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iMaxSkill);

		PutString(sX + iAdjX + 44 + 10 + 60 - 1, sY + iAdjY + 35 + 2 * 15 - 1, cTemp, RGB(0, 0, 0));
		PutString(sX + iAdjX + 44 + 10 + 60, sY + iAdjY + 35 + 2 * 15, cTemp, RGB(255, 255, 255));

		PutString(sX + iAdjX + 44 + 10 + 60 - 1, sY + iAdjY + 35 + 3 * 15 + 5 - 1, DRAW_DIALOGBOX_SKILLDLG8, RGB(0, 0, 0));//"Ingredients Needed:"
		PutString(sX + iAdjX + 44 + 10 + 60, sY + iAdjY + 35 + 3 * 15 + 5, DRAW_DIALOGBOX_SKILLDLG8, RGB(255, 255, 255));//"Ingredients Needed:"

		iLoc = 4;
		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[1] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName1, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[1] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[2] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName2, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[2] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[3] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName3, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[3] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[4] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName4, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[4] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[5] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName5, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[5] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[6] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName6, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[6] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}
		//Manufacture con stats
		/*MpLevel = abs(DecriptInt(m_iGizonItemUpgradeLeft) / 100);
		ContribLevel = abs(m_iContribution / 10000);

		if (MpLevel < ContribLevel) MaxLevel = MpLevel;
		else MaxLevel = ContribLevel;
		if (MaxLevel > 15) MaxLevel = 15;

		if (MaxLevel > 0)
		wsprintf(cTemp, "Max level: %d", MaxLevel);
		else wsprintf(cTemp, "Manufacture default");
		PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + 190 - 1, cTemp, RGB(0, 0, 0));
		PutString(sX + iAdjX + 44 + 20 + 60, sY + 190, cTemp, RGB(255, 255, 255));*/

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bBuildEnabled == TRUE) {
			m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 13, sY + iAdjY + 55 + 180, 2, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 45 * 1 + 13, sY + iAdjY + 55 + 180, 2, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 45 * 2 + 13, sY + iAdjY + 55 + 180, 2, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 13, sY + iAdjY + 100 + 180, 2, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 45 * 1 + 13, sY + iAdjY + 100 + 180, 2, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 45 * 2 + 13, sY + iAdjY + 100 + 180, 2, dwTime);

			if (m_stDialogBoxInfo[26].sV1 != -1) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
					m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 30 + 13, sY + iAdjY + 55 + 180,
					m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSpriteFrame, dwTime);
			}

			if (m_stDialogBoxInfo[26].sV2 != -1) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
					m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 45 * 1 + 30 + 13, sY + iAdjY + 55 + 180,
					m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSpriteFrame, dwTime);
			}

			if (m_stDialogBoxInfo[26].sV3 != -1) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
					m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 45 * 2 + 30 + 13, sY + iAdjY + 55 + 180,
					m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSpriteFrame, dwTime);
			}

			if (m_stDialogBoxInfo[26].sV4 != -1) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
					m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 30 + 13, sY + iAdjY + 100 + 180,
					m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSpriteFrame, dwTime);
			}

			if (m_stDialogBoxInfo[26].sV5 != -1) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
					m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 45 * 1 + 30 + 13, sY + iAdjY + 100 + 180,
					m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSpriteFrame, dwTime);
			}

			if (m_stDialogBoxInfo[26].sV6 != -1) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
					m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 45 * 2 + 30 + 13, sY + iAdjY + 100 + 180,
					m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSpriteFrame, dwTime);
			}

			PutAlignedString(sX - 1, sX + szX - 1, sY + iAdjY + 230 + 75 - 1, DRAW_DIALOGBOX_SKILLDLG15, 0, 0, 0);//" Click MANUFACTURE button after"
			PutAlignedString(sX, sX + szX, sY + iAdjY + 230 + 75, DRAW_DIALOGBOX_SKILLDLG15, 255, 255, 255);//" Click MANUFACTURE button after"
			PutAlignedString(sX - 1, sX + szX - 1, sY + iAdjY + 245 + 75 - 1, DRAW_DIALOGBOX_SKILLDLG16, 0, 0, 0);//"dragging ingredients in the blanks"
			PutAlignedString(sX, sX + szX, sY + iAdjY + 245 + 75, DRAW_DIALOGBOX_SKILLDLG16, 255, 255, 255);//"dragging ingredients in the blanks"
			PutAlignedString(sX - 1, sX + szX - 1, sY + iAdjY + 260 + 75 - 1, DRAW_DIALOGBOX_SKILLDLG17, 0, 0, 0);//"to manufacture above item."
			PutAlignedString(sX, sX + szX, sY + iAdjY + 260 + 75, DRAW_DIALOGBOX_SKILLDLG17, 255, 255, 255);//"to manufacture above item."

			if ((msX >= sX + iAdjX + 32) && (msX <= sX + iAdjX + 95) && (msY >= sY + iAdjY + 353) && (msY <= sY + iAdjY + 372))
				PutString_SprFont(sX + iAdjX + 25, sY + iAdjY + 330 + 23, "Back", 6, 6, 20);
			else PutString_SprFont(sX + iAdjX + 25, sY + iAdjY + 330 + 23, "Back", 0, 0, 7);

			if ((msX >= sX + iAdjX + 160) && (msX <= sX + iAdjX + 255) && (msY >= sY + iAdjY + 353) && (msY <= sY + iAdjY + 372)) {
				if (m_stDialogBoxInfo[26].cStr[4] == 1)
					PutString_SprFont(sX + iAdjX + 153, sY + iAdjY + 330 + 23, "Manufacture", 6, 6, 20);
				else PutString_SprFont(sX + iAdjX + 153, sY + iAdjY + 330 + 23, "Manufacture", 10, 10, 10);
			}
			else {
				if (m_stDialogBoxInfo[26].cStr[4] == 1)
					PutString_SprFont(sX + iAdjX + 153, sY + iAdjY + 330 + 23, "Manufacture", 0, 0, 7);
				else PutString_SprFont(sX + iAdjX + 153, sY + iAdjY + 330 + 23, "Manufacture", 10, 10, 10);
			}
		}
		else {
			PutAlignedString(sX - 1, sX + szX - 1, sY + iAdjY + 200 + 75 - 1, DRAW_DIALOGBOX_SKILLDLG18, 0, 0, 0);//"There are not enough ingredients to"
			PutAlignedString(sX, sX + szX, sY + iAdjY + 200 + 75, DRAW_DIALOGBOX_SKILLDLG18, 255, 255, 255);//"There are not enough ingredients to"
			PutAlignedString(sX - 1, sX + szX - 1, sY + iAdjY + 215 + 75 - 1, DRAW_DIALOGBOX_SKILLDLG19, 0, 0, 0);//"manufacture. Needed materials are"
			PutAlignedString(sX, sX + szX, sY + iAdjY + 215 + 75, DRAW_DIALOGBOX_SKILLDLG19, 255, 255, 255);//"manufacture. Needed materials are"
			PutAlignedString(sX - 1, sX + szX - 1, sY + iAdjY + 230 + 75 - 1, DRAW_DIALOGBOX_SKILLDLG20, 0, 0, 0);//"displayed in grey."
			PutAlignedString(sX, sX + szX, sY + iAdjY + 230 + 75, DRAW_DIALOGBOX_SKILLDLG20, 255, 255, 255);//"displayed in grey."
			if ((msX >= sX + iAdjX + 32) && (msX <= sX + iAdjX + 95) && (msY >= sY + iAdjY + 353) && (msY <= sY + iAdjY + 372))
				PutString_SprFont(sX + iAdjX + 25, sY + iAdjY + 330 + 23, "Back", 6, 6, 20);
			else PutString_SprFont(sX + iAdjX + 25, sY + iAdjY + 330 + 23, "Back", 0, 0, 7);
		}
		break;

	case 5: // Manuf: in progress
		sX = m_stDialogBoxInfo[26].sX;
		sY = m_stDialogBoxInfo[26].sY;
		iAdjX = -1;
		iAdjY = -7;

		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 0);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 8);
		m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iSprH]->PutSpriteFast(sX + iAdjX + 62 + 5, sY + iAdjY + 84 + 17,
			m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iSprFrame, dwTime);

		ZeroMemory(cTemp, sizeof(cTemp));
		GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cName, 0, cStr1, cStr2, cStr3);
		wsprintf(cTemp, "%s", cStr1);
		PutString(sX + iAdjX + 44 + 10 + 60 - 1, sY + iAdjY + 45 - 1, cTemp, RGB(0, 0, 0));
		PutString(sX + iAdjX + 44 + 10 + 60, sY + iAdjY + 45, cTemp, RGB(255, 255, 255));

		wsprintf(cTemp, DRAW_DIALOGBOX_SKILLDLG7 // "Skill level: %d/%d"
			, m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iSkillLimit, m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iMaxSkill);//"��ų ����: %d/%d"

		PutString(sX + iAdjX + 44 + 10 + 60 - 1, sY + iAdjY + 35 + 2 * 15 - 1, cTemp, RGB(0, 0, 0));
		PutString(sX + iAdjX + 44 + 10 + 60, sY + iAdjY + 35 + 2 * 15, cTemp, RGB(255, 255, 255));

		PutString(sX + iAdjX + 44 + 10 + 60 - 1, sY + iAdjY + 35 + 3 * 15 + 5 - 1, DRAW_DIALOGBOX_SKILLDLG8, RGB(0, 0, 0));//"Ingredients Needed:"
		PutString(sX + iAdjX + 44 + 10 + 60, sY + iAdjY + 35 + 3 * 15 + 5, DRAW_DIALOGBOX_SKILLDLG8, RGB(255, 255, 255));//"Ingredients Needed:"

		iLoc = 4;
		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[1] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName1, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[1] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[2] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName2, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[2] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[3] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName3, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[3] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[4] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName4, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[4] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[5] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName5, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[5] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iElementCount[6] != 0) {
			GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cElementName6, 0, cStr1, cStr2, cStr3);
			wsprintf(cTemp, "%s", cStr1);
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bElementFlag[6] == TRUE) {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(0, 255, 0));
			}
			else {
				PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + iAdjY + 35 + iLoc * 15 + 5 - 1, cTemp, RGB(0, 0, 0));
				PutString(sX + iAdjX + 44 + 20 + 60, sY + iAdjY + 35 + iLoc * 15 + 5, cTemp, RGB(255, 0, 0));
			}
			iLoc++;
		}

		/*MpLevel = abs(DecriptInt(m_iGizonItemUpgradeLeft) / 100);
		ContribLevel = abs(m_iContribution / 10000);

		if (MpLevel < ContribLevel) MaxLevel = MpLevel;
		else MaxLevel = ContribLevel;
		if (MaxLevel > 15) MaxLevel = 15;

		if (MaxLevel > 0) wsprintf(cTemp, "Max level: %d", MaxLevel);
		else wsprintf(cTemp, "Manufacture default");

		PutString(sX + iAdjX + 44 + 20 + 60 - 1, sY + 190 - 1, cTemp, RGB(0, 0, 0));
		PutString(sX + iAdjX + 44 + 20 + 60, sY + 190, cTemp, RGB(255, 255, 255));*/

		m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 13, sY + iAdjY + 55 + 180, 2, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 45 * 1 + 13, sY + iAdjY + 55 + 180, 2, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 45 * 2 + 13, sY + iAdjY + 55 + 180, 2, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 13, sY + iAdjY + 100 + 180, 2, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 45 * 1 + 13, sY + iAdjY + 100 + 180, 2, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + iAdjX + 55 + 30 + 45 * 2 + 13, sY + iAdjY + 100 + 180, 2, dwTime);

		if (m_stDialogBoxInfo[26].sV1 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSprite]->PutSpriteRGB(sX + iAdjX + 55 + 30 + 13,
				sY + iAdjY + 55 + 180, m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSpriteFrame, m_iDrawFlag, 0, 0, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV2 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSprite]->PutSpriteRGB(sX + iAdjX + 55 + 45 * 1 + 30 + 13,
				sY + iAdjY + 55 + 180, m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSpriteFrame, m_iDrawFlag, 0, 0, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV3 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSprite]->PutSpriteRGB(sX + iAdjX + 55 + 45 * 2 + 30 + 13,
				sY + iAdjY + 55 + 180, m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSpriteFrame, m_iDrawFlag, 0, 0, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV4 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSprite]->PutSpriteRGB(sX + iAdjX + 55 + 30 + 13,
				sY + iAdjY + 100 + 180, m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSpriteFrame, m_iDrawFlag, 0, 0, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV5 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSprite]->PutSpriteRGB(sX + iAdjX + 55 + 45 * 1 + 30 + 13,
				sY + iAdjY + 100 + 180, m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSpriteFrame, m_iDrawFlag, 0, 0, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV6 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSprite]->PutSpriteRGB(sX + iAdjX + 55 + 45 * 2 + 30 + 13,
				sY + iAdjY + 100 + 180, m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSpriteFrame, m_iDrawFlag, 0, 0, dwTime);
		}

		PutString(sX + iAdjX + 33 - 1, sY + iAdjY + 230 + 75 - 1, DRAW_DIALOGBOX_SKILLDLG29, RGB(0, 0, 0));//" Manufacturing the items...."
		PutString(sX + iAdjX + 33, sY + iAdjY + 230 + 75, DRAW_DIALOGBOX_SKILLDLG29, RGB(255, 255, 255));//" Manufacturing the items...."
		PutString(sX + iAdjX + 33 - 1, sY + iAdjY + 245 + 75 - 1, DRAW_DIALOGBOX_SKILLDLG30, RGB(0, 0, 0));//"Please wait until manufacture finishes."
		PutString(sX + iAdjX + 33, sY + iAdjY + 245 + 75, DRAW_DIALOGBOX_SKILLDLG30, RGB(255, 255, 255));//"Please wait until manufacture finishes."


		if ((dwTime - m_stDialogBoxInfo[26].dwT1) > 1000) {
			m_stDialogBoxInfo[26].dwT1 = dwTime;
			m_stDialogBoxInfo[26].cStr[1]++;
			if (m_stDialogBoxInfo[26].cStr[1] >= 7) m_stDialogBoxInfo[26].cStr[1] = 7;
		}

		if (m_stDialogBoxInfo[26].cStr[1] == 4) {
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BUILDITEM, NULL, NULL, NULL, NULL, m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cName);
			m_stDialogBoxInfo[26].cStr[1]++;
		}
		break;

	case 6: // Manuf: Done
		sX = m_stDialogBoxInfo[26].sX;
		sY = m_stDialogBoxInfo[26].sY;
		iAdjX = -1;
		iAdjY = -7;

		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 0);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 8);
		m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iSprH]->PutSpriteFast(sX + iAdjX + 62 + 5, sY + iAdjY + 84 + 17,
			m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_iSprFrame, dwTime);

		ZeroMemory(cTemp, sizeof(cTemp));
		GetItemName(m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_cName, 0, cStr1, cStr2, cStr3);

		wsprintf(cTemp, "%s", cStr1);
		PutString(sX + iAdjX + 44 + 10 + 60 - 1, sY + iAdjY + 45 - 1, cTemp, RGB(0, 0, 0));
		PutString(sX + iAdjX + 44 + 10 + 60, sY + iAdjY + 45, cTemp, RGB(255, 255, 255));

		if (m_stDialogBoxInfo[26].cStr[2] == 1) {
			PutString(sX + iAdjX + 33 + 11 - 1, sY + iAdjY + 200 - 45 - 1, DRAW_DIALOGBOX_SKILLDLG31, RGB(0, 0, 0));//" Success in manufacture!"
			PutString(sX + iAdjX + 33 + 11, sY + iAdjY + 200 - 45, DRAW_DIALOGBOX_SKILLDLG31, RGB(255, 255, 255));//" Success in manufacture!"

			if (m_stDialogBoxInfo[26].sV1 == DEF_ITEMTYPE_MATERIAL) {
				wsprintf(G_cTxt, DRAW_DIALOGBOX_SKILLDLG32, m_stDialogBoxInfo[26].cStr[3]);//"The purity of product is %d%%."
				PutString(sX + iAdjX + 33 + 11 - 1, sY + iAdjY + 215 - 45 - 1, G_cTxt, RGB(0, 0, 0));
				PutString(sX + iAdjX + 33 + 11, sY + iAdjY + 215 - 45, G_cTxt, RGB(255, 255, 255));
			}
			else {
				wsprintf(G_cTxt, DRAW_DIALOGBOX_SKILLDLG33, (int)m_stDialogBoxInfo[26].cStr[3] + 100);//"The completion of product is %d%%."
				PutString(sX + iAdjX + 33 - 1, sY + iAdjY + 215 - 45 - 1, G_cTxt, RGB(0, 0, 0));
				PutString(sX + iAdjX + 33, sY + iAdjY + 215 - 45, G_cTxt, RGB(255, 255, 255));
			}
		}
		else {
			PutString(sX + iAdjX + 33 + 11 - 1, sY + iAdjY + 200 - 1, DRAW_DIALOGBOX_SKILLDLG34, RGB(0, 0, 0));//"Failed on manufacture."
			PutString(sX + iAdjX + 33 + 11, sY + iAdjY + 200, DRAW_DIALOGBOX_SKILLDLG34, RGB(255, 255, 255));//"Failed on manufacture."
		}

		if ((msX >= sX + iAdjX + 32) && (msX <= sX + iAdjX + 95) && (msY >= sY + iAdjY + 353) && (msY <= sY + iAdjY + 372))
			PutString_SprFont(sX + iAdjX + 35, sY + iAdjY + 330 + 23, "Back", 6, 6, 20);
		else PutString_SprFont(sX + iAdjX + 35, sY + iAdjY + 330 + 23, "Back", 0, 0, 7);
		break;


	case 7: // Crafting, wait for incredients
		if (m_stDialogBoxInfo[26].cStr[0] != 0) {
			sX = m_stDialogBoxInfo[26].sX + iAdjX + (m_stDialogBoxInfo[26].cStr[0] - (rand() % (m_stDialogBoxInfo[26].cStr[0] * 2)));
			sY = m_stDialogBoxInfo[26].sY + iAdjY + (m_stDialogBoxInfo[26].cStr[0] - (rand() % (m_stDialogBoxInfo[26].cStr[0] * 2)));
		}
		else {
			sX = m_stDialogBoxInfo[26].sX;
			sY = m_stDialogBoxInfo[26].sY;
		}
		m_pSprite[DEF_SPRID_INTERFACE_CRAFTING]->PutSpriteFast(sX, sY, 0, dwTime);

		if (m_stDialogBoxInfo[26].sV1 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV2 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 45 * 1 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV3 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 45 * 2 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV4 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV5 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 45 * 1 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSpriteFrame, dwTime);
		}

		if (m_stDialogBoxInfo[26].sV6 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + 45 * 2 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSpriteFrame, dwTime);
		}

		if ((msX >= sX + iAdjX + 60) && (msX <= sX + iAdjX + 153) && (msY >= sY + iAdjY + 175) && (msY <= sY + iAdjY + 195))
			PutString_SprFont(sX + iAdjX + 60, sY + iAdjY + 175, "Try Now!", 16, 16, 30);
		else PutString_SprFont(sX + iAdjX + 60, sY + iAdjY + 175, "Try Now!", 6, 6, 20);
		break;

	case 8: // Crafting in progress
		if (m_stDialogBoxInfo[26].cStr[0] != 0) {
			sX = m_stDialogBoxInfo[26].sX + iAdjX + (m_stDialogBoxInfo[26].cStr[0] - (rand() % (m_stDialogBoxInfo[26].cStr[0] * 2)));
			sY = m_stDialogBoxInfo[26].sY + iAdjY + (m_stDialogBoxInfo[26].cStr[0] - (rand() % (m_stDialogBoxInfo[26].cStr[0] * 2)));
		}
		else {
			sX = m_stDialogBoxInfo[26].sX;
			sY = m_stDialogBoxInfo[26].sY;
		}
		m_pSprite[DEF_SPRID_INTERFACE_CRAFTING]->PutSpriteFast(sX, sY, 0, dwTime);

		if (m_stDialogBoxInfo[26].sV1 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSprite]->PutSpriteFast(sX + iAdjX + 55 + (1 - (rand() % 3)) + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV1]->m_sSpriteFrame, dwTime);

			if ((m_pItemList[m_stDialogBoxInfo[26].sV1]->m_cItemType == DEF_ITEMTYPE_EQUIP)
				&& (m_pItemList[m_stDialogBoxInfo[26].sV1]->m_cEquipPos == DEF_EQUIPPOS_NECK))
				m_iContributionPrice = EncriptInt(10);
		}

		if (m_stDialogBoxInfo[26].sV2 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSprite]->PutSpriteFast(sX + iAdjX + 65 + 45 * 1 + (1 - (rand() % 3)), sY + iAdjY + 40 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV2]->m_sSpriteFrame, dwTime);

			if ((m_pItemList[m_stDialogBoxInfo[26].sV2]->m_cItemType == DEF_ITEMTYPE_EQUIP)
				&& (m_pItemList[m_stDialogBoxInfo[26].sV2]->m_cEquipPos == DEF_EQUIPPOS_NECK))
				m_iContributionPrice = EncriptInt(10);
		}

		if (m_stDialogBoxInfo[26].sV3 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSprite]->PutSpriteFast(sX + iAdjX + 65 + 45 * 2 + (1 - (rand() % 3)), sY + iAdjY + 55 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV3]->m_sSpriteFrame, dwTime);

			if ((m_pItemList[m_stDialogBoxInfo[26].sV3]->m_cItemType == DEF_ITEMTYPE_EQUIP)
				&& (m_pItemList[m_stDialogBoxInfo[26].sV3]->m_cEquipPos == DEF_EQUIPPOS_NECK))
				m_iContributionPrice = EncriptInt(10);
		}

		if (m_stDialogBoxInfo[26].sV4 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSprite]->PutSpriteFast(sX + iAdjX + 65 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV4]->m_sSpriteFrame, dwTime);

			if ((m_pItemList[m_stDialogBoxInfo[26].sV4]->m_cItemType == DEF_ITEMTYPE_EQUIP)
				&& (m_pItemList[m_stDialogBoxInfo[26].sV4]->m_cEquipPos == DEF_EQUIPPOS_NECK))
				m_iContributionPrice = EncriptInt(10);
		}

		if (m_stDialogBoxInfo[26].sV5 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSprite]->PutSpriteFast(sX + iAdjX + 65 + 45 * 1 + (1 - (rand() % 3)), sY + iAdjY + 115 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV5]->m_sSpriteFrame, dwTime);

			if ((m_pItemList[m_stDialogBoxInfo[26].sV5]->m_cItemType == DEF_ITEMTYPE_EQUIP)
				&& (m_pItemList[m_stDialogBoxInfo[26].sV5]->m_cEquipPos == DEF_EQUIPPOS_NECK))
				m_iContributionPrice = EncriptInt(10);
		}

		if (m_stDialogBoxInfo[26].sV6 != -1) {
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT +
				m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSprite]->PutSpriteFast(sX + iAdjX + 75 + 45 * 2 + (1 - (rand() % 3)), sY + iAdjY + 100 + (1 - (rand() % 3)),
				m_pItemList[m_stDialogBoxInfo[26].sV6]->m_sSpriteFrame, dwTime);

			if ((m_pItemList[m_stDialogBoxInfo[26].sV6]->m_cItemType == DEF_ITEMTYPE_EQUIP)
				&& (m_pItemList[m_stDialogBoxInfo[26].sV6]->m_cEquipPos == DEF_EQUIPPOS_NECK))
				m_iContributionPrice = EncriptInt(10);
		}
		PutString_SprFont(sX + iAdjX + 60, sY + iAdjY + 175, "Creating...", 20, 6, 6);

		if ((dwTime - m_stDialogBoxInfo[26].dwT1) > 1000) {
			m_stDialogBoxInfo[26].dwT1 = dwTime;
			m_stDialogBoxInfo[26].cStr[1]++;
		}

		if (m_stDialogBoxInfo[26].cStr[1] >= 5) { //m_pDispCraftItemList
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CRAFTITEM, NULL, NULL, NULL, NULL, NULL);
			DisableDialogBox(26);
			PlaySound('E', 42, 0);
		}
		break;
	}
}

void CGame::UpdateScreen_OnLoading_Progress()
{
	int fix_y = 430;

	if (c_reso->IsResolution() == C800x600)
	{
		fix_y = 550;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		fix_y = 718;
	}

	m_DDraw.ClearBackB4();
	if(c_reso->IsResolution() == C640x480)
		m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, 0);
	else if (c_reso->IsResolution() == C800x600)
		m_pSprite[SPRID_BACKGROUND + 1]->PutSpriteFast(0, 0, 0, 0);
	else if (c_reso->IsResolution() == C1024x768)
		m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, 0);
	/*if (!bOnGame)
	{
	if (c_reso->IsResolution() == C640x480)	DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND640, 0, 0, 0, TRUE); else if (c_reso->IsResolution() == C800x600) DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND800, 0, 0, 0, TRUE); else if (c_reso->IsResolution() == C1024x768) DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND1024, 0, 0, 0, TRUE);
	}*/

	int x = 10;
	int y1 = 600 - 50;

	DrawShadow_Box(x, y1, x + 100, y1 + 25);
	DrawShadowMenu_DialogBordersNoTile(x, y1, 100, 25);

	int iPorc = (m_cLoading * 100) / 100;

	for (int a = 0; a < iPorc; a++)
	{
		for (int b = 0; b < 24; b++)
			m_DDraw.PutPixel(x + 1 + (a), y1 + 1 + (b), 158, 18, 18);
	}

	wsprintf(G_cTxt, "%d%%", (int)m_cLoading);
	PutCenterString_SpriteFont(x, x + 100, fix_y + 4, G_cTxt, 240, 240, 240);
	m_DDraw.iFlip();
}


void CGame::DrawShadowMenu_DialogBordersNoTile(short sX, short sY, short szX, short szY)
{
	DrawDialogShadowPixels(1, szX, sX, sY);
	DrawDialogShadowPixels(1, szX, sX, sY + szY);
	DrawDialogShadowPixels(2, szY, sX, sY);
	DrawDialogShadowPixels(2, szY + 1, sX + szX, sY);
}




void CGame::DrawShadow_Box(short x, short y, short x2, short y2)
{
	m_DDraw.DrawShadowBox(x, y, x2, y2);
	m_DDraw.DrawShadowBox(x, y, x2, y2);
}


BOOL CGame::_bCheckDlgBoxClick(short msX, short msY)
{
	int i;
	char         cDlgID;
	m_DInput.m_sZ = 0;

	for (i = 0; i < DEF_MAXDIALOGBOX; i++) {
		if (m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i] != NULL) {
			cDlgID = m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i];
			if ((m_stDialogBoxInfo[cDlgID].sX < msX) && ((m_stDialogBoxInfo[cDlgID].sX + m_stDialogBoxInfo[cDlgID].sSizeX) > msX) &&
				(m_stDialogBoxInfo[cDlgID].sY < msY) && ((m_stDialogBoxInfo[cDlgID].sY + m_stDialogBoxInfo[cDlgID].sSizeY) > msY)) {

				switch (cDlgID) {
					case 1: DlgBoxClick_Character(msX, msY); break;
					case 2: DlgBoxClick_Inventory(msX, msY); break;
					case 3: DlgBoxClick_Magic(msX, msY); break;
					case 4: DlgBoxClick_ItemDrop(msX, msY); break;
					case 5: DlgBoxClick_ChangeInt(msX, msY); break;
					case 6: DlgBoxClick_WarningMsg(msX, msY); break;
					case 7: DlgBoxClick_GuildMenu(msX, msY); break;
					case 8: DlgBoxClick_GuildOp(msX, msY); break;
					case 9: DlgBoxClick_GuideMap(msX, msY); break;
					case 10: DlgBoxClick_Chat(msX, msY); break;
					case 11: DlgBoxClick_Shop(msX, msY); break;
					case 12: DlgBoxClick_LevelUpSettings(msX, msY); break;
					case 13: DlgBoxClick_CityhallMenu(msX, msY); break;
					case 14: DlgBoxClick_Bank(msX, msY); break;
					case 15: DlgBoxClick_Skill(msX, msY); break;
					case 16: DlgBoxClick_MagicShop(msX, msY); break;
					case 18: DlgBoxClick_Text(msX, msY); break;
					case 19: DlgBoxClick_SysMenu(msX, msY); break;
					case 20: DlgBoxClick_NpcActionQuery(msX, msY); break;
					case 21: DlgBoxClick_NpcTalk(msX, msY); break;
					case 23: DlgBoxClick_ItemSellorRepair(msX, msY); break;
					case 24: DlgBoxClick_Fish(msX, msY); break;
					case 25: DlgBoxClick_ShutDownMsg(msX, msY); break;
					case 26: DlgBoxClick_SkillDlg(msX, msY); break;
					case 27: DlgBoxClick_Exchange(msX, msY); break;
					case 28: DlgBoxClick_Quest(msX, msY); break;
					case 30: //DlgBoxClick_IconPannel(msX, msY); break;
						if (c_reso->IsResolution() == C640x480) 
							DlgBoxClick_IconPannel(msX, msY); 
						else if (c_reso->IsResolution() == C800x600) 
							DlgBoxClick_IconPannel800x600(msX, msY);
						else if (c_reso->IsResolution() == C1024x768)
							DlgBoxClick_IconPannel1024x768(msX, msY);
						break;
					case 31: DlgBoxClick_SellList(msX, msY); break;
					case 32: DlgBoxClick_Party(msX, msY); break;
					case 33: DlgBoxClick_CrusadeJob(msX, msY); break;
					case 34: DlgBoxClick_ItemUpgrade(msX, msY); break;
					case 35: DlgBoxClick_Help(msX, msY); break;
					case 36: DlgBoxClick_Commander(msX, msY); break;
					case 37: DlgBoxClick_Constructor(msX, msY); break;
					case 38: DlgBoxClick_Soldier(msX, msY); break;
					case 40: DlgBoxClick_Slates(msX, msY); break;
					case 41: DlgBoxClick_ConfirmExchange(msX, msY); break;
					case 42: DlgBoxClick_ChangeStatsMajestic(msX, msY); break;
					case 43: DlgBoxClick_FriendList(msX, msY); break;
					case 44: if (BigBar == 1) DlgBoxClick_IconPannel3(msX, msY); break;
					case 45: break;
					case 46: DlgBoxClick_QuestList(msX, msY); break;
					case 47: DlgBoxClick_Achivements(msX, msY); break;
					case 48: DlgBoxClick_Barrita(msX, msY); break;
					case 49: DlgBoxClick_CharSell(msX, msY); break;
					case 50: DlgBoxClick_Resurect(msX, msY); break;
					case 51: DlgBoxClick_CMDHallMenu(msX, msY); break;
					case 52: DlgBoxClick_NewPanel(msX, msY); break;
					case 53: DlgBoxClick_NewPanelConfirmation(msX, msY); break;
					case 54: DlgBoxClick_OpenCharSell(msX, msY); break;
					case 55: DlgBoxClick_Event(msX, msY); break;
					case 56: DlgBoxClick_Status(msX, msY); break;
					case 57: DlgBoxClick_Coins(msX, msY); break;
					case 58: DlgBoxClick_TradeItems(msX, msY); break;
					case 59: DlgBoxClick_EKPKLog(msX, msY); break;
					case 60: DlgBoxClick_PurchaseAssasainsPoints(msX, msY); break;
					case 61: DlgBoxClick_RankLevelUpSettings(msX, msY); break;
					case 72: click_enchanting(msX, msY); break;
					case 73: click_rebirth(msX, msY); break;
					case 74: click_requestrevive(msX, msY); break;
					case 75: click_top10(msX, msY); break;
					case 76: DlgBoxClick_Market(msX, msY); break;
					case 77: click_questlist(msX, msY); break;
					case 78: click_charquests(msX, msY); break;
					case 79: click_trades(msX, msY); break;
					case 80: click_confirm(msX, msY); break;
				}
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CGame::_bCheckDlgBoxDoubleClick(short msX, short msY)
{
	int i;
	char cDlgID;

	for (i = 0; i < DEF_MAXDIALOGBOX; i++) {
		if (m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i] != NULL) {
			cDlgID = m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i];
			if ((m_stDialogBoxInfo[cDlgID].sX < msX) && ((m_stDialogBoxInfo[cDlgID].sX + m_stDialogBoxInfo[cDlgID].sSizeX) > msX) &&
				(m_stDialogBoxInfo[cDlgID].sY < msY) && ((m_stDialogBoxInfo[cDlgID].sY + m_stDialogBoxInfo[cDlgID].sSizeY) > msY)) {

				switch (cDlgID) {
					case 1: DlbBoxDoubleClick_Character(msX, msY); break;
					case 2: DlbBoxDoubleClick_Inventory(msX, msY); break;
					case 9: DlbBoxDoubleClick_GuideMap(msX, msY); break;
				}
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CGame::bDlgBoxPress_Inventory(short msX, short msY)
{
	int i;
	char  cItemID;
	short sX, sY, x1, x2, y1, y2;

	if (m_bIsDialogEnabled[2] == FALSE) return FALSE;
	if (m_bIsDialogEnabled[17] == TRUE) return FALSE;
	if (m_bIsDialogEnabled[4] == TRUE) return FALSE;

	sX = m_stDialogBoxInfo[2].sX;
	sY = m_stDialogBoxInfo[2].sY;

	if (m_bCtrlPressed)
	{
		for (i = 0; i < DEF_MAXITEMS; i++)
		{
			if (m_cItemOrder[DEF_MAXITEMS - 1 - i] == -1) continue;
			cItemID = m_cItemOrder[DEF_MAXITEMS - 1 - i];
			if (m_pItemList[cItemID] == NULL) continue;

			int magicspr = DEF_SPRID_ITEMPACK_PIVOTPOINT;

			m_pSprite[magicspr + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + 32 + m_pItemList[cItemID]->m_sX, sY + 44 + m_pItemList[cItemID]->m_sY, m_pItemList[cItemID]->m_sSpriteFrame);
			// Order
			x1 = (short)m_pSprite[magicspr + m_pItemList[cItemID]->m_sSprite]->m_rcBound.left;
			y1 = (short)m_pSprite[magicspr + m_pItemList[cItemID]->m_sSprite]->m_rcBound.top;
			x2 = (short)m_pSprite[magicspr + m_pItemList[cItemID]->m_sSprite]->m_rcBound.right;
			y2 = (short)m_pSprite[magicspr + m_pItemList[cItemID]->m_sSprite]->m_rcBound.bottom;

			if ((m_bIsItemDisabled[cItemID] == FALSE) && (m_bIsItemEquipped[cItemID] == FALSE) && (msX > x1) && (msX < x2) && (msY > y1) && (msY < y2))
			{
				if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EQUIP)
				{
					m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
					m_stMCursor.sSelectedObjectID = (short)cItemID;
					bItemDrop_Character();
					m_stMCursor.cSelectedObjectType = NULL;
					m_stMCursor.sSelectedObjectID = NULL;
				}
			}
		}

		return TRUE;
	}

	for (i = 0; i < DEF_MAXITEMS; i++) {
		if (m_cItemOrder[DEF_MAXITEMS - 1 - i] != -1) {
			cItemID = m_cItemOrder[DEF_MAXITEMS - 1 - i];

			if (m_pItemList[cItemID] != NULL) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + 32 + m_pItemList[cItemID]->m_sX,
					sY + 44 + m_pItemList[cItemID]->m_sY, m_pItemList[cItemID]->m_sSpriteFrame);
				x1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.left;
				y1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.top;
				x2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.right;
				y2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.bottom;

				if ((m_bIsItemDisabled[cItemID] == FALSE) && (m_bIsItemEquipped[cItemID] == FALSE) && (msX > x1) && (msX < x2) && (msY > y1) && (msY < y2)) {
					if (m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_bCheckCollison(sX + 32 + m_pItemList[cItemID]->m_sX, sY + 44 + m_pItemList[cItemID]->m_sY, m_pItemList[cItemID]->m_sSpriteFrame, msX, msY) == TRUE) {
						_SetItemOrder(0, cItemID);
						if ((m_bIsGetPointingMode == TRUE) && (DecriptInt(m_iPointCommandType) < 100) && (DecriptInt(m_iPointCommandType) >= 0)
							&& (m_pItemList[DecriptInt(m_iPointCommandType)] != NULL)
							&& (m_pItemList[DecriptInt(m_iPointCommandType)]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE_DEST)
							&& (DecriptInt(m_iPointCommandType) != cItemID)) {
							PointCommandHandler(NULL, NULL, cItemID);
							m_bIsGetPointingMode = FALSE;
						}
						else {
							m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
							m_stMCursor.sSelectedObjectID = cItemID;
							m_stMCursor.sDistX = msX - x1 + (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_sPivotX;
							m_stMCursor.sDistY = msY - y1 + (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_sPivotY;
						}
						return TRUE;
					}
				}
			}
		}
	}
	return FALSE;
}

void CGame::_SetItemOrder(char cWhere, char cItemID)
{
	int i;

	switch (cWhere) {
		case 0:
			for (i = 0; i < DEF_MAXITEMS; i++) {
				if (m_cItemOrder[i] == cItemID)
					m_cItemOrder[i] = -1;
			}

			for (i = 1; i < DEF_MAXITEMS; i++) {
				if ((m_cItemOrder[i - 1] == -1) && (m_cItemOrder[i] != -1)) {
					m_cItemOrder[i - 1] = m_cItemOrder[i];
					m_cItemOrder[i] = -1;
				}
			}

			for (i = 0; i < DEF_MAXITEMS; i++) {
				if (m_cItemOrder[i] == -1) {
					m_cItemOrder[i] = cItemID;
					return;
				}
			}
			break;
	}
}

BOOL CGame::_bCheckDraggingItemRelease(short msX, short msY)
{
	int i;
	char         cDlgID;

	for (i = 0; i < DEF_MAXDIALOGBOX; i++) {
		if (m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i] != NULL) {
			cDlgID = m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i];
			if ((m_stDialogBoxInfo[cDlgID].sX < msX) && ((m_stDialogBoxInfo[cDlgID].sX + m_stDialogBoxInfo[cDlgID].sSizeX) > msX)
				&& (m_stDialogBoxInfo[cDlgID].sY < msY) && ((m_stDialogBoxInfo[cDlgID].sY + m_stDialogBoxInfo[cDlgID].sSizeY) > msY)) {

				EnableDialogBox(cDlgID, NULL, NULL, NULL);
				switch (cDlgID) {
					case 1: bItemDrop_Character(); break;
					case 2: bItemDrop_Inventory(msX, msY); break;
					case 14: bItemDrop_Bank(msX, msY); break;
					case 26: bItemDrop_SkillDialog(); break;
					case 27: bItemDrop_ExchangeDialog(msX, msY); break;
					case 31: bItemDrop_SellList(msX, msY); break;
					case 34: bItemDrop_ItemUpgrade(); break;
					case 40: bItemDrop_Slates(); break;
					case 72: bItemDrop_enchanting(); break;
					case 49: bSetItemToSellList(msX, msY); break;
					case 48: bItemDrop_Shortcut(msX, msY); break;
					case 76: bItemDrop_Market(); break;
				}
				return TRUE;
			}
		}
	}

	if (!LostShortCut) bItemDrop_ExternalScreen((char)m_stMCursor.sSelectedObjectID, msX, msY);
	else LostShortCut = FALSE;
	return FALSE;
}

void CGame::bItemDrop_ExternalScreen(char cItemID, short msX, short msY)
{
	char  cName[21];
	short sType, tX, tY;
	int iStatus;

	if (bCheckItemOperationEnabled(cItemID) == FALSE) return;

	//added resolution Lalo
	int res_x = 0;
	int res_y = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 799;
		res_y = 599;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1023;
		res_y = 767;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 639;
		res_y = 479;
	}

	if ((m_sMCX != 0) && (m_sMCY != 0) && (abs(m_sPlayerX - m_sMCX) <= 8) && (abs(m_sPlayerY - m_sMCY) <= 8)) {
		ZeroMemory(cName, sizeof(cName));
		m_pMapData->bGetOwner(m_sMCX, m_sMCY, cName, &sType, &iStatus, &m_wCommObjectID);
		
		//DecriptString(m_cPlayerName);
		if (memcmp(m_cPlayerName, cName, 10) == 0) {}
		else {
			if (((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_ARROW))
				&& (m_pItemList[cItemID]->m_dwCount > 1)) {
				m_stDialogBoxInfo[17].sX = msX - 140;
				m_stDialogBoxInfo[17].sY = msY - 70;
				if (m_stDialogBoxInfo[17].sY < 0) m_stDialogBoxInfo[17].sY = 0;
				m_stDialogBoxInfo[17].sV1 = m_sMCX;
				m_stDialogBoxInfo[17].sV2 = m_sMCY;
				m_stDialogBoxInfo[17].sV3 = sType;
				m_stDialogBoxInfo[17].sV4 = m_wCommObjectID;
				ZeroMemory(m_stDialogBoxInfo[17].cStr, sizeof(m_stDialogBoxInfo[17].cStr));
				if (sType < 10) memcpy(m_stDialogBoxInfo[17].cStr, cName, 10);
				else GetNpcName(sType, m_stDialogBoxInfo[17].cStr);
				EnableDialogBox(17, cItemID, m_pItemList[cItemID]->m_dwCount, NULL);
			}
			else {
				switch (sType) {
					case 1:
					case 2:
					case 3:
					case 4:
					case 5:
					case 6:
						if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
						EnableDialogBox(20, 1, cItemID, sType);
						m_stDialogBoxInfo[20].sV3 = 1;
						m_stDialogBoxInfo[20].sV4 = m_wCommObjectID;
						m_stDialogBoxInfo[20].sV5 = m_sMCX;
						m_stDialogBoxInfo[20].sV6 = m_sMCY;

						tX = msX - 117;
						tY = msY - 50;
						if (tX < 0) tX = 0;
						if ((tX + 235) > res_x) tX = res_x - 235;
						if (tY < 0) tY = 0;
						if ((tY + 100) > res_y) tY = res_y - 100;
						m_stDialogBoxInfo[20].sX = tX;
						m_stDialogBoxInfo[20].sY = tY;

						ZeroMemory(m_stDialogBoxInfo[20].cStr, sizeof(m_stDialogBoxInfo[20].cStr));
						strcpy(m_stDialogBoxInfo[20].cStr, cName);
						break;

					case 20: // Howard
						if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
						EnableDialogBox(20, 3, cItemID, sType);
						m_stDialogBoxInfo[20].sV3 = 1;
						m_stDialogBoxInfo[20].sV4 = m_wCommObjectID; // v1.4
						m_stDialogBoxInfo[20].sV5 = m_sMCX;
						m_stDialogBoxInfo[20].sV6 = m_sMCY;

						tX = msX - 117;
						tY = msY - 50;
						if (tX < 0) tX = 0;
						if ((tX + 235) > res_x) tX = res_x - 235;
						if (tY < 0) tY = 0;
						if ((tY + 100) > res_y) tY = res_y - 100;
						m_stDialogBoxInfo[20].sX = tX;
						m_stDialogBoxInfo[20].sY = tY;

						ZeroMemory(m_stDialogBoxInfo[20].cStr, sizeof(m_stDialogBoxInfo[20].cStr));
						GetNpcName(sType, m_stDialogBoxInfo[20].cStr);
						break;

					case 15: // ShopKeeper-W
					case 24: // Tom
						if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
						EnableDialogBox(20, 2, cItemID, sType);
						m_stDialogBoxInfo[20].sV3 = 1;
						m_stDialogBoxInfo[20].sV4 = m_wCommObjectID; // v1.4
						m_stDialogBoxInfo[20].sV5 = m_sMCX;
						m_stDialogBoxInfo[20].sV6 = m_sMCY;

						tX = msX - 117;
						tY = msY - 50;
						if (tX < 0) tX = 0;
						if ((tX + 235) > res_x) tX = res_x - 235;
						if (tY < 0) tY = 0;
						if ((tY + 100) > res_y) tY = res_y - 100;
						m_stDialogBoxInfo[20].sX = tX;
						m_stDialogBoxInfo[20].sY = tY;

						ZeroMemory(m_stDialogBoxInfo[20].cStr, sizeof(m_stDialogBoxInfo[20].cStr));
						GetNpcName(sType, m_stDialogBoxInfo[20].cStr);
						break;

					default:
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GIVEITEMTOCHAR, cItemID, 1, m_sMCX, m_sMCY, m_pItemList[cItemID]->m_cName);
						break;
				}
			}
			m_bIsItemDisabled[cItemID] = TRUE;
		}
		//EncriptString(m_cPlayerName);
	}
	else {
		if (((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_ARROW))
			&& (m_pItemList[cItemID]->m_dwCount > 1)) {
			m_stDialogBoxInfo[17].sX = msX - 140;
			m_stDialogBoxInfo[17].sY = msY - 70;
			if (m_stDialogBoxInfo[17].sY < 0)		m_stDialogBoxInfo[17].sY = 0;
			m_stDialogBoxInfo[17].sV1 = NULL;
			m_stDialogBoxInfo[17].sV2 = NULL;
			m_stDialogBoxInfo[17].sV3 = NULL;
			m_stDialogBoxInfo[17].sV4 = NULL;
			ZeroMemory(m_stDialogBoxInfo[17].cStr, sizeof(m_stDialogBoxInfo[17].cStr));
			EnableDialogBox(17, cItemID, m_pItemList[cItemID]->m_dwCount, NULL);
		}
		else {
			if (_ItemDropHistory(m_pItemList[cItemID]->m_cName)) {
				m_stDialogBoxInfo[4].sX = msX - 140;
				m_stDialogBoxInfo[4].sY = msY - 70;
				if (m_stDialogBoxInfo[4].sY < 0)	m_stDialogBoxInfo[4].sY = 0;
				m_stDialogBoxInfo[4].sV1 = NULL;
				m_stDialogBoxInfo[4].sV2 = NULL;
				m_stDialogBoxInfo[4].sV3 = 1;
				m_stDialogBoxInfo[4].sV4 = NULL;
				m_stDialogBoxInfo[4].sV5 = cItemID;
				ZeroMemory(m_stDialogBoxInfo[4].cStr, sizeof(m_stDialogBoxInfo[4].cStr));
				EnableDialogBox(4, cItemID, m_pItemList[cItemID]->m_dwCount, NULL);
			}
			else bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_COMMON_ITEMDROP, NULL, cItemID, 1, NULL, m_pItemList[cItemID]->m_cName);
		}
		m_bIsItemDisabled[cItemID] = TRUE;
	}
}

void CGame::CommonEventHandler(char * pData)
{
	WORD * wp, wEventType;
	short * sp, sX, sY, sV1, sV2, sV3, sV4;
	char * cp;

	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	wEventType = *wp;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	sX = *sp;
	cp += 2;

	sp = (short *)cp;
	sY = *sp;
	cp += 2;

	sp = (short *)cp;
	sV1 = *sp;
	cp += 2;

	sp = (short *)cp;
	sV2 = *sp;
	cp += 2;

	sp = (short *)cp;
	sV3 = *sp;
	cp += 2;

	sp = (short *)cp;
	sV4 = *sp;
	cp += 2;

	switch (wEventType) {
		case CLIENT_COMMON_ITEMDROP:
			if ((sV1 == 6) && (sV2 == 0)) bAddNewEffect(4, sX, sY, NULL, NULL, 0);
			m_pMapData->bSetItem(sX, sY, sV1, sV2, (char)sV3);
			break;

		case CLIENT_COMMON_SETITEM:
			m_pMapData->bSetItem(sX, sY, sV1, sV2, (char)sV3, FALSE); // v1.4 color
			break;

		case CLIENT_COMMON_MAGIC:
			bAddNewEffect(sV3, sX, sY, sV1, sV2, 0, sV4);
			break;

		case CLIENT_COMMON_CLEARGUILDNAME:
			ClearGuildNameList();
			break;
	}
}

void CGame::ClearGuildNameList()
{
	for (int i = 0; i < DEF_MAXGUILDNAMES; i++) {
		m_stGuildName[i].dwRefTime = 0;
		m_stGuildName[i].iGuildRank = -1;
		ZeroMemory(m_stGuildName[i].cCharName, sizeof(m_stGuildName[i].cCharName));
		ZeroMemory(m_stGuildName[i].cGuildName, sizeof(m_stGuildName[i].cGuildName));
	}
}

void CGame::InitGameSettings()
{
	int i;

	m_bForceAttack = FALSE;
	m_dwCommandTime = 0;
	//m_bHackMoveBlocked = EncriptBool(FALSE);
	m_bPackSarpadBlock = EncriptBool(FALSE);

	m_bInputStatus = FALSE;
	m_pInputBuffer = NULL;

	m_iPDBGSdivX = 0;
	m_iPDBGSdivY = 0;
	m_bIsRedrawPDBGS = TRUE;

	m_iCameraShakingDegree = 0;

	m_cCommand = DEF_OBJECTSTOP;
	m_cCommandCount = 0;

	m_bIsGetPointingMode = FALSE;
	m_iPointCommandType = EncriptInt(-1);

	m_bIsCombatMode = EncriptBool(FALSE);
	m_bRunningMode = FALSE;

	m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
	m_stMCursor.dwSelectClickTime = NULL;

	m_bSkillUsingStatus = FALSE;
	m_bItemUsingStatus = FALSE;
	m_bUsingSlate = FALSE;

	m_bIsWhetherEffect = FALSE;
	m_cWhetherEffectType = NULL;

	m_iDownSkillIndex = EncriptInt(-1);
	m_stDialogBoxInfo[15].bFlag = FALSE;

	m_bIsConfusion = EncriptBool(FALSE);

	m_iIlusionOwnerH = EncriptInt(0);
	m_cIlusionOwnerType = NULL;

	m_iDrawFlag = 0;
	m_sDrawFlag = 0;
	m_bDrawFlagDir2 = FALSE;
	m_bDrawFlagDir = FALSE;
	m_bIsCrusadeMode = FALSE;
	m_iCrusadeDuty = DecriptInt(0);

	FuryDayMode = FALSE;
	m_iNetLagCount = NULL;

	m_dwEnvEffectTime = timeGetTime();

	for (i = 0; i < DEF_MAXGUILDNAMES; i++) {
		m_stGuildName[i].dwRefTime = 0;
		m_stGuildName[i].iGuildRank = -1;
		ZeroMemory(m_stGuildName[i].cCharName, sizeof(m_stGuildName[i].cCharName));
		ZeroMemory(m_stGuildName[i].cGuildName, sizeof(m_stGuildName[i].cGuildName));
	}

	for (i = 0; i < DEF_MAXDIALOGBOX; i++)
		m_bIsDialogEnabled[i] = FALSE;

	for (i = 0; i < DEF_MAXDIALOGBOX - 3; i++)
		m_cDialogBoxOrder[i] = NULL;

	for (i = 0; i < DEF_MAXEFFECTS; i++) {
		if (m_pEffectList[i] != NULL) delete m_pEffectList[i];
		m_pEffectList[i] = NULL;
	}

	for (i = 0; i < DEF_MAXCHATMSGS; i++) {
		if (m_pChatMsgList[i] != NULL) delete m_pChatMsgList[i];
		m_pChatMsgList[i] = NULL;
	}

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++) {
		if (m_pChatScrollList[i] != NULL) delete m_pChatScrollList[i];
		m_pChatScrollList[i] = NULL;
	}

	for (i = 0; i < DEF_MAXWHISPERMSG; i++) {
		if (m_pWhisperMsg[i] != NULL) delete m_pWhisperMsg[i];
		m_pWhisperMsg[i] = NULL;
	}

	ZeroMemory(m_cLocation, sizeof(m_cLocation));

	ZeroMemory(m_cGuildName, sizeof(m_cGuildName));
	m_iGuildRank = EncriptInt(-1);

	for (i = 0; i < 100; i++) {
		m_stGuildOpList[i].cOpMode = NULL;
		ZeroMemory(m_stGuildOpList[i].cName, sizeof(m_stGuildOpList[i].cName));
	}

	for (i = 0; i < 6; i++) {
		ZeroMemory(m_stEventHistory[i].cTxt, sizeof(m_stEventHistory[i].cTxt));
		m_stEventHistory[i].dwTime = G_dwGlobalTime;

		ZeroMemory(m_stEventHistory2[i].cTxt, sizeof(m_stEventHistory2[i].cTxt));
		m_stEventHistory2[i].dwTime = G_dwGlobalTime;
	}

	for (i = 0; i < DEF_MAXMENUITEMS; i++) {
		if (m_pItemForSaleList[i] != NULL) delete m_pItemForSaleList[i];
		m_pItemForSaleList[i] = NULL;
	}

	for (i = 0; i < DEF_MAXDIALOGBOX; i++) {
		m_stDialogBoxInfo[i].bFlag = FALSE;
		m_stDialogBoxInfo[i].sView = 0;
		m_stDialogBoxInfo[i].bIsScrollSelected = FALSE;
	}

	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pItemList[i] != NULL) {
			delete m_pItemList[i];
			m_pItemList[i] = NULL;
		}

	for (i = 0; i < DEF_MAXSELLLIST; i++) {
		m_stSellItemList[i].iIndex = -1;
		m_stSellItemList[i].iAmount = 0;
	}

	for (i = 0; i < DEF_MAXSELLITEMSLIST; i++) {
		m_stItemListToSell[i].iIndex = -1;
		m_stItemListToSell[i].iAmount = 0;
		m_stItemListToSell[i].uiPrice = 0;
		ZeroMemory(m_stItemListToSell[i].cStr1, sizeof(m_stItemListToSell[i].cStr1));
		ZeroMemory(m_stItemListToSell[i].cStr2, sizeof(m_stItemListToSell[i].cStr2));
		ZeroMemory(m_stItemListToSell[i].cStr3, sizeof(m_stItemListToSell[i].cStr3));
	}

	for (i = 0; i < DEF_MAXBANKITEMS; i++) {
		if (m_pBankList[i] != NULL) {
			delete m_pBankList[i];
			m_pBankList[i] = NULL;
		}
	}

	for (i = 0; i < DEF_MAXSELLITEMSLIST; i++) {
		if (m_pItemSellList[i] != NULL) {
			delete m_pItemSellList[i];
			m_pItemSellList[i] = NULL;
		}
	}

	for (i = 0; i < DEF_MAXMAGICTYPE; i++)
		m_cMagicMastery[i] = NULL;

	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
		m_cSkillMastery[i] = NULL;

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++) {
		if (m_pMsgTextList[i] != NULL) delete m_pMsgTextList[i];
		m_pMsgTextList[i] = NULL;

		if (m_pMsgTextList2[i] != NULL) delete m_pMsgTextList2[i];
		m_pMsgTextList2[i] = NULL;

		if (m_pAgreeMsgTextList[i] != NULL) delete m_pAgreeMsgTextList[i];
		m_pAgreeMsgTextList[i] = NULL;
	}

	for (i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
		m_stPartyMember[i].cStatus = 0;
	}

	m_iLU_Point = EncriptInt(0);
	m_cLU_Str = EncriptInt(0);
	m_cLU_Vit = EncriptInt(0);
	m_cLU_Dex = EncriptInt(0);
	m_cLU_Int = EncriptInt(0);
	m_cLU_Mag = EncriptInt(0);
	m_cLU_Char = EncriptInt(0);
	
	m_cWhetherStatus = NULL;
	m_cSalirDelChar = -1;
	//encriptando LogOut Lalito
	//m_dwLogOutCountTime = NULL;
	ConteoChangeCity = -1;
	m_dwChangeCity = NULL;
	m_dwEncriptCtO = NULL;
	m_iSuperAttackLeft = 0;
	m_bSuperAttackMode = FALSE;
	m_iFightzoneNumber = EncriptInt(0);
	ZeroMemory(m_cBGMmapName, sizeof(m_cBGMmapName));
	m_dwWOFtime = 0;

	for (i = 0; i < 3; i++) {
		m_stQuest[i].sWho = NULL;
		m_stQuest[i].sQuestType = NULL;
		m_stQuest[i].sContribution = NULL;
		m_stQuest[i].sTargetType = NULL;
		m_stQuest[i].sTargetCount = NULL;
		m_stQuest[i].sCurrentCount = NULL;
		m_stQuest[i].sX = NULL;
		m_stQuest[i].sY = NULL;
		m_stQuest[i].sRange = NULL;
		m_stQuest[i].bIsQuestCompleted = FALSE;
		ZeroMemory(m_stQuest[i].cTargetName, sizeof(m_stQuest[i].cTargetName));
	}

	m_bIsObserverMode = EncriptBool(FALSE);
	m_bIsObserverCommanded = EncriptBool(FALSE);
	m_bIsPoisoned = FALSE;
	m_bIsPrevMoveBlocked = FALSE;
	m_iPrevMoveX = -1;
	m_iPrevMoveY = -1;
	m_sDamageMove = 0;
	m_iDamageMoveAmount = EncriptInt(0);
	m_bForceDisconn = FALSE;
	m_bIsSpecialAbilityEnabled = FALSE;
	m_iSpecialAbilityType = EncriptInt(0);
	m_dwSpecialAbilitySettingTime = NULL;
	m_iSpecialAbilityTimeLeftSec = EncriptInt(0);
	m_stMCursor.cSelectedObjectType = NULL;
	m_bIsF1HelpWindowEnabled = FALSE;
	m_bIsTeleportRequested = FALSE;

	for (i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++) {
		m_stCrusadeStructureInfo[i].cType = NULL;
		m_stCrusadeStructureInfo[i].cSide = NULL;
		m_stCrusadeStructureInfo[i].sX = NULL;
		m_stCrusadeStructureInfo[i].sY = NULL;
	}

	ZeroMemory(m_cStatusMapName, sizeof(m_cStatusMapName));
	m_dwCommanderCommandRequestedTime = NULL;
	ZeroMemory(m_cTopMsg, sizeof(m_cTopMsg));
	m_iTopMsgLastSec = NULL;
	m_dwTopMsgTime = NULL;
	m_iConstructionPoint = EncriptInt(0);
	m_iWarContribution = EncriptInt(0);
	ZeroMemory(m_cTeleportMapName, sizeof(m_cTeleportMapName));
	m_iTeleportLocX = EncriptInt(-1);
	m_iTeleportLocY = EncriptInt(-1);
	ZeroMemory(m_cConstructMapName, sizeof(m_cConstructMapName));
	m_iConstructLocX = EncriptInt(-1);
	m_iConstructLocY = EncriptInt(-1);

	for (i = 0; i < DEF_MAXPORTALS; i++) {
		ZeroMemory(m_cGateMapName[i], sizeof(m_cGateMapName[i]));
		m_iGatePositX[i] = -1;
		m_iGatePositY[i] = -1;
	}

	m_bIsXmas = FALSE;

	for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
		ZeroMemory(m_stPartyMemberNameList[i].cName, sizeof(m_stPartyMemberNameList[i].cName));

	m_iGizonItemUpgradeLeft = EncriptInt(0);
	cStateChange1 = EncriptInt(0);
	cStateChange2 = EncriptInt(0);
	cStateChange3 = EncriptInt(0);
	TempMajestic = 0;
	ChangeStat = FALSE;
	TempDiscount = 0;

	m_iPartyStatus = EncriptInt(0);
	for (i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
		PartyStruct[i].iParty_sX = NULL;
		PartyStruct[i].iParty_sY = NULL;
		ZeroMemory(PartyStruct[i].PartyMapName, sizeof(PartyStruct[i].PartyMapName));
	}

	for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
		ZeroMemory(m_stPartyMemberNameList[i].cName, sizeof(m_stPartyMemberNameList[i].cName));

	bZerk = bInvi = bPfm = bPfa = bShield = FALSE;

	for (i = 0; i <= 10; i++) {
		AresdenWin[i] = 0;
		ElvineWin[i] = 0;
		Draw[i] = 0;
		LastWin[i] = 0;
	}
	//Encriptacion Cancelada
	/*TotalEvent = EncriptInt(0);
	AresdenWinEvent = EncriptInt(0);
	ElvineWinEvent = EncriptInt(0);
	DrawEvents = EncriptInt(0);*/
	TotalEvent = 0;
	AresdenWinEvent = 0;
	ElvineWinEvent = 0;
	DrawEvents = 0;



	TimeMagicSelected = -1;

	for (i = 0; i <= 24; i++) ChatActive[i] = 99;

	//Capture The Flag
	CaptureTheFlagMode = FALSE;
	ElvineFlags = 0;
	AresdenFlags = 0;
	ElvineFlagStatus = FALSE;
	AresdenFlagStatus = FALSE;

	m_iTowerAresden = -1;
	m_iTowerElvine = -1;
	m_iHpReliquiaAresden = EncriptInt(-1);
	m_iHpReliquiaElvine = EncriptInt(-1);
	m_iTowerDefenseAresden = -1;
	m_iTowerDefenseElvine = -1;
	AresdenCount = EncriptInt(-1);
	ElvineCount = EncriptInt(-1);
	AssasainCount = EncriptInt(-1);

	m_iHPAres = m_iHPElv = -1;
	GolAresden = GolElvine = -1;

	//lalomerien
	MAABS = PAABS = HPREC = MPREC = DR = MR = SP = PR = DF = 0;
	Defense = Hitting = HitMag = PhysicalDamage = MagicDamage = 0;

	CandySize = RedSteeps = LowSprites = bPlayerShines = false; //false

	ReadSettingsCFG();
	MyAdminLevel = 0;
	ActiveEvent = 0;

	for (i = 0; i < DEF_MAXITEMS; i++) {
		TitleShop[i].Init = -1;
		TitleShop[i].Finish = -1;
		ZeroMemory(TitleShop[i].Title, sizeof(TitleShop[i].Title));
	}

	ItemsInExchange = EncriptInt(-1);
	ItemsInExchange2 = EncriptInt(-1);
	ExchangeErrors = FALSE;
	ExchangeError = -1;

	for (i = 0; i < DEF_MAXACHIVEMENTS; i++) {
		Achivement[i].Porcent = 0;
		Achivement[i].Active = FALSE;
	}
	AchivementsComplete = 0;
	ShowBarTotal = 0;
	ItemGround = DEF_SPRID_ITEMGROUND_PIVOTPOINT;

	// Settings
	Glares = Stars = Shadows = Colors = Trees = Steeps = Afks = ShadowsBox = TRUE;
	//CandySize = RedSteeps = LowSprites = FALSE;
	NewAchivement = FALSE;

	for (i = 0; i < 9; i++) NewShortcuts[i] = -1;

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++) {
		if (m_pEnemyKillList[i] != NULL) delete m_pEnemyKillList[i];
		m_pEnemyKillList[i] = NULL;
	}

	m_stDialogBoxInfo[59].sV1 = 2;

	for (i = 0; i < 10; i++) {
		ZeroMemory(TopEvent[i].CharName, sizeof(TopEvent[i].CharName));
		TopEvent[i].Kills = -1;
		TopEvent[i].Death = -1;
		TopEvent[i].Nivel = -1;
	}
	MyKills = MyDeaths = MyNivel = 0;;
	ShowTop = TRUE;
}

void CGame::_GetHairColorRGB(int iColorType, int * pR, int * pG, int * pB)
{
	switch (iColorType) {
		case 0: *pR = 14; *pG = -5; *pB = -5; break; // rouge fonc�
		case 1: *pR = 20; *pG = 0; *pB = 0; break; // Orange
		case 2: *pR = 22; *pG = 13; *pB = -10; break; // marron tres clair
		case 3: *pR = 0; *pG = 10; *pB = 0; break; // vert
		case 4: *pR = 0; *pG = 0; *pB = 22; break; // Bleu flashy
		case 5: *pR = -5; *pG = -5; *pB = 15; break; // Bleu fonc�
		case 6: *pR = 15; *pG = -5; *pB = 16; break; //Mauve
		case 7: *pR = -6; *pG = -6; *pB = -6; break; // Noir
		case 8: *pR = 10; *pG = 3; *pB = 10; break;
		case 9: *pR = 10; *pG = 3; *pB = -10; break;
		case 10: *pR = -10; *pG = 3; *pB = 10; break;
		case 11: *pR = 10; *pG = 3; *pB = 20; break;
		case 12: *pR = 21; *pG = 3; *pB = 3; break;
		case 13: *pR = 3; *pG = 3; *pB = 25; break;
		case 14: *pR = 3; *pG = 11; *pB = 3; break;
		case 15: *pR = 6; *pG = 8; *pB = 0; break;
	}
}

void CGame::DlgBoxClick_GuildMenu(short msX, short msY)
{
	short sX, sY;
	char cTemp[21];
	int iAdjX, iAdjY;
	sX = m_stDialogBoxInfo[7].sX;
	sY = m_stDialogBoxInfo[7].sY;

	iAdjX = -13;
	iAdjY = 30;

	switch (m_stDialogBoxInfo[7].cMode) {
		case 0:
			if ((msX > sX + iAdjX + 80) && (msX < sX + iAdjX + 210) && (msY > sY + iAdjY + 63) && (msY < sY + iAdjY + 78)) {
				if (DecriptInt(m_iGuildRank) != -1) return;
				if (m_iCharisma < 10) return;
				if (DecriptInt(m_iLevel) < 20) return;
				if (m_bIsCrusadeMode) return;
				EndInputString();
				//DecriptString(m_cGuildName);//agregado lalo
				StartInputString(sX + 75, sY + 140, 21, m_cGuildName);
				//EncriptString(m_cGuildName);

				m_stDialogBoxInfo[7].cMode = 1;
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 72) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 82) && (msY < sY + iAdjY + 99)) {
				if (DecriptInt(m_iGuildRank) != 0) return;
				if (m_bIsCrusadeMode) return;
				m_stDialogBoxInfo[7].cMode = 5;
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 61) && (msX < sX + iAdjX + 226) && (msY > sY + iAdjY + 103) && (msY < sY + iAdjY + 120)) {
				m_stDialogBoxInfo[7].cMode = 9;
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 60) && (msX < sX + iAdjX + 227) && (msY > sY + iAdjY + 123) && (msY < sY + iAdjY + 139)) {
				m_stDialogBoxInfo[7].cMode = 11;
				PlaySound('E', 14, 5);
			}

			if (DecriptInt(m_iFightzoneNumber) < 0) break;
			if ((msX > sX + iAdjX + 72) && (msX < sX + iAdjX + 228) && (msY > sY + iAdjY + 143) && (msY < sY + iAdjY + 159)) {
				if (DecriptInt(m_iGuildRank) != 0) return;
				if (DecriptInt(m_iFightzoneNumber) == 0)	m_stDialogBoxInfo[7].cMode = 13;
				else  m_stDialogBoxInfo[7].cMode = 19;
				PlaySound('E', 14, 5);
			}

			if (DecriptInt(m_iGuildRank) != 0 && DecriptInt(m_iGuildRank) != -1) {
				if ((msX > sX + iAdjX + 60) && (msX < sX + iAdjX + 227) && (msY > sY + iAdjY + 163) && (msY < sY + iAdjY + 179)) {
					m_stDialogBoxInfo[7].cMode = 23;
					PlaySound('E', 14, 5);
				}
			}
			break;

		case 1:
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
			//	DecriptString(m_cGuildName);
				if (strcmp(m_cGuildName, "NONE") == 0) return;
				if (strlen(m_cGuildName) == 0) return;
			//	EncriptString(m_cGuildName);

				bSendCommand(CLIENT_REQUEST_CREATENEWGUILD, DEF_MSGTYPE_CONFIRM, NULL, NULL, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 2;
				EndInputString();
				PlaySound('E', 14, 5);
			}

			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[7].cMode = 0;
				EndInputString();
				PlaySound('E', 14, 5);
			}
			break;

		case 3:
		case 4:
		case 7:
		case 8:
		case 10:
		case 12:
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 9:
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				ZeroMemory(cTemp, sizeof(cTemp));
				strcpy(cTemp, "GuildAdmissionTicket");
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_PURCHASEITEM, NULL, 1, NULL, NULL, cTemp);
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}

			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 11:
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				ZeroMemory(cTemp, sizeof(cTemp));
				strcpy(cTemp, "GuildSecessionTicket");
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_PURCHASEITEM, NULL, 1, NULL, NULL, cTemp);
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}

			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 5:
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Confirm
				bSendCommand(CLIENT_REQUEST_DISBANDGUILD, DEF_MSGTYPE_CONFIRM, NULL, NULL, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 6;
				PlaySound('E', 14, 5);
			}

			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Cancel
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 13:
			if ((msX > sX + iAdjX + 65) && (msX < sX + iAdjX + 137) && (msY > sY + iAdjY + 168) && (msY < sY + iAdjY + 185)) {
				bSendCommand(CLIENT_REQUEST_FIGHTZONE_RESERVE, NULL, NULL, 1, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 18;
				m_iFightzoneNumberTemp = EncriptInt(1);
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 150) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 168) && (msY < sY + iAdjY + 185)) {
				bSendCommand(CLIENT_REQUEST_FIGHTZONE_RESERVE, NULL, NULL, 2, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 18;
				m_iFightzoneNumberTemp = EncriptInt(2);
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 65) && (msX < sX + iAdjX + 137) && (msY > sY + iAdjY + 188) && (msY < sY + iAdjY + 205)) {
				bSendCommand(CLIENT_REQUEST_FIGHTZONE_RESERVE, NULL, NULL, 3, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 18;
				m_iFightzoneNumberTemp = EncriptInt(3);
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 150) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 188) && (msY < sY + iAdjY + 205)) {
				bSendCommand(CLIENT_REQUEST_FIGHTZONE_RESERVE, NULL, NULL, 4, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 18;
				m_iFightzoneNumberTemp = EncriptInt(4);
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 65) && (msX < sX + iAdjX + 137) && (msY > sY + iAdjY + 208) && (msY < sY + iAdjY + 225)) {
				bSendCommand(CLIENT_REQUEST_FIGHTZONE_RESERVE, NULL, NULL, 5, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 18;
				m_iFightzoneNumberTemp = EncriptInt(5);
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 150) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 208) && (msY < sY + iAdjY + 225)) {
				bSendCommand(CLIENT_REQUEST_FIGHTZONE_RESERVE, NULL, NULL, 6, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 18;
				m_iFightzoneNumberTemp = EncriptInt(6);
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 65) && (msX < sX + iAdjX + 137) && (msY > sY + iAdjY + 228) && (msY < sY + iAdjY + 245)) {
				bSendCommand(CLIENT_REQUEST_FIGHTZONE_RESERVE, NULL, NULL, 7, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 18;
				m_iFightzoneNumberTemp = EncriptInt(7);
				PlaySound('E', 14, 5);
			}

			if ((msX > sX + iAdjX + 150) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 228) && (msY < sY + iAdjY + 245)) {
				bSendCommand(CLIENT_REQUEST_FIGHTZONE_RESERVE, NULL, NULL, 8, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 18;
				m_iFightzoneNumberTemp = EncriptInt(8);
				PlaySound('E', 14, 5);
			}

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 14://
		case 15://
		case 16://
		case 17://
		case 21://
		case 22://
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 23:
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANME, NULL, NULL, NULL, NULL, cTemp);
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}

			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[7].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;
	}
}

void CGame::CreateNewGuildResponseHandler(char * pData)
{
	WORD * wpResult;
	wpResult = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	switch (*wpResult) {
		case DEF_MSGTYPE_CONFIRM:
			m_iGuildRank = EncriptInt(0);
			m_stDialogBoxInfo[7].cMode = 3;
			break;
		case DEF_MSGTYPE_REJECT:
			m_iGuildRank = EncriptInt(-1);
			m_stDialogBoxInfo[7].cMode = 4;
			break;
	}
}

void CGame::InitPlayerCharacteristics(char * pData)
{
	int  * ip;
	char * cp;
	short * sp;
	WORD * wp;
	// Snoopy: Angels
	m_iAngelicStr = EncriptInt(0);
	m_iAngelicDex = EncriptInt(0);
	m_iAngelicInt = EncriptInt(0);
	m_iAngelicMag = EncriptInt(0);
	//m_iAngelicVIT = EncriptInt(0);

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	m_iHP = EncriptInt(*sp);
	cp += 2;

	sp = (short *)cp;
	m_iMP = EncriptInt(*sp);
	cp += 2;

	sp = (short *)cp;
	m_iSP = EncriptInt(*sp);
	cp += 2;

	ip = (int *)cp;
	m_iLevel = EncriptInt(*ip);
	cp += 4;

	m_iStr = *cp;
	cp++;
	m_iInt = *cp;
	cp++;
	m_iVit = *cp;
	cp++;
	m_iDex = *cp;
	cp++;
	m_iMag = *cp;
	cp++;
	m_iCharisma = *cp;
	cp++;

	wp = (WORD *)cp;
	m_iLU_Point = EncriptInt(*wp - 3);
	cp += 2;

	ip = (int *)cp;
	m_iExp = *ip;
	cp += 4;

	ip = (int *)cp;
	m_iEnemyKillCount = *ip;
	cp += 4;

	ip = (int *)cp;
	m_iPKCount = EncriptInt(*ip);
	cp += 4;

	ip = (int *)cp;
	m_iRewardGold = EncriptInt(*ip);
	cp += 4;

	memcpy(m_cLocation, cp, 10);
	EncriptString(m_cLocation);
	cp += 10;

	DecriptString(m_cLocation);
	if (memcmp(m_cLocation, "aresden", 7) == 0) {
		m_bAresden = EncriptBool(TRUE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(FALSE);
		m_bElvine = EncriptBool(FALSE);
	}
	else if (memcmp(m_cLocation, "arehunter", 9) == 0) {
		m_bAresden = EncriptBool(TRUE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(FALSE);
	}
	else if (memcmp(m_cLocation, "elvine", 6) == 0) {
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(FALSE);
		m_bElvine = EncriptBool(TRUE);
	}
	else if (memcmp(m_cLocation, "elvhunter", 9) == 0) {
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(TRUE);
	}
	else {
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(FALSE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(FALSE);
	}
	EncriptString(m_cLocation);

	cp = (char *)cp;
//	DecriptString(m_cGuildName);
	memcpy(m_cGuildName, cp, 20);
//	EncriptString(m_cGuildName);
	cp += 20;

//	DecriptString(m_cGuildName);
	if (strcmp(m_cGuildName, "NONE") == 0) {
		ZeroMemory(m_cGuildName, sizeof(m_cGuildName));
	}
	m_Misc.ReplaceString(m_cGuildName, '_', ' ');
//	EncriptString(m_cGuildName);

	ip = (int *)cp;
	m_iGuildRank = EncriptInt(*ip);
	cp += 4;

	ip = (int *)cp;
	m_iFightzoneNumber = EncriptInt(*ip);
	cp += 4;

	Assasain = (BOOL)*cp;
	cp++;


	

}

void CGame::DisbandGuildResponseHandler(char * pData)
{
	WORD * wpResult;
	wpResult = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	switch (*wpResult) {
		case DEF_MSGTYPE_CONFIRM:
			ZeroMemory(m_cGuildName, sizeof(m_cGuildName));
			m_iGuildRank = EncriptInt(-1);
			m_stDialogBoxInfo[7].cMode = 7;
			break;
		case DEF_MSGTYPE_REJECT:
			m_stDialogBoxInfo[7].cMode = 8;
			break;
	}
}

void CGame::NotifyMsg_BanGuildMan(char * pData)
{
	char * cp, cName[24], cLocation[12];
	ZeroMemory(cName, sizeof(cName));
	ZeroMemory(cLocation, sizeof(cLocation));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cName, cp, 20);
	cp += 20;
	cp += 2;
	memcpy(cLocation, cp, 10);
	cp += 10;
	ZeroMemory(m_cGuildName, sizeof(m_cGuildName));
	m_iGuildRank = EncriptInt(-1);
	ZeroMemory(m_cLocation, sizeof(m_cLocation));
	memcpy(m_cLocation, cLocation, 10);
	EncriptString(m_cLocation);

	DecriptString(m_cLocation);
	if (memcmp(m_cLocation, "aresden", 7) == 0) {
		m_bAresden = EncriptBool(TRUE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(FALSE);
		m_bElvine = EncriptBool(FALSE);
	}
	else if (memcmp(m_cLocation, "arehunter", 9) == 0) {
		m_bAresden = EncriptBool(TRUE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(FALSE);
	}
	else if (memcmp(m_cLocation, "elvine", 6) == 0) {
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(FALSE);
		m_bElvine = EncriptBool(TRUE);
	}
	else if (memcmp(m_cLocation, "elvhunter", 9) == 0) {
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(TRUE);
	}
	else {
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(FALSE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(FALSE);
	}
	EncriptString(m_cLocation);

	EnableDialogBox(8, NULL, NULL, NULL);
	_PutGuildOperationList(cName, 8);
}

void CGame::_PutGuildOperationList(char * pName, char cOpMode)
{
	int i;
	for (i = 0; i < 100; i++) {
		if (m_stGuildOpList[i].cOpMode == NULL) {
			m_stGuildOpList[i].cOpMode = cOpMode;
			ZeroMemory(m_stGuildOpList[i].cName, sizeof(m_stGuildOpList[i].cName));
			memcpy(m_stGuildOpList[i].cName, pName, 20);
			return;
		}
	}
}

void CGame::_ShiftGuildOperationList()
{
	int i;
	ZeroMemory(m_stGuildOpList[0].cName, sizeof(m_stGuildOpList[0].cName));
	m_stGuildOpList[0].cOpMode = NULL;

	for (i = 1; i < 100; i++) {
		if ((m_stGuildOpList[i - 1].cOpMode == NULL) && (m_stGuildOpList[i].cOpMode != NULL)) {
			m_stGuildOpList[i - 1].cOpMode = m_stGuildOpList[i].cOpMode;
			ZeroMemory(m_stGuildOpList[i - 1].cName, sizeof(m_stGuildOpList[i - 1].cName));
			memcpy(m_stGuildOpList[i - 1].cName, m_stGuildOpList[i].cName, 20);

			ZeroMemory(m_stGuildOpList[i].cName, sizeof(m_stGuildOpList[i].cName));
			m_stGuildOpList[i].cOpMode = NULL;
		}
	}
}

void CGame::DlgBoxClick_GuildOp(short msX, short msY)
{
	short sX, sY;
	char cName[12], cName20[24];

	ZeroMemory(cName, sizeof(cName));
	ZeroMemory(cName20, sizeof(cName20));
	sX = m_stDialogBoxInfo[8].sX;
	sY = m_stDialogBoxInfo[8].sY;

	switch (m_stGuildOpList[0].cOpMode) {
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				_ShiftGuildOperationList();
				if (m_stGuildOpList[0].cOpMode == NULL) DisableDialogBox(8);
			}
			return;
	}

	if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		PlaySound('E', 14, 5);

		switch (m_stGuildOpList[0].cOpMode) {
			case 1:
				strcpy(cName20, m_stGuildOpList[0].cName);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_COMMON_JOINGUILDAPPROVE, NULL, NULL, NULL, NULL, cName20);
				break;

			case 2:
				strcpy(cName20, m_stGuildOpList[0].cName);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_COMMON_DISMISSGUILDAPPROVE, NULL, NULL, NULL, NULL, cName20);
				break;
		}
		_ShiftGuildOperationList();
		if (m_stGuildOpList[0].cOpMode == NULL) DisableDialogBox(8);
	}

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		PlaySound('E', 14, 5);

		switch (m_stGuildOpList[0].cOpMode) {
			case 1:
				strcpy(cName20, m_stGuildOpList[0].cName);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_COMMON_JOINGUILDREJECT, NULL, NULL, NULL, NULL, cName20);
				break;

			case 2:
				strcpy(cName20, m_stGuildOpList[0].cName);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_COMMON_DISMISSGUILDREJECT, NULL, NULL, NULL, NULL, cName20);
				break;
		}

		_ShiftGuildOperationList();
		if (m_stGuildOpList[0].cOpMode == NULL) DisableDialogBox(8);
	}
}

void CGame::SetItemCount(char * pItemName, DWORD dwCount)
{
	int i;
	char cTmpName[21];
	ZeroMemory(cTmpName, sizeof(cTmpName));
	strcpy(cTmpName, pItemName);
	for (i = 0; i < DEF_MAXITEMS; i++) {
		if ((m_pItemList[i] != NULL) && (memcmp(m_pItemList[i]->m_cName, cTmpName, 20) == 0)) {
			m_pItemList[i]->m_dwCount = dwCount;
			return;
		}
	}
}

void CGame::AddEventList(char * pTxt, char cColor, BOOL bDupAllow)
{
	if (string(pTxt) == "0" && cColor == 0) return;
	if (string(pTxt) == "1" && cColor == 0) return;
	if (string(pTxt) == "2" && cColor == 0) return;
	if (string(pTxt) == "3" && cColor == 0) return;
	if (string(pTxt) == "4" && cColor == 0) return;
	if (string(pTxt) == "5" && cColor == 0) return;
	if (string(pTxt) == "6" && cColor == 0) return;
	if (string(pTxt) == "7" && cColor == 0) return;
	if (string(pTxt) == "8" && cColor == 0) return; 
	if (string(pTxt) == "9" && cColor == 0) return;
	if (string(pTxt) == "10" && cColor == 0) return;
	if (string(pTxt) == "11" && cColor == 0) return;
	if (string(pTxt) == "12" && cColor == 0) return;
	if (string(pTxt) == "13" && cColor == 0) return;
	if (string(pTxt) == "14" && cColor == 0) return;
	if (string(pTxt) == "15" && cColor == 0) return;

	int i;
	if ((bDupAllow == FALSE) && (strcmp(m_stEventHistory[5].cTxt, pTxt) == 0)) return;
	if ((cColor == 10) || (cColor == 11) || (cColor == 12) || (cColor == 13) || (cColor == 14) || (cColor == 15)) {
		for (i = 1; i < 6; i++) {
			strcpy(m_stEventHistory2[i - 1].cTxt, m_stEventHistory2[i].cTxt);
			m_stEventHistory2[i - 1].cColor = m_stEventHistory2[i].cColor;
			m_stEventHistory2[i - 1].dwTime = m_stEventHistory2[i].dwTime;
		}
		ZeroMemory(m_stEventHistory2[5].cTxt, sizeof(m_stEventHistory2[5].cTxt));
		strcpy(m_stEventHistory2[5].cTxt, pTxt);
		m_stEventHistory2[5].cColor = cColor;
		m_stEventHistory2[5].dwTime = m_dwCurTime;
	}
	else {
		for (i = 1; i < 6; i++) {
			strcpy(m_stEventHistory[i - 1].cTxt, m_stEventHistory[i].cTxt);
			m_stEventHistory[i - 1].cColor = m_stEventHistory[i].cColor;
			m_stEventHistory[i - 1].dwTime = m_stEventHistory[i].dwTime;
		}
		ZeroMemory(m_stEventHistory[5].cTxt, sizeof(m_stEventHistory[5].cTxt));
		strcpy(m_stEventHistory[5].cTxt, pTxt);
		m_stEventHistory[5].cColor = cColor;
		m_stEventHistory[5].dwTime = m_dwCurTime;
	}
}

int _iAttackerHeight[] = { 0, 35, 35,35,35,35,35, 0,0,0,
5,  // Slime
35, // Skeleton
40, // Stone-Golem
45, // Cyclops
35,// OrcMage
35,// ShopKeeper
5, // GiantAnt
8, // Scorpion
35,// Zombie
35,// Gandalf
35,// Howard
35,// Guard
10,// Amphis
38,// Clay-Golem
35,// Tom
35,// William
35,// Kennedy
35,// Hellhound
50,// Troll
45,// Orge
55,// Liche
65,// Demon
46,// Unicorn
49,// WereWolf
55,// Dummy
35,// Energysphere
75,// Arrow Guard Tower
75,// Cannon Guard Tower
50,// Mana Collector
50,// Detector
50,// Energy Shield Generator
50,// Grand Magic Generator
50,// ManaStone 42
40,// Light War Beetle
35,// GHK
40,// GHKABS
35,// TK
60,// BG
40,// Stalker
70,// HellClaw
85,// Tigerworm
50,// Catapult
85,// Gargoyle
70,// Beholder
40,// Dark-Elf
20,// Bunny
20,// Cat
40,// Giant-Frog
80,// Mountain-Giant
85,// Ettin
50,// Cannibal-Plant
50, // Rudolph 61 //Snoopy....
80, // Direboar 62
90, // Frost 63
40, // Crops 64
80, // IceGolem 65
190, // Wyvern 66
35, // npc 67
35, // npc 68
35, // npc 69
100, // Dragon 70
90, // Centaur 71
75, // ClawTurtle 72
200, // FireWyvern 73
80, // GiantCrayfish 74
120, // Gi Lizard 75
100, // Gi Tree 76
100, // Master Orc 77
80, // Minaus 78
100, // Nizie 79
25,  // Tentocle 80
200, // Abaddon	 81
60, // Sorceress 82
60, // ATK 83
70, // MasterElf 84
60, // DSK 85
50, // HBT 86
60, // CT 87
60, // Barbarian 88
60, // AGC 89
35, // ncp 90 Gail
35  // Gate 91
};


void CGame::bAddNewEffect(short sType, int sX, int sY, int dX, int dY, char cStartFrame, int iV1)
{
	int i;
	short sAbsX, sAbsY;// sDist;
	long lPan;
	int  iV2 = 0;
	short sDist = 0;
	short fixdist = 0;
	int fixpan = 0;
	int fixx = 0;
	int fixy = 0;
	int x, y;
	if (m_bIsProgramActive == FALSE) return;

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Steeps)) { // Detail Level Low
		switch (sType) {
			case 8:
			case 9:
			case 11:
			case 12:
			case 14:
			case 15:
				return;
		}
	}
	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Stars))
		if (sType == 54) return;

	//if (m_bIsProgramActive == FALSE) return;
	//sAbsX = abs(((m_sViewPointX / 32) + 10) - dX);
	//sAbsY = abs(((m_sViewPointY / 32) + 7) - dY);
	//if (sAbsX > sAbsY) sDist = sAbsX;
	//else sDist = sAbsY; //Original

	//added resolution Lalo
	if (c_reso->IsResolution() == C800x600)
	{
		x = 400;
		y = 300;
		fixx = 13;//13
		fixy = 9;
		sAbsX = abs(((m_sViewPointX / 32) + fixx) - dX);
		sAbsY = abs(((m_sViewPointY / 32) + fixy) - dY);
		if (sAbsX > sAbsY) sDist = sAbsX; else sDist = sAbsY;
		fixdist = sDist;
		fixpan = 800;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		x = 512;
		y = 384;
		fixx = 16;//
		fixy = 11;//11
		sAbsX = abs(((m_sViewPointX / 32) + fixx) - dX);
		sAbsY = abs(((m_sViewPointY / 32) + fixy) - dY);
		if (sAbsX > sAbsY) sDist = sAbsX; else sDist = sAbsY;
		fixdist = sDist;
		fixpan = 800;//600
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		x = 320;
		y = 240;
		fixx = 10;
		fixy = 7;
		sAbsX = abs(((m_sViewPointX / 32) + fixx) - dX);
		sAbsY = abs(((m_sViewPointY / 32) + fixy) - dY);
		if (sAbsX > sAbsY) sDist = sAbsX; else sDist = sAbsY;
		fixdist = sDist;
		fixpan = 1000;
	}

	for (i = 0; i < DEF_MAXEFFECTS; i++) {
		if (m_pEffectList[i] == NULL)
		{
			m_pEffectList[i] = new class CEffect;
			m_pEffectList[i]->m_sType = sType;
			m_pEffectList[i]->m_sX = sX;
			m_pEffectList[i]->m_sY = sY;
			m_pEffectList[i]->m_dX = dX;
			m_pEffectList[i]->m_dY = dY;
			m_pEffectList[i]->m_iV1 = iV1;
			m_pEffectList[i]->m_cFrame = cStartFrame;
			m_pEffectList[i]->m_dwTime = m_dwCurTime;

			switch (sType) {
				case 1: // coup normal
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - _iAttackerHeight[iV1];
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 2;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 2:	// Fl�che qui vole
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - _iAttackerHeight[iV1];
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 0;
					m_pEffectList[i]->m_dwFrameTime = 10;
					m_pEffectList[i]->m_cDir = m_Misc.cCalcDirection(sX, sY, dX, dY);
					PlaySound('C', 4, sDist);
					break;

				case 4: // Gold
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32;
					m_pEffectList[i]->m_cMaxFrame = 12;
					m_pEffectList[i]->m_dwFrameTime = 100;
					sAbsX = abs(((m_sViewPointX / 32) + fixx) - sX);
					sAbsY = abs(((m_sViewPointY / 32) + fixy) - sY);
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					lPan = -(((m_sViewPointX / 32) + fixx) - sX) * fixpan;
					PlaySound('E', 12, sDist, lPan);
					break;

				case 5: // FireBall Fire Explosion
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 11;
					m_pEffectList[i]->m_dwFrameTime = 10;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - sX) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					SetCameraShakingEffect(sDist);
					break;

				case 6:	 // Energy Bolt
				case 10: // Lightning Arrow
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 14;
					m_pEffectList[i]->m_dwFrameTime = 10;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(x - (sX - m_sViewPointX)) * fixpan;
					PlaySound('E', 2, sDist, lPan);
					SetCameraShakingEffect(sDist);
					break;

				case 7: // Magic Missile Explosion
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 5;
					m_pEffectList[i]->m_dwFrameTime = 50;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(x - (sX - m_sViewPointX)) * fixpan;
					PlaySound('E', 3, sDist, lPan);
					break;

				case 8: // Burst
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 4;
					m_pEffectList[i]->m_dwFrameTime = 30;
					break;

				case 9: // Burst
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_rX = 6 - (rand() % 12);
					m_pEffectList[i]->m_rY = -8 - (rand() % 6);
					m_pEffectList[i]->m_cMaxFrame = 14;
					m_pEffectList[i]->m_dwFrameTime = 30;
					break;

				case 11:
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_rX = 6 - (rand() % 12);
					if (iV2 == 0)
						m_pEffectList[i]->m_rY = -2 - (rand() % 4);
					else m_pEffectList[i]->m_rY = -2 - (rand() % 10);
					m_pEffectList[i]->m_cMaxFrame = 8;
					m_pEffectList[i]->m_dwFrameTime = 30;
					break;

				case 12: // Burst
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_rX = 8 - (rand() % 16);
					m_pEffectList[i]->m_rY = 4 - (rand() % 12);
					m_pEffectList[i]->m_cMaxFrame = 10;
					m_pEffectList[i]->m_dwFrameTime = 30;
					break;

				case 13: // Bulles druncncity
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 18;
					m_pEffectList[i]->m_dwFrameTime = 20;
					break;
/*

				case 14: // Traces de pas ou Tremor (pas en low detail)
					m_pEffectList[i]->m_mX = sX;
					if (m_pEffectList[i]->m_iV1 > 0) { // Case if hit by an arrow
						m_pEffectList[i]->m_mY = sY - (_iAttackerHeight[m_pEffectList[i]->m_iV1] / 4 + rand() % (_iAttackerHeight[m_pEffectList[i]->m_iV1] / 2));
						m_pEffectList[i]->m_mX = sX + (rand() % 5) - 2;
					}
					else m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 4;
					m_pEffectList[i]->m_dwFrameTime = 100;
					m_pEffectList[i]->m_iV1 = iV1;
					break;*/


				
				case 14: // Traces de pas ou Tremor (pas en low detail)
					m_pEffectList[i]->m_mX = sX;
					// Verificamos que m_iV1 sea un índice válido y que el valor de _iAttackerHeight[m_pEffectList[i]->m_iV1] no sea cero
													//Fix crash bow ChatGPT
					if (m_pEffectList[i]->m_iV1 > 0 && _iAttackerHeight[m_pEffectList[i]->m_iV1] != 0) {
						// Realizamos la operación solo si es seguro
						m_pEffectList[i]->m_mY = sY - (_iAttackerHeight[m_pEffectList[i]->m_iV1] / 4 + rand() % (_iAttackerHeight[m_pEffectList[i]->m_iV1] / 2));
						m_pEffectList[i]->m_mX = sX + (rand() % 5) - 2;
					}
					else {
						// Si _iAttackerHeight[m_pEffectList[i]->m_iV1] es cero, asignamos directamente sY
						m_pEffectList[i]->m_mY = sY;
					}
					m_pEffectList[i]->m_cMaxFrame = 4;
					m_pEffectList[i]->m_dwFrameTime = 100;
					m_pEffectList[i]->m_iV1 = iV1;
					break;

				case 15: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 16;
					m_pEffectList[i]->m_dwFrameTime = 80;
					break;

				case 16: //
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					break;

				case 17:
					m_pEffectList[i]->m_mX = sX + (rand() % 20) - 40;
					m_pEffectList[i]->m_mY = sY + (rand() % 20) - 40;
					m_pEffectList[i]->m_rX = 8 - (rand() % 16);
					m_pEffectList[i]->m_rY = 4 - (rand() % 12);
					m_pEffectList[i]->m_mX3 = sX;
					m_pEffectList[i]->m_mY3 = sY;
					m_pEffectList[i]->m_iV1 = 0;
					m_pEffectList[i]->m_dwFrameTime = 20;
					break;

				case 18:
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 10;
					m_pEffectList[i]->m_dwFrameTime = 50;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;

				case 20:
				case 21:
				case 22:
				case 23:
				case 24:
				case 25:
				case 26:
				case 27: // Critical strike with a weapon
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 0;
					m_pEffectList[i]->m_dwFrameTime = 10;
					m_pEffectList[i]->m_cDir = m_Misc.cCalcDirection(sX, sY, dX, dY);
					break;

				case 30: // Mass-Fire-Strike (called 1 time)
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 9;
					m_pEffectList[i]->m_dwFrameTime = 40;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(x - (sX - m_sViewPointX)) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					SetCameraShakingEffect(sDist * 2);
					break;

				case 31: // Mass-Fire-Strike (called 3 times)
				case 252: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 8;
					m_pEffectList[i]->m_dwFrameTime = 40;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(x - (sX - m_sViewPointX)) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					SetCameraShakingEffect(sDist);
					break;

				case 32: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 4;
					m_pEffectList[i]->m_dwFrameTime = 100;
					break;

				case 33: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 16;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 34: //
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;

				case 35: // Snoopy: rajout (pour Mass Magic-Missile)
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 18;
					m_pEffectList[i]->m_dwFrameTime = 40;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(x - (sX - m_sViewPointX)) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					SetCameraShakingEffect(sDist * 2);
					break;

				case 36: // Snoopy: Rajout (pour Mass Magic-Missile)
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 40;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(x - (sX - m_sViewPointX)) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					SetCameraShakingEffect(sDist);
					break;

				case 40: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 30;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = ((sX - m_sViewPointX) - x) * 30;
					PlaySound('E', 45, sDist, lPan);
					break;

				case 41: // Large Type 1, 2, 3, 4
				case 42:
				case 43:
				case 44:
				case 45: // Small Type 1, 2
				case 46:
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY - 220;
					m_pEffectList[i]->m_cMaxFrame = 14;
					m_pEffectList[i]->m_dwFrameTime = 20;
					m_pEffectList[i]->m_iV1 = 20;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = ((sX - m_sViewPointX) - x) * 30;
					PlaySound('E', 46, sDist, lPan);
					break;

				case 47: // Blizzard
				case 48: // Blizzard
				case 49: // Blizzard
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY - 220;
					m_pEffectList[i]->m_cMaxFrame = 12;
					m_pEffectList[i]->m_dwFrameTime = 20;
					m_pEffectList[i]->m_iV1 = 20;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = ((sX - m_sViewPointX) - x) * 30;
					PlaySound('E', 46, sDist, lPan);
					break;

				case 50: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 12;
					m_pEffectList[i]->m_dwFrameTime = 50;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = ((sX - m_sViewPointX) - x) * 30;
					if ((rand() % 4) == 1) SetCameraShakingEffect(sDist);
					PlaySound('E', 47, sDist, lPan);
					break;

				case 51:
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 9; //15;
					m_pEffectList[i]->m_dwFrameTime = 80;
					break;

				case 52: // Protect ring
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 80;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = ((sX - m_sViewPointX) - x) * 30;
					PlaySound('E', 5, sDist, lPan);
					break;

				case 53: // Hold twist
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 80;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = ((sX - m_sViewPointX) - x) * 30;
					PlaySound('E', 5, sDist, lPan);
					break;

				case 54: // star twingkling (effect armes brillantes)
				case 55: // Unused
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 10;
					m_pEffectList[i]->m_dwFrameTime = 15;
					break;

				case 56: //  Mass-Chill-Wind
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 14;
					m_pEffectList[i]->m_dwFrameTime = 30;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = ((sX - m_sViewPointX) - x) * 30;
					PlaySound('E', 45, sDist, lPan);
					break;

				case 57: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 16;
					m_pEffectList[i]->m_dwFrameTime = 80;
					break;

				case 60: //
					m_pEffectList[i]->m_mX = sX + 300;
					m_pEffectList[i]->m_mY = sY - 460;
					m_pEffectList[i]->m_cMaxFrame = 10;
					m_pEffectList[i]->m_dwFrameTime = 50;
					break;

				case 61: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 16;
					m_pEffectList[i]->m_dwFrameTime = 10;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - sX) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					SetCameraShakingEffect(sDist, 2);
					break;

				case 62: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 6;
					m_pEffectList[i]->m_dwFrameTime = 100;
					break;

				case 63: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 16;
					m_pEffectList[i]->m_dwFrameTime = 20;
					break;

				case 64: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 20;
					break;

				case 65: // Crusade's MS
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 30;
					m_pEffectList[i]->m_dwFrameTime = 80;
					break;

				case 66: // Crusade MS explosion
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 14;
					m_pEffectList[i]->m_dwFrameTime = 30;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - sX) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					SetCameraShakingEffect(sDist, 2);
					break;

				case 67: // Crusade's MS fire + smoke ?
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 27;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 68: // worm-bite
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 17;
					m_pEffectList[i]->m_dwFrameTime = 30;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - sX) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					m_pEffectList[i]->m_iV1 = sDist;
					//SetCameraShakingEffect(sDist, 2);
					break;

				case 69: // identique au cas 70
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 11;
					m_pEffectList[i]->m_dwFrameTime = 30;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - (sX / 32)) * fixpan;
					PlaySound('E', 42, sDist, lPan);
					break;

				case 70: // identtique au cas 69
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 11;
					m_pEffectList[i]->m_dwFrameTime = 30;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - (sX / 32)) * fixpan;
					PlaySound('E', 42, sDist, lPan);
					break;

				case 71: //
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;

				case 72: // Blizzard
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 20;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = ((sX - m_sViewPointX) - x) * 30;
					if ((rand() % 4) == 1) SetCameraShakingEffect(sDist);
					PlaySound('E', 47, sDist, lPan);
					break;

				case 73:
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 60;
					break;

				case 74:
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 19;
					m_pEffectList[i]->m_dwFrameTime = 40;
					break;

				case 75: //ice golem
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_dX = dX;
					m_pEffectList[i]->m_dY = dY;
					m_pEffectList[i]->m_cMaxFrame = 16;
					m_pEffectList[i]->m_dwFrameTime = 40;
					break;

				case 76: //ice golem
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_dX = dX;
					m_pEffectList[i]->m_dY = dY;
					m_pEffectList[i]->m_cMaxFrame = 16;
					m_pEffectList[i]->m_dwFrameTime = 40;
					break;

				case 77: //ice golem
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_dX = dX;
					m_pEffectList[i]->m_dY = dY;
					m_pEffectList[i]->m_cMaxFrame = 16;
					m_pEffectList[i]->m_dwFrameTime = 40;
					break;

				case 80: // Snoopy: rajou�, impl�ment� en dernier ds la v351
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_iV1 = 20;
					m_pEffectList[i]->m_cMaxFrame = 30;
					m_pEffectList[i]->m_dwFrameTime = 25;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;

				case 81: //  Snoopy: Rajout (StormBlade)
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 27;
					m_pEffectList[i]->m_dwFrameTime = 40;
					break;

				case 82: //  Snoopy: Rajout (Gate Apocalypse)
					m_pEffectList[i]->m_cMaxFrame = 80;
					m_pEffectList[i]->m_dwFrameTime = 15;
					break;

				case 100: // MagicMissile is Flying
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 1, sDist, lPan);
					break;

				case 101: // Heal
				case 111: // Staminar-Drain
				case 121: // Great Heal
				case 123: // Staminar-Recovery
				case 128: // Great-Staminar-Recovery
					m_pEffectList[i]->m_cMaxFrame = 14;
					m_pEffectList[i]->m_dwFrameTime = 80;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 5, sDist, lPan);
					break;

				case 102: // CreateFood
				case 122: // Recall
				case 126: // Possession
				case 127: // Poison
				case 134: // DetectInvi
				case 136: // Cure
				case 142: // Confuse language
				case 152: // Polymorph
				case 153: // Mass-Poison
				case 162: // Confusion
				case 171: // Mass-Confusion
					m_pEffectList[i]->m_cMaxFrame = 13;
					m_pEffectList[i]->m_dwFrameTime = 120;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 5, fixdist, lPan);//fixdist
					break;

				case 110: // Energy-Bolt
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 1, sDist, lPan);
					break;

				case 112: // Recall
				case 131: // Summon
				case 132: // Invi
					m_pEffectList[i]->m_cMaxFrame = 12;
					m_pEffectList[i]->m_dwFrameTime = 80;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 5, fixdist, lPan);//fixdist
					break;

				case 113: // Defense-Shield
				case 144: // Great-Defense-Shield
					m_pEffectList[i]->m_cMaxFrame = 12;
					m_pEffectList[i]->m_dwFrameTime = 120;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 5, sDist, lPan);
					break;

				case 114: // Celebrating Light
					bAddNewEffect(69 + (rand() % 2), dX * 32 + 20 - (rand() % 40), dY * 32 + 20 - (rand() % 40), NULL, NULL, -12);
					bAddNewEffect(69 + (rand() % 2), dX * 32 + 20 - (rand() % 40), dY * 32 + 20 - (rand() % 40), NULL, NULL, -9);
					bAddNewEffect(69 + (rand() % 2), dX * 32 + 20 - (rand() % 40), dY * 32 + 20 - (rand() % 40), NULL, NULL, -6);
					bAddNewEffect(69 + (rand() % 2), dX * 32 + 20 - (rand() % 40), dY * 32 + 20 - (rand() % 40), NULL, NULL, -3);
					bAddNewEffect(69 + (rand() % 2), dX * 32 + 20 - (rand() % 40), dY * 32 + 20 - (rand() % 40), NULL, NULL, 0);
					delete m_pEffectList[i];
					m_pEffectList[i] = NULL;
					break;

				case 120: // Fire Ball
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					m_pEffectList[i]->m_cDir = m_Misc.cCalcDirection(sX, sY, dX, dY);
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 1, sDist, lPan);
					break;

				case 124: // Protect form N.M
				case 133: // Protection from Magic
					bAddNewEffect(52, dX * 32, dY * 32, NULL, NULL, 0, 0);
					delete m_pEffectList[i];
					m_pEffectList[i] = NULL;
					break;

				case 125: // Hold Person
				case 135: // Paralyze
					bAddNewEffect(53, dX * 32, dY * 32, NULL, NULL, 0, 0);
					delete m_pEffectList[i];
					m_pEffectList[i] = NULL;
					break;

				case 130: // Fire Strike
				case 137: // Lightning Arrow
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					m_pEffectList[i]->m_cDir = m_Misc.cCalcDirection(sX, sY, dX, dY);
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 1, sDist, lPan);
					break;

				case 138: // Tremor.
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					SetCameraShakingEffect(sDist, 2);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);

					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					m_pEffectList[i]->m_cMaxFrame = 2;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 143: // Lightning
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 50;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_rX = 5 - (rand() % 10);
					m_pEffectList[i]->m_rY = 5 - (rand() % 10);
					m_pEffectList[i]->m_cMaxFrame = 7;
					m_pEffectList[i]->m_dwFrameTime = 10;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 40, sDist, lPan);
					break;

				case 145: // ChillWind
					m_pEffectList[i]->m_cMaxFrame = 2;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 147: // Triple-Energy-Bolt
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					break;

				case 150: // Berserk : Cirlcle 6 magic
				//case 152: // FuryOfWar
				case 177: // Illusion-Movement
				case 180: // Illusion
				case 183: // Inhibition-Casting
				case 185: // Berserk : Cirlcle 6 magic
				//case 159: //FuryofWar
				case 190: // Mass-Illusion
				case 195: // Mass-Illusion-Movement
					m_pEffectList[i]->m_cMaxFrame = 11;
					m_pEffectList[i]->m_dwFrameTime = 100;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 5, sDist, lPan);
					break;

				case 151: // LightningBolt
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 50;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_rX = 5 - (rand() % 10);
					m_pEffectList[i]->m_rY = 5 - (rand() % 10);
					m_pEffectList[i]->m_cMaxFrame = 10;
					m_pEffectList[i]->m_dwFrameTime = 10;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 40, sDist, lPan);
					break;

				case 156: // Mass-Ligtning-Arrow
					m_pEffectList[i]->m_cMaxFrame = 3;
					m_pEffectList[i]->m_dwFrameTime = 130;
					break;

				case 157: // Ice-Strike
					m_pEffectList[i]->m_cMaxFrame = 2;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 160: // Energy-Strike
					m_pEffectList[i]->m_cMaxFrame = 7;
					m_pEffectList[i]->m_dwFrameTime = 80;
					break;

				case 161: // Mass-Fire-Strike
				case 251: //
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					m_pEffectList[i]->m_cDir = m_Misc.cCalcDirection(sX, sY, dX, dY);
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 1, sDist, lPan);
					break;

				case 163: // Mass-Chill-Wind
					m_pEffectList[i]->m_cMaxFrame = 2;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 164: // worm-bite
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 4, sDist, lPan);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);

					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					bAddNewEffect(14, dX * 32 + (rand() % 120) - 60, dY * 32 + (rand() % 80) - 40, NULL, NULL, 0, 0);
					m_pEffectList[i]->m_cMaxFrame = 1;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 165: // Absolute-Magic-Protection
					m_pEffectList[i]->m_cMaxFrame = 21;
					m_pEffectList[i]->m_dwFrameTime = 70;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 5, sDist, lPan);
					break;

				case 166: // Armor Break
					m_pEffectList[i]->m_cMaxFrame = 13;
					m_pEffectList[i]->m_dwFrameTime = 80;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 5, sDist, lPan);
					break;

				case 168:
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_iV1 = 20;
					m_pEffectList[i]->m_cMaxFrame = 30;
					m_pEffectList[i]->m_dwFrameTime = 25;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;


				case 170: // Bloody-Shock-Wave
					m_pEffectList[i]->m_cMaxFrame = 7;
					m_pEffectList[i]->m_dwFrameTime = 80;
					break;

				case 172: // Mass-Ice-Strike
					m_pEffectList[i]->m_cMaxFrame = 2;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				case 174: // Lightning-Strike
					m_pEffectList[i]->m_cMaxFrame = 5;
					m_pEffectList[i]->m_dwFrameTime = 120;
					break;

				case 176: // Snoopy: Ajout Cancellation
					m_pEffectList[i]->m_cMaxFrame = 23;
					m_pEffectList[i]->m_dwFrameTime = 60;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - sX) * fixpan;
					PlaySound('E', 5, sDist, lPan);
					break;

				case 181: // MS
					m_pEffectList[i]->m_mX = dX * 32 + 300;
					m_pEffectList[i]->m_mY = dY * 32 - 460;
					m_pEffectList[i]->m_cMaxFrame = 10;
					m_pEffectList[i]->m_dwFrameTime = 25;
					break;

				case 182: // Snoopy: Ajout Mass-Magic-Missile
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = NULL;
					m_pEffectList[i]->m_dwFrameTime = 20;
					lPan = -(((m_sViewPointX / 32) + fixx) - dX) * fixpan;
					PlaySound('E', 1, sDist, lPan);
					break;

				case 244: // Snoopy: d�plac� pour nvx sorts: Aura du casteur de Mass MagicMissile
				//case 184: // effet sur le caster pour MassMM
					m_pEffectList[i]->m_cMaxFrame = 29;
					m_pEffectList[i]->m_dwFrameTime = 80;
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					break;

				case 191: // Blizzard
					m_pEffectList[i]->m_cMaxFrame = 7;
					m_pEffectList[i]->m_dwFrameTime = 80;
					break;

					//case 192: // Hero set Effect
				case 242: // Hero set Effect
					m_pEffectList[i]->m_cMaxFrame = 30;
					m_pEffectList[i]->m_dwFrameTime = 40;
					break;

					//case 193: // Hero set Effect
				case 243: // Hero set Effect
					m_pEffectList[i]->m_cMaxFrame = 19;
					m_pEffectList[i]->m_dwFrameTime = 18;
					break;

				case 245:
					m_pEffectList[i]->m_cMaxFrame = 30;
					m_pEffectList[i]->m_dwFrameTime = 40;
					break;
				case 246:
					m_pEffectList[i]->m_cMaxFrame = 19;
					m_pEffectList[i]->m_dwFrameTime = 18;
					break;

				case 194: // Resurrection
					m_pEffectList[i]->m_cMaxFrame = 30;
					m_pEffectList[i]->m_dwFrameTime = 40;
					break;

				case 196: // Snoopy: Ajout de Earth-Shock-Wave
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 30;
					m_pEffectList[i]->m_dwFrameTime = 25;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;

				case 197: // Storm-Of-Death
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 35;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;

				case 192: //Probando Lighting Wave
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 15;//15
					m_pEffectList[i]->m_dwFrameTime = 30;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;

				case 198: //Probando Fire Shock Wave
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 30;//15
					m_pEffectList[i]->m_dwFrameTime = 35;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					SetCameraShakingEffect(sDist);
					break;

				case 200: //
				case 201: //
				case 202: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 15;
					m_pEffectList[i]->m_dwFrameTime = 25;
					break;

				case 203: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 18;
					m_pEffectList[i]->m_dwFrameTime = 70;
					break;

				case 204: //
				case 205: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 12;
					m_pEffectList[i]->m_dwFrameTime = 70;
					break;

				case 206: //
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_cMaxFrame = 3;
					m_pEffectList[i]->m_dwFrameTime = 70;
					break;

				case 207: // Goal Aresden!
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 3;
					m_pEffectList[i]->m_dwFrameTime = 120;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - (sX / 32)) * fixpan;
					PlaySound('E', 42, sDist, lPan);
					break;

				case 208: // Goal Elvine!
					m_pEffectList[i]->m_mX = sX;
					m_pEffectList[i]->m_mY = sY;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 3;
					m_pEffectList[i]->m_dwFrameTime = 120;
					sAbsX = abs(x - (sX - m_sViewPointX));
					sAbsY = abs(y - (sY - m_sViewPointY));
					if (sAbsX > sAbsY) sDist = sAbsX;
					else sDist = sAbsY;
					sDist = sDist / 32;
					lPan = -(((m_sViewPointX / 32) + fixx) - (sX / 32)) * fixpan;
					PlaySound('E', 42, sDist, lPan);
					break;

				case 209: // Goal Aresden
					m_pEffectList[i]->m_cMaxFrame = 3;
					m_pEffectList[i]->m_dwFrameTime = 30;
					break;

				case 210: // Goal Elvine
					m_pEffectList[i]->m_cMaxFrame = 3;
					m_pEffectList[i]->m_dwFrameTime = 30;
					break;

				case 250: //
					m_pEffectList[i]->m_mX = sX * 32;
					m_pEffectList[i]->m_mY = sY * 32 - 40;
					m_pEffectList[i]->m_iErr = 0;
					m_pEffectList[i]->m_cMaxFrame = 0;
					m_pEffectList[i]->m_dwFrameTime = 10;
					break;

				default:
					delete m_pEffectList[i];
					m_pEffectList[i] = NULL;
					break;
			}
			if (m_pEffectList[i] != NULL) {
				m_pEffectList[i]->m_mX2 = m_pEffectList[i]->m_mX;
				m_pEffectList[i]->m_mY2 = m_pEffectList[i]->m_mY;
			}
			return;
		}
	}
}

void CGame::DrawEffects()
{
	int i, dX, dY, iDvalue, tX, tY, rX, rY, rX2, rY2, rX3, rY3, rX4, rY4, rX5, rY5, iErr;
	char  cTempFrame;
	DWORD dwTime = m_dwCurTime;

	for (i = 0; i < DEF_MAXEFFECTS; i++) {
		if ((m_pEffectList[i] != NULL) && (m_pEffectList[i]->m_cFrame >= 0)) {
			switch (m_pEffectList[i]->m_sType) {
				case 1: // Normal hit
					if (m_pEffectList[i]->m_cFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[8]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 2: // Arrow flying
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = (m_pEffectList[i]->m_cDir - 1) * 2;
					if (cTempFrame < 0) break;
					m_pEffectSpr[7]->PutSpriteFast(dX, dY, cTempFrame, dwTime);
					break;

				case 4: // gold
					/* 1.5
					if (m_pEffectList[i]->m_cFrame < 9) break;
					cTempFrame = m_pEffectList[i]->m_cFrame - 9;
					dX  = (m_pEffectList[i]->m_mX)  - m_sViewPointX;
					dY  = (m_pEffectList[i]->m_mY)  - m_sViewPointY;
					m_pEffectSpr[1]->PutSpriteFast(dX, dY-40, cTempFrame, dwTime);
					*/
					break;

				case 5: // FireBall Fire Explosion
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					iDvalue = (cTempFrame - 8)*(-5);
					if (cTempFrame < 7)
						m_pEffectSpr[3]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					else m_pEffectSpr[3]->PutTransSpriteRGB(dX, dY, cTempFrame, iDvalue, iDvalue, iDvalue, dwTime);
					break;

				case 6:	 // Energy Bolt
				case 10: // Lightning Arrow
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					iDvalue = (cTempFrame - 7)*(-6);
					if (cTempFrame < 6)
						m_pEffectSpr[6]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					else m_pEffectSpr[6]->PutTransSpriteRGB(dX, dY, cTempFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					break;

				case 7: // Magic Missile Explosion
					cTempFrame = m_pEffectList[i]->m_cFrame;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					iDvalue = (cTempFrame - 4)*(-3);
					if (cTempFrame < 4)
						m_pEffectSpr[6]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					else m_pEffectSpr[6]->PutTransSpriteRGB(dX, dY, cTempFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					break;

				case 8: // Burst
					cTempFrame = m_pEffectList[i]->m_cFrame;
					cTempFrame = 4 - cTempFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 9: // Burst
					cTempFrame = (rand() % 5);
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 11: // pt grenat
					cTempFrame = (rand() % 5) + 5;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite2(dX, dY, cTempFrame, dwTime);
					break;

				case 12: // Burst
					cTempFrame = (rand() % 6) + 10;
					if (cTempFrame < 0) break;
					iDvalue = (m_pEffectList[i]->m_cFrame - 4)*(-3);
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					if (cTempFrame < 4)
						m_pEffectSpr[11]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					else m_pEffectSpr[11]->PutTransSprite(dX, dY, cTempFrame, dwTime);
					break;

				case 13:
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					if (cTempFrame < 13) m_pEffectSpr[11]->PutTransSprite_NoColorKey(dX, dY, 25 + (cTempFrame / 5), dwTime);
					else m_pEffectSpr[11]->PutTransSprite_NoColorKey(dX, dY, (8 + cTempFrame), dwTime);
					break;

				case 14: // Traces de pas (terrain sec)
					if (m_pEffectList[i]->m_cFrame < 0) break;
					dX = m_pEffectList[i]->m_mX - m_sViewPointX;
					dY = m_pEffectList[i]->m_mY - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite50_NoColorKey(dX, dY, (28 + m_pEffectList[i]->m_cFrame), dwTime);
					break;

				case 15: // petits nuages rouges
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = m_pEffectList[i]->m_mX - m_sViewPointX;
					dY = m_pEffectList[i]->m_mY - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite50_NoColorKey(dX, dY, (33 + cTempFrame), dwTime);
					break;

				case 16: //
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[0]->PutTransSprite_NoColorKey(dX, dY, 0, dwTime);
					break;

				case 17: //test
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = 39 + (rand() % 3) * 3 + (rand() % 3);
					if (cTempFrame < 0) break;
					m_pEffectSpr[11]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					dX = (m_pEffectList[i]->m_mX2) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY2) - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite50_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 18: //
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					m_pEffectSpr[18]->PutTransSprite70_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 20: // critical hit
				case 21:
				case 22:
				case 23:
				case 24:
				case 25:
				case 26:
				case 27: // Critical strike with a weapon
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[8]->PutTransSprite_NoColorKey(dX, dY, 1, dwTime);
					break;

				case 30: // Mass-Fire-Strike
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					m_pEffectSpr[14]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 31: // Mass-Fire-Strike
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					m_pEffectSpr[15]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 32: // Trace de pas  (raining weather)
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = m_pEffectList[i]->m_cFrame + 20;
					if (cTempFrame < 0) break;
					m_pEffectSpr[11]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 33: //
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					iDvalue = 0;
					m_pEffectSpr[19]->PutTransSpriteRGB(dX, dY, cTempFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					break;

				case 34: break; // absent (220 et 351)

				case 35: // Snoopy: Ajout
					if (m_pEffectList[i]->m_cFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = m_pEffectList[i]->m_cFrame;
					m_pEffectSpr[6]->PutTransSprite_NoColorKey(dX - 30, dY - 18, cTempFrame, dwTime);
					break;

				case 36: // Snoopy: Ajout
					if (m_pEffectList[i]->m_cFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = m_pEffectList[i]->m_cFrame;
					m_pEffectSpr[97]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 40:
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[20]->PutTransSprite50_NoColorKey(dX, dY, cTempFrame, dwTime); // 20
					break;

				case 41: // Large Type 1, 2, 3, 4
				case 42:
				case 43:
				case 44:
				case 45: // Small Type 1, 2
				case 46:
					dX = (m_pEffectList[i]->m_sX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_sY) - m_sViewPointY;
					m_pEffectSpr[21]->PutFadeSprite(dX, dY, 48, dwTime);
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					if ((8 * (m_pEffectList[i]->m_sType - 41) + cTempFrame) < (8 * (m_pEffectList[i]->m_sType - 41) + 7)) {
						iDvalue = -8 * (6 - cTempFrame);
						m_pEffectSpr[21]->PutTransSpriteRGB(dX, dY, 8 * (m_pEffectList[i]->m_sType - 41) + cTempFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					}
					else {
						if ((cTempFrame - 5) >= 8) cTempFrame = ((cTempFrame - 5) - 8) + 5;
						m_pEffectSpr[21]->PutSpriteFast(dX, dY, 8 * (m_pEffectList[i]->m_sType - 41) + (cTempFrame - 5), dwTime);
					}
					break;

				case 47:
				case 48:
				case 49: // Blizzard
					dX = (m_pEffectList[i]->m_sX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_sY) - m_sViewPointY;
					m_pEffectSpr[m_pEffectList[i]->m_sType - 1]->PutRevTransSprite(dX, dY, 0, dwTime);
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					//PutString(dX, dY, "*", RGB(255,255,255));
					if (cTempFrame < 7) {
						iDvalue = -8 * (6 - cTempFrame);
						m_pEffectSpr[m_pEffectList[i]->m_sType - 1]->PutTransSpriteRGB(dX, dY, cTempFrame + 1, iDvalue, iDvalue, iDvalue, dwTime);
					}
					else {
						if (cTempFrame >= 8) cTempFrame = cTempFrame % 8;
						m_pEffectSpr[m_pEffectList[i]->m_sType - 1]->PutSpriteFast(dX, dY, cTempFrame + 1, dwTime);
					}
					break;

				case 50:
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;

					if (cTempFrame <= 6) {
						iDvalue = 0;
						m_pEffectSpr[22]->PutTransSpriteRGB(dX, dY, cTempFrame, iDvalue, iDvalue, iDvalue, dwTime);	// RGB2
					}
					else {
						iDvalue = -5 * (cTempFrame - 6);
						m_pEffectSpr[22]->PutTransSpriteRGB(dX, dY, 6, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					}
					break;

				case 51: //
					cTempFrame = m_pEffectList[i]->m_cFrame + 11; //15
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[28]->PutTransSprite25(dX, dY, cTempFrame, dwTime); //20
					break;


				case 52: // Protection Ring commente par siementec, a voir
				/*			cTempFrame = m_pEffectList[i]->m_cFrame;
					dX  = (m_pEffectList[i]->m_mX)  - m_sViewPointX;
					dY  = (m_pEffectList[i]->m_mY)  - m_sViewPointY;
					m_pEffectSpr[24]->PutTransSprite(dX, dY, cTempFrame, dwTime);
				*/
					break;

				case 53: // Hold Twist
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					if (cTempFrame < 0) cTempFrame = 0;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[25]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime); //25
					break;

				case 54: //  star twingkling (effect armes brillantes)
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) cTempFrame = 0;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[28]->PutTransSprite(dX, dY, cTempFrame, dwTime);
					break;

				case 55: //
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) cTempFrame = 0;
					dX = (m_pEffectList[i]->m_mX);
					dY = (m_pEffectList[i]->m_mY);
					m_pEffectSpr[28]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 56: // Mass-Chill-Wind
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) cTempFrame = 0;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[29]->PutTransSprite50_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 57: break; // absent (220 et 351)

				case 60:  //
				case 181: // MS
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					if (cTempFrame > 4) cTempFrame = cTempFrame / 4;
					if (cTempFrame >= 0) {
						dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
						dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
						m_pEffectSpr[31]->PutSpriteFast(dX, dY, 15 + cTempFrame, dwTime);
						m_pEffectSpr[31]->PutTransSprite(dX, dY, cTempFrame, dwTime);
					}
					break;

				case 61: // Fire aura on ground (crueffect1, 1)
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[32]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 62: // MS strike
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					if (cTempFrame > 0) {
						cTempFrame = cTempFrame - 1;
						dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
						dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
						m_pEffectSpr[31]->PutRevTransSprite(dX, dY, 20 + cTempFrame, dwTime, cTempFrame / 3);
					}
					break;

				case 63: // Fire explosion (crueffect1, 2)
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[33]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 64: // effet halo blancchatre
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[34]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 65: // MS from crusade striking
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					cTempFrame = cTempFrame / 6;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[31]->PutRevTransSprite(dX, dY, 20 + cTempFrame, dwTime, cTempFrame >> 2);
					break;

				case 66: // MS explodes on the ground
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[39]->PutRevTransSprite(dX, dY, cTempFrame, dwTime);
					m_pEffectSpr[39]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 67: // MS fire with smoke
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					switch (rand() % 3) {
						case 0: m_pEffectSpr[0]->PutTransSprite25_NoColorKey(dX, dY + 20, 1, dwTime); break;
						case 1: m_pEffectSpr[0]->PutTransSprite50_NoColorKey(dX, dY + 20, 1, dwTime); break;
						case 2: m_pEffectSpr[0]->PutTransSprite70_NoColorKey(dX, dY + 20, 1, dwTime); break;
					}
					m_pEffectSpr[35]->PutTransSprite70_NoColorKey(dX, dY, cTempFrame / 3, dwTime);
					break;

				case 68: // worm-bite
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					if (cTempFrame <= 11) {
						m_pEffectSpr[40]->PutSpriteFast(dX, dY, cTempFrame, dwTime);
						m_pEffectSpr[41]->PutTransSprite50_NoColorKey(dX, dY, cTempFrame, dwTime);
						m_pEffectSpr[44]->PutRevTransSprite(dX - 2, dY - 3, cTempFrame, dwTime);
						m_pEffectSpr[44]->PutTransSprite_NoColorKey(dX - 4, dY - 3, cTempFrame, dwTime);
					}
					else {
						switch (cTempFrame) {
							case 12:
							case 13:
							case 14: m_pEffectSpr[40]->PutSpriteFast(dX, dY, 11, dwTime); break;
							case 15: m_pEffectSpr[40]->PutTransSprite70_NoColorKey(dX, dY, 11, dwTime); break;
							case 16: m_pEffectSpr[40]->PutTransSprite50_NoColorKey(dX, dY, 11, dwTime); break;
							case 17: m_pEffectSpr[40]->PutTransSprite25_NoColorKey(dX, dY, 11, dwTime); break;
						}
					}
					break;

				case 69: // identique au cas 70
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[42]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 70: // identique au cas 69
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[43]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 71: // absent v220 et v351
					break;

				case 72: // Blizzard
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					if (cTempFrame <= 8) {
						iDvalue = 0;
						m_pEffectSpr[51]->PutTransSpriteRGB(dX, dY, cTempFrame, iDvalue, iDvalue, iDvalue, dwTime);
					}
					else {
						iDvalue = -1 * (cTempFrame - 8);
						m_pEffectSpr[51]->PutTransSpriteRGB(dX, dY, 8, iDvalue, iDvalue, iDvalue, dwTime);	// RGB2
					}
					break;

				case 73: // absent v220 et v351
				case 74: // absent v220 et v351
				case 75: // absent v220 et v351
				case 76: // absent v220 et v351
				case 77: // absent v220 et v351
					break;

				case 80:
				case 196: // Earth-Shock-Wave
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[91]->PutSpriteFast(dX, dY, cTempFrame, dwTime); //Nbe d'arguments modifi�s ds la 351....
					m_pEffectSpr[92]->PutTransSprite(dX, dY, cTempFrame, dwTime);
					break;

				case 192: //Probando Lighting Wave
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					if (cTempFrame < 0) cTempFrame = 0;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[17]->PutSpriteFast(dX, dY, cTempFrame, dwTime); //Nbe d'arguments modifi�s ds la 351....
					m_pEffectSpr[17]->PutTransSprite(dX, dY, cTempFrame, dwTime);
					break;

				case 198:  //Probando Fire Shock Wave
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					if (cTempFrame < 0) cTempFrame = 0;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[14]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);//14
					m_pEffectSpr[15]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);//14
					break;


				case 197: // Storm-Of-Death
				case 168: // Storm-Of-Death
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					if (cTempFrame < 0) cTempFrame = 0;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[168]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime); //25
					break;

				case 81: // Snoopy: Ajout StormBlade
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = m_pEffectList[i]->m_cFrame;
					m_pEffectSpr[100]->PutTransSprite_NoColorKey(dX + 70, dY + 70, cTempFrame, dwTime);
					break;

				case 82: // Gate (apocalypse)
					cTempFrame = m_pEffectList[i]->m_cFrame;
					m_pEffectSpr[101]->PutTransSprite_NoColorKey(320, 480, cTempFrame, dwTime);
					break;

				case 100: // Magic Missile
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[0]->PutTransSprite_NoColorKey(dX, dY, 0, dwTime);
					break;

				case 101: // Heal
				case 121: // Great-Heal
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-5);
					m_pEffectSpr[50]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 102: // Create Food
				case 124: // Protection from N.M
				case 125: // Hold-Person
				case 126: // Possession
				case 127: // Poison
				case 133: // Protect-From-Magic
				case 134: // Detect-Invisibility
				case 135: // Paralyze
				case 136: // Cure
				case 142: // Confuse Language
				case 152: // Polymorph
				case 153: // Mass-Poison
				case 162: // Confusion
				case 171: // Mass-Confusion
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-5);
					if (cTempFrame < 5)
						m_pEffectSpr[4]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					else m_pEffectSpr[4]->PutTransSpriteRGB(dX, dY, m_pEffectList[i]->m_cFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					break;

				case 110: // Energy-Bolt
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[0]->PutTransSprite_NoColorKey(dX, dY, 2 + (rand() % 4), dwTime);
					break;

				case 111: // Staminar Drain
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-5);
					m_pEffectSpr[49]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 112: // Recall
				case 131: // Summon-Creature
				case 132: // Invisibility
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-5);
					m_pEffectSpr[52]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 113: // Defense Shield
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-5);
					if (cTempFrame < 6)
						m_pEffectSpr[62]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					else m_pEffectSpr[62]->PutTransSpriteRGB(dX, dY, m_pEffectList[i]->m_cFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					break;

				case 120: // Fire Ball
				case 130: // Fire Strike
				case 161: // Mass-Fire-Strike
				case 251: //
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					cTempFrame = (m_pEffectList[i]->m_cDir - 1) * 4 + (rand() % 4);
					if (cTempFrame < 0) break;
					m_pEffectSpr[5]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 122: // Absent v220 et 351
					break;

				case 123: // Staminar-Recovery
				case 128: // Great-Staminar-Recovery
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-5);
					m_pEffectSpr[56]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 137: // Lightning Arrow
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					tX = (m_pEffectList[i]->m_mX2) - m_sViewPointX;
					tY = (m_pEffectList[i]->m_mY2) - m_sViewPointY;
					iErr = 0;
					m_Misc.GetPoint(dX, dY, tX, tY, &rX, &rY, &iErr, 15);
					m_Misc.GetPoint(dX, dY, tX, tY, &rX2, &rY2, &iErr, 30);
					m_Misc.GetPoint(dX, dY, tX, tY, &rX3, &rY3, &iErr, 45);
					m_Misc.GetPoint(dX, dY, tX, tY, &rX4, &rY4, &iErr, 60);
					m_Misc.GetPoint(dX, dY, tX, tY, &rX5, &rY5, &iErr, 75);
					cTempFrame = (m_pEffectList[i]->m_cDir - 1) * 4 + (rand() % 4);
					if (cTempFrame < 0) break;
					m_pEffectSpr[10]->PutTransSprite25_NoColorKey(rX5, rY5, cTempFrame, dwTime);
					cTempFrame = (m_pEffectList[i]->m_cDir - 1) * 4 + (rand() % 4);
					if (cTempFrame < 0) break;
					m_pEffectSpr[10]->PutTransSprite25_NoColorKey(rX4, rY4, cTempFrame, dwTime);
					cTempFrame = (m_pEffectList[i]->m_cDir - 1) * 4 + (rand() % 4);
					if (cTempFrame < 0) break;
					m_pEffectSpr[10]->PutTransSprite50_NoColorKey(rX3, rY3, cTempFrame, dwTime);
					cTempFrame = (m_pEffectList[i]->m_cDir - 1) * 4 + (rand() % 4);
					if (cTempFrame < 0) break;
					m_pEffectSpr[10]->PutTransSprite50_NoColorKey(rX2, rY2, cTempFrame, dwTime);
					cTempFrame = (m_pEffectList[i]->m_cDir - 1) * 4 + (rand() % 4);
					if (cTempFrame < 0) break;
					m_pEffectSpr[10]->PutTransSprite70_NoColorKey(rX, rY, cTempFrame, dwTime);
					cTempFrame = (m_pEffectList[i]->m_cDir - 1) * 4 + (rand() % 4);
					if (cTempFrame < 0) break;
					m_pEffectSpr[10]->PutTransSprite(dX, dY, cTempFrame, dwTime);
					break;

				case 143: // Lightning
					_DrawThunderEffect(m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY - 800,
						m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY,
						m_pEffectList[i]->m_rX, m_pEffectList[i]->m_rY, 1);
					_DrawThunderEffect(m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY - 800,
						m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY,
						m_pEffectList[i]->m_rX + 4, m_pEffectList[i]->m_rY + 2, 2);
					_DrawThunderEffect(m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY - 800,
						m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY,
						m_pEffectList[i]->m_rX - 2, m_pEffectList[i]->m_rY - 2, 2);
					break;

				case 144: // Great-Defense-Shield
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-5);
					if (cTempFrame < 9)
						m_pEffectSpr[63]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					else m_pEffectSpr[63]->PutTransSpriteRGB(dX, dY, m_pEffectList[i]->m_cFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					break;

				case 151: // Lightning Bolt
					_DrawThunderEffect(m_pEffectList[i]->m_mX - m_sViewPointX, m_pEffectList[i]->m_mY - m_sViewPointY,
						m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY,
						m_pEffectList[i]->m_rX, m_pEffectList[i]->m_rY, 1);

					_DrawThunderEffect(m_pEffectList[i]->m_mX - m_sViewPointX, m_pEffectList[i]->m_mY - m_sViewPointY,
						m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY,
						m_pEffectList[i]->m_rX + 2, m_pEffectList[i]->m_rY - 2, 2);

					_DrawThunderEffect(m_pEffectList[i]->m_mX - m_sViewPointX, m_pEffectList[i]->m_mY - m_sViewPointY,
						m_pEffectList[i]->m_dX * 32 - m_sViewPointX, m_pEffectList[i]->m_dY * 32 - m_sViewPointY,
						m_pEffectList[i]->m_rX - 2, m_pEffectList[i]->m_rY - 2, 2);
					break;

				case 165: // Absolute-Magic-Protect
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY; // 53 = APFM buble
					m_pEffectSpr[53]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 166: // Armor-Break
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[55]->PutRevTransSprite(dX, dY + 35, m_pEffectList[i]->m_cFrame, dwTime);
					m_pEffectSpr[54]->PutTransSprite50(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 176: // Cancellation
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[90]->PutTransSprite_NoColorKey(dX + 50, dY + 85, cTempFrame, dwTime);
					break;

				case 177: // Illusion-Movement
				case 180: // Illusion
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-3);
					if (cTempFrame < 9)	m_pEffectSpr[60]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					else m_pEffectSpr[60]->PutTransSpriteRGB(dX, dY, m_pEffectList[i]->m_cFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					break;

				case 182: //Mass-Magic-Missile
					cTempFrame = m_pEffectList[i]->m_cFrame;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[98]->PutTransSprite(dX, dY, cTempFrame, dwTime, 0);
					break;

				case 183: // Inhibition-Casting
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-3);
					if (cTempFrame < 9) m_pEffectSpr[94]->PutTransSprite_NoColorKey(dX, dY + 40, m_pEffectList[i]->m_cFrame, dwTime);
					else m_pEffectSpr[94]->PutTransSpriteRGB(dX, dY + 40, m_pEffectList[i]->m_cFrame, iDvalue, iDvalue, iDvalue, dwTime);
					break;

				case 244: // Snoopy: d�plac� pour nvx sorts: Aura du casteur de Mass MagicMissile
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = m_pEffectList[i]->m_mX - m_sViewPointX;
					dY = m_pEffectList[i]->m_mY - m_sViewPointY;
					m_pEffectSpr[96]->PutTransSprite(dX, dY, m_pEffectList[i]->m_cFrame, dwTime, 0);
					break;

				case 190: // Mass-Illusion
				case 195: // Mass-Illusion-Movement
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (cTempFrame < 0) break;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					iDvalue = (cTempFrame - 5)*(-3);
					if (cTempFrame < 9) m_pEffectSpr[61]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					else m_pEffectSpr[61]->PutTransSpriteRGB(dX, dY, m_pEffectList[i]->m_cFrame, iDvalue, iDvalue, iDvalue, dwTime); // RGB2
					break;

				case 242:
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[87]->PutTransSprite_NoColorKey(dX + 50, dY + 57, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 243:
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[88]->PutTransSprite_NoColorKey(dX + 65, dY + 80, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 245:
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[174]->PutTransSprite_NoColorKey(dX + 50, dY + 57, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 246:
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[175]->PutTransSprite_NoColorKey(dX + 65, dY + 80, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 194: // Resurrection
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[99]->PutTransSprite(dX, dY, m_pEffectList[i]->m_cFrame, dwTime, 0);
					break;

				case 200: // shotstar fall on ground
					dX = m_pEffectList[i]->m_mX;
					dY = m_pEffectList[i]->m_mY;
					m_pEffectSpr[133]->PutTransSprite_NoColorKey(dX, dY, (rand() % 15), dwTime);
					break;

				case 201: // shotstar fall on ground
					dX = m_pEffectList[i]->m_mX;
					dY = m_pEffectList[i]->m_mY;
					m_pEffectSpr[134]->PutTransSprite_NoColorKey(dX, dY, (rand() % 15), dwTime);
					break;

				case 202: // shotstar fall on ground
					dX = m_pEffectList[i]->m_mX;
					dY = m_pEffectList[i]->m_mY;
					m_pEffectSpr[135]->PutTransSprite_NoColorKey(dX, dY, (rand() % 15), dwTime);
					break;

				case 203: // explosion feu apoc
					dX = m_pEffectList[i]->m_mX;
					dY = m_pEffectList[i]->m_mY;
					m_pEffectSpr[136]->PutTransSprite_NoColorKey(dX, dY, (rand() % 18), dwTime);
					break;

				case 204: // Faille oblique
					dX = m_pEffectList[i]->m_mX;
					dY = m_pEffectList[i]->m_mY;
					m_pEffectSpr[137]->PutTransSprite_NoColorKey(dX, dY, (rand() % 12), dwTime);
					break;

				case 205: // Faille horizontale
					dX = m_pEffectList[i]->m_mX;
					dY = m_pEffectList[i]->m_mY;
					m_pEffectSpr[138]->PutTransSprite_NoColorKey(dX, dY, (rand() % 12), dwTime);
					break;

				case 206: // steams
					dX = m_pEffectList[i]->m_mX;
					dY = m_pEffectList[i]->m_mY;
					m_pEffectSpr[139]->PutTransSprite_NoColorKey(dX, dY, (rand() % 20), dwTime);
					break;

				case 207: // Goal Aresden
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (m_pEffectList[i]->m_cFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[64]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 208: // Goal Elvine
					cTempFrame = m_pEffectList[i]->m_cFrame;
					if (m_pEffectList[i]->m_cFrame < 0) break;
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[65]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 250: // Gate (round one)
					dX = m_pEffectList[i]->m_mX - m_sViewPointX;
					dY = m_pEffectList[i]->m_mY - m_sViewPointY;
					m_pEffectSpr[103]->PutTransSprite_NoColorKey(dX, dY, (rand() % 3), dwTime);
					break;

				case 252: // burst (lisgt salmon color)
					dX = m_pEffectList[i]->m_mX - m_sViewPointX;
					dY = m_pEffectList[i]->m_mY - m_sViewPointY;
					m_pEffectSpr[104]->PutTransSprite_NoColorKey(dX, dY, (rand() % 3), dwTime);
					break;
			}
		}
	}
}

void CGame::_Draw_CharacterBody(short sX, short sY, short sType)
{
	DWORD dwTime = m_dwCurTime;
	int  iR, iG, iB;

	if (sType <= 3) {
		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 0]->PutSpriteFast(sX, sY, sType - 1, dwTime);
		_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 18]->PutSpriteRGB(sX, sY, (_tmp_sAppr1 & 0x0F00) >> 8, iR, iG, iB, dwTime);

		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 19]->PutSpriteFast(sX, sY, (_tmp_sAppr1 & 0x000F), dwTime);
	}
	else {
		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 40]->PutSpriteFast(sX, sY, sType - 4, dwTime);
		_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 18 + 40]->PutSpriteRGB(sX, sY, (_tmp_sAppr1 & 0x0F00) >> 8, iR, iG, iB, dwTime);
		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 19 + 40]->PutSpriteFast(sX, sY, (_tmp_sAppr1 & 0x000F), dwTime);
	}
}


void CGame::DrawEffectLights()
{
	int i, dX, dY, iDvalue;
	DWORD dwTime = m_dwCurTime;
	char  cTempFrame;
	for (i = 0; i < DEF_MAXEFFECTS; i++) {
		if (m_pEffectList[i] != NULL) {
			switch (m_pEffectList[i]->m_sType) {
				case 1: break;
				case 2: break;
				case 4: break;

				case 5:	// Fire Explosion
					if (m_pEffectList[i]->m_cFrame >= 0) {
						dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
						dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
						iDvalue = (m_pEffectList[i]->m_cFrame - 7)*(-1);
						if (m_pEffectList[i]->m_cFrame < 6)
							m_pEffectSpr[0]->PutTransSprite_NoColorKey(dX, dY + 30, 1, dwTime);
						else m_pEffectSpr[0]->PutTransSpriteRGB(dX, dY + 30, 1, iDvalue, iDvalue, iDvalue, dwTime);
					}
					break;

				case 6:	 // Energy Bolt
				case 10: // Lightning Arrow
					if (m_pEffectList[i]->m_cFrame >= 0) {
						dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
						dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
						iDvalue = (m_pEffectList[i]->m_cFrame - 9)*(-1);
						if (m_pEffectList[i]->m_cFrame < 8)
							m_pEffectSpr[0]->PutTransSprite_NoColorKey(dX, dY + 30, 1, dwTime);
						else m_pEffectSpr[0]->PutTransSpriteRGB(dX, dY + 30, 1, iDvalue, iDvalue, iDvalue, dwTime);
					}
					break;

				case 7: // Magic Missile Explosion
					if (m_pEffectList[i]->m_cFrame >= 0) {
						dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
						dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
						iDvalue = (m_pEffectList[i]->m_cFrame - 2)*(-1);
						if (m_pEffectList[i]->m_cFrame < 2)
							m_pEffectSpr[0]->PutTransSprite_NoColorKey(dX, dY + 30, 1, dwTime);
						else m_pEffectSpr[0]->PutTransSpriteRGB(dX, dY + 30, 1, iDvalue, iDvalue, iDvalue, dwTime);
					}
					break;

				case 16:
				case 61:
				case 66:
				case 100:
				case 110:
				case 120:
				case 130:
				case 137: // Lightning arrow
					// Light on ground below the flying effect
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					iDvalue = -5;
					m_pEffectSpr[0]->PutTransSpriteRGB(dX, dY + 30, 1, iDvalue, iDvalue, iDvalue, dwTime);
					break;

				case 69:
				case 70:
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[0]->PutTransSprite25(dX, dY + 30, 1, dwTime);
					break;

				case 33: //
					/*
					if (m_pEffectList[i]->m_cFrame >= 0) {
						dX  = (m_pEffectList[i]->m_mX)  - m_sViewPointX;
						dY  = (m_pEffectList[i]->m_mY)  - m_sViewPointY;
						iDvalue = (m_pEffectList[i]->m_cFrame - 9)*(-1);
						if (m_pEffectList[i]->m_cFrame < 8)
							 m_pEffectSpr[0]->PutTransSprite(dX, dY, 1, dwTime);
						else m_pEffectSpr[0]->PutTransSpriteRGB(dX, dY, 1, iDvalue, iDvalue, iDvalue, dwTime);
					}
					*/
					break;

				case 40: //
				case 56:
					if (m_pEffectList[i]->m_cFrame >= 0) {
						dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
						dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
						iDvalue = (m_pEffectList[i]->m_cFrame - 7)*(-1);
						if (m_pEffectList[i]->m_cFrame < 6)
							m_pEffectSpr[0]->PutTransSprite(dX, dY, 1, dwTime);
						else m_pEffectSpr[0]->PutTransSpriteRGB(dX, dY, 1, iDvalue, iDvalue, iDvalue, dwTime);
					}
					break;

				case 52: // Protection Ring
					if (m_pEffectList[i]->m_cFrame >= 0) {
						dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
						dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
						m_pEffectSpr[24]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					}
					break;

				case 57:
					if (m_pEffectList[i]->m_cFrame >= 0) {
						dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
						dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
						m_pEffectSpr[30]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					}
					break;

				case 73:
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[74]->PutTransSprite(dX, dY - 34, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 74:
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[75]->PutTransSprite(dX, dY + 35, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 75: // Icegolem
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[76]->PutTransSprite25(dX + m_pEffectList[i]->m_dX*m_pEffectList[i]->m_cFrame, dY + m_pEffectList[i]->m_dY*m_pEffectList[i]->m_cFrame, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 76:// Icegolem
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[77]->PutTransSprite25(dX + m_pEffectList[i]->m_dX*m_pEffectList[i]->m_cFrame, dY + m_pEffectList[i]->m_dY*m_pEffectList[i]->m_cFrame, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 77:// Icegolem
					dX = (m_pEffectList[i]->m_mX) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_mY) - m_sViewPointY;
					m_pEffectSpr[78]->PutTransSprite25(dX + m_pEffectList[i]->m_dX*m_pEffectList[i]->m_cFrame, dY + m_pEffectList[i]->m_dY*m_pEffectList[i]->m_cFrame, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 150: // Berserk : Cirlcle 6 magic
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[58]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				/*case 152: // FuryOfWar
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[171]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;*/

				case 185: // Berserk : Cirlcle 6 magic
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[171]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 183: // Inhibition casting
					cTempFrame = m_pEffectList[i]->m_cFrame;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[95]->PutTransSprite_NoColorKey(dX, dY + 40, cTempFrame, dwTime);
					break;

				case 180: // Ilusion
				case 190: // Mass Illusion
					cTempFrame = m_pEffectList[i]->m_cFrame;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[59]->PutTransSprite_NoColorKey(dX, dY, cTempFrame, dwTime);
					break;

				case 177: // Illusion mvt
				case 195: // Mass Illusion mvt
					cTempFrame = m_pEffectList[i]->m_cFrame;
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[102]->PutTransSprite_NoColorKey(dX, dY + 30, cTempFrame, dwTime);
					break;

				case 207:
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[64]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;

				case 208:
					dX = (m_pEffectList[i]->m_dX * 32) - m_sViewPointX;
					dY = (m_pEffectList[i]->m_dY * 32) - m_sViewPointY;
					m_pEffectSpr[65]->PutTransSprite_NoColorKey(dX, dY, m_pEffectList[i]->m_cFrame, dwTime);
					break;
			}
		}
	}
}

void CGame::_LoadShopMenuContents(char cType)
{
	char cFileName[255], cTemp[255];
	HANDLE hFile;
	FILE * pFile;
	DWORD  dwFileSize;
	char * pBuffer;

	ZeroMemory(cFileName, sizeof(cFileName));
	strcat(cFileName, "contents");
	strcat(cFileName, "\\");
	strcat(cFileName, "\\");

	switch (cType) {
		case -1: strcat(cFileName, "TradeEk.cfg"); break;
		case -2: strcat(cFileName, "TradeContrib.cfg"); break;
		case -3: strcat(cFileName, "TradeCoins.cfg"); break;
		case -4: strcat(cFileName, "TradePks.cfg"); break;
		default:
			ZeroMemory(cTemp, sizeof(cTemp));
			wsprintf(cTemp, "contents%d", cType);
			strcat(cFileName, cTemp);
			strcat(cFileName, ".txt");
			break;
	}

	hFile = CreateFile(cFileName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);

	pFile = fopen(cFileName, "rt");
	if (pFile == NULL) return;
	else {
		pBuffer = new char[dwFileSize + 1];
		ZeroMemory(pBuffer, dwFileSize + 1);
		fread(pBuffer, dwFileSize, 1, pFile);

		__bDecodeContentsAndBuildItemForSaleList(pBuffer);
		delete[] pBuffer;
	}
	fclose(pFile);
}

BOOL CGame::__bDecodeContentsAndBuildItemForSaleList(char * pBuffer)
{
	char * pContents, *token;
	char seps[] = "= ,\t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int  iItemForSaleListIndex = 0;
	short TitleIndex = 0;
	class CStrTok * pStrTok;
	int i;

	pContents = pBuffer;

	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != NULL) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							ZeroMemory(m_pItemForSaleList[iItemForSaleListIndex]->m_cName, sizeof(m_pItemForSaleList[iItemForSaleListIndex]->m_cName));
							memcpy(m_pItemForSaleList[iItemForSaleListIndex]->m_cName, token, strlen(token));
							cReadModeB = 2;
							break;
						case 2:	// m_cItemType
							m_pItemForSaleList[iItemForSaleListIndex]->m_cItemType = atoi(token);
							cReadModeB = 3;
							break;
						case 3: // m_cEquipPos
							m_pItemForSaleList[iItemForSaleListIndex]->m_cEquipPos = atoi(token);
							cReadModeB = 4;
							break;
						case 4: // m_sItemEffectType
							//m_pItemForSaleList[iItemForSaleListIndex]->m_sItemEffectType = atoi(token);
							cReadModeB = 5;
							break;
						case 5:	// m_sItemEffectValue1
							m_pItemForSaleList[iItemForSaleListIndex]->m_sItemEffectValue1 = atoi(token);
							cReadModeB = 6;
							break;
						case 6: // m_sItemEffectValue2
							m_pItemForSaleList[iItemForSaleListIndex]->m_sItemEffectValue2 = atoi(token);
							cReadModeB = 7;
							break;
						case 7: // m_sItemEffectValue3
							m_pItemForSaleList[iItemForSaleListIndex]->m_sItemEffectValue3 = atoi(token);
							cReadModeB = 8;
							break;
						case 8: // m_sItemEffectValue4
							m_pItemForSaleList[iItemForSaleListIndex]->m_sItemEffectValue4 = atoi(token);
							cReadModeB = 9;
							break;
						case 9: // m_sItemEffectValue5
							m_pItemForSaleList[iItemForSaleListIndex]->m_sItemEffectValue5 = atoi(token);
							cReadModeB = 10;
							break;
						case 10: // m_sItemEffectValue6
							m_pItemForSaleList[iItemForSaleListIndex]->m_sItemEffectValue6 = atoi(token);
							cReadModeB = 11;
							break;
						case 11: // m_wMaxLifeSpan
							m_pItemForSaleList[iItemForSaleListIndex]->m_wMaxLifeSpan = (WORD)atoi(token);
							cReadModeB = 12;
							break;
						case 12: // m_sMaxFixCount
							//m_pItemForSaleList[iItemForSaleListIndex]->m_sMaxFixCount = atoi(token);
							cReadModeB = 13;
							break;
						case 13: // m_sSprite
							m_pItemForSaleList[iItemForSaleListIndex]->m_sSprite = atoi(token);
							cReadModeB = 14;
							break;
						case 14: // m_sSpriteFrame
							m_pItemForSaleList[iItemForSaleListIndex]->m_sSpriteFrame = atoi(token);
							cReadModeB = 15;
							break;
						case 15: // m_wPrice
							m_pItemForSaleList[iItemForSaleListIndex]->m_wPrice = atoi(token);
							cReadModeB = 16;
							break;
						case 16: // m_wWeight
							m_pItemForSaleList[iItemForSaleListIndex]->m_wWeight = atoi(token);
							cReadModeB = 17;
							break;
						case 17: // Appr Value
							//m_pItemForSaleList[iItemForSaleListIndex]->m_cApprValue = atoi(token);
							cReadModeB = 18;
							break;
						case 18: // m_cSpeed
							m_pItemForSaleList[iItemForSaleListIndex]->m_cSpeed = atoi(token);
							cReadModeB = 19;
							break;
						case 19: // Level Limit
							m_pItemForSaleList[iItemForSaleListIndex]->m_sLevelLimit = atoi(token);
							m_pItemForSaleList[iItemForSaleListIndex]->m_dwCount = 1;
							cReadModeA = 0;
							cReadModeB = 0;
							iItemForSaleListIndex++;
							break;
					}
					break;

				case 2:
					switch (cReadModeB) {
						case 1:
							if (TitleIndex != 0)
								TitleShop[TitleIndex - 1].Finish = iItemForSaleListIndex - 1;
							TitleShop[TitleIndex].Init = iItemForSaleListIndex;
							ZeroMemory(TitleShop[TitleIndex].Title, sizeof(TitleShop[TitleIndex].Title));
							memcpy(TitleShop[TitleIndex].Title, token, strlen(token));
							for (i = 0; i <= 30; i++)
								if (TitleShop[TitleIndex].Title[i] == '_') TitleShop[TitleIndex].Title[i] = ' ';
							cReadModeA = 0;
							cReadModeB = 0;
							TitleIndex++;
							break;
					}
					break;

				case 3:
					switch (cReadModeB) {
						case 1:
							ZeroMemory(TradeType, sizeof(TradeType));
							memcpy(TradeType, token, strlen(token));
							if (memcmp(token, "EnemyKills", 10) == 0) ListType = 1;
							else if (memcmp(token, "Contributions", 13) == 0) ListType = 2;
							else if (memcmp(token, "Coins", 5) == 0) ListType = 3;
							else if (memcmp(token, "Pks", 3) == 0) ListType = 4;

							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;

				default:
					break;
			}
		}
		else {
			if (memcmp(token, "Item", 4) == 0) {
				if (iItemForSaleListIndex >= DEF_MAXMENUITEMS) {
					delete pStrTok;
					return FALSE;
				}
				cReadModeA = 1;
				cReadModeB = 1;
				m_pItemForSaleList[iItemForSaleListIndex] = new class CItem;
			}
			else if (memcmp(token, "Title", 5) == 0) {
				if (iItemForSaleListIndex >= DEF_MAXMENUITEMS) {
					delete pStrTok;
					return FALSE;
				}
				cReadModeA = 2;
				cReadModeB = 1;
			}
			else if (memcmp(token, "Trade-Type", 10) == 0) {
				cReadModeA = 3;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}
	if (TitleIndex != 0) {
		TitleShop[TitleIndex - 1].Finish = iItemForSaleListIndex - 1;
		if (ListType == -1) ListType = 99;
	}

	delete pStrTok;
	if ((cReadModeA != 0) || (cReadModeB != 0)) return FALSE;
	return TRUE;
}

static char __cSpace[] = { 8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8, 8,6,8,7,8,8,9,10,9,7, 8,8,8,8,8, 8,8,
						  15,16,12,17,14,15,14,16,10,13, 19,10,17,17,15,14,15,16,13,17, 16,16,20,17,16,14,
						  8,8,8,8,8,8,	8,6,7,8,7,7,7,7,4,7,7,  4,11,7,8,8,7,8,6,5,8,9,14,8,9,8, 8,8,8,8,
						  8,8,8,8,8,8,8 };

void CGame::PutString_SprFont(int iX, int iY, char * pStr, short sR, short sG, short sB)
{
	int iXpos;
	DWORD iCnt;
	DWORD dwTime = G_dwGlobalTime;
	char  cTmpStr[100];

	ZeroMemory(cTmpStr, sizeof(cTmpStr));
	strcpy(cTmpStr, pStr);
	iXpos = iX;
	for (iCnt = 0; iCnt < strlen(cTmpStr); iCnt++) {
		if ((cTmpStr[iCnt] >= 33) && (cTmpStr[iCnt] <= 122)) {
			m_pSprite[DEF_SPRID_INTERFACE_FONT1]->PutSpriteRGB(iXpos + 1, iY, cTmpStr[iCnt] - 33, sR + 11, sG + 7, sB + 6, dwTime);
			if ((sR == 0) && (sG == 0) && (sB == 0))
				m_pSprite[DEF_SPRID_INTERFACE_FONT1]->PutSpriteFast(iXpos, iY, cTmpStr[iCnt] - 33, dwTime);
			else m_pSprite[DEF_SPRID_INTERFACE_FONT1]->PutSpriteRGB(iXpos, iY, cTmpStr[iCnt] - 33, sR, sG, sB, dwTime);
			iXpos += __cSpace[cTmpStr[iCnt] - 33];
		}
		else iXpos += 5;
	}
}

void CGame::PutString_SprFont3(int iX, int iY, char * pStr, short sR, short sG, short sB, BOOL bTrans, int iType)
{
	int iXpos, iAdd;
	DWORD iCnt;
	DWORD dwTime = G_dwGlobalTime;
	char  cTmpStr[128];

	ZeroMemory(cTmpStr, sizeof(cTmpStr));
	strcpy(cTmpStr, pStr);

	if (iType != -1) {
		iAdd = 95 * iType;
		iXpos = iX;
		for (iCnt = 0; iCnt < strlen(cTmpStr); iCnt++) {
			if ((cTmpStr[iCnt] >= 32) && (cTmpStr[iCnt] <= 126)) {

				if (bTrans == FALSE) {
					m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS2]->PutSpriteFast(iXpos, iY + 1, cTmpStr[iCnt] - 32 + iAdd, dwTime);
					m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS2]->PutSpriteFast(iXpos + 1, iY + 1, cTmpStr[iCnt] - 32 + iAdd, dwTime);
					if ((sR == 0) && (sG == 0) && (sB == 0))
						m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS2]->PutSpriteFast(iXpos, iY, cTmpStr[iCnt] - 32 + iAdd, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS2]->PutSpriteRGB(iXpos, iY, cTmpStr[iCnt] - 32 + iAdd, sR, sG, sB, dwTime);

				}
				else m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS2]->PutTransSpriteRGB(iXpos, iY, cTmpStr[iCnt] - 32 + iAdd, sR, sG, sB, dwTime);

				iXpos += (m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS2]->m_stBrush[cTmpStr[iCnt] - 32 + iAdd].szx);
			}
			else iXpos += 5;
		}
	}
	else {
		iAdd = 0;
		iXpos = iX;
		for (iCnt = 0; iCnt < strlen(cTmpStr); iCnt++) {
			if ((cTmpStr[iCnt] >= 32) && (cTmpStr[iCnt] <= 126)) {

				if (bTrans == FALSE) {
					m_pSprite[DEF_SPRID_INTERFACE_FONT2]->PutSpriteFast(iXpos, iY + 1, cTmpStr[iCnt] - 32 + iAdd, dwTime);
					m_pSprite[DEF_SPRID_INTERFACE_FONT2]->PutSpriteFast(iXpos + 1, iY + 1, cTmpStr[iCnt] - 32 + iAdd, dwTime);
					if ((sR == 0) && (sG == 0) && (sB == 0))
						m_pSprite[DEF_SPRID_INTERFACE_FONT2]->PutSpriteFast(iXpos, iY, cTmpStr[iCnt] - 32 + iAdd, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_FONT2]->PutSpriteRGB(iXpos, iY, cTmpStr[iCnt] - 32 + iAdd, sR, sG, sB, dwTime);

				}
				else m_pSprite[DEF_SPRID_INTERFACE_FONT2]->PutTransSpriteRGB(iXpos, iY, cTmpStr[iCnt] - 32 + iAdd, sR, sG, sB, dwTime);

				iXpos += (m_pSprite[DEF_SPRID_INTERFACE_FONT2]->m_stBrush[cTmpStr[iCnt] - 32 + iAdd].szx);
			}
			else iXpos += 5;
		}
	}
}

static char __cSpace2[] = { 6,4,6,6,6,6,6,6,6,6,6 }; //{8,6,9,8,8,9,8,8,8,8};
void CGame::PutString_SprNum(int iX, int iY, char * pStr, short sR, short sG, short sB)
{
	int iXpos;
	unsigned char iCnt;
	DWORD dwTime = G_dwGlobalTime;
	char  cTmpStr[200];
	WORD  wR, wG, wB;
	ZeroMemory(cTmpStr, sizeof(cTmpStr));
	strcpy(cTmpStr, pStr);
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(sR, sG, sB), &wR, &wG, &wB);
	iXpos = iX;
	for (iCnt = 0; iCnt < strlen(cTmpStr); iCnt++) {
		if ((cTmpStr[iCnt] >= 0x30) && (cTmpStr[iCnt] <= 0x39)) {
			m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutTransSprite(iXpos + 2, iY, cTmpStr[iCnt] - 0x30 + 6, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutTransSprite(iXpos + 1, iY + 1, cTmpStr[iCnt] - 0x30 + 6, dwTime);
			if ((sR == 0) && (sG == 0) && (sB == 0))
				m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutTransSprite(iXpos, iY, cTmpStr[iCnt] - 0x30 + 6, dwTime);
			else m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutTransSpriteRGB(iXpos, iY, cTmpStr[iCnt] - 0x30 + 6, wR, wG, wB, dwTime);
			iXpos += __cSpace2[cTmpStr[iCnt] - 0x30];
		}
	}
}

void CGame::PutString(int iX, int iY, char * pString, COLORREF color, BOOL bHide, char cBGtype, BOOL bIsPreDC)
{
	char * pTmp;
	int i;
	if (strlen(pString) == 0) return;
	if (bIsPreDC == FALSE) m_DDraw._GetBackBufferDC();
	if (bHide == FALSE) {
		switch (cBGtype) {
			case 0:
				m_DDraw.TextOut(iX + 1, iY, pString, color);
				break;
			case 1:
				m_DDraw.TextOut(iX, iY + 1, pString, RGB(5, 5, 5));
				m_DDraw.TextOut(iX + 1, iY + 1, pString, RGB(5, 5, 5));
				m_DDraw.TextOut(iX + 1, iY, pString, RGB(5, 5, 5));
				break;
		}
		m_DDraw.TextOut(iX, iY, pString, color);
	}
	else {
		pTmp = new char[strlen(pString) + 2];
		ZeroMemory(pTmp, strlen(pString) + 2);
		strcpy(pTmp, pString);

		for (i = 0; i < (int)strlen(pString); i++)
			if (pTmp[i] != NULL) pTmp[i] = '*';

		switch (cBGtype) {
			case 0:
				m_DDraw.TextOut(iX + 1, iY, pTmp, color);
				break;
			case 1:
				m_DDraw.TextOut(iX, iY + 1, pTmp, RGB(5, 5, 5));
				m_DDraw.TextOut(iX + 1, iY + 1, pTmp, RGB(5, 5, 5));
				m_DDraw.TextOut(iX + 1, iY, pTmp, RGB(5, 5, 5));
				break;
		}
		m_DDraw.TextOut(iX, iY, pTmp, color);
		delete[] pTmp;
	}
	if (bIsPreDC == FALSE) m_DDraw._ReleaseBackBufferDC();
}

void CGame::PutString(int iX, int iY, char * pString, COLORREF color)
{
	m_DDraw._GetBackBufferDC();
	m_DDraw.TextOut(iX, iY, pString, color);
	m_DDraw._ReleaseBackBufferDC();
}

void CGame::PutString2(int iX, int iY, char * pString, short sR, short sG, short sB)
{
	m_DDraw._GetBackBufferDC();
	m_DDraw.TextOut(iX + 1, iY, pString, RGB(0, 0, 0));
	m_DDraw.TextOut(iX, iY + 1, pString, RGB(0, 0, 0));
	m_DDraw.TextOut(iX + 1, iY + 1, pString, RGB(0, 0, 0));
	m_DDraw.TextOut(iX, iY, pString, RGB(sR, sG, sB));
	m_DDraw._ReleaseBackBufferDC();
}

void CGame::PutAlignedString(int iX1, int iX2, int iY, char * pString, short sR, short sG, short sB)
{
	RECT rt;
	m_DDraw._GetBackBufferDC();
	SetRect(&rt, iX1, iY, iX2, iY + 15);
	m_DDraw.DrawText(&rt, pString, RGB(sR, sG, sB));
	m_DDraw._ReleaseBackBufferDC();
}

void CGame::PutAlignedString2(int iX1, int iX2, int iY, char * pString, short sR, short sG, short sB)
{
	RECT rt;
	m_DDraw._GetBackBufferDC();
	SetRect(&rt, iX1 + 1, iY, iX2 + 1, iY + 15);
	m_DDraw.DrawText(&rt, pString, RGB(0, 0, 0));
	SetRect(&rt, iX1, iY + 1, iX2, iY + 16);
	m_DDraw.DrawText(&rt, pString, RGB(0, 0, 0));
	SetRect(&rt, iX1 + 1, iY + 1, iX2 + 1, iY + 16);
	m_DDraw.DrawText(&rt, pString, RGB(0, 0, 0));
	SetRect(&rt, iX1, iY, iX2, iY + 15);
	m_DDraw.DrawText(&rt, pString, RGB(sR, sG, sB));
	m_DDraw._ReleaseBackBufferDC();
}

BOOL CGame::bInitMagicCfgList()
{
	char cFn[255], cTemp[255];
	char * pContents, *token;
	char seps[] = "= ,\t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int  iMagicCfgListIndex = 0;
	class CStrTok * pStrTok;
	HANDLE hFile;
	FILE * pFile;
	DWORD  dwFileSize;

	ZeroMemory(cTemp, sizeof(cTemp));
	ZeroMemory(cFn, sizeof(cFn));

	strcpy(cTemp, "magiccfg.txt");

	strcat(cFn, "contents");
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, cTemp);

	hFile = CreateFile(cFn, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);

	pFile = fopen(cFn, "rt");
	if (pFile == NULL) return FALSE;
	else {
		pContents = new char[dwFileSize + 1];
		ZeroMemory(pContents, dwFileSize + 1);
		fread(pContents, dwFileSize, 1, pFile);
		fclose(pFile);
	}

	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != NULL) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}

							if (m_pMagicCfgList[atoi(token)] != NULL) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_pMagicCfgList[atoi(token)] = new class CMagic;
							iMagicCfgListIndex = atoi(token);

							cReadModeB = 2;
							break;

						case 2:
							ZeroMemory(m_pMagicCfgList[iMagicCfgListIndex]->m_cName, sizeof(m_pMagicCfgList[iMagicCfgListIndex]->m_cName));
							memcpy(m_pMagicCfgList[iMagicCfgListIndex]->m_cName, token, strlen(token));
							cReadModeB = 3;
							break;

						case 3: // m_sValue1
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_pMagicCfgList[iMagicCfgListIndex]->m_sValue1 = atoi(token);
							cReadModeB = 4;
							break;

						case 4: // m_sValue2	// INT
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_pMagicCfgList[iMagicCfgListIndex]->m_sValue2 = atoi(token);
							cReadModeB = 5;
							break;

						case 5: // m_sValue3	// COST
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_pMagicCfgList[iMagicCfgListIndex]->m_sValue3 = atoi(token);
							cReadModeB = 6;
							break;

						case 6: // m_sValue4	// STR
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_pMagicCfgList[iMagicCfgListIndex]->m_sValue4 = atoi(token);
							cReadModeB = 7;
							break;

						case 7: // m_sValue5
							cReadModeB = 8;
							break;

						case 8: // m_sValue6
							cReadModeB = 9;
							break;

						case 9: // m_bIsVisible
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							if (atoi(token) == 0) m_pMagicCfgList[iMagicCfgListIndex]->m_bIsVisible = FALSE;
							else m_pMagicCfgList[iMagicCfgListIndex]->m_bIsVisible = TRUE;
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;

				default:
					break;
			}
		}
		else {
			if (memcmp(token, "magic", 5) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}

	delete pStrTok;
	delete[] pContents;

	if ((cReadModeA != 0) || (cReadModeB != 0)) return FALSE;

	return TRUE;
}

BOOL CGame::bCheckImportantFile()
{
	HANDLE hFile;
	hFile = CreateFile("SPRITES\\TREES1.PAK", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	if (hFile == INVALID_HANDLE_VALUE) return FALSE;
	CloseHandle(hFile);
	return TRUE;
}

BOOL CGame::bInitSkillCfgList()
{
	char cFn[255], cTemp[255];
	char * pContents, *token;
	char seps[] = "= ,\t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int  iSkillCfgListIndex = 0;
	class CStrTok * pStrTok;
	HANDLE hFile;
	FILE * pFile;
	DWORD  dwFileSize;

	ZeroMemory(cTemp, sizeof(cTemp));
	ZeroMemory(cFn, sizeof(cFn));

	strcpy(cTemp, "Skillcfg.txt");
	strcat(cFn, "contents");
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, cTemp);

	hFile = CreateFile(cFn, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);

	pFile = fopen(cFn, "rt");
	if (pFile == NULL) return FALSE;
	else {
		pContents = new char[dwFileSize + 1];
		ZeroMemory(pContents, dwFileSize + 1);
		fread(pContents, dwFileSize, 1, pFile);
		fclose(pFile);
	}

	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != NULL) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}

							if (m_pSkillCfgList[atoi(token)] != NULL) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_pSkillCfgList[atoi(token)] = new class CSkill;
							iSkillCfgListIndex = atoi(token);
							cReadModeB = 2;
							break;

						case 2:
							ZeroMemory(m_pSkillCfgList[iSkillCfgListIndex]->m_cName, sizeof(m_pSkillCfgList[iSkillCfgListIndex]->m_cName));
							memcpy(m_pSkillCfgList[iSkillCfgListIndex]->m_cName, token, strlen(token));
							cReadModeB = 3;
							break;

						case 3: // m_bIsUseable
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_pSkillCfgList[iSkillCfgListIndex]->m_bIsUseable = (BOOL)atoi(token);
							cReadModeB = 4;
							break;

						case 4: // m_cUseMethod
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_pSkillCfgList[iSkillCfgListIndex]->m_cUseMethod = atoi(token);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;

				default:
					break;
			}
		}
		else {
			if (memcmp(token, "skill", 5) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}

	delete pStrTok;
	delete[] pContents;

	if ((cReadModeA != 0) || (cReadModeB != 0)) return FALSE;

	return TRUE;
}


BOOL CGame::_bGetIsStringIsNumber(char * pStr)
{
	int i;
	for (i = 0; i < (int)strlen(pStr); i++)
		if ((pStr[i] != '-') && ((pStr[i] < (char)'0') || (pStr[i] > (char)'9'))) return FALSE;

	return TRUE;
}

void CGame::RequestFullObjectData(WORD wObjectID)
{
	char    cMsg[256];
	int     iRet;
	DWORD * dwp;
	WORD  * wp;

	ZeroMemory(cMsg, sizeof(cMsg));

	dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
	*dwp = CLIENT_REQUEST_FULLOBJECTDATA;
	wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
	*wp = wObjectID;

	iRet = m_pGSock->iSendMsgServer((char *)cMsg, 6);

	switch (iRet) {
		case DEF_XSOCKEVENT_SOCKETCLOSED:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_QUENEFULL:
			ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);

			delete m_pGSock;
			m_pGSock = NULL;
			break;

		case DEF_XSOCKEVENT_CRITICALERROR:
			delete m_pGSock;
			m_pGSock = NULL;

			if (G_pCalcSocket != NULL) {
				delete G_pCalcSocket;
				G_pCalcSocket = NULL;
			}
			SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
			break;
	}
}

BOOL CGame::DrawObject_OnAttack(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID)
{
	int iBodyIndex, iUndiesIndex, iHairIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iHelmIndex, iR, iG, iB;
	int iWeaponIndex, iWeapon, iAdd, iShieldIndex, iMantleIndex;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempWeaponColor, TempShieldColor, TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114 || _tmp_sOwnerType == 120) bInv = TRUE; //Energy-Ball,Wyvern

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors)) {
		iWeaponColor = 0;
		iShieldColor = 0;
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else {
		// New Colors -> ZeroEoyPnk
		iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (iWeaponColor == 0) {
			iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (iWeaponColor != 0) iWeaponColor += 15;
		}

		iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (iShieldColor == 0) {
			iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (iShieldColor != 0) iShieldColor += 15;
		}

		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares)) {
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
		iShieldGlare = (_tmp_sAppr4 & 0x0003);

		// New Colors -> ZeroEoyPnk
		TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (TempWeaponColor == 0) {
			TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (TempWeaponColor != 0) TempWeaponColor += 15;
		}

		TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (TempShieldColor == 0) {
			TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (TempShieldColor != 0) TempShieldColor += 15;
		}

		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0) {
	//	DecriptString(m_cPlayerName);
		if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
		else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
		//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
		else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
		else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
		else {
	//		EncriptString(m_cPlayerName);
			return FALSE;
		}
		//EncriptString(m_cPlayerName);
	}
	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if ((_tmp_sAppr2 & 0xF000) != 0) {
				iWeapon = ((_tmp_sAppr2 & 0x0FF0) >> 4);
				if (iWeapon == 0) iAdd = 6;
				if ((iWeapon >= 1) && (iWeapon <= 39)) iAdd = 6;
				if ((iWeapon >= 40) && (iWeapon <= 59)) iAdd = 7;

				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;

				if ((_tmp_sAppr4 & 0x80) == 0) {
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}

				if ((_tmp_sAppr3 & 0x000F) == 0) iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;

				if ((_tmp_sAppr3 & 0x0F00) == 0) iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0) iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;

				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0) iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 4 + (_tmp_cDir - 1);

				if ((_tmp_sAppr2 & 0x000F) == 0) iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 4;

				if ((_tmp_sAppr4 & 0x0F00) == 0) iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;

				if ((_tmp_sAppr3 & 0x00F0) == 0) iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else {
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (5 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 5;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 5;

				if ((_tmp_sAppr4 & 0x80) == 0) {
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0) iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 5;
				}

				if ((_tmp_sAppr3 & 0x000F) == 0) iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 5;

				if ((_tmp_sAppr3 & 0x0F00) == 0) iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 5;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0) iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 5;

				if ((_tmp_sAppr4 & 0x0F00) == 0) iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 5;

				if ((_tmp_sAppr3 & 0x00F0) == 0) iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 5;

				iWeaponIndex = -1;
				iShieldIndex = -1;
			}
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0) {
				iWeapon = ((_tmp_sAppr2 & 0x0FF0) >> 4);
				if (iWeapon == 0) iAdd = 6;
				if ((iWeapon >= 1) && (iWeapon <= 39)) iAdd = 6;
				if ((iWeapon >= 40) && (iWeapon <= 59)) iAdd = 7;

				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;

				if ((_tmp_sAppr4 & 0x80) == 0) {
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0) iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}

				if ((_tmp_sAppr3 & 0x000F) == 0) iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;

				if ((_tmp_sAppr3 & 0x0F00) == 0) iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0) iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;

				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0) iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 4 + (_tmp_cDir - 1);

				if ((_tmp_sAppr2 & 0x000F) == 0) iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 4;

				if ((_tmp_sAppr4 & 0x0F00) == 0) iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;

				if ((_tmp_sAppr3 & 0x00F0) == 0) iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else {
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (5 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 5;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 5;

				if ((_tmp_sAppr4 & 0x80) == 0) {
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0) iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 5;
				}

				if ((_tmp_sAppr3 & 0x000F) == 0) iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 5;

				if ((_tmp_sAppr3 & 0x0F00) == 0) iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 5;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0) iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 5;

				if ((_tmp_sAppr4 & 0x0F00) == 0) iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 5;

				if ((_tmp_sAppr3 & 0x00F0) == 0) iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 5;

				iWeaponIndex = -1;
				iShieldIndex = -1;
			}
			break;

		default:
			if (_tmp_sAppr2 != 0) {
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				_tmp_cFrame = _tmp_sAppr2 - 1;
			}
			else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
	}

	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, _tmp_cFrame, _tmp_sOwnerType);
	if (_tmp_iEffectType != 0) {
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}
	EncriptString(m_cCurLocation);

	if (bTrans == FALSE) {
		CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
		if (_cDrawingOrder[_tmp_cDir] == 1) {
			if (iWeaponIndex != -1) {

				if (iWeaponColor == 0) m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
				else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);

				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
				if (_tmp_cFrame == 3) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame - 1, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
			}
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // FireWyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows)) {
						if (sX < 50) m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
					}
					break;
			}

			if (_tmp_sOwnerType == 35) m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

			if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) { // Abaddon
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
			}
			else if (bInv == TRUE) {
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
			}
			else {
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
			}

			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

			if ((iHairIndex != -1) && (iHelmIndex == -1)) {
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iPantsIndex != -1) {
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iArmArmorIndex != -1) {
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iBodyArmorIndex != -1) {
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iHelmIndex != -1) {
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (((_tmp_sAppr2 & 0x000F) == 8) && (iShieldGlare == 1)) {
				m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
			}
			else {
				if (iShieldIndex != -1) {
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {
						case 0: break;//Logo GM						
						 //case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);		
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}
		else {
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows)) {
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
					}
					break;
			}

			if (_tmp_sOwnerType == 35) m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

			if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) { // Abaddon
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
			}
			else if (bInv == TRUE) {
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
			}
			else {
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
			}

			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

			if ((iHairIndex != -1) && (iHelmIndex == -1)) {
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iPantsIndex != -1) {
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iArmArmorIndex != -1) {
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iBodyArmorIndex != -1) {
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iHelmIndex != -1) {
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iShieldIndex != -1) {
				if (iShieldColor == 0)
					m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {
					case 0: break;
						//Logo GM
					//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
					case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iWeaponIndex != -1) {
				if (iWeaponColor == 0)
					m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
				else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
				if (_tmp_cFrame == 3) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame - 1, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
			}
		}

		if ((_tmp_iStatus & 0x20) != 0) // Berserk
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) {
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0)
				ShowAdmin(sX, sY, _tmp_AdminLevel);
		}

		DrawAngel((_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame % 8, dwTime);
		CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);
		DrawFlag(sX - 10, sY - 70, dwTime);

	}
	else if (strlen(_tmp_cName) > 0) {
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX, sY, i, dwTime);
			}
		}
	}

	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);

	if (_tmp_iChatIndex != NULL) {
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID)) {
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
		}
		else m_pMapData->ClearChatMsg(indexX, indexY);
	}

	// Snoopy: Abaddon effects
	if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) {
		int randFrame = _tmp_cFrame % 12;
		m_pEffectSpr[154]->PutTransSprite70(sX - 50, sY - 50, randFrame, dwTime);
		m_pEffectSpr[155]->PutTransSprite70(sX - 20, sY - 80, randFrame, dwTime);
		m_pEffectSpr[156]->PutTransSprite70(sX + 70, sY - 50, randFrame, dwTime);
		m_pEffectSpr[157]->PutTransSprite70(sX - 30, sY, randFrame, dwTime);
		m_pEffectSpr[158]->PutTransSprite70(sX - 60, sY + 90, randFrame, dwTime);
		m_pEffectSpr[159]->PutTransSprite70(sX + 65, sY + 85, randFrame, dwTime);
		switch (_tmp_cDir) {
			case 1:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 108, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 50, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 2:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 70, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 3:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 105, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 90, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 4:
				m_pEffectSpr[153]->PutTransSprite70(sX - 35, sY + 100, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 80, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 5:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 65, sY - 5, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 6:
				m_pEffectSpr[153]->PutTransSprite70(sX + 45, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 31, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 7:
				m_pEffectSpr[153]->PutTransSprite70(sX + 40, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 30, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 8:
				m_pEffectSpr[153]->PutTransSprite70(sX + 20, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 20, sY + 16, _tmp_iEffectFrame % 15, dwTime);
				break;
		}
	}

	// New Effect Mobs
	switch (_tmp_sOwnerType) {
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;

	return FALSE;
}

void CGame::ConnectionEstablishHandler(char cWhere)
{
	ChangeGameMode(DEF_GAMEMODE_ONWAITINGRESPONSE);

	switch (cWhere) {
		case DEF_SERVERTYPE_GAME:
			bSendCommand(CLIENT_REQUEST_INITPLAYER, NULL, NULL, NULL, NULL, NULL, NULL);
			break;

		case DEF_SERVERTYPE_LOG:
			switch (m_dwConnectMode) {
				case NUCLEO_REQUEST_CREATENEWCHARACTER:
					bSendCommand(NUCLEO_REQUEST_CREATENEWCHARACTER, NULL, NULL, NULL, NULL, NULL, NULL);
					break;
				case NUCLEO_REQUEST_DELETECHARACTER:
					bSendCommand(NUCLEO_REQUEST_DELETECHARACTER, NULL, NULL, NULL, NULL, NULL, NULL);
					break;
				case MSGID_REQUEST_CHANGEPASSWORD:
					bSendCommand(MSGID_REQUEST_CHANGEPASSWORD, NULL, NULL, NULL, NULL, NULL, NULL);
					break;
				default:
					ConnectionEstablishHandler2();
					break;
			}
			break;
	}
}

// TODO: Hasta ac� llegue... Hay que seguir acomodando desde aca...
BOOL CGame::DrawObject_OnAttackMove(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID)
{
	int iBodyIndex, iUndiesIndex, iHairIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iHelmIndex, iR, iG, iB;
	int iWeaponIndex, iWeapon, iAdd, iShieldIndex, iMantleIndex, dx, dy, dsx, dsy;
	int cFrameMoveDots;
	BOOL bInv = FALSE, bDashDraw = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempWeaponColor, TempShieldColor, TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;


	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114 || _tmp_sOwnerType == 120) bInv = TRUE; //Energy-Ball,Wyvern

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iWeaponColor = 0;
		iShieldColor = 0;
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (iWeaponColor == 0) {
			iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (iWeaponColor != 0) iWeaponColor += 15;
		}

		iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (iShieldColor == 0) {
			iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (iShieldColor != 0) iShieldColor += 15;
		}

		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
		iShieldGlare = (_tmp_sAppr4 & 0x0003);

		// New Colors -> ZeroEoyPnk
		TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (TempWeaponColor == 0) {
			TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (TempWeaponColor != 0) TempWeaponColor += 15;
		}

		TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (TempShieldColor == 0) {
			TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (TempShieldColor != 0) TempShieldColor += 15;
		}

		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0)
	{
	//	DecriptString(m_cPlayerName);
		if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
		else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
		//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck lalo
		else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
		else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
		else {
		//	EncriptString(m_cPlayerName);
			return FALSE;
		}
	//	EncriptString(m_cPlayerName);
	}

	switch (_tmp_cFrame) {
		case 4:  _tmp_cFrame = 4; break;
		case 5:  _tmp_cFrame = 4; break;
		case 6:  _tmp_cFrame = 4; break;
		case 7:  _tmp_cFrame = 4; break;
		case 8:  _tmp_cFrame = 4; break;
		case 9:  _tmp_cFrame = 4; break;
		case 10: _tmp_cFrame = 5; break;
		case 11: _tmp_cFrame = 6; break;
		case 12: _tmp_cFrame = 7; break;
	}

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if ((_tmp_sAppr2 & 0xF000) != 0) {
				iWeapon = ((_tmp_sAppr2 & 0x0FF0) >> 4);
				if (iWeapon == 0) iAdd = 6;
				if ((iWeapon >= 1) && (iWeapon <= 39)) iAdd = 6;
				if ((iWeapon >= 40) && (iWeapon <= 59)) iAdd = 7;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 4 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 4;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (5 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 5;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 5;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 5;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 5;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 5;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 5;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 5;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 5;
				iWeaponIndex = -1;
				iShieldIndex = -1;
			}
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0) {
				iWeapon = ((_tmp_sAppr2 & 0x0FF0) >> 4);
				if (iWeapon == 0) iAdd = 6;
				if ((iWeapon >= 1) && (iWeapon <= 39)) iAdd = 6;
				if ((iWeapon >= 40) && (iWeapon <= 59)) iAdd = 7;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 4 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 4;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (5 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 5;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 5;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 5;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 5;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 5;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 5;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 5;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 5;
				iWeaponIndex = -1;
				iShieldIndex = -1;
			}
			break;
		default:
			iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
	}
	dx = 0;
	dy = 0;
	if ((_tmp_cFrame >= 1) && (_tmp_cFrame <= 3))
	{
		switch (_tmp_cFrame) {
			case 1: cFrameMoveDots = 26; break;
			case 2: cFrameMoveDots = 16; break;
			case 3: cFrameMoveDots = 0;  break;
		}
		switch (_tmp_cDir) {
			case 1: dy = cFrameMoveDots; break;
			case 2: dy = cFrameMoveDots; dx = -cFrameMoveDots; break;
			case 3: dx = -cFrameMoveDots; break;
			case 4: dx = -cFrameMoveDots; dy = -cFrameMoveDots; break;
			case 5: dy = -cFrameMoveDots; break;
			case 6: dy = -cFrameMoveDots; dx = cFrameMoveDots; break;
			case 7: dx = cFrameMoveDots; break;
			case 8: dx = cFrameMoveDots; dy = cFrameMoveDots; break;
		}
		switch (_tmp_cFrame) {
			case 1: dy++;    break;
			case 2: dy += 2; break;
			case 3: dy++;    break;
		}
		switch (_tmp_cFrame) {
			case 2: bDashDraw = TRUE; cFrameMoveDots = 26; break;
			case 3: bDashDraw = TRUE; cFrameMoveDots = 16; break;
		}
		dsx = 0;
		dsy = 0;
		switch (_tmp_cDir) {
			case 1: dsy = cFrameMoveDots; break;
			case 2: dsy = cFrameMoveDots; dsx = -cFrameMoveDots; break;
			case 3: dsx = -cFrameMoveDots; break;
			case 4: dsx = -cFrameMoveDots; dsy = -cFrameMoveDots; break;
			case 5: dsy = -cFrameMoveDots; break;
			case 6: dsy = -cFrameMoveDots; dsx = cFrameMoveDots; break;
			case 7: dsx = cFrameMoveDots; break;
			case 8: dsx = cFrameMoveDots; dsy = cFrameMoveDots; break;
		}
	}
	else if (_tmp_cFrame > 3)
	{
		dx = 0;
		dy = 0;
	}
	else
	{
		switch (_tmp_cDir) {
			case 1: dy = 32; break;
			case 2: dy = 32; dx = -32; break;
			case 3: dx = -32; break;
			case 4: dx = -32; dy = -32; break;
			case 5: dy = -32; break;
			case 6: dy = -32; dx = 32; break;
			case 7: dx = 32; break;
			case 8: dx = 32; dy = 32; break;
		}
	}

	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX + dx, sY + dy, _tmp_cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	if (_tmp_iEffectType != 0) {
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX + dx, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX + dx, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX + dx, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (bTrans == FALSE)
	{
		CheckActiveAura(sX + dx, sY + dy, dwTime, _tmp_sOwnerType);
		if (_cDrawingOrder[_tmp_cDir] == 1)
		{
			if (iWeaponIndex != -1)
			{
				if (iWeaponColor == 0)
					m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
				else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
				if (_tmp_cFrame == 3) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame - 1, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
			}
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
					}
					break;
			}

			if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
			else {
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
			}
			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);


			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

			if ((iHairIndex != -1) && (iHelmIndex == -1)) {
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iPantsIndex != -1) {
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iArmArmorIndex != -1) {
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iBodyArmorIndex != -1) {
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iHelmIndex != -1) {
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iShieldIndex != -1)
			{
				if (iShieldColor == 0)
					m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

				else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;//lalo glare
								  //Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
					//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}
		else
		{
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;

				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
					}
					break;
			}

			if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
			else {
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
			}
			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

			if ((iHairIndex != -1) && (iHelmIndex == -1)) {
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iPantsIndex != -1) {
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iArmArmorIndex != -1) {
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare

				}
			}
			if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iBodyArmorIndex != -1) {
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iHelmIndex != -1)
			{
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}


			if (iShieldIndex != -1)
			{
				if (iShieldColor == 0)
					m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;		//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
					//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1)) {
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iWeaponIndex != -1)
			{
				if (iWeaponColor == 0)
					m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
				else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
				if (_tmp_cFrame == 3) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame - 1, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
			}
		}

		// Berserk
		if ((_tmp_iStatus & 0x20) != 0)
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0)
				ShowAdmin(sX + dx, sY + dy, _tmp_AdminLevel);
		}

		DrawAngel(8 + (_tmp_cDir - 1), sX + dx + 20, sY + dy - 20, _tmp_cFrame % 8, dwTime);

		CheckActiveAura2(sX + dx, sY + dy, dwTime, _tmp_sOwnerType);

		// Capture The Flag - Angel position Based
		DrawFlag(sX + dx - 10, sY + dy - 70, dwTime);

		if (bDashDraw == TRUE) {
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dsx, sY + dsy, _tmp_cFrame, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
			if (iWeaponIndex != -1) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dsx, sY + dsy, _tmp_cFrame, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
			if (iShieldIndex != -1) m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dsx, sY + dsy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
		}
	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX + dx, sY + dy, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(sX + dx, sY + dy, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (m_iPartyStatus != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX + dx, sY + dy, i, dwTime);
			}
		}
	}

	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX + dx, sY + dy, dwTime);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID)) {
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX + dx;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY + dy;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}
	_tmp_dx = dx;
	_tmp_dy = dy;

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;

	return FALSE;
}




BOOL   CGame::DrawObject_OnMagic(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID)
{
	int iBodyIndex, iUndiesIndex, iHairIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iR, iG, iB, iHelmIndex, iMantleIndex;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare;
	short iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114) bInv = TRUE; //Energy-Ball,Wyvern

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		// New Colors -> ZeroEoyPnk
		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0)
	{
		//DecriptString(m_cPlayerName);
		if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0)
			bInv = TRUE;
		else
		{
			if (_tmp_iChatIndex != NULL)
			{
				if (m_pChatMsgList[_tmp_iChatIndex] != NULL)
				{
					m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
					m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
				}
				else
				{
					m_pMapData->ClearChatMsg(indexX, indexY);
				}
			}
			return FALSE;
		}
	//	EncriptString(m_cPlayerName);
	}

	iHelmGlare = (_tmp_sAppr4 & 0x00EF);
	iArmorGlare = (_tmp_sAppr4 & 0x003F);
	iArmGlare = (_tmp_sAppr4 & 0x000F);
	iPantsGlare = (_tmp_sAppr4 & 0x000E);
	iMantleGlare = (_tmp_sAppr4 & 0x003E);
	iBootsGlare = (_tmp_sAppr4 & 0x00EE);

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (8 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 8;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 8;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 8;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 8;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 8;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 8;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 8;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 8;
			break;
		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;

			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (8 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 8;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 8;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 8;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 8;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 8;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 8;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 8;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 8;
			break;
	}

	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, _tmp_cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	if (_tmp_iEffectType != 0)
	{
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (bTrans == FALSE)
	{
		CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
		switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
			case 10: // Slime
			case 35: // Energy Sphere
			case 50: // TW
			case 51: // CP
			case 60: // Plant
			case 65: // IceGolem
			case 66: // Wyvern
			case 73: // Fire Wyvern
			case 81: // Abaddon
			case 91: // Gate
			case 92:
			case 120:
			case 128: //BlackWyvern
				break;
			default:
				if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
				{
					if (sX < 50)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				break;
		}

		if (bInv == TRUE)
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
		else {
			if ((_tmp_iStatus & 0x40) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
			else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
		}
		SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

		if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);

		if ((iHairIndex != -1) && (iHelmIndex == -1))
		{
			_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
			m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, iR, iG, iB, dwTime);
		}

		if ((iBootsIndex != -1) && (iSkirtDraw == 1))
		{
			if (iBootsColor == 0)
				m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
			else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
			BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
			switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iPantsIndex != -1) {//PANTS ONMAGIC 1
			if (iPantsColor == 0)
				m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
			else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
			LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
			switch (iPantsGlare) {
				case 0: break;
				case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iArmArmorIndex != -1)//HAUBERK ONMAGIC 1
		{
			if (iArmColor == 0)
				m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
			else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
			HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
			switch (iArmGlare) {
				case 0: break;
				case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}


		if ((iBootsIndex != -1) && (iSkirtDraw == 0))
		{
			if (iBootsColor == 0)
				m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
			else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
			BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
			switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iBodyArmorIndex != -1)//ARMOR ONMAGIC 1
		{
			if (iArmorColor == 0)
				m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
			else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
			ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
			switch (iArmorGlare) {
				case 0: break;
				case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iHelmIndex != -1)//HELM ONMAGIC 1
		{
			if (iHelmColor == 0)
				m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
			else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
			HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
			switch (iHelmGlare) {
				case 0: break;
				case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
				case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iMantleIndex != -1)
		{
			if (iMantleColor == 0)
				m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
			else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
			MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
			switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if ((_tmp_iStatus & 0x20) != 0) 	// Berserk
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0)
				ShowAdmin(sX, sY, _tmp_AdminLevel);
		}

		DrawAngel(32 + (_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame % 16, dwTime);
		CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

		// Capture The Flag - Angel position Based
		DrawFlag(sX - 10, sY - 70, dwTime);

	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX, sY, i, dwTime);
			}
		}
	}

	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
		{
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
	return FALSE;
}



BOOL   CGame::DrawObject_OnGetItem(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID)
{
	int iBodyIndex, iUndiesIndex, iHairIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iR, iG, iB, iHelmIndex, iMantleIndex;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare;
	short iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114) bInv = TRUE; //Energy-Ball,Wyvern

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		// New Colors -> ZeroEoyPnk
		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0)
	{
	//	DecriptString(m_cPlayerName);
		if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
		else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
		//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
		else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
		else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
		else {
	//		EncriptString(m_cPlayerName);
			return FALSE;
		}
	//	EncriptString(m_cPlayerName);
	}

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (9 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 9;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 9;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 9;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 9;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 9;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 9;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 9;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 9; 		break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (9 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 9;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 9;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 9;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 9;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 9;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 9;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 9;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 9;
			break;
		default:
			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
	}

	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, _tmp_cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	if (_tmp_iEffectType != 0)
	{
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (bTrans == FALSE)
	{
		CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
		switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
			case 10: // Slime
			case 35: // Energy Sphere
			case 50: // TW
			case 51: // CP
			case 60: // Plant
			case 65: // IceGolem
			case 66: // Wyvern
			case 73: // Fire Wyvern
			case 81: // Abaddon
			case 91: // Gate
			case 92:
			case 120:
			case 128: //BlackWyvern
				break;
			default:
				if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
				{
					if (sX < 50)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				break;
		}

		if (bInv == TRUE)
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite2(sX, sY, _tmp_cFrame, dwTime);
		else {
			if ((_tmp_iStatus & 0x40) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
			else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
		}
		SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

		if (iUndiesIndex != -1)
		{
			if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			else m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
		}

		if ((iHairIndex != -1) && (iHelmIndex == -1))
		{
			_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
			m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, iR, iG, iB, dwTime);
		}

		if ((iBootsIndex != -1) && (iSkirtDraw == 1))
		{
			if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			else
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}

		if (iPantsIndex != -1)//PANTS ONGETITEM 1
		{
			if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			else
			{
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}
		if (iArmArmorIndex != -1)//HAUBERK ONGETITEM 1
		{
			if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			else
			{
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}


		if ((iBootsIndex != -1) && (iSkirtDraw == 0))
		{
			if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			else
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}

		if (iBodyArmorIndex != -1)//ARMOR ONGETITEM 1
		{
			if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			else
			{
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}
		if (iHelmIndex != -1)//HELM ONGETITEM 1
		{
			if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			else
			{
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}

		if (iMantleIndex != -1)
		{
			if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			else
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}

		if ((_tmp_iStatus & 0x20) != 0) // Berserk
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0 && _tmp_AdminLevel < 90)
				ShowAdmin(sX, sY, _tmp_AdminLevel);
		}

		DrawAngel(40 + (_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame % 4, dwTime);
		CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

		// Capture The Flag - Angel position Based
		DrawFlag(sX - 10, sY - 70, dwTime);

	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX, sY, i, dwTime);
			}
		}
	}

	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
		{
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}
	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
	return FALSE;
}

BOOL CGame::DrawObject_OnDamage(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID)
{
	int iBodyIndex, iUndiesIndex, iHairIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iWeaponIndex, iShieldIndex, iHelmIndex, iR, iG, iB;
	int iAdd, iDrawMode, iMantleIndex;
	char cFrame;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempWeaponColor, TempShieldColor, TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114 || _tmp_sOwnerType == 120) bInv = TRUE; //Energy-Ball,Wyvern

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iWeaponColor = 0;
		iShieldColor = 0;
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (iWeaponColor == 0) {
			iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (iWeaponColor != 0) iWeaponColor += 15;
		}

		iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (iShieldColor == 0) {
			iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (iShieldColor != 0) iShieldColor += 15;
		}

		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
		iShieldGlare = (_tmp_sAppr4 & 0x0003);

		// New Colors -> ZeroEoyPnk
		TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (TempWeaponColor == 0) {
			TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (TempWeaponColor != 0) TempWeaponColor += 15;
		}

		TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (TempShieldColor == 0) {
			TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (TempShieldColor != 0) TempShieldColor += 15;
		}

		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0)
	{
	//	DecriptString(m_cPlayerName);
		if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
		else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
		//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
		else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
		else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
		else {
	//		EncriptString(m_cPlayerName);
			return FALSE;
		}
	//	EncriptString(m_cPlayerName);
	}
	switch (_tmp_sOwnerType) {
		case 91:
			_tmp_cDir = 3;
			break;
		case 92:
			_tmp_cFrame = 0;
			_tmp_cDir = 1;
			break;
	}

	cFrame = _tmp_cFrame;
	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if (cFrame < 4)
			{
				if ((_tmp_sAppr2 & 0xF000) != 0) iAdd = 1;
				else iAdd = 0;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * iAdd + (_tmp_cDir - 1);
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
				iDrawMode = 0;
			}
			else
			{
				cFrame -= 4;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (10 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 10;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 10;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 10;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 10;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 10;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 10;
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 5;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 5 + (_tmp_cDir - 1);
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 10;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 10;
				iDrawMode = 1;
			}
			break;
		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if (cFrame < 4)
			{
				if ((_tmp_sAppr2 & 0xF000) != 0) iAdd = 1;
				else iAdd = 0;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * iAdd + (_tmp_cDir - 1);
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
				iDrawMode = 0;
			}
			else
			{
				cFrame -= 4;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (10 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 10;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 10;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 10;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 10;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 10;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 10;
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 5;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 5 + (_tmp_cDir - 1);
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 10;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 10;
				iDrawMode = 1;
			}
			break;

		default:
			if (cFrame < 4)
			{
				if (_tmp_sAppr2 != 0)
				{
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					cFrame = _tmp_sAppr2 - 1;
				}
				else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 67) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 68) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 69) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 81) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 91) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 120) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			}
			else
			{
				cFrame -= 4;
				if (_tmp_sAppr2 != 0)
				{
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					cFrame = _tmp_sAppr2 - 1;
				}
				else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 67) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 68) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 69) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 81) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 91) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
				else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 120) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
			}
			if (_tmp_sOwnerType == 92) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7;

			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			iDrawMode = 0;
			break;
	}

	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	if (_tmp_iEffectType != 0)
	{
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (bTrans == FALSE)
	{
		CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
		if (iDrawMode == 1) // Etrange, 1 semble impossible avec des mobs !
		{
			if (_cDrawingOrder[_tmp_cDir] == 1)
			{
				if (iWeaponIndex != -1)
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
						case 0: break;
						case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
					case 10: // Slime
					case 35: // Energy Sphere
					case 50: // TW
					case 51: // CP
					case 60: // Plant
					case 65: // IceGolem
					case 66: // Wyvern
					case 73: // Fire Wyvern
					case 81: // Abaddon
					case 91: // Gate
					case 92:
					case 120:
					case 128: //BlackWyvern
						break;
					default:
						if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
						{
							if (sX < 50)
								m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, cFrame, dwTime);
							else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, cFrame, dwTime);
						}
						break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
				}
				else if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
				else
				{
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
				}
				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1)
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1)
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1)
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1)
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iShieldIndex != -1)
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
						case 0: break;		//Logo GM
						//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			else
			{
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
					case 10: // Slime
					case 35: // Energy Sphere
					case 50: // TW
					case 51: // CP
					case 60: // Plant
					case 65: // IceGolem
					case 66: // Wyvern
					case 73: // Fire Wyvern
					case 81: // Abaddon
					case 91: // Gate
					case 92:
					case 120:
					case 128: //BlackWyvern
						break;
					default:
						if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
						{
							if (sX < 50)
								m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, cFrame, dwTime);
							else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, cFrame, dwTime);
						}
						break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
				}
				else if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
				else
				{
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
				}
				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
				if (iPantsIndex != -1)
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1)
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1)
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1)
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iShieldIndex != -1)
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
						case 0: break;
							//Logo GM
						//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iWeaponIndex != -1)
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
						case 0: break;
						case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
			}

			if ((_tmp_iStatus & 0x20) != 0) 	// Berserk
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(sX, sY, _tmp_AdminLevel);
			}

			DrawAngel(16 + (_tmp_cDir - 1), sX + 20, sY - 20, cFrame % 4, dwTime);

			CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX - 10, sY - 70, dwTime);

		}
		else // DrawMode != 1
		{
			if (_cDrawingOrder[_tmp_cDir] == 1)
			{
				if (iWeaponIndex != -1)
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
						case 0: break;
						case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
					case 10: // Slime
					case 35: // Energy Sphere
					case 50: // TW
					case 51: // CP
					case 60: // Plant
					case 65: // IceGolem
					case 66: // Wyvern
					case 73: // Fire Wyvern
					case 81: // Abaddon
					case 91: // Gate
					case 92:
					case 120:
					case 128: //BlackWyvern
						break;
					default:
						if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
						{
							if (sX < 50)
								m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
							else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
						}
						break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
				}
				else if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
				else {
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
				}
				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1)
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1)
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1)
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1)
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iShieldIndex != -1)
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
						case 0: break;
							//Logo GM
						//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			else
			{
				switch (_tmp_sOwnerType) {
					case 10: // Slime
					case 35: // Energy Sphere
					case 50: // TW
					case 51: // CP
					case 60: // Plant
					case 65: // IceGolem
					case 66: // Wyvern
					case 73: // Fire Wyvern
					case 81: // Abaddon
					case 91: // Gate
					case 92:
					case 120:
					case 128: //BlackWyvern
						break;
					default:
						if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
						{
							if (sX < 50)
								m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, cFrame, dwTime);
							else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, cFrame, dwTime);
						}
						break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
				}
				else if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
				else {
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
				}

				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1)
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}


				if (iArmArmorIndex != -1)
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1)
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1)
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iShieldIndex != -1)
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
						case 0: break;
							//Logo GM
						//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iWeaponIndex != -1)
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
						case 0: break;
						case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
			}

			if ((_tmp_iStatus & 0x20) != 0)	// Berserk
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(sX, sY, _tmp_AdminLevel);
			}

			DrawAngel(16 + (_tmp_cDir - 1), sX + 20, sY - 20, cFrame % 4, dwTime);
			CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX - 10, sY - 70, dwTime);
		}
	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
			//	DecriptString(m_cPlayerName);
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX, sY, i, dwTime);
			//	EncriptString(m_cPlayerName);
			}
		}
	}

	//DecriptString(m_cPlayerName);
	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);
	//EncriptString(m_cPlayerName);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
		{
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}
	// Snoopy: Abaddon effects
	if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
	{
		int randFrame = _tmp_cFrame % 12;
		m_pEffectSpr[154]->PutTransSprite70(sX - 50, sY - 50, randFrame, dwTime);
		m_pEffectSpr[155]->PutTransSprite70(sX - 20, sY - 80, randFrame, dwTime);
		m_pEffectSpr[156]->PutTransSprite70(sX + 70, sY - 50, randFrame, dwTime);
		m_pEffectSpr[157]->PutTransSprite70(sX - 30, sY, randFrame, dwTime);
		m_pEffectSpr[158]->PutTransSprite70(sX - 60, sY + 90, randFrame, dwTime);
		m_pEffectSpr[159]->PutTransSprite70(sX + 65, sY + 85, randFrame, dwTime);
		switch (_tmp_cDir) {
			case 1:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 108, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 50, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 2:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 70, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 3:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 105, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 90, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 4:
				m_pEffectSpr[153]->PutTransSprite70(sX - 35, sY + 100, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 80, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 5:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 65, sY - 5, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 6:
				m_pEffectSpr[153]->PutTransSprite70(sX + 45, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 31, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 7:
				m_pEffectSpr[153]->PutTransSprite70(sX + 40, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 30, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 8:
				m_pEffectSpr[153]->PutTransSprite70(sX + 20, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 20, sY + 16, _tmp_iEffectFrame % 15, dwTime);
				break;
		}
	}

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;

	return FALSE;
}

BOOL CGame::DrawObject_OnDying(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY)
{
	int iBodyIndex, iUndiesIndex, iHairIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iR, iG, iB, iHelmIndex, iMantleIndex;
	int iSkirtDraw = 0;
	char cFrame;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare;
	short iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		// New Colors -> ZeroEoyPnk
		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	switch (_tmp_sOwnerType) {
		case 91:
			_tmp_cDir = 3;
			break;
		case 92:
			_tmp_cFrame = 0;
			_tmp_cDir = 1;
			break;
	}

	cFrame = _tmp_cFrame;

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if (cFrame < 6)
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (0 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 0;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 0;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 0;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 0;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 0;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 0;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 0;
			}
			else
			{
				cFrame -= 6;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (11 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 11;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 11;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 11;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 11;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 11;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 11;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 11;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 11;
			}
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if (cFrame < 6)
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (0 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 0;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 0;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 0;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 0;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 0;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 0;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 0;
			}
			else
			{
				cFrame -= 6;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (11 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 11;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 11;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 11;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 11;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 11;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 11;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 11;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 11;
			}
			break;

		default:
			if (cFrame < 4)
			{
				if (_tmp_sAppr2 != 0)
				{
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					cFrame = _tmp_sAppr2 - 1;
				}
				else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 81) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 91) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 120) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);

				if (_tmp_sOwnerType == 92) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7;

				iUndiesIndex = -1;
				iHairIndex = -1;
				iArmArmorIndex = -1;
				iBodyArmorIndex = -1;
				iPantsIndex = -1;
				iBootsIndex = -1;
				iMantleIndex = -1;
				iHelmIndex = -1;
				switch (_tmp_sOwnerType) {
					case 36: // AGT
					case 37: // CGT
					case 38: // MS
					case 39: // DT
					case 40: // ESG
					case 41: // GMG
					case 42: // ManaStone
					case 92:
						if (_tmp_sAppr2 == 0) cFrame = 0;
						break;
					case 51: cFrame = 0; break;
				}
			}
			else
			{
				switch (_tmp_sOwnerType) {
					case 51: cFrame = 0; break;
					default: cFrame -= 4; break;
				}
				if (_tmp_sAppr2 != 0)
				{
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					cFrame = _tmp_sAppr2 - 1;
				}
				else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 81) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 91) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 120) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);

				if (_tmp_sOwnerType == 92) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7;

				iUndiesIndex = -1;
				iHairIndex = -1;
				iArmArmorIndex = -1;
				iBodyArmorIndex = -1;
				iPantsIndex = -1;
				iBootsIndex = -1;
				iMantleIndex = -1;
				iHelmIndex = -1;
			}
			break;
	}

	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	if (_tmp_iEffectType != 0)
	{
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (bTrans == FALSE)
	{
		switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
			case 10: // Slime
			case 35: // Energy Sphere
			case 50: // TW
			case 51: // CP
			case 60: // Plant
			case 65: // IceGolem
			case 66: // Wyvern
			case 73: // Fire Wyvern
			case 81: // Abaddon
			case 91: // Gate
			case 92:
			case 120:
			case 128: //BlackWyvern
				break;
			default:
				if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
				{
					if (sX < 50)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, cFrame, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, cFrame, dwTime);
				}
				break;
		}
		if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
			//probando lalo m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
		{
			m_pEffectSpr[152]->PutTransSprite70(sX - 80, sY - 15, _tmp_iEffectFrame % 27, dwTime); // Explosion Abaddon
			m_pEffectSpr[152]->PutTransSprite70(sX, sY - 15, _tmp_iEffectFrame % 27, dwTime);
			m_pEffectSpr[152]->PutTransSprite70(sX - 40, sY, _tmp_iEffectFrame % 27, dwTime);
			m_pEffectSpr[163]->PutTransSprite70(sX - 90, sY - 80, _tmp_iEffectFrame % 12, dwTime); // Ames qui s'envolent
			m_pEffectSpr[160]->PutTransSprite70(sX - 60, sY - 50, _tmp_iEffectFrame % 12, dwTime);
			m_pEffectSpr[161]->PutTransSprite70(sX - 30, sY - 20, _tmp_iEffectFrame % 12, dwTime);
			m_pEffectSpr[162]->PutTransSprite70(sX, sY - 100, _tmp_iEffectFrame % 12, dwTime);
			m_pEffectSpr[163]->PutTransSprite70(sX + 30, sY - 30, _tmp_iEffectFrame % 12, dwTime);
			m_pEffectSpr[162]->PutTransSprite70(sX + 60, sY - 90, _tmp_iEffectFrame % 12, dwTime);
			m_pEffectSpr[163]->PutTransSprite70(sX + 90, sY - 50, _tmp_iEffectFrame % 12, dwTime);
			switch (_tmp_cDir) {
				case 1: m_pEffectSpr[140]->PutTransSprite70(sX, sY, cFrame, dwTime); break; // Abbadon dying
				case 2: m_pEffectSpr[141]->PutTransSprite70(sX, sY, cFrame, dwTime); break; // fixed sprit IDs
				case 3: m_pEffectSpr[142]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 4: m_pEffectSpr[143]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 5: m_pEffectSpr[144]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 6: m_pEffectSpr[145]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 7: m_pEffectSpr[146]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 8: m_pEffectSpr[147]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
			}
		}
		else if (_tmp_sOwnerType == 66) m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
		else if (_tmp_sOwnerType == 73 || _tmp_sOwnerType == 114)
			//	m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);//lalo desbug
		{
			m_pSprite[33]->PutTransSprite(sX, sY, cFrame, dwTime);
			switch (_tmp_cDir) {
				case 1: m_pEffectSpr[141]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break; // Abbadon qui meurt
				case 2: m_pEffectSpr[142]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 3: m_pEffectSpr[143]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 4: m_pEffectSpr[144]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 5: m_pEffectSpr[145]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 6: m_pEffectSpr[146]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 7: m_pEffectSpr[147]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
					//	case 8: m_pEffectSpr[148]->PutTransSprite70(sX, sY, cFrame+8, dwTime); break; //lalodesbug //+8
				case 8: m_pEffectSpr[141]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break; //due to buggy Sprite nb
			}
		}
		else
		{
			if ((_tmp_iStatus & 0x40) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
			else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
		}

		SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

		if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);

		if ((iHairIndex != -1) && (iHelmIndex == -1))
		{
			_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
			m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, iR, iG, iB, dwTime);
		}

		if ((iBootsIndex != -1) && (iSkirtDraw == 1))
		{
			if (iBootsColor == 0)
				m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
			else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
			BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
			switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iPantsIndex != -1)//PANTS ONDYING 1
		{
			if (iPantsColor == 0)
				m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
			else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
			LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
			switch (iPantsGlare) {
				case 0: break;
				case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iArmArmorIndex != -1)//HAUBERK ONDYING 1
		{
			if (iArmColor == 0)
				m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
			else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
			HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
			switch (iArmGlare) {
				case 0: break;
				case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glar
				case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}


		if ((iBootsIndex != -1) && (iSkirtDraw == 0))
		{
			if (iBootsColor == 0)
				m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
			else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
			BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
			switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iBodyArmorIndex != -1)//ARMOR ONDYING 1
		{
			if (iArmorColor == 0)
				m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
			else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
			ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
			switch (iArmorGlare) {
				case 0: break;
				case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iHelmIndex != -1)//HELM ONDYING 1
		{
			if (iHelmColor == 0)
				m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
			else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
			HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
			switch (iHelmGlare) {
				case 0: break;
				case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
				case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}


		if (iMantleIndex != -1)
		{
			if (iMantleColor == 0)
				m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
			else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
			MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
			switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if ((_tmp_iStatus & 0x20) != 0) // Berserk
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0)
				ShowAdmin(sX, sY, _tmp_AdminLevel);
		}

		DrawAngel(24 + (_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame, dwTime);
		CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

		// Capture The Flag - Angel position Based
		DrawFlag(sX - 10, sY - 70, dwTime);

	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus);
		else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
			//	DecriptString(m_cPlayerName);
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX, sY, i, dwTime);
			//	EncriptString(m_cPlayerName);
			}
		}
	}

//	DecriptString(m_cPlayerName);
	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);
//	EncriptString(m_cPlayerName);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
		{
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
	return FALSE;
}

BOOL   CGame::DrawObject_OnDead(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID)
{
	int iBodyIndex, iUndiesIndex, iHairIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iR, iG, iB, iFrame, iMantleIndex, iHelmIndex;
	int iSkirtDraw = 0;
//	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare;
	short iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
//	short TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 66) return FALSE;

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	/*if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		TempArmorColor  = (_tmp_iApprColor & 0x00F00000) >> 20;
		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		TempArmColor    = (_tmp_iApprColor & 0x0000F000) >> 12;
		TempPantsColor  = (_tmp_iApprColor & 0x00000F00) >> 8;
		TempBootsColor  = (_tmp_iApprColor & 0x000000F0) >> 4;
		TempHelmColor   = (_tmp_iApprColor & 0x0000000F);
	}*/

	switch (_tmp_sOwnerType) {
		case 91:
			_tmp_cDir = 3;
			break;
		case 92:
			_tmp_cFrame = 0;
			_tmp_cDir = 1;
			break;
	}

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iFrame = 7;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (11 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 11;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 11;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 11;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 11;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 11;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 11;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 11;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 11;
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			iFrame = 7;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (11 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 11;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 11;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 11;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 11;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 11;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 11;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 11;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 11;
			break;
		default:
			switch (_tmp_sOwnerType) {
				case 28: // Troll
				case 29: // Ogre
				case 30: // Liche
				case 31: // DD		// les 2 dernieres sont pas bonnes pour un mort !
				case 63: // Frost	// les 2 dernieres sont pas bonnes pour un mort !
					iFrame = 5;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					break;

				case 32: // Uni
				case 33: // WW
				case 43: // LWB
				case 44: // GHK
				case 45: // GHKABS
				case 46: // TK
				case 47: // BG
				case 48: // SK
				case 49: // HC
				case 50: // TW
				case 53: // BB
				case 54: // DE
				case 55: // Rabbit
				case 56: // Cat
				case 57: // Frog
				case 58: // MG
				case 59: // Ettin
				case 60: // Plant
				case 61: // Rudolph
				case 62: // Direboar
				case 64: // Crops  ----------- Crop ici! etonant, pourtant !
				case 65: // IceGolem
				case 70: // Dragon..........Ajouts par Snoopy
				case 71: // Centaur
				case 72: // ClawTurtle
				case 74: // GiantCrayfish
				case 75: // Gi Lizard
				case 76: // Gi Tree
				case 77: // Master Orc
				case 78: // Minaus
				case 79: // Nizie
				case 80: // Tentocle
				case 82: // Sorceress
				case 83: // ATK
				case 84: // MasterElf
				case 85: // DSK
				case 88: // Barbarian
				case 108: //HellDeath
				case 109:
				case 112:
				case 113:
				case 115:
				case 116:
				case 117:
				case 118:
				case 119:
					iFrame = 7;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					break;

				case 86: // HBT
				case 87: // CT
				case 89: // AGC
					iFrame = 7;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
					break;

				case 66: // Wyvern
					iFrame = 15;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
					break;

				case 73: // FireWyvern
				case 114: // DeathWyvern
				case 128: //BlackWyvern
					iFrame = 15;//7
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				//	bTrans = TRUE; // Prevents showing hugly corpse
					break;

				case 81: // Abaddon
				case 120://HellAbaddon
					iFrame = 15;//0
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
					//	bTrans = TRUE; // Prevents showing hugly corpse
					break;

				case 51: // CP
					iFrame = 0;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					break;

				case 52: // GG
					iFrame = 11;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					break;

				case 91: // Gate
					iFrame = 5;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
					break;

				case 92:
					iFrame = 0;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7;
					break;

				default: // 40*4 (10...27)
					iFrame = 3;
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					break;
			}
			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
	}

	if (bTrans == FALSE)
	{
		if (_tmp_cFrame == -1)
		{
			_tmp_cFrame = 7;
			if ((_tmp_iStatus & 0x40) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, iFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
			else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, iFrame, dwTime);

			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				/*BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				}*/
			}

			if (iPantsIndex != -1)
			{
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				/*LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				}*/
			}

			if (iArmArmorIndex != -1)
			{
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				/*HauberkGlare(TempArmColor , iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				}*/
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				/*BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				}*/
			}

			if (iBodyArmorIndex != -1)
			{
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				/*ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				}*/
			}

			if (iHelmIndex != -1)
			{
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				/*HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
				case 0: break;
				case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
				case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				}	*/
			}

			if (iMantleIndex != -1)
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				/*MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				}*/
			}
		}
		else
			if ((_tmp_iStatus & 0x20) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, iFrame, -2 * _tmp_cFrame + 5, -2 * _tmp_cFrame - 5, -2 * _tmp_cFrame - 5, dwTime);
			else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, iFrame, -2 * _tmp_cFrame, -2 * _tmp_cFrame, -2 * _tmp_cFrame, dwTime);

	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
		//		DecriptString(m_cPlayerName);
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX, sY, i, dwTime);
		//		EncriptString(m_cPlayerName);
			}
		}
	}

//	DecriptString(m_cPlayerName);
	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);
//	EncriptString(m_cPlayerName);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
		{
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
		}
		else
		{
			m_pMapData->ClearDeadChatMsg(indexX, indexY);
		}
	}
	// Snoopy: Abaddon effects
	if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
	{
		Abaddon_corpse(sX, sY); // By Snoopy....
	}
	else if (_tmp_sOwnerType == 73 || _tmp_sOwnerType == 114)
	{//	m_pEffectSpr[35]->PutTransSprite70(sX+120, sY+120, rand(), dwTime); //lalo
		m_pEffectSpr[35]->PutTransSprite70(sX + 20, sY - 15, rand() % 10, dwTime);//35
	}
	else if (_tmp_sOwnerType == 66)
	{//	m_pEffectSpr[35]->PutTransSprite70(sX+120, sY+120, rand(), dwTime); //BUSCAME AKA
		m_pEffectSpr[35]->PutTransSprite70(sX + 20, sY - 15, rand() % 10, dwTime);//35
	}

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
				(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
				(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
				(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
				(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
		}
	}
	return FALSE;
}



BOOL CGame::DrawObject_OnMove(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID, const bool frame_omision)
{
	int dx, dy;
	int iBodyIndex, iHairIndex, iUndiesIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iHelmIndex, iR, iG, iB;
	int iWeaponIndex, iShieldIndex, iAdd, iMantleIndex;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempWeaponColor, TempShieldColor, TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 114)	bInv = TRUE; //Energy-Ball, Wyvern

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iWeaponColor = 0;
		iShieldColor = 0;
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (iWeaponColor == 0) {
			iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (iWeaponColor != 0) iWeaponColor += 15;
		}

		iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (iShieldColor == 0) {
			iShieldColor = (_tmp_iApprColor2 & 0xF0000000) >> 24;
			if (iShieldColor != 0) iShieldColor += 15;
		}

		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
		iShieldGlare = (_tmp_sAppr4 & 0x0003);

		// New Colors -> ZeroEoyPnk
		TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (TempWeaponColor == 0) {
			TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (TempWeaponColor != 0) TempWeaponColor += 15;
		}

		TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (TempShieldColor == 0) {
			TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (TempShieldColor != 0) TempShieldColor += 15;
		}

		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0)
	{
	//	DecriptString(m_cPlayerName);
		if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
		else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
		//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
		else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
		else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
		else {
	//		EncriptString(m_cPlayerName);
			return FALSE;
		}
	//	EncriptString(m_cPlayerName);
	}

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iAdd = 3;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 3 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 3;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (2 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 2;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 2;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 2;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 2;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 2;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else  iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 2 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 2;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 2;
			}
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iAdd = 3;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 3 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 3;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (2 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 2;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 2;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 2;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 2;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 2;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 2 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 2;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 2;
			}
			break;

		default:
			if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
	}
	dx = 0;
	dy = 0;
	const bool value = frame_omision;

	switch (_tmp_cDir) {
	case 1: dy = 30 - (_tmp_cFrame << 2) - value; break;
	case 2: dy = 30 - (_tmp_cFrame << 2) - value; dx = (_tmp_cFrame << 2) + value - 30; break;
	case 3: dx = (_tmp_cFrame << 2) + value - 30; break;
	case 4: dx = (_tmp_cFrame << 2) + value - 30; dy = (_tmp_cFrame << 2) + value - 30; break;
	case 5: dy = (_tmp_cFrame << 2) + value - 30; break;
	case 6: dy = (_tmp_cFrame << 2) + value - 30; dx = 30 - (_tmp_cFrame << 2) - value; break;
	case 7: dx = 30 - (_tmp_cFrame << 2) - value; break;
	case 8: dx = 30 - (_tmp_cFrame << 2) - value; dy = 30 - (_tmp_cFrame << 2) - value; break;
	}

	int fix_x = 0;
	int fix_y = 0;

	switch (_tmp_cDir) {
	case 1: fix_x = sX + dx;		 fix_y = sY + dy - value; break;//listo
	case 2: fix_x = sX + dx + value; fix_y = sY + dy - value; break;//listo
	case 3: fix_x = sX + dx + value; fix_y = sY + dy;		  break;//listo
	case 4: fix_x = sX + dx + value; fix_y = sY + dy + value; break;//listo
	case 5: fix_x = sX + dx;		 fix_y = sY + dy + value; break;//listo
	case 6: fix_x = sX + dx - value; fix_y = sY + dy + value; break;//listo
	case 7: fix_x = sX + dx - value; fix_y = sY + dy;		  break;//listo
	case 8: fix_x = sX + dx - value; fix_y = sY + dy - value; break;//listo
	}
	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:

		case 28: // Troll.
		case 29: // Orge.
		case 30: // Liche
		case 31: // DD
		case 32: // Uni
		case 33: // ww

		case 43: // LWB
		case 44: // GHK
		case 45: // GHKABS
		case 46: // TK
		case 47: // BG
		case 48: // SK
		case 49: // HC
		case 50: // TW

		case 52: // GG
		case 53: // BB
		case 54: // DE
		case 55: // Rabbit
		case 56: // Cat
		case 57: // Frog
		case 58: // MG
		case 59: // Ettin
		case 60: // Plant
		case 61: // Rudolph
		case 62: // DireBoar
		case 63: // Frost

		case 65: // Ice-Golem
		case 66: // Wyvern

		case 70: // Dragon..........Ajouts par Snoopy
		case 71: // Centaur
		case 72: // ClawTurtle
		case 73: // FireWyvern
		case 74: // GiantCrayfish
		case 75: // Gi Lizard
		case 76: // Gi Tree
		case 77: // Master Orc
		case 78: // Minaus
		case 79: // Nizie
		case 80: // Tentocle
		case 81: // Abaddon
		case 82: // Sorceress
		case 83: // ATK
		case 84: // MasterElf
		case 85: // DSK
		case 86: // HBT
		case 87: // CT
		case 88: // Barbarian
		case 89: // AGC
		case 90: // Gail
		case 108: //HellDeath
		case 109:
		case 111:
			//case 112:
		case 113:
		case 114:
			//case 115:
		case 116:
		case 117:
		case 118:
		case 119:
			//case 120:
		case 128:

			break;

		default:
			_tmp_cFrame = _tmp_cFrame / 2;
			break;
	}

	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(fix_x, fix_y, _tmp_cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	if (_tmp_iEffectType != 0)
	{
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (_tmp_sOwnerType == 65) // IceGolem
	{	/*m_pEffectSpr[77]->PutTransSprite70(sX+dx, sY+dy, _tmp_cFrame, dwTime);*/
		switch (rand() % 3) {
			case 0:	m_pEffectSpr[76]->PutTransSprite70(fix_x, fix_y, _tmp_cFrame, dwTime); break;
			case 1:	m_pEffectSpr[77]->PutTransSprite70(fix_x, fix_y, _tmp_cFrame, dwTime); break;
			case 2:	m_pEffectSpr[78]->PutTransSprite70(fix_x, fix_y, _tmp_cFrame, dwTime); break;
		}
	}
	if (bTrans == FALSE)
	{
		CheckActiveAura(fix_x, fix_y, dwTime, _tmp_sOwnerType);
		if (_cDrawingOrder[_tmp_cDir] == 1)
		{
			if (iWeaponIndex != -1)
			{
				if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(fix_x, fix_y, _tmp_cFrame, dwTime);
				else
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				}
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
			}
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyv
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
					}
					break;
			}
			if (_tmp_sOwnerType == 35)
				m_pEffectSpr[0]->PutTransSprite(fix_x, fix_y, 1, dwTime);

			if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
			{
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
			}
			else if (bInv == TRUE)
				//m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite2(sX+dx, sY+dy, _tmp_cFrame, dwTime);
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
			else
			{
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
			}

			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iPantsIndex != -1)//PANTS ONMOVE 1
			{
				if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if (iArmArmorIndex != -1)//HAUBERK ONMOVE 1
			{
				if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONMOVE 1
			{
				if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iHelmIndex != -1)//HELM ONMOVE 1
			{
				if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iShieldIndex != -1)
			{
				if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				}
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
		}
		else
		{
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
					}
					break;
			}
			if (_tmp_sOwnerType == 35)
				m_pEffectSpr[0]->PutTransSprite(fix_x, fix_y, 1, dwTime);

			if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
			{
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite70(fix_x, fix_y, _tmp_cFrame, dwTime);
			}
			else if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
			else
			{
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
			}

			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iPantsIndex != -1)//PANTS ONMOVE 2
			{
				if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if (iArmArmorIndex != -1)//HAUBERK ONMOVE 2
			{
				if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONMOVE 2
			{
				if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if (iHelmIndex != -1)//HELM ONMOVE 2
			{
				if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iShieldIndex != -1)
			{
				if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				}
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;
				//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iWeaponIndex != -1)
			{
				if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(fix_x, fix_y, _tmp_cFrame, dwTime);
				else
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				}
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
			}
		}

		// Berserk
		if ((_tmp_iStatus & 0x20) != 0)
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0)
				ShowAdmin(fix_x, fix_y, _tmp_AdminLevel);
		}


		DrawAngel(40 + (_tmp_cDir - 1), sX + dx + 20, sY + dy - 20, _tmp_cFrame % 4, dwTime);
		CheckActiveAura2(fix_x, fix_y, dwTime, _tmp_sOwnerType);

		// Capture The Flag - Angel position Based
		DrawFlag(sX + dx - 10, sY + dy - 70, dwTime);

	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(fix_x, fix_y, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(fix_x, fix_y, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
	//			DecriptString(m_cPlayerName);
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(fix_x, fix_y, i, dwTime);
	//			EncriptString(m_cPlayerName);
			}
		}
	}

//	DecriptString(m_cPlayerName);
	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(fix_x, fix_y, dwTime);
	//EncriptString(m_cPlayerName);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
		{
			/*m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX + dx;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY + dy;*/
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = fix_x;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = fix_y;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}
	_tmp_dx = dx;
	_tmp_dy = dy;
	// Snoopy: Abaddon effects
	if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
	{
		int randFrame = _tmp_iEffectFrame % 12;
		m_pEffectSpr[154]->PutTransSprite70(sX - 50, sY - 50, randFrame, dwTime);
		m_pEffectSpr[155]->PutTransSprite70(sX - 20, sY - 80, randFrame, dwTime);
		m_pEffectSpr[156]->PutTransSprite70(sX + 70, sY - 50, randFrame, dwTime);
		m_pEffectSpr[157]->PutTransSprite70(sX - 30, sY, randFrame, dwTime);
		m_pEffectSpr[158]->PutTransSprite70(sX - 60, sY + 90, randFrame, dwTime);
		m_pEffectSpr[159]->PutTransSprite70(sX + 65, sY + 85, randFrame, dwTime);
		switch (_tmp_cDir) {
			case 1:
				m_pEffectSpr[153]->PutTransSprite70(fix_x, fix_y + 108, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 50, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 2:
				m_pEffectSpr[153]->PutTransSprite70(fix_x, fix_y + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 70, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 3:
				m_pEffectSpr[153]->PutTransSprite70(fix_x, fix_y + 105, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 90, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 4:
				m_pEffectSpr[153]->PutTransSprite70(sX + dx - 35, sY + dy + 100, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 80, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 5:
				m_pEffectSpr[153]->PutTransSprite70(fix_x, fix_y + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 65, sY + dy - 5, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 6:
				m_pEffectSpr[153]->PutTransSprite70(sX + dx + 45, sY + dy + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 31, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 7:
				m_pEffectSpr[153]->PutTransSprite70(sX + dx + 40, sY + dy + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 30, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 8:
				m_pEffectSpr[153]->PutTransSprite70(sX + dx + 20, sY + dy + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 20, sY + dy + 16, _tmp_iEffectFrame % 15, dwTime);
				break;
		}
	}

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
	/*	case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
	return FALSE;
}


BOOL CGame::DrawObject_OnDamageMove(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID, const bool frame_omision)
{
	int cFrame, cDir;
	int dx, dy;
	int iBodyIndex, iHairIndex, iUndiesIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iHelmIndex, iR, iG, iB;
	int iWeaponIndex, iShieldIndex, iMantleIndex;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempWeaponColor, TempShieldColor, TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 67 || _tmp_sOwnerType == 68 || _tmp_sOwnerType == 69 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 120 || _tmp_sOwnerType == 128) return FALSE;
	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114) bInv = TRUE; //Energy-Ball,Wyvern

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iWeaponColor = 0;
		iShieldColor = 0;
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (iWeaponColor == 0) {
			iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (iWeaponColor != 0) iWeaponColor += 15;
		}

		iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (iShieldColor == 0) {
			iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (iShieldColor != 0) iShieldColor += 15;
		}

		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
		iShieldGlare = (_tmp_sAppr4 & 0x0003);

		// New Colors -> ZeroEoyPnk
		TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (TempWeaponColor == 0) {
			TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (TempWeaponColor != 0) TempWeaponColor += 15;
		}

		TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (TempShieldColor == 0) {
			TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (TempShieldColor != 0) TempShieldColor += 15;
		}

		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0)
	{
	//	DecriptString(m_cPlayerName);
		if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
		else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
		//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
		else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
		else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
		else {
	//		EncriptString(m_cPlayerName);
			return FALSE;
		}
	//	EncriptString(m_cPlayerName);
	}
	cDir = _tmp_cDir;
	switch (_tmp_cDir) {
		case 1: _tmp_cDir = 5; break;
		case 2: _tmp_cDir = 6; break;
		case 3: _tmp_cDir = 7; break;
		case 4: _tmp_cDir = 8; break;
		case 5: _tmp_cDir = 1; break;
		case 6: _tmp_cDir = 2; break;
		case 7: _tmp_cDir = 3; break;
		case 8: _tmp_cDir = 4; break;
	}

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (10 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 10;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 10;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 10;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 10;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 10;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 10;
			if ((_tmp_sAppr2 & 0x000F) == 0)
				iShieldIndex = -1;
			else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 5;
			if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
				iWeaponIndex = -1;
			else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 5 + (_tmp_cDir - 1);
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 10;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 10;
			break;
		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (10 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 10;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 10;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 10;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 10;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 10;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 10;
			if ((_tmp_sAppr2 & 0x000F) == 0)
				iShieldIndex = -1;
			else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 5;
			if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
				iWeaponIndex = -1;
			else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 5 + (_tmp_cDir - 1);
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 10;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 10;
			break;
		default:
			if (_tmp_sOwnerType == 66)      iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
			else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);// Ne devrait pas arriver!
			else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);// Ne devrait pas arriver!
			else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
	}
	dx = 0;
	dy = 0;

	//HB ARG OLD
	/*switch (_tmp_cDir) {
		case 1: dy = 28 - (_tmp_cFrame << 2); break;
		case 2: dy = 28 - (_tmp_cFrame << 2); dx = (_tmp_cFrame << 2) - 28; break;
		case 3: dx = (_tmp_cFrame << 2) - 28; break;
		case 4: dx = (_tmp_cFrame << 2) - 28; dy = (_tmp_cFrame << 2) - 28; break;
		case 5: dy = (_tmp_cFrame << 2) - 28; break;
		case 6: dy = (_tmp_cFrame << 2) - 28; dx = 28 - (_tmp_cFrame << 2); break;
		case 7: dx = 28 - (_tmp_cFrame << 2); break;
		case 8: dx = 28 - (_tmp_cFrame << 2); dy = 28 - (_tmp_cFrame << 2); break;
	}*/


	const bool value = frame_omision;

	switch (_tmp_cDir) {
	case 1: dy = 30 - (_tmp_cFrame << 2) - value; break;
	case 2: dy = 30 - (_tmp_cFrame << 2) - value; dx = (_tmp_cFrame << 2) + value - 30; break;
	case 3: dx = (_tmp_cFrame << 2) + value - 30; break;
	case 4: dx = (_tmp_cFrame << 2) + value - 30; dy = (_tmp_cFrame << 2) + value - 30; break;
	case 5: dy = (_tmp_cFrame << 2) + value - 30; break;
	case 6: dy = (_tmp_cFrame << 2) + value - 30; dx = 30 - (_tmp_cFrame << 2) - value; break;
	case 7: dx = 30 - (_tmp_cFrame << 2) - value; break;
	case 8: dx = 30 - (_tmp_cFrame << 2) - value; dy = 30 - (_tmp_cFrame << 2) - value; break;
	}

	int fix_x = 0;
	int fix_y = 0;

	switch (_tmp_cDir) {
	case 1: fix_x = sX + dx;		 fix_y = sY + dy - value; break;//listo
	case 2: fix_x = sX + dx + value; fix_y = sY + dy - value; break;//listo
	case 3: fix_x = sX + dx + value; fix_y = sY + dy;		  break;//listo
	case 4: fix_x = sX + dx + value; fix_y = sY + dy + value; break;//listo
	case 5: fix_x = sX + dx;		 fix_y = sY + dy + value; break;//listo
	case 6: fix_x = sX + dx - value; fix_y = sY + dy + value; break;//listo
	case 7: fix_x = sX + dx - value; fix_y = sY + dy;		  break;//listo
	case 8: fix_x = sX + dx - value; fix_y = sY + dy - value; break;//listo
	}


	cFrame = _tmp_cFrame;
	
	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX + dx, sY + dy, cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	if (_tmp_iEffectType != 0)
	{
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX + dx, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX + dy, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX + dy, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (bTrans == FALSE)
	{
		CheckActiveAura(sX + dx, sY + dy, dwTime, _tmp_sOwnerType);
		if (_cDrawingOrder[_tmp_cDir] == 1)
		{
			if (iWeaponIndex != -1)
			{
				if (iWeaponColor == 0)
					m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, cFrame, dwTime);
				else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
			}
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyv
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, cFrame, dwTime);
					}
					break;
			}

			if (_tmp_sOwnerType == 35)
				m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

			if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, cFrame, dwTime);
			else {
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, cFrame, dwTime);
			}
			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iPantsIndex != -1)
			{
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iArmArmorIndex != -1)
			{
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}


			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iBodyArmorIndex != -1)
			{
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iHelmIndex != -1) {
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}


			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iShieldIndex != -1)
			{
				if (iShieldColor == 0)
					m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;
						//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
		}
		else
		{
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128://BlackWyv
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, cFrame, dwTime);
					}
					break;
			}
			if (_tmp_sOwnerType == 35)
				m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

			if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, cFrame, dwTime);
			else {
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, cFrame, dwTime);
			}
			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iPantsIndex != -1)
			{
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iArmArmorIndex != -1)
			{
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iBodyArmorIndex != -1)
			{
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iHelmIndex != -1)
			{
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iShieldIndex != -1)
			{
				if (iShieldColor == 0)
					m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iWeaponIndex != -1)
			{
				if (iWeaponColor == 0)
					m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, cFrame, dwTime);
				else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
			}
		}

		if ((_tmp_iStatus & 0x20) != 0) 	// Berserk
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0)
				ShowAdmin(sX + dx, sY + dy, _tmp_AdminLevel);
		}

		DrawAngel(16 + (_tmp_cDir - 1), sX + dx + 20, sY + dy - 20, cFrame % 4, dwTime);
		CheckActiveAura2(sX + dx, sY + dy, dwTime, _tmp_sOwnerType);

		// Capture The Flag - Angel position Based
		DrawFlag(sX + dx - 10, sY + dy - 70, dwTime);

	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(fix_x, fix_y, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(sX + dx, sY + dy, _tmp_sOwnerType, _tmp_iStatus);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
			//	DecriptString(m_cPlayerName);
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX + dx, sY + dy, i, dwTime);
			//	EncriptString(m_cPlayerName);
			}
		}
	}

	//DecriptString(m_cPlayerName);
	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX + dx, sY + dy, dwTime);
	//EncriptString(m_cPlayerName);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
		{
			/*m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX + dx;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY + dy;*/
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = fix_x;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = fix_y;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}
	_tmp_dx = dx;
	_tmp_dy = dy;

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
	return FALSE;
}

BOOL CGame::DrawObject_OnMove_ForMenu(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY)
{
	short dx, dy;
	int iBodyIndex, iHairIndex, iUndiesIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iHelmIndex, iR, iG, iB;
	int iWeaponIndex, iShieldIndex, iAdd, iMantleIndex;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;


	iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
	iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
	iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
	iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
	iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
	iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
	iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
	iHelmColor = (_tmp_iApprColor & 0x0000000F);

	iHelmGlare = (_tmp_sAppr4 & 0x00EF);
	iArmorGlare = (_tmp_sAppr4 & 0x003F);
	iArmGlare = (_tmp_sAppr4 & 0x000F);
	iPantsGlare = (_tmp_sAppr4 & 0x000E);
	iMantleGlare = (_tmp_sAppr4 & 0x003E);
	iBootsGlare = (_tmp_sAppr4 & 0x00EE);

	iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
	iShieldGlare = (_tmp_sAppr4 & 0x0003);

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iAdd = 3;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else
					{
						iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
					}
				}
				else iBodyArmorIndex = -1;
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 3 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 3;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (2 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 2;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 2;
				}
				else iBodyArmorIndex = -1;
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 2;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 2;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 2;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 2 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 2;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 2;
			}
			break;
		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iAdd = 3;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				else  iBodyArmorIndex = -1;
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 3 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 3;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (2 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 2;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 2;
				}
				else iBodyArmorIndex = -1;
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 2;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 2;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 2;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 2 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 2;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 2;
			}
			break;
		default:
			iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iHelmIndex = -1;
			break;
	}
	dx = 0;
	dy = 0;
	if (_cDrawingOrder[_tmp_cDir] == 1)
	{
		if (iWeaponIndex != -1)
		{
			if (iWeaponColor == 0)
				m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
			else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
			DKGlare(iWeaponColor, iWeaponIndex, &iWeaponGlare);
			switch (iWeaponGlare) {
				case 0: break;
				case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
				case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
				case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
			}
		}
		switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
			case 10: // Slime
			case 35: // Energy Sphere
			case 50: // TW
			case 51: // CP
			case 60: // Plant
			case 65: // IceGolem
			case 66: // Wyvern
			case 73: // Fire Wyvern
			case 81: // Abaddon
			case 91: // Gate
			case 92:
			case 120:
			case 128://BlackWyv
				break;
			default:
				if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
				{
					if (sX < 50)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, _tmp_cFrame, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
				}
				break;
		}
		if (bInv == TRUE)
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
		else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);


		if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
		{
			if (iMantleColor == 0)
				m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
			MantleGlare(iMantleColor, iMantleIndex, &iMantleGlare);
			switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iUndiesIndex != -1)
		{
			if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
		}

		if ((iHairIndex != -1) && (iHelmIndex == -1))
		{
			_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
			m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
		}
		if ((iBootsIndex != -1) && (iSkirtDraw == 1))
		{
			if (iBootsColor == 0)
				m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
			BootsGlare(iBootsColor, iBootsIndex, &iBootsGlare);
			switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iPantsIndex != -1)//PANTS ONMOVE_FORMENU 1
		{
			if (iPantsColor == 0)
				m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
			LegginsGlare(iPantsColor, iPantsIndex, &iPantsGlare);
			switch (iPantsGlare) {
				case 0: break;
				case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iArmArmorIndex != -1)//HAUBERK ONMOVE_FORMENU 1
		{
			if (iArmColor == 0)
				m_pSprite[iArmArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
			HauberkGlare(iArmColor, iArmArmorIndex, &iArmGlare);
			switch (iArmGlare) {
				case 0: break;
				case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if ((iBootsIndex != -1) && (iSkirtDraw == 0))
		{
			if (iBootsColor == 0)
				m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
			BootsGlare(iBootsColor, iBootsIndex, &iBootsGlare);
			switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iBodyArmorIndex != -1)//ARMOR ONMOVE_FORMENU 1
		{
			if (iArmorColor == 0)
				m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
			ArmorGlare(iArmorColor, iBodyArmorIndex, &iArmorGlare);
			switch (iArmorGlare) {
				case 0: break;
				case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iHelmIndex != -1)//HELM ONMOVE_FORMENU 1
		{
			if (iHelmColor == 0)
				m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
			HelmGlare(iHelmColor, iHelmIndex, &iHelmGlare);
			switch (iHelmGlare) {
				case 0: break;
				case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
				case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
		{
			if (iMantleColor == 0)
				m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
			MantleGlare(iMantleColor, iMantleIndex, &iMantleGlare);
			switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iShieldIndex != -1)
		{
			if (iShieldColor == 0)
				m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
		}
		if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
		{
			if (iMantleColor == 0)
				m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
			MantleGlare(iMantleColor, iMantleIndex, &iMantleGlare);
			switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
	}
	else
	{
		switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
			case 10: // Slime
			case 35: // Energy Sphere
			case 50: // TW
			case 51: // CP
			case 60: // Plant
			case 65: // IceGolem
			case 66: // Wyvern
			case 73: // Fire Wyvern
			case 81: // Abaddon
			case 91: // Gate
			case 92:
			case 120:
			case 128://BlackWyv
				break;
			default:
				if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
				{
					if (sX < 50)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, _tmp_cFrame, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
				}
				break;
		}

		if (bInv == TRUE)
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
		else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);

		if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
		{
			if (iMantleColor == 0)
				m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
			MantleGlare(iMantleColor, iMantleIndex, &iMantleGlare);
			switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

		if ((iHairIndex != -1) && (iHelmIndex == -1))
		{
			_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
			m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
		}
		if ((iBootsIndex != -1) && (iSkirtDraw == 1))
		{
			if (iBootsColor == 0)
				m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
			BootsGlare(iBootsColor, iBootsIndex, &iBootsGlare);
			switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iPantsIndex != -1)//PANTS ONMOVE_FORMENU 2
		{
			if (iPantsColor == 0)
				m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
			LegginsGlare(iPantsColor, iPantsIndex, &iPantsGlare);
			switch (iPantsGlare) {
				case 0: break;
				case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iArmArmorIndex != -1)//HAUBERK ONMOVE_FORMENU 2
		{
			if (iArmColor == 0)
				m_pSprite[iArmArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
			HauberkGlare(iArmColor, iArmArmorIndex, &iArmGlare);
			switch (iArmGlare) {
				case 0: break;
				case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if ((iBootsIndex != -1) && (iSkirtDraw == 0))
		{
			if (iBootsColor == 0)
				m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
			BootsGlare(iBootsColor, iBootsIndex, &iBootsGlare);
			switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iBodyArmorIndex != -1)//ARMOR ONMOVE_FORMENU 2
		{
			if (iArmorColor == 0)
				m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
			ArmorGlare(iArmorColor, iBodyArmorIndex, &iArmorGlare);
			switch (iArmorGlare) {
				case 0: break;
				case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iHelmIndex != -1)//HELM ONMOVE_FORMENU 2
		{
			if (iHelmColor == 0)
				m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
			HelmGlare(iHelmColor, iHelmIndex, &iHelmGlare);
			switch (iHelmGlare) {
				case 0: break;
				case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
				case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
		{
			if (iMantleColor == 0)
				m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
			MantleGlare(iMantleColor, iMantleIndex, &iMantleGlare);
			switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}

		if (iShieldIndex != -1)
		{
			if (iShieldColor == 0)
				m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
		}
		if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
		{
			if (iMantleColor == 0)
				m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
			MantleGlare(iMantleColor, iMantleIndex, &iMantleGlare);
			switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
			}
		}
		if (iWeaponIndex != -1)
		{
			if (iWeaponColor == 0)
				m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
			else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
			DKGlare(iWeaponColor, iWeaponIndex, &iWeaponGlare);
			switch (iWeaponGlare) {
				case 0: break;
				case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
				case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
				case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
			}
		}
	}

	if (_tmp_iChatIndex != NULL)
	{
		if (m_pChatMsgList[_tmp_iChatIndex] != NULL)
		{
			DrawChatMsgBox(sX + dx, sY + dy, _tmp_iChatIndex, FALSE);
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}
	_tmp_dx = dx;
	_tmp_dy = dy;
	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
		(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
	return FALSE;
}


BOOL   CGame::DrawObject_OnStop(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID)
{
	int iBodyIndex, iUndiesIndex, iHairIndex, iBodyArmorIndex, iArmArmorIndex, iPantsIndex, iBootsIndex, iHelmIndex, iR, iG, iB;
	int iWeaponIndex, iShieldIndex, iMantleIndex;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempWeaponColor, TempShieldColor, TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 114 || _tmp_sOwnerType == 120) bInv = TRUE; //Energy-Ball, Wyvern
	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iWeaponColor = 0;
		iShieldColor = 0;
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (iWeaponColor == 0) {
			iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (iWeaponColor != 0) iWeaponColor += 15;
		}

		iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (iShieldColor == 0) {
			iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (iShieldColor != 0) iShieldColor += 15;
		}

		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
		iShieldGlare = (_tmp_sAppr4 & 0x0003);

		// New Colors -> ZeroEoyPnk
		TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (TempWeaponColor == 0) {
			TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (TempWeaponColor != 0) TempWeaponColor += 15;
		}

		TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (TempShieldColor == 0) {
			TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (TempShieldColor != 0) TempShieldColor += 15;
		}

		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0)
	{
	//	DecriptString(m_cPlayerName);
		if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
		else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
		//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; // beholder neck
		else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
		else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
		else {
	//		EncriptString(m_cPlayerName);
			return FALSE;
		}
	//	EncriptString(m_cPlayerName);
	}

	// CLEROTH - Single-direction monsters
	switch (_tmp_sOwnerType) {
		case 110: // Air Elemental
			_tmp_cDir = 1; // North
			break;
		case 91: // Snoopy: Gate
			/*if (_tmp_cDir <= 3)*/ _tmp_cDir = 3;
			//else  _tmp_cDir = 5;
			break;
		case 92:
			_tmp_cDir = 1;
			break;
		case 111: // Assasain Officer
			_tmp_cDir = 1;
			break;
	}

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			_tmp_cFrame = _tmp_cFrame / 2;
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (1 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 1;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 1;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 1;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 1;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 1;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 1;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 1 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 1;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 1;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 1;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (0 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 0 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 0;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 0;
			}
			break;

		case 4:
		case 5:
		case 6:
			_tmp_cFrame = _tmp_cFrame / 2;
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (1 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 1;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 1;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 1;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 1;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 1;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 1;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 1 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 1;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 1;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 1;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (0 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 0 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 0;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 0;
			}
			break;
		default:
			if (_tmp_sAppr2 != 0)
			{
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				_tmp_cFrame = (_tmp_sAppr2 & 0x00FF) - 1;
			}//lalo agregue los 3 else if
		//	else if (_tmp_sOwnerType == 66) iBodyIndex =  DEF_SPRID_MOB  +  (_tmp_sOwnerType - 10 )*8*7 + (0 * 8);
		//	else if (_tmp_sOwnerType == 73) iBodyIndex =  DEF_SPRID_MOB  +  (_tmp_sOwnerType - 10 )*8*7 + (0 * 8);
		//	else if (_tmp_sOwnerType == 81) iBodyIndex =  DEF_SPRID_MOB  +  (_tmp_sOwnerType - 10 )*8*7 + (0 * 8);
			else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
	}

	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, _tmp_cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	switch (_tmp_sOwnerType) { // hum? la lumiere en dessous ?
		case 15: // ShopKeeper
		case 19: // Gandalf
		case 20: // Howard
		case 24: // Tom
		case 25: // William
		case 26: // Kenedy
		case 51: // CP
		case 86: // HBT
		case 90: // Gail
		case 129: // market
		case 111: // assa
			m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);
			break;
		case 92:
			_tmp_cFrame = 0;
			break;
	}
	if (_tmp_iEffectType != 0)
	{
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (bTrans == FALSE)
	{
		CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
		if (_cDrawingOrder[_tmp_cDir] == 1)
		{
			if (iWeaponIndex != -1)
			{
				if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(sX, sY, _tmp_cFrame, dwTime);
				else
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				}
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
			}

			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128://BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
					}
					break;
			}
			if (_tmp_sOwnerType == 35)
				m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

			if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
			{
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);

			}
			else if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
			else
			{
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
			}

			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iPantsIndex != -1) // PANTS ONSTOP 1
			{
				if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iArmArmorIndex != -1) //HAUBERK ONSTOP 1
			{
				if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);

					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONSTOP 1
			{
				if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iHelmIndex != -1)//HELM ONSTOP 1
			{
				if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);

					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iShieldIndex != -1)
			{
				if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				}
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {		//	lalo glare			   //Logo GM
					case 0: break;
					//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
					case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
		}
		else
		{
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128://BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
					}
					break;
			}
			if (_tmp_sOwnerType == 35)
				m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);
			if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
			{
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
			}
			else if (bInv == TRUE)
			{
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
			}
			else
			{
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
			}
			//GPT fix
			int index = iBodyIndex + (_tmp_cDir - 1);
			if (m_pSprite[index] != nullptr) {
				SetRect(&m_rcBodyRect,
					m_pSprite[index]->m_rcBound.left,
					m_pSprite[index]->m_rcBound.top,
					m_pSprite[index]->m_rcBound.right,
					m_pSprite[index]->m_rcBound.bottom);
			}
			
			//te voy a mostar lo q cambie
			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iPantsIndex != -1)//PANTS ONSTOP 2
			{
				if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if (iArmArmorIndex != -1)//HAUBERK ONSTOP 2
			{
				if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);

					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONSTOP 2
			{
				if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glar
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iHelmIndex != -1)//HELM ONSTOP 2
			{
				if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);

					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iShieldIndex != -1)
			{
				if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				}
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;
						//Logo GM
					//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
					case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iWeaponIndex != -1)
			{
				if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(sX, sY, _tmp_cFrame, dwTime);
				else
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				}
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
			}
		}
		if (_tmp_sOwnerType == 64) // crop
		{
			switch (_tmp_cFrame) {
				case 0: // color effect for crop
					m_pEffectSpr[84]->PutTransSprite(sX + 52, sY + 54, (dwTime % 3000) / 120, dwTime);
					break;
				case 1: // color effect for crop
					m_pEffectSpr[83]->PutTransSprite(sX + 53, sY + 59, (dwTime % 3000) / 120, dwTime);
					break;
				case 2: // color effect for crop
					m_pEffectSpr[82]->PutTransSprite(sX + 53, sY + 65, (dwTime % 3000) / 120, dwTime);
					break;
			}
		}
		// Berserk
		if ((_tmp_iStatus & 0x20) != 0)
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0)
				ShowAdmin(sX, sY, _tmp_AdminLevel);
		}

		DrawAngel(40 + (_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame % 4, dwTime);

		CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

		// Capture The Flag - Angel position Based
		DrawFlag(sX - 10, sY - 70, dwTime);

	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
		//		DecriptString(m_cPlayerName);
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(sX, sY, i, dwTime);
			//	EncriptString(m_cPlayerName);
			}
		}
	}

	//DecriptString(m_cPlayerName);
	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);
	//EncriptString(m_cPlayerName);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID)) {
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}
	// Snoopy: Abaddon effects
	if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
	{
		int randFrame = _tmp_cFrame % 12;
		m_pEffectSpr[154]->PutTransSprite70(sX - 50, sY - 50, randFrame, dwTime);
		m_pEffectSpr[155]->PutTransSprite70(sX - 20, sY - 80, randFrame, dwTime);
		m_pEffectSpr[156]->PutTransSprite70(sX + 70, sY - 50, randFrame, dwTime);
		m_pEffectSpr[157]->PutTransSprite70(sX - 30, sY, randFrame, dwTime);
		m_pEffectSpr[158]->PutTransSprite70(sX - 60, sY + 90, randFrame, dwTime);
		m_pEffectSpr[159]->PutTransSprite70(sX + 65, sY + 85, randFrame, dwTime);
		switch (_tmp_cDir) {
			case 1:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 108, _tmp_iEffectFrame % 28, dwTime);//todo igual cambio 153
				m_pEffectSpr[164]->PutTransSprite70(sX - 50, sY + 10, _tmp_iEffectFrame % 15, dwTime);//cambio 164
				break;
			case 2:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 70, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 3:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 105, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 90, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 4:
				m_pEffectSpr[153]->PutTransSprite70(sX - 35, sY + 100, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 80, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 5:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 65, sY - 5, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 6:
				m_pEffectSpr[153]->PutTransSprite70(sX + 45, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 31, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 7:
				m_pEffectSpr[153]->PutTransSprite70(sX + 40, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 30, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 8:
				m_pEffectSpr[153]->PutTransSprite70(sX + 20, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 20, sY + 16, _tmp_iEffectFrame % 15, dwTime);
				break;
		}
	}

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	//GPT fix
	int index = iBodyIndex + (_tmp_cDir - 1);
	if (m_pSprite[index] != nullptr) {
		if ((m_pSprite[index]->m_rcBound.top != -1) &&
			(m_pSprite[index]->m_rcBound.top < msY) &&
			(m_pSprite[index]->m_rcBound.bottom > msY) &&
			(m_pSprite[index]->m_rcBound.left < msX) &&
			(m_pSprite[index]->m_rcBound.right > msX)) return TRUE;
	}
	
	return FALSE;
}

void CGame::_ReadMapData(short sPivotX, short sPivotY, char * pData)
{
	int i;
	char  * cp, ucHeader, cDir, cName[12], cItemColor;
	short * sp, sTotal, sX, sY, sType, sAppr1, sAppr2, sAppr3, sAppr4, sItemSpr, sItemSprFrame, sDynamicObjectType;
	int iStatus;
	int   * ip, iApprColor, iApprColor2;
	char AdminLevel;
	WORD    wObjectID;
	WORD  * wp, wDynamicObjectID;
	cp = pData;
	m_sVDL_X = sPivotX; // Valid Data Loc-X
	m_sVDL_Y = sPivotY;
	sp = (short *)cp;
	sTotal = *sp;
	cp += 2;
	for (i = 1; i <= sTotal; i++)
	{
		sp = (short *)cp;
		sX = *sp;
		cp += 2;
		sp = (short *)cp;
		sY = *sp;
		cp += 2;
		ucHeader = *cp;
		cp++;
		if (ucHeader & 0x01) // object ID
		{
			wp = (WORD *)cp;
			wObjectID = *wp;
			cp += 2;
			sp = (short *)cp;
			sType = *sp;// object type
			cp += 2;
			// dir
			cDir = *cp;
			cp++;
			if (wObjectID < 10000)
			{
				sp = (short *)cp;
				sAppr1 = *sp;// Appearance1
				cp += 2;
				sp = (short *)cp;
				sAppr2 = *sp;// Appearance2
				cp += 2;
				sp = (short *)cp;
				sAppr3 = *sp;// Appearance3
				cp += 2;
				sp = (short *)cp;
				sAppr4 = *sp;// Appearance4
				cp += 2;
				ip = (int *)cp;
				iApprColor = *ip;// v1.4 ApprColor
				cp += 4;

				ip = (int *)cp;
				iApprColor2 = *ip;// v1.4 ApprColor
				cp += 4;
				// CLEROTH - CRASH BUG ( STATUS )
				// Status
				ip = (int *)cp;
				iStatus = *ip;
				cp += 4;
				// Name
				ZeroMemory(cName, sizeof(cName));
				memcpy(cName, cp, 10);
				cp += 10;
				AdminLevel = (char)*cp;
				cp++;

			}
			else // NPC
			{
				sAppr1 = sAppr3 = sAppr4 = 0;
				sp = (short *)cp;
				sAppr2 = *sp;// Appearance2
				cp += 2;
				// CLEROTH - CRASH BUG ( STATUS )
				// Status
				ip = (int *)cp;
				iStatus = *ip;
				cp += 4;
				// Name
				ZeroMemory(cName, sizeof(cName));
				memcpy(cName, cp, 5);
				cp += 5;
				AdminLevel = 0;
			}
			m_pMapData->bSetOwner(wObjectID, sPivotX + sX, sPivotY + sY, sType, cDir, sAppr1, sAppr2, sAppr3, sAppr4, iApprColor, iApprColor2, iStatus, cName, DEF_OBJECTSTOP, NULL, NULL, NULL, NULL, NULL, AdminLevel);
		}
		if (ucHeader & 0x02) // object ID
		{
			wp = (WORD *)cp;
			wObjectID = *wp;
			cp += 2;
			sp = (short *)cp;
			sType = *sp;	// object type
			cp += 2;
			cDir = *cp;	// dir
			cp++;
			if (wObjectID < 10000)
			{
				sp = (short *)cp;
				sAppr1 = *sp;// Appearance1
				cp += 2;
				sp = (short *)cp;
				sAppr2 = *sp;// Appearance2
				cp += 2;
				sp = (short *)cp;
				sAppr3 = *sp;// Appearance3
				cp += 2;
				sp = (short *)cp;
				sAppr4 = *sp;// Appearance4
				cp += 2;
				ip = (int *)cp;
				iApprColor = *ip;// v1.4 ApprColor
				cp += 4;

				// New Colors -> ZeroEoyPnk
				ip = (int *)cp;
				iApprColor2 = *ip;
				cp += 4;

				// CLEROTH - CRASH BUG ( STATUS )
				// Status
				ip = (int *)cp;
				iStatus = *ip;
				cp += 4;
				// Name
				ZeroMemory(cName, sizeof(cName));
				memcpy(cName, cp, 10);
				cp += 10;
			}
			else 	// NPC
			{
				sAppr1 = sAppr3 = sAppr4 = 0;
				sp = (short *)cp;
				sAppr2 = *sp;// Appearance2
				cp += 2;
				ip = (int *)cp;
				iStatus = *ip;// Status
				cp += 4;
				ZeroMemory(cName, sizeof(cName));	// Name
				memcpy(cName, cp, 5);
				cp += 5;
			}
			m_pMapData->bSetDeadOwner(wObjectID, sPivotX + sX, sPivotY + sY, sType, cDir, sAppr1, sAppr2, sAppr3, sAppr4, iApprColor, iApprColor2, iStatus, cName);
		}
		if (ucHeader & 0x04)
		{
			sp = (short *)cp;
			sItemSpr = *sp;
			cp += 2;
			sp = (short *)cp;
			sItemSprFrame = *sp;
			cp += 2;
			cItemColor = *cp;
			cp++;
			m_pMapData->bSetItem(sPivotX + sX, sPivotY + sY, sItemSpr, sItemSprFrame, cItemColor, FALSE);
		}
		if (ucHeader & 0x08) // Dynamic object
		{
			wp = (WORD *)cp;
			wDynamicObjectID = *wp;
			cp += 2;
			sp = (short *)cp;
			sDynamicObjectType = *sp;
			cp += 2;
			m_pMapData->bSetDynamicObject(sPivotX + sX, sPivotY + sY, wDynamicObjectID, sDynamicObjectType, FALSE);
		}
	}
}

void CGame::LogEventHandler(char * pData)
{
	WORD * wp, wEventType, wObjectID;
	short * sp, sX, sY, sType, sAppr1, sAppr2, sAppr3, sAppr4;
	int iStatus;
	char  * cp, cDir, cName[12];
	char AdminLevel;
	int   * ip, iApprColor, iApprColor2;
	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	wEventType = *wp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	wObjectID = *wp;
	cp += 2; // 8
	sp = (short *)cp;
	sX = *sp;
	cp += 2; // 10
	sp = (short *)cp;
	sY = *sp;
	cp += 2; // 12
	sp = (short *)cp;
	sType = *sp;
	cp += 2; // 14
	cDir = *cp;
	cp++; // 15
	ZeroMemory(cName, sizeof(cName));
	if (wObjectID < 10000)
	{
		memcpy(cName, cp, 10);
		cp += 10; // 25
		sp = (short *)cp;
		sAppr1 = *sp;
		cp += 2; // 27
		sp = (short *)cp;
		sAppr2 = *sp;
		cp += 2; // 29
		sp = (short *)cp;
		sAppr3 = *sp;
		cp += 2; // 31
		sp = (short *)cp;
		sAppr4 = *sp;
		cp += 2; // 33
		ip = (int *)cp;
		iApprColor = *ip;
		cp += 4; // 37

		// New Colors -> ZeroEoyPnk
		ip = (int *)cp;
		iApprColor2 = *ip;
		cp += 4; // 37

		// CLEROTH - CRASH BUG ( STATUS )
		ip = (int *)cp;
		iStatus = *ip;
		cp += 4; // 41
		AdminLevel = (char)*cp;
		cp++; // 42		
	}
	else 	// NPC
	{
		memcpy(cName, cp, 5);
		cp += 5; // 20
		sAppr1 = sAppr3 = sAppr4 = 0;
		sp = (short *)cp;
		sAppr2 = *sp;
		cp += 2; // 22 
		ip = (int *)cp;
		iStatus = *ip;
		cp += 4; // 26
		AdminLevel = 0;
	}

	switch (wEventType) {
		case DEF_MSGTYPE_CONFIRM:
			m_pMapData->bSetOwner(wObjectID, sX, sY, sType, cDir, sAppr1, sAppr2, sAppr3, sAppr4, iApprColor, iApprColor2, iStatus, cName, DEF_OBJECTSTOP, NULL, NULL, NULL, NULL, NULL, AdminLevel);
			switch (sType) {
				case 43: // LWB
				case 44: // GHK
				case 45: // GHKABS
				case 46: // TK
				case 47: // BG
					bAddNewEffect(64, (sX) * 32, (sY) * 32, NULL, NULL, 0);
					break;
			}
			break;

		case DEF_MSGTYPE_REJECT:
			m_pMapData->bSetOwner(wObjectID, -1, -1, sType, cDir, sAppr1, sAppr2, sAppr3, sAppr4, iApprColor, iApprColor2, iStatus, cName, DEF_OBJECTSTOP, NULL, NULL, NULL, NULL, NULL, AdminLevel);
			break;
	}

	_RemoveChatMsgListByObjectID(wObjectID);
}

void CGame::OnLogSocketEvent(WPARAM wParam, LPARAM lParam)
{
	int iRet;
	char * pData;
	DWORD  dwMsgSize;
	if (m_pLSock == NULL) return;

	iRet = m_pLSock->iOnSocketEvent(wParam, lParam);
	switch (iRet) {
		case DEF_XSOCKEVENT_CONNECTIONESTABLISH:
			ConnectionEstablishHandler(DEF_SERVERTYPE_LOG);
			break;

		case DEF_XSOCKEVENT_READCOMPLETE:
			pData = m_pLSock->pGetRcvDataPointer(&dwMsgSize);
			LogRecvMsgHandler(pData);
			m_dwTime = G_dwGlobalTime;
			break;

		case DEF_XSOCKEVENT_SOCKETCLOSED:
			ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);
			delete m_pLSock;
			m_pLSock = NULL;
			break;

		case DEF_XSOCKEVENT_SOCKETERROR:
			ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);
			delete m_pLSock;
			m_pLSock = NULL;
			break;

		case DEF_XSOCKEVENT_CRITICALERROR:
			delete m_pLSock;
			m_pLSock = NULL;
			break;
	}
}

void CGame::LogResponseHandler(char * pData)
{
	WORD  * wp, wResponse;
//	WORD wServerUpperVersion, wServerLowerVersion, wServerArgentVersion;
	int wServerUpperVersion, wServerLowerVersion, wServerArgentVersion;
	DWORD * dwp;
	char  * cp, cCharName[12];
	int   * ip, i;

	dwp = (DWORD *)(pData);
	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	wResponse = *wp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	/*wServerUpperVersion = DEF_UPPERVERSION;
	wServerLowerVersion = DEF_LOWERVERSION;
	wServerArgentVersion = DEF_ARGENTVERSION;*/

	switch (wResponse) {

	case DEF_LOGRESMSGTYPE_NEWACCOUNTCREATED:
		ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
		ZeroMemory(m_cMsg, sizeof(m_cMsg));
		strcpy(m_cMsg, "54");
		break;

	case DEF_LOGRESMSGTYPE_NEWACCOUNTFAILED:
		ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
		ZeroMemory(m_cMsg, sizeof(m_cMsg));
		strcpy(m_cMsg, "05");
		break;

	case DEF_LOGRESMSGTYPE_PASSWORDCHANGEFAIL:
		ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
		ZeroMemory(m_cMsg, sizeof(m_cMsg));
		strcpy(m_cMsg, "6C");
		break;

	case DEF_LOGRESMSGTYPE_PASSWORDCHANGESUCCESS:
		ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
		ZeroMemory(m_cMsg, sizeof(m_cMsg));
		strcpy(m_cMsg, "6B");
		break;

		case NUCLEO_RESPONSE_CHARACTERDELETED:
			cp = (pData + DEF_INDEX2_MSGTYPE + 2);
			//m_iAccountStatus = (int)*cp;
			cp++;
			m_iTotalChar = EncriptInt((int)*cp);
			cp++;
			for (i = 0; i < 4; i++)
				if (m_pCharList[i] != NULL)
				{
					delete m_pCharList[i];
					m_pCharList[i] = NULL;
				}

			for (i = 0; i < DecriptInt(m_iTotalChar); i++) {
				m_pCharList[i] = new class CCharInfo;
				memcpy(m_pCharList[i]->m_cName, cp, 10);
				cp += 10;
				if (*cp == 0)
				{
					m_pCharList[i]->m_sSex = NULL; // Sex
					cp += 40;
				}
				else
				{
					cp++;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr1 = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr2 = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr3 = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr4 = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sSex = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sSkinCol = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sLevel = *wp;
					cp += 2;
					dwp = (DWORD *)cp;
					m_pCharList[i]->m_iExp = *dwp;
					cp += 4;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sStr = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sVit = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sDex = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sInt = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sMag = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sChr = *wp;
					cp += 2;
					ip = (int *)cp; // v1.4
					m_pCharList[i]->m_iApprColor = *ip;
					cp += 4;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iYear = (int)*wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iMonth = (int)*wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iDay = (int)*wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iHour = (int)*wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iMinute = (int)*wp;
					cp += 2;
					ZeroMemory(m_pCharList[i]->m_cMapName, sizeof(m_pCharList[i]->m_cMapName));
					memcpy(m_pCharList[i]->m_cMapName, cp, 10);
					cp += 10;
				}
			}
			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "3A");
			break;

		case DEF_MSGTYPE_CONFIRM:
			cp = (pData + DEF_INDEX2_MSGTYPE + 2);
			/*wp = (WORD *)cp;
			wServerUpperVersion = *wp;
			cp += 2;
			wp = (WORD *)cp;
			wServerLowerVersion = *wp;
			cp += 2;
			wp = (WORD *)cp;
			wServerArgentVersion = *wp;
			cp += 2;*/
			ip = (int *)cp;
			wServerUpperVersion = *ip;
			cp += 4;
			ip = (int *)cp;
			wServerLowerVersion = *ip;
			cp += 4;
			ip = (int *)cp;
			wServerArgentVersion = *ip;
			cp += 4;

			//Lalov9 login
			/*ip = (int *)cp;
			*ip = DEF_UPPERVERSION;
			cp += 4;
			ip = (int *)cp;
			*ip = DEF_LOWERVERSION;
			cp += 4;
			ip = (int *)cp;
			*ip = DEF_ARGENTVERSION;
			cp += 4;*/
			//		m_iAccountStatus = (int)*cp;
			cp++;
			wp = (WORD *)cp;
			m_iAccntYear = EncriptInt(*wp);
			cp += 2;
			wp = (WORD *)cp;
			m_iAccntMonth = EncriptInt(*wp);
			cp += 2;
			wp = (WORD *)cp;
			m_iAccntDay = EncriptInt(*wp);
			cp += 2;
			wp = (WORD *)cp;
			m_iIpYear = EncriptInt(*wp);
			cp += 2;
			wp = (WORD *)cp;
			m_iIpMonth = EncriptInt(*wp);
			cp += 2;
			wp = (WORD *)cp;
			m_iIpDay = EncriptInt(*wp);
			cp += 2;
			m_iTotalChar = EncriptInt((int)*cp);
			cp++;
			for (i = 0; i < 4; i++)
				if (m_pCharList[i] != NULL)
				{
					delete m_pCharList[i];
					m_pCharList[i] = NULL;
				}

			for (i = 0; i < DecriptInt(m_iTotalChar); i++)
			{
				m_pCharList[i] = new class CCharInfo;
				memcpy(m_pCharList[i]->m_cName, cp, 10);
				cp += 10;
				if (*cp == 0)
				{
					m_pCharList[i]->m_sSex = NULL;
					cp += 40;
				}
				else
				{
					cp++;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr1 = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr2 = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr3 = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr4 = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sSex = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sSkinCol = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sLevel = *wp;
					cp += 2;
					dwp = (DWORD *)cp;
					m_pCharList[i]->m_iExp = *dwp;
					cp += 4;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sStr = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sVit = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sDex = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sInt = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sMag = *wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_sChr = *wp;
					cp += 2;
					ip = (int *)cp;
					m_pCharList[i]->m_iApprColor = *ip; // v1.4
					cp += 4;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iYear = (int)*wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iMonth = (int)*wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iDay = (int)*wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iHour = (int)*wp;
					cp += 2;
					wp = (WORD *)cp;
					m_pCharList[i]->m_iMinute = (int)*wp;
					cp += 2;
					ZeroMemory(m_pCharList[i]->m_cMapName, sizeof(m_pCharList[i]->m_cMapName));
					memcpy(m_pCharList[i]->m_cMapName, cp, 10);
					cp += 10;
				}
			}
			ip = (int *)cp;
			m_iTimeLeftSecAccount = EncriptInt(*ip);
			cp += 4;
			ip = (int *)cp;
			m_iTimeLeftSecIP = EncriptInt(*ip);
			cp += 4;
			ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
			ClearContents_OnSelectCharacter();

			if ((wServerUpperVersion != DEF_UPPERVERSION) || (wServerLowerVersion != DEF_LOWERVERSION) || (wServerArgentVersion != DEF_ARGENTVERSION))
			//if ((wServerUpperVersion != DEF_UPPERVERSION) || (wServerLowerVersion != DEF_LOWERVERSION))
				ChangeGameMode(DEF_GAMEMODE_ONVERSIONNOTMATCH);
			break;

		case DEF_MSGTYPE_REJECT:
			cp = (pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			m_iBlockYear = EncriptInt(*ip);
			cp += 4;

			ip = (int *)cp;
			m_iBlockMonth = EncriptInt(*ip);
			cp += 4;

			ip = (int *)cp;
			m_iBlockDay = EncriptInt(*ip);
			cp += 4;

			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "7H");
			break;

		case NUCLEO_RESPONSE_PASSWORDMISMATCH:
			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "11");
			break;

		case NUCLEO_RESPONSE_NOTEXISTINGACCOUNT:
			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "12");
			break;

		case NUCLEO_RESPONSE_NOTEXISTINGCHARACTER:
			ChangeGameMode(DEF_GAMEMODE_ONMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "For security reasons, to delete a Character you must go to our site!");
			break;

		case NUCLEO_RESPONSE_NEWCHARACTERCREATED:
			ZeroMemory(cCharName, sizeof(cCharName));
			memcpy(cCharName, cp, 10);
			cp += 10;

			m_iTotalChar = EncriptInt((int)*cp);
			cp++;

			for (i = 0; i < 4; i++)
				if (m_pCharList[i] != NULL) delete m_pCharList[i];
			//
			for (i = 0; i < DecriptInt(m_iTotalChar); i++) {
				m_pCharList[i] = new class CCharInfo;
				memcpy(m_pCharList[i]->m_cName, cp, 10);
				cp += 10;
				if (*cp == 0) {
					m_pCharList[i]->m_sSex = NULL; // Sex
					cp += 40;
				}
				else {
					cp++;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr1 = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr2 = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr3 = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sAppr4 = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sSex = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sSkinCol = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sLevel = *wp;
					cp += 2;

					dwp = (DWORD *)cp;
					m_pCharList[i]->m_iExp = *dwp;
					cp += 4;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sStr = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sVit = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sDex = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sInt = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sMag = *wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_sChr = *wp;
					cp += 2;

					ip = (int *)cp; // v1.4
					m_pCharList[i]->m_iApprColor = *ip;
					cp += 4;

					wp = (WORD *)cp;
					m_pCharList[i]->m_iYear = (int)*wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_iMonth = (int)*wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_iDay = (int)*wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_iHour = (int)*wp;
					cp += 2;

					wp = (WORD *)cp;
					m_pCharList[i]->m_iMinute = (int)*wp;
					cp += 2;

					ZeroMemory(m_pCharList[i]->m_cMapName, sizeof(m_pCharList[i]->m_cMapName));
					memcpy(m_pCharList[i]->m_cMapName, cp, 10);
					cp += 10;
				}
			}
			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "47");
			break;

		case NUCLEO_RESPONSE_NEWCHARACTERFAILED:
			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "28");
			break;

		case NUCLEO_RESPONSE_ALREADYEXISTINGCHARACTER:
			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "29");
			break;

		case NUCLEO_RESPONSE_PLAYING:
			ChangeGameMode(DEF_GAMEMODE_ONQUERYFORCELOGIN);
			break;

		case NUCLEO_RESPONSE_CONFIRM:
			int iGameServerPort;
			char cGameServerAddr[16];

			ZeroMemory(cGameServerAddr, sizeof(cGameServerAddr));

			cp = (pData + DEF_INDEX2_MSGTYPE + 2);
			memcpy(cGameServerAddr, cp, 16);
			cp += 16;

			wp = (WORD *)cp;
			iGameServerPort = *wp;
			cp += 2;

			ZeroMemory(m_cGameServerName, sizeof(m_cGameServerName));
			memcpy(m_cGameServerName, cp, 20);
			EncriptString(m_cGameServerName);
			cp += 20;

			m_pGSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
			DecriptString(m_cLogServerAddr);
			if (m_iGameServerMode == 1)
				m_pGSock->bConnect(m_cLogServerAddr, iGameServerPort, WM_USER_GAMESOCKETEVENT);
			else if (m_iGameServerMode == 2)
				m_pGSock->bConnect(cGameServerAddr, iGameServerPort, WM_USER_GAMESOCKETEVENT);
			EncriptString(m_cLogServerAddr);
			m_pGSock->bInitBufferSize(30000);
			break;

		case NUCLEO_RESPONSE_REJECT:
			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
				case 1:	strcpy(m_cMsg, "3E"); break;
				case 2:	strcpy(m_cMsg, "3F"); break;
				case 3:	strcpy(m_cMsg, "33"); break;
				case 4: strcpy(m_cMsg, "3D"); break;
				case 5: strcpy(m_cMsg, "3G"); break;
				case 6: strcpy(m_cMsg, "3Z"); break;
				case 7: strcpy(m_cMsg, "3J"); break;
			}
			break;

		case NUCLEO_RESPONSE_FORCEDISCONN:
			ChangeGameMode(DEF_GAMEMODE_ONLOGRESMSG);
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "3X");
			break;

	}
	delete m_pLSock;
	m_pLSock = NULL;
}

void CGame::LogRecvMsgHandler(char * pData)
{
	LogResponseHandler(pData);
}

void CGame::UpdateScreen_OnMsg()
{
	short msX, msY, msZ;
	char cLB, cRB;
	DWORD dwTime = G_dwGlobalTime;
	m_DDraw.ClearBackB4();
	PutString(10, 10, m_cMsg, RGB(255, 155, 155), FALSE, 1);
	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
	if ((G_dwGlobalTime - m_dwTime) > 1500)
	{
		ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
	}
}

void CGame::_InitOnCreateNewCharacter()
{
	m_cGender = EncriptInt(rand() % 2 + 1);
	m_cSkinCol = EncriptInt(rand() % 3 + 1);
	m_cHairStyle = EncriptInt(rand() % 8);
	m_cHairCol = EncriptInt(rand() % 16);
	m_cUnderCol = EncriptInt(rand() % 8);
	m_ccStr = EncriptInt(10);
	m_ccVit = EncriptInt(10);
	m_ccDex = EncriptInt(10);
	m_ccInt = EncriptInt(10);
	m_ccMag = EncriptInt(10);
	m_ccChr = EncriptInt(10);
}

void CGame::ClearContents_OnCreateNewAccount()
{
	ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));
	ZeroMemory(m_cAccountAge, sizeof(m_cAccountAge));
	ZeroMemory(m_cAccountCountry, sizeof(m_cAccountCountry));
	ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
	ZeroMemory(m_cEmailAddr, sizeof(m_cEmailAddr));
	//v1.4334
	ZeroMemory(m_cAccountQuiz, sizeof(m_cAccountQuiz));
	ZeroMemory(m_cAccountAnswer, sizeof(m_cAccountAnswer));
}

void CGame::ChangeGameMode(char cMode)
{
	m_cGameMode = cMode;
	m_cGameModeCount = 0;
	m_dwTime = G_dwGlobalTime;

#ifndef DEF_SELECTSERVER
	if (cMode == DEF_GAMEMODE_ONSELECTSERVER)
	{
		ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));
		strcpy(m_cWorldServerName, NAME_WORLDNAME1);
		EncriptString(m_cWorldServerName);
		m_cGameMode = DEF_GAMEMODE_ONLOGIN;
	}
#endif
}

BOOL CGame::bReadIp()
{
	ZeroMemory(m_cLogServerAddr, sizeof(m_cLogServerAddr));
#ifdef DEF_USE_DNS
	strcpy(m_cLogServerAddrBuffer, DEF_SERVER_DNS);
#else
	//morla1 no ip
	strcpy(m_cLogServerAddrBuffer, "rivergrande.ddns.net");
#endif
	m_iLogServerPort = DecriptInt(DEF_SERVER_PORT);
	return TRUE;
}

BOOL CGame::bReadLoginConfigFile(char * cFn)
{
	FILE * pFile;
	HANDLE hFile;
	DWORD  dwFileSize;
	char * cp, *token, cReadMode;
	char seps[] = "= ,\t\n";

	cReadMode = 0;
	// Get file size only
	hFile = CreateFile(cFn, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);

	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFn, "rt");

	if (pFile == NULL) goto DEFAULT_IP;

	cp = new char[dwFileSize + 2];
	ZeroMemory(cp, dwFileSize + 2);
	fread(cp, dwFileSize, 1, pFile);
	token = strtok(cp, seps);

	while (token != NULL)
	{
		if (cReadMode != 0)
		{
			switch (cReadMode) {
				case 1: // log-server-address
					if (strlen(token) > 15)
					{
						delete[] cp;
						if (pFile != NULL) fclose(pFile);
						goto DEFAULT_IP;
					}
					ZeroMemory(m_cLogServerAddrBuffer, sizeof(m_cLogServerAddrBuffer));
					strcpy(m_cLogServerAddrBuffer, token);
					ConfigIP = -1;
					cReadMode = 0;
					break;
				case 2: // log-server-port
					m_iLogServerPort = DecriptInt(atoi(token));
					if (EncriptInt(m_iLogServerPort) == 0)
					{
						delete[] cp;
						if (pFile != NULL) fclose(pFile);
						goto DEFAULT_IP;
					}
					cReadMode = 0;
					break;
				case 3: // game-server-mode
					if ((memcmp(token, "TEST", 4) == 0) || (memcmp(token, "test", 4) == 0))
						cReadMode = 0;
					else
						goto DEFAULT_IP;

					cReadMode = 0;
					break;
			}
		}
		else
		{
			if (memcmp(token, "log-server-address", 18) == 0)
				cReadMode = 1;
			if (memcmp(token, "log-server-port", 15) == 0)
				cReadMode = 2;
			if (memcmp(token, "game-server-mode", 16) == 0)
				cReadMode = 3;
		}
		token = strtok(NULL, seps);
	}

	delete[] cp;
	if (pFile != NULL) fclose(pFile);
	return TRUE;

DEFAULT_IP:;
	ZeroMemory(m_cLogServerAddr, sizeof(m_cLogServerAddr));
	
	strcpy(m_cLogServerAddrBuffer, DEF_SERVER_IP);
	m_iLogServerPort = EncriptInt(DEF_SERVER_PORT);
	return FALSE;
}

void CGame::GetIPByDNS()
{
#ifndef DEF_SELECTSERVER
	strcpy(m_cLogServerAddrBuffer, DEF_SERVER_IP);
	m_iLogServerPort = EncriptInt(DEF_SERVER_PORT);
#endif
	ZeroMemory(m_cLogServerAddr, sizeof(m_cLogServerAddr));
	if ((m_cLogServerAddrBuffer[0] >= 65 && m_cLogServerAddrBuffer[0] <= 122) && (ConfigIP == 0)) {
		char cDnsResult[40];
		struct hostent *host_entry;

		host_entry = gethostbyname(m_cLogServerAddrBuffer);
		if (host_entry == NULL) {
			MessageBox(m_hWnd, "Failed to get DNS entry for the logserver!", "ERROR1", MB_ICONEXCLAMATION | MB_OK);
			_exit(0);
		}
		ZeroMemory(cDnsResult, sizeof(cDnsResult));
		wsprintf(cDnsResult, "%d.%d.%d.%d", (host_entry->h_addr_list[0][0] & 0x00ff), (host_entry->h_addr_list[0][1] & 0x00ff),
			(host_entry->h_addr_list[0][2] & 0x00ff), (host_entry->h_addr_list[0][3] & 0x00ff));

		strcpy(m_cLogServerAddr, cDnsResult);
	}
	else strcpy(m_cLogServerAddr, m_cLogServerAddrBuffer);
	EncriptString(m_cLogServerAddr);
}

void CGame::ReleaseUnusedSprites()
{
	int i;
	for (i = 0; i < DEF_MAXSPRITES; i++)
		if ((m_pSprite[i] != NULL))
		{
			if ((m_pSprite[i]->m_bIsSurfaceEmpty == FALSE) && (m_pSprite[i]->m_bOnCriticalSection == FALSE))
			{
				if ((G_dwGlobalTime - m_pSprite[i]->m_dwRefTime) > 60000) m_pSprite[i]->_iCloseSprite();

			}
		}
	for (i = 0; i < DEF_MAXTILES; i++)
		if ((m_pTileSpr[i] != NULL))
		{
			if ((m_pTileSpr[i]->m_bIsSurfaceEmpty == FALSE) && (m_pTileSpr[i]->m_bOnCriticalSection == FALSE))
			{
				if ((G_dwGlobalTime - m_pTileSpr[i]->m_dwRefTime) > 60000) m_pTileSpr[i]->_iCloseSprite();
			}
		}
	for (i = 0; i < DEF_MAXEFFECTSPR; i++)
		if ((m_pEffectSpr[i] != NULL))
		{
			if ((m_pEffectSpr[i]->m_bIsSurfaceEmpty == FALSE) && (m_pEffectSpr[i]->m_bOnCriticalSection == FALSE))
			{
				if ((G_dwGlobalTime - m_pEffectSpr[i]->m_dwRefTime) > 60000) m_pEffectSpr[i]->_iCloseSprite();
			}
		}

	for (i = 0; i < DEF_MAXSOUNDEFFECTS; i++)
	{
		if (m_pCSound[i] != NULL)
		{
			if (((G_dwGlobalTime - m_pCSound[i]->m_dwTime) > 30000) && (m_pCSound[i]->m_bIsLooping == FALSE)) m_pCSound[i]->_ReleaseSoundBuffer();
		}
		if (m_pMSound[i] != NULL)
		{
			if (((G_dwGlobalTime - m_pMSound[i]->m_dwTime) > 30000) && (m_pMSound[i]->m_bIsLooping == FALSE)) m_pMSound[i]->_ReleaseSoundBuffer();
		}
		if (m_pESound[i] != NULL)
		{
			if (((G_dwGlobalTime - m_pESound[i]->m_dwTime) > 30000) && (m_pESound[i]->m_bIsLooping == FALSE)) m_pESound[i]->_ReleaseSoundBuffer();
		}
	}
}

void CGame::PutChatScrollList(char * pMsg, char cType)
{
	int i;
	if (m_pChatScrollList[DEF_TEXTDLGMAXLINES - 1] != NULL)
	{
		delete m_pChatScrollList[DEF_TEXTDLGMAXLINES - 1];
		m_pChatScrollList[DEF_TEXTDLGMAXLINES - 1] = NULL;
	}
	for (i = DEF_TEXTDLGMAXLINES - 2; i >= 0; i--)
	{
		m_pChatScrollList[i + 1] = m_pChatScrollList[i];
		m_pChatScrollList[i] = NULL;
	}
	if (cType == 0)
		cType = 24;

	m_pChatScrollList[0] = new class CMsg(1, pMsg, cType);
}

void CGame::ChatMsgHandler(char * pData)
{
	int i, iObjectID, iLoc;
	short * sp, sX, sY;
	char * cp, cMsgType, cName[21], cTemp[100], cMsg[100], cTxt1[100], cTxt2[100];
	DWORD dwTime;
	WORD * wp;
	BOOL bFlag;
	if (isInMap("dm")) return;
	char cHeadMsg[200];

	dwTime = m_dwCurTime;

	ZeroMemory(cTxt1, sizeof(cTxt1));
	ZeroMemory(cTxt2, sizeof(cTxt2));
	ZeroMemory(cMsg, sizeof(cMsg));

	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	iObjectID = (int)*wp;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	sX = *sp;
	cp += 2;

	sp = (short *)cp;
	sY = *sp;
	cp += 2;
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, (char *)cp, 10);
	cp += 10;

	cMsgType = *cp;
	cp++;
	//LaloVer
	if (bCheckExID(cName) == TRUE) return;

	ZeroMemory(cTemp, sizeof(cTemp));
	strcpy(cTemp, cp);

	//if (m_Misc.bCheckMSGString(cTemp) == FALSE) return;

	if ((cMsgType == 0) || (cMsgType == 2) || (cMsgType == 3))
	{
		if (m_Misc.bCheckIMEString(cTemp) == FALSE) return;
		//lalochat
	//	if (m_Misc.bCheckMSGString(cTemp) == FALSE) return;
	}
	if (!m_bWhisper)
	{
		if (cMsgType == 20) return;
	}
	if (!m_bShout)
	{
		if (cMsgType == 2 || cMsgType == 3) return;
	}

	ZeroMemory(cMsg, sizeof(cMsg));
	
	DecriptString(m_cCurLocation);
	if ((memcmp(m_cCurLocation, "avaevent", 10) == 0) && (AllVsAll == TRUE) || (memcmp(m_cCurLocation, "evento13", 8) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
		wsprintf(cMsg, " ????? : %s", cTemp);
	else wsprintf(cMsg, "%s: %s", cName, cTemp);
	EncriptString(m_cCurLocation);

	m_DDraw._GetBackBufferDC();
	bFlag = FALSE;
	short sCheckByte = 0;
	while (bFlag == FALSE)
	{
		iLoc = m_Misc.iGetTextLengthLoc(m_DDraw.m_hDC, cMsg, 305);
		for (int i = 0; i < iLoc; i++) if (cMsg[i] < 0) sCheckByte++;
		if (iLoc == 0)
		{
			PutChatScrollList(cMsg, cMsgType);
			bFlag = TRUE;
		}
		else
		{
			if ((sCheckByte % 2) == 0)
			{
				ZeroMemory(cTemp, sizeof(cTemp));
				memcpy(cTemp, cMsg, iLoc);
				PutChatScrollList(cTemp, cMsgType);
				ZeroMemory(cTemp, sizeof(cTemp));
				strcpy(cTemp, cMsg + iLoc);
				ZeroMemory(cMsg, sizeof(cMsg));
				strcpy(cMsg, " ");
				strcat(cMsg, cTemp);
			}
			else
			{
				ZeroMemory(cTemp, sizeof(cTemp));
				memcpy(cTemp, cMsg, iLoc + 1);
				PutChatScrollList(cTemp, cMsgType);
				ZeroMemory(cTemp, sizeof(cTemp));
				strcpy(cTemp, cMsg + iLoc + 1);
				ZeroMemory(cMsg, sizeof(cMsg));
				strcpy(cMsg, " ");
				strcat(cMsg, cTemp);
			}
		}
	}

	m_DDraw._ReleaseBackBufferDC();

	_RemoveChatMsgListByObjectID(iObjectID);

	for (i = 1; i < DEF_MAXCHATMSGS; i++)
		if (m_pChatMsgList[i] == NULL) {
			m_pChatMsgList[i] = new class CMsg(1, (char *)(cp), dwTime);
			m_pChatMsgList[i]->m_iObjectID = iObjectID;

			if (m_pMapData->bSetChatMsgOwner(iObjectID, sX, sY, i) == FALSE) {
				delete m_pChatMsgList[i];
				m_pChatMsgList[i] = NULL;
			}

			if ((cMsgType != 0) && (m_bIsDialogEnabled[10] != TRUE)) {
				ZeroMemory(cHeadMsg, sizeof(cHeadMsg));

				DecriptString(m_cCurLocation);
				//if ((memcmp(m_cCurLocation, "avaevent", 10) == 0) && (AllVsAll == TRUE))
				if ((memcmp(m_cCurLocation, "avaevent", 10) == 0) && (AllVsAll == TRUE) || (memcmp(m_cCurLocation, "evento13", 8) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
					wsprintf(cHeadMsg, " ????? : %s", cp);
				else wsprintf(cHeadMsg, "%s:%s", cName, cp);
				EncriptString(m_cCurLocation);

				AddEventList(cHeadMsg, cMsgType);
			}
			return;
		}
}

void CGame::ReleaseTimeoverChatMsg()
{
	int i;
	DWORD dwTime;
	dwTime = G_dwGlobalTime;

	if (StaggerDmg)
	{
		for (i = 1; i < DEF_MAXCHATMSGS; i++)
			if (m_pChatMsgList[i] != NULL) {

				if ((m_pChatMsgList[i]->m_cType >= 1) && (m_pChatMsgList[i]->m_cType <= 20)) {
					if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_A) {
						delete m_pChatMsgList[i];
						m_pChatMsgList[i] = NULL;
					}
				}
				else
					if ((m_pChatMsgList[i]->m_cType >= 21) && (m_pChatMsgList[i]->m_cType <= 40)) {
						if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_B) {
							delete m_pChatMsgList[i];
							m_pChatMsgList[i] = NULL;
						}
					}
					else
						if ((m_pChatMsgList[i]->m_cType >= 21) && (m_pChatMsgList[i]->m_cType <= 23))
						{
							if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_BA) {
								delete m_pChatMsgList[i];
								m_pChatMsgList[i] = NULL;
							}
						}

						else
							if ((m_pChatMsgList[i]->m_cType >= 41) && (m_pChatMsgList[i]->m_cType <= 42)) {
								if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_CA) {
									delete m_pChatMsgList[i];
									m_pChatMsgList[i] = NULL;
								}
							}

							else
								if ((m_pChatMsgList[i]->m_cType >= 41) && (m_pChatMsgList[i]->m_cType <= 60)) {
									if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_C) {
										delete m_pChatMsgList[i];
										m_pChatMsgList[i] = NULL;
									}
								}
								else if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_A) {
									delete m_pChatMsgList[i];
									m_pChatMsgList[i] = NULL;
								}
			}
	}
	else
	{
		for (i = 1; i < DEF_MAXCHATMSGS; i++)
			if (m_pChatMsgList[i] != NULL) {

				if ((m_pChatMsgList[i]->m_cType >= 1) && (m_pChatMsgList[i]->m_cType <= 20)) {
					if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_A) {
						delete m_pChatMsgList[i];
						m_pChatMsgList[i] = NULL;
					}
				}
				else
					if ((m_pChatMsgList[i]->m_cType >= 21) && (m_pChatMsgList[i]->m_cType <= 40)) {
						if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_B) {
							delete m_pChatMsgList[i];
							m_pChatMsgList[i] = NULL;
						}
					}
					else
						if ((m_pChatMsgList[i]->m_cType >= 41) && (m_pChatMsgList[i]->m_cType <= 60)) {
							if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_C) {
								delete m_pChatMsgList[i];
								m_pChatMsgList[i] = NULL;
							}
						}
						else if ((dwTime - m_pChatMsgList[i]->m_dwTime) > DEF_CHATTIMEOUT_A) {
							delete m_pChatMsgList[i];
							m_pChatMsgList[i] = NULL;
						}
			}
	}	
}
//Lalo Ramos
void CGame::DrawBackground(short sDivX, short sModX, short sDivY, short sModY)
{
	int indexX, indexY, ix, iy;
	short sSpr, sSprFrame;
	
	//added resolution
	int res_x = 0;
	int res_y = 0;


	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 800;
		res_y = 600;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1024;
		res_y = 768;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 640;
		res_y = 480;
	}


	if (sDivX < 0 || sDivY < 0) return;
	if ((m_bIsRedrawPDBGS == TRUE) || (m_iPDBGSdivX != sDivX) || (m_iPDBGSdivY != sDivY)) {
		// Pre-Draw Background Surface
		m_bIsRedrawPDBGS = FALSE;
		m_iPDBGSdivX = sDivX;
		m_iPDBGSdivY = sDivY;
		SetRect(&m_DDraw.m_rcClipArea, 0, 0, res_x + 32, res_y + 32);//480
		indexY = sDivY + m_pMapData->m_sPivotY;
		for (iy = -sModY; iy < res_y + 48; iy += 32)
		{
			indexX = sDivX + m_pMapData->m_sPivotX;
			for (ix = -sModX; ix < res_x + 48; ix += 32)
			{
				sSpr = m_pMapData->m_tile[indexX][indexY].m_sTileSprite;
				sSprFrame = m_pMapData->m_tile[indexX][indexY].m_sTileSpriteFrame;
				m_pTileSpr[sSpr]->PutSpriteFastNoColorKeyDst(m_DDraw.m_lpPDBGS, ix - 16 + sModX, iy - 16 + sModY, sSprFrame, m_dwCurTime);
				indexX++;
			}
			indexY++;
		}
		SetRect(&m_DDraw.m_rcClipArea, 0, 0, res_x, res_y);

		DecriptString(m_cCurLocation);
		if (memcmp(m_cCurLocation, "market", 6) == 0) {
			SetRect(&m_DDraw.m_rcClipArea, 0, 0, res_x + 32, res_y + 32);//480
			indexY = sDivY + m_pMapData->m_sPivotY;
			for (iy = -sModY; iy < res_y + 48; iy += 32) {
				indexX = sDivX + m_pMapData->m_sPivotX;
				for (ix = -sModX; ix < res_x + 48; ix += 32) {
					if (m_pMapData->m_tile[indexX][indexY].m_sObjectSprite == 224) {
						sSpr = m_pMapData->m_tile[indexX][indexY].m_sObjectSprite;
						sSprFrame = m_pMapData->m_tile[indexX][indexY].m_sObjectSpriteFrame;
						m_pTileSpr[sSpr]->PutSpriteFastDst(m_DDraw.m_lpPDBGS, ix - 16 + sModX, iy - 16 + sModY, sSprFrame, m_dwCurTime);
					}
					indexX++;
				}
				indexY++;
			}
			SetRect(&m_DDraw.m_rcClipArea, 0, 0, res_x, res_y);
		}
		EncriptString(m_cCurLocation);
	}

	// ZeroEoyPnk - Show Grid fixed!
	
	// End show grid

	RECT rcRect;
	SetRect(&rcRect, sModX, sModY, res_x + sModX, res_y + sModY); // our fictitious sprite bitmap is
	m_DDraw.m_lpBackB4->BltFast(0, 0, m_DDraw.m_lpPDBGS, &rcRect, DDBLTFAST_NOCOLORKEY | DDBLTFAST_WAIT);

	if (m_bGrid)
	{
		/*SetRect(&m_DDraw.m_rcClipArea, 0, 0, res_x + 32, res_y + 32);//480
		for (iy = 0; iy <= res_y + 48; iy += 32)
		for (ix = 0; ix <= res_x + 48; ix += 32)
		m_pSprite[DEF_SPRID_INTERFACE_ND_GRID]->PutSpriteFastDst(m_DDraw.m_lpPDBGS, ix - 16, iy - 16, m_sGrid, m_dwCurTime);
		SetRect(&m_DDraw.m_rcClipArea, 0, 0, res_x, res_y);*/
		indexY = sDivY + m_pMapData->m_sPivotY;
		for (iy = -sModY; iy < res_y - 5; iy += 32)
		{
			indexX = sDivX + m_pMapData->m_sPivotX;
			for (ix = -sModX; ix < res_x + 48; ix += 32)
			{
				DrawLine(ix - 16, iy - 16, ix + 16, iy - 16, 6, 13, 13);
				DrawLine(ix - 16, iy - 16, ix - 16, iy + 16, 6, 13, 13);
				indexX++;
			}
			indexY++;
		}
	}
	if (m_bIsCrusadeMode)
	{
		if (DecriptInt(m_iConstructLocX) != -1) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, DecriptInt(m_iConstructLocX) * 32 - m_sViewPointX, DecriptInt(m_iConstructLocY) * 32 - m_sViewPointY, 41);
		if (DecriptInt(m_iTeleportLocX) != -1) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, DecriptInt(m_iTeleportLocX) * 32 - m_sViewPointX, DecriptInt(m_iTeleportLocY) * 32 - m_sViewPointY, 42);
	}
}

BOOL CGame::bEffectFrameCounter()
{
	int i, x;
	DWORD dwTime;
	BOOL bRet = FALSE;
	short sAbsX, sAbsY, sDist;
	char  cDir;
	long lPan;
	int x2, y2;

	//Added Resolution Lalo
	if (c_reso->IsResolution() == C800x600)
	{
		x2 = 400;
		y2 = 300;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		x2 = 320;
		y2 = 240;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		x2 = 512;
		y2 = 384;
	}

	dwTime = m_dwCurTime;
	dwTime += m_pMapData->m_dwFrameAdjustTime;
	for (i = 0; i < DEF_MAXEFFECTS; i++)
		if (m_pEffectList[i] != NULL) {
			if ((dwTime - m_pEffectList[i]->m_dwTime) > m_pEffectList[i]->m_dwFrameTime)
			{
				m_pEffectList[i]->m_dwTime = dwTime;
				m_pEffectList[i]->m_cFrame++;
				bRet = TRUE;
				m_pEffectList[i]->m_mX2 = m_pEffectList[i]->m_mX;
				m_pEffectList[i]->m_mY2 = m_pEffectList[i]->m_mY;
				switch (m_pEffectList[i]->m_sType) {
					case 1: // coup normal
						if (m_pEffectList[i]->m_cFrame == 1)
						{
							for (int j = 1; j <= m_pEffectList[i]->m_iV1; j++) bAddNewEffect(11, m_pEffectList[i]->m_mX + 15 - (rand() % 30), m_pEffectList[i]->m_mY + 15 - (rand() % 30), NULL, NULL, -1 * (rand() % 2));
						}
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 2:	// (Arrow missing target ?)
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32 - 40,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 70);
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - (m_pEffectList[i]->m_dY * 32 - 40)) <= 2))
						{	//bAddNewEffect(14, m_pEffectList[i]->m_mX +(rand() % 5) - 2, m_pEffectList[i]->m_mY +(rand() % 5) - 2, NULL, NULL, 0, 0);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 4: // Gold Drop ,33,69,70
					case 33: //
					case 69:
					case 70:
						//case 207:
						//case 208:
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 5:
					case 30:
					case 31: // Fire Explosion
					case 252:
						if (m_pEffectList[i]->m_cFrame == 1)
						{
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
						}
						if (m_pEffectList[i]->m_cFrame == 7)
						{
							bAddNewEffect(15, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), 0, NULL, NULL);
							bAddNewEffect(15, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), 0, NULL, NULL);
							bAddNewEffect(15, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), 0, NULL, NULL);
						}
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 209:
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else {
							bAddNewEffect(207, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0, 1);
						}
						break;
					case 210:
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else {
							bAddNewEffect(208, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0, 1);
						}
						break;

					case 6: // Lightning Bolt Burst
						if (m_pEffectList[i]->m_cFrame == 1)
						{
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
						}
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 7: // Magic Missile Burst
						if (m_pEffectList[i]->m_cFrame == 1)
						{
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
						}
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 9:  // Burst Type 2
					case 11: // Burst Type 3
						m_pEffectList[i]->m_mX += m_pEffectList[i]->m_rX;
						m_pEffectList[i]->m_mY += m_pEffectList[i]->m_rY;
						m_pEffectList[i]->m_rY++;
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 10: // Lightning Arrow Burst
						if (m_pEffectList[i]->m_cFrame == 1)
						{
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
						}
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 12: // Burst Type 4
						m_pEffectList[i]->m_mX += m_pEffectList[i]->m_rX;
						m_pEffectList[i]->m_mY += m_pEffectList[i]->m_rY;
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 13: // Bulles druncncity
						if (m_pEffectList[i]->m_cFrame < 15)
						{
							if ((rand() % 2) == 0)
								m_pEffectList[i]->m_mX++;
							else m_pEffectList[i]->m_mX--;
							m_pEffectList[i]->m_mY--;
						}
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 16: //
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX, m_pEffectList[i]->m_dY,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 40);
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - (m_pEffectList[i]->m_dY)) <= 2))
						{
							bAddNewEffect(18, m_pEffectList[i]->m_dX, m_pEffectList[i]->m_dY, NULL, NULL, 0); // testcode 0111 18
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(9, m_pEffectList[i]->m_mX + 20 - (rand() % 40), m_pEffectList[i]->m_mY + 20 - (rand() % 40), NULL, NULL, -1 * (rand() % 2));
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 17: // Ice-Storm
						cDir = m_Misc.cGetNextMoveDir(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY, m_pEffectList[i]->m_mX3, m_pEffectList[i]->m_mY3);
						switch (cDir) {
							case 1:
								m_pEffectList[i]->m_rY -= 2;
								break;
							case 2:
								m_pEffectList[i]->m_rY -= 2;
								m_pEffectList[i]->m_rX += 2;
								break;
							case 3:
								m_pEffectList[i]->m_rX += 2;
								break;
							case 4:
								m_pEffectList[i]->m_rX += 2;
								m_pEffectList[i]->m_rY += 2;
								break;
							case 5:
								m_pEffectList[i]->m_rY += 2;
								break;
							case 6:
								m_pEffectList[i]->m_rX -= 2;
								m_pEffectList[i]->m_rY += 2;
								break;
							case 7:
								m_pEffectList[i]->m_rX -= 2;
								break;
							case 8:
								m_pEffectList[i]->m_rX -= 2;
								m_pEffectList[i]->m_rY -= 2;
								break;
						}
						if (m_pEffectList[i]->m_rX < -10) m_pEffectList[i]->m_rX = -10;
						if (m_pEffectList[i]->m_rX > 10) m_pEffectList[i]->m_rX = 10;
						if (m_pEffectList[i]->m_rY < -10) m_pEffectList[i]->m_rY = -10;
						if (m_pEffectList[i]->m_rY > 10) m_pEffectList[i]->m_rY = 10;
						m_pEffectList[i]->m_mX += m_pEffectList[i]->m_rX;
						m_pEffectList[i]->m_mY += m_pEffectList[i]->m_rY;
						m_pEffectList[i]->m_mY3--;
						if (m_pEffectList[i]->m_cFrame > 10)
						{
							m_pEffectList[i]->m_cFrame = 0;
							if (abs(m_pEffectList[i]->m_sY - m_pEffectList[i]->m_mY3) > 100)
							{
								delete m_pEffectList[i];
								m_pEffectList[i] = NULL;
							}
						}
						break;

					case 20: // Critical strike with a weapon
					case 21:
					case 22:
					case 23:
					case 24:
					case 25:
					case 26:
					case 27: // Critical strike with a weapon
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32 - 40,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						bAddNewEffect(8, m_pEffectList[i]->m_mX + 10 - (rand() % 20), m_pEffectList[i]->m_mY + 10 - (rand() % 20), NULL, NULL, 0);//-1*(rand() % 4));
						bAddNewEffect(8, m_pEffectList[i]->m_mX + 10 - (rand() % 20), m_pEffectList[i]->m_mY + 10 - (rand() % 20), NULL, NULL, 0);//-1*(rand() % 4));
						bAddNewEffect(8, m_pEffectList[i]->m_mX + 10 - (rand() % 20), m_pEffectList[i]->m_mY + 10 - (rand() % 20), NULL, NULL, 0);//-1*(rand() % 4));
						bAddNewEffect(8, m_pEffectList[i]->m_mX + 10 - (rand() % 20), m_pEffectList[i]->m_mY + 10 - (rand() % 20), NULL, NULL, 0);//-1*(rand() % 4));
						bAddNewEffect(8, m_pEffectList[i]->m_mX + 10 - (rand() % 20), m_pEffectList[i]->m_mY + 10 - (rand() % 20), NULL, NULL, 0);//-1*(rand() % 4));
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2) &&
							(abs(m_pEffectList[i]->m_mY - (m_pEffectList[i]->m_dY * 32 - 40)) <= 2))
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 34: //
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX, m_pEffectList[i]->m_dY,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						bAddNewEffect(33, m_pEffectList[i]->m_mX + (rand() % 30) - 15, m_pEffectList[i]->m_mY + (rand() % 30) - 15, NULL, NULL, -1 * (rand() % 4));
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX) <= 2) &&
							(abs(m_pEffectList[i]->m_mY - (m_pEffectList[i]->m_dY)) <= 2))
						{
							bAddNewEffect(33, m_pEffectList[i]->m_dX, m_pEffectList[i]->m_dY, NULL, NULL, 0); //7
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;


					case 40:
					case 56:
						if (m_pEffectList[i]->m_cFrame == 9)
						{
							bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 100) - 50), m_pEffectList[i]->m_mY + ((rand() % 70) - 35), NULL, NULL, 0, 0);
							bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 100) - 50), m_pEffectList[i]->m_mY + ((rand() % 70) - 35), NULL, NULL, 0, 0);
							bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 100) - 50), m_pEffectList[i]->m_mY + ((rand() % 70) - 35), NULL, NULL, 0, 0);
							bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 100) - 50), m_pEffectList[i]->m_mY + ((rand() % 70) - 35), NULL, NULL, 0, 0);
							bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 100) - 50), m_pEffectList[i]->m_mY + ((rand() % 70) - 35), NULL, NULL, 0, 0);
						}
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 41: //Large Type 1, 2, 3, 4
					case 42:
					case 43:
					case 44:
					case 45: // Small Type 1, 2
					case 46:
						if (m_pEffectList[i]->m_cFrame >= 7)
						{
							m_pEffectList[i]->m_mX--;
							m_pEffectList[i]->m_mY += m_pEffectList[i]->m_iV1;
							m_pEffectList[i]->m_iV1++;
						}

						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							if ((m_pEffectList[i]->m_sType != 45) && (m_pEffectList[i]->m_sType != 46))
							{
								bAddNewEffect(50, m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY, NULL, NULL, 0);
								bAddNewEffect(14, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
								bAddNewEffect(14, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
								bAddNewEffect(14, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
								bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
								bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
							}
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 47: // Blizzard
					case 48:
					case 49:
						if (m_pEffectList[i]->m_cFrame >= 7)
						{
							m_pEffectList[i]->m_mX--;
							m_pEffectList[i]->m_mY += m_pEffectList[i]->m_iV1;
							m_pEffectList[i]->m_iV1 += 4;
						}
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							if (m_pEffectList[i]->m_sType == 49)
								bAddNewEffect(72, m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY, NULL, NULL, 0);
							else bAddNewEffect(50, m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY, NULL, NULL, 0);
							bAddNewEffect(14, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
							bAddNewEffect(14, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
							bAddNewEffect(14, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);

							bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
							bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 60: //
					case 181: // Meteor-Strike
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							bAddNewEffect(61, m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY, NULL, NULL, 0, 0);
							bAddNewEffect(63, m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY, NULL, NULL, 0, 0);
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							bAddNewEffect(12, m_pEffectList[i]->m_mX + 5 - (rand() % 10), m_pEffectList[i]->m_mY + 5 - (rand() % 10), NULL, NULL, -1 * (rand() % 2));
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else if (m_pEffectList[i]->m_cFrame >= 0)
						{
							m_pEffectList[i]->m_mX -= 30;
							m_pEffectList[i]->m_mY += 46;
							bAddNewEffect(62, m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY, NULL, NULL, 0, 0);
						}
						break;

					case 62:
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else if (m_pEffectList[i]->m_cFrame >= 0)
						{
							m_pEffectList[i]->m_mX += (rand() % 3) - 1;
							m_pEffectList[i]->m_mY += (rand() % 3) - 1;
						}
						break;

					case 65: // Building fire after MS (crusade) 65 & 67
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else if (m_pEffectList[i]->m_cFrame >= 0)
						{
							m_pEffectList[i]->m_mX += (rand() % 3) - 1;
							m_pEffectList[i]->m_mY -= 4 + (rand() % 2);
						}
						break;

					case 66:
					case 203:
					case 204:
					case 205:
					case 206:
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 68:
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else if (m_pEffectList[i]->m_cFrame == 11)
						{
							SetCameraShakingEffect(m_pEffectList[i]->m_iV1, 2);
						}
						break;

					case 71:
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX, m_pEffectList[i]->m_dY,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						bAddNewEffect(48, m_pEffectList[i]->m_mX + (rand() % 30) - 15, m_pEffectList[i]->m_mY + (rand() % 30) - 15, NULL, NULL, 0);
						bAddNewEffect(51, m_pEffectList[i]->m_mX + ((rand() % 20) - 10), m_pEffectList[i]->m_mY + ((rand() % 20) - 10), NULL, NULL, 0, 0);
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX) <= 2) &&
							(abs(m_pEffectList[i]->m_mY - (m_pEffectList[i]->m_dY)) <= 2))
						{
							bAddNewEffect(49, m_pEffectList[i]->m_mX/* + (rand() % 30) - 15*/, m_pEffectList[i]->m_mY/* + (rand() % 30) - 15*/, NULL, NULL, 0);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 81: // Snoopy: Ajout StromBlade
						m_Misc.GetPoint(m_pEffectList[i]->m_mX
							, m_pEffectList[i]->m_mY
							, m_pEffectList[i]->m_dX * 32
							, m_pEffectList[i]->m_dY * 32
							, &m_pEffectList[i]->m_mX
							, &m_pEffectList[i]->m_mY
							, &m_pEffectList[i]->m_iErr
							, 10);
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 100: // Magic Missile
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32/* - 40*/,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));

						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2) &&
							(abs(m_pEffectList[i]->m_mY - (m_pEffectList[i]->m_dY * 32/* - 40*/)) <= 2))
						{
							bAddNewEffect(7, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 110: // Enegy-Bolt
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32/* - 40*/,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - m_pEffectList[i]->m_dY * 32) <= 2))
						{
							bAddNewEffect(6, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0); // 6 testcode 0111
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 120: // Fire Ball
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32/* - 40*/,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - m_pEffectList[i]->m_dY * 32) <= 2))
						{
							bAddNewEffect(5, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 130: // Fire Strike
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32/* - 40*/,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - m_pEffectList[i]->m_dY * 32) <= 2))
						{
							bAddNewEffect(5, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
							bAddNewEffect(5, m_pEffectList[i]->m_dX * 32 - 30, m_pEffectList[i]->m_dY * 32 - 15, NULL, NULL, -7);
							bAddNewEffect(5, m_pEffectList[i]->m_dX * 32 + 35, m_pEffectList[i]->m_dY * 32 - 30, NULL, NULL, -5);
							bAddNewEffect(5, m_pEffectList[i]->m_dX * 32 + 20, m_pEffectList[i]->m_dY * 32 + 30, NULL, NULL, -3);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 137: // Lightning Arrow
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32/* - 40*/,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - m_pEffectList[i]->m_dY * 32) <= 2))
						{
							bAddNewEffect(10, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 143: // Lightning
					case 151: // Lightning-Bolt
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							bAddNewEffect(10, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							m_pEffectList[i]->m_rX = 5 - (rand() % 10);
							m_pEffectList[i]->m_rY = 5 - (rand() % 10);
						}
						break;

					case 145: // Chill-Wind
						bAddNewEffect(40, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
						bAddNewEffect(40, m_pEffectList[i]->m_dX * 32 - 30, m_pEffectList[i]->m_dY * 32 - 15, NULL, NULL, -10);
						bAddNewEffect(40, m_pEffectList[i]->m_dX * 32 + 35, m_pEffectList[i]->m_dY * 32 - 30, NULL, NULL, -6);
						bAddNewEffect(40, m_pEffectList[i]->m_dX * 32 + 20, m_pEffectList[i]->m_dY * 32 + 30, NULL, NULL, -3);
						delete m_pEffectList[i];
						m_pEffectList[i] = NULL;
						break;

					case 147:  // Triple-Energy-Bolt
						bAddNewEffect(110, m_pEffectList[i]->m_sX, m_pEffectList[i]->m_sY,
							m_pEffectList[i]->m_dX - 1, m_pEffectList[i]->m_dY - 1, 0);
						bAddNewEffect(110, m_pEffectList[i]->m_sX, m_pEffectList[i]->m_sY,
							m_pEffectList[i]->m_dX + 1, m_pEffectList[i]->m_dY - 1, 0);
						bAddNewEffect(110, m_pEffectList[i]->m_sX, m_pEffectList[i]->m_sY,
							m_pEffectList[i]->m_dX + 1, m_pEffectList[i]->m_dY + 1, 0);
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));
						lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX) * 1000;
						PlaySound('E', 1, sDist, lPan);
						bAddNewEffect(7, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
						delete m_pEffectList[i];
						m_pEffectList[i] = NULL;
						break;

					case 156: // Mass-Lightning-Arrow
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							bAddNewEffect(137, m_pEffectList[i]->m_sX, m_pEffectList[i]->m_sY,
								m_pEffectList[i]->m_dX, m_pEffectList[i]->m_dY, 0);
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX;
							else sDist = sAbsY;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX) * 1000;
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 157: // Ice-Strike
						bAddNewEffect(41, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
						for (x = 0; x < 14; x++)
						{
							bAddNewEffect(41 + (rand() % 3), m_pEffectList[i]->m_dX * 32 + (rand() % 100) - 50 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 90) - 45, NULL, NULL, -1 * x - 1);
						}
						for (x = 0; x < 6; x++)
						{
							bAddNewEffect(45 + (rand() % 2), m_pEffectList[i]->m_dX * 32 + (rand() % 100) - 50 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 90) - 45, NULL, NULL, -1 * x - 1 - 10);
						}
						delete m_pEffectList[i];
						m_pEffectList[i] = NULL;
						break;

					case 160: // Energy-Strike
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							bAddNewEffect(16, m_pEffectList[i]->m_sX, m_pEffectList[i]->m_sY,
								m_pEffectList[i]->m_dX * 32 + 50 - (rand() % 100), m_pEffectList[i]->m_dY * 32 + 50 - (rand() % 100), 0);
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX;
							else sDist = sAbsY;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 161: // Mass-Fire-Strike
						m_Misc.GetPoint(m_pEffectList[i]->m_mX, m_pEffectList[i]->m_mY,
							m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32/* - 40*/,
							&m_pEffectList[i]->m_mX, &m_pEffectList[i]->m_mY,
							&m_pEffectList[i]->m_iErr, 50);
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - m_pEffectList[i]->m_dY * 32) <= 2))
						{
							bAddNewEffect(30, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
							bAddNewEffect(31, m_pEffectList[i]->m_dX * 32 - 30, m_pEffectList[i]->m_dY * 32 - 15, NULL, NULL, -7);
							bAddNewEffect(31, m_pEffectList[i]->m_dX * 32 + 35, m_pEffectList[i]->m_dY * 32 - 30, NULL, NULL, -5);
							bAddNewEffect(31, m_pEffectList[i]->m_dX * 32 + 20, m_pEffectList[i]->m_dY * 32 + 30, NULL, NULL, -3);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 163: // Mass-Chill-Wind Chill-Wind
						bAddNewEffect(56, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
						bAddNewEffect(56, m_pEffectList[i]->m_dX * 32 - 30, m_pEffectList[i]->m_dY * 32 - 15, NULL, NULL, -10);
						bAddNewEffect(56, m_pEffectList[i]->m_dX * 32 + 35, m_pEffectList[i]->m_dY * 32 - 30, NULL, NULL, -6);
						bAddNewEffect(56, m_pEffectList[i]->m_dX * 32 + 20, m_pEffectList[i]->m_dY * 32 + 30, NULL, NULL, -3);
						bAddNewEffect(56, m_pEffectList[i]->m_dX * 32 + (rand() % 100) - 50, m_pEffectList[i]->m_dY * 32 + (rand() % 70) - 35, NULL, NULL, -1 * (rand() % 10));
						bAddNewEffect(56, m_pEffectList[i]->m_dX * 32 + (rand() % 100) - 50, m_pEffectList[i]->m_dY * 32 + (rand() % 70) - 35, NULL, NULL, -1 * (rand() % 10));
						bAddNewEffect(56, m_pEffectList[i]->m_dX * 32 + (rand() % 100) - 50, m_pEffectList[i]->m_dY * 32 + (rand() % 70) - 35, NULL, NULL, -1 * (rand() % 10));
						bAddNewEffect(56, m_pEffectList[i]->m_dX * 32 + (rand() % 100) - 50, m_pEffectList[i]->m_dY * 32 + (rand() % 70) - 35, NULL, NULL, -1 * (rand() % 10));
						delete m_pEffectList[i];
						m_pEffectList[i] = NULL;
						break;

					case 164: // worm-bite
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							bAddNewEffect(68, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0); // testcode 0111 18
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 170: // Bloody-Shock-Wave
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else if ((m_pEffectList[i]->m_cFrame % 2) == 0)
						{
							bAddNewEffect(34, m_pEffectList[i]->m_sX, m_pEffectList[i]->m_sY,
								m_pEffectList[i]->m_dX * 32 + 30 - (rand() % 60), m_pEffectList[i]->m_dY * 32 + 30 - (rand() % 60), 0);
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX;
							else sDist = sAbsY;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 172: // Mass-Ice-Strike
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, NULL, NULL, 0);
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * (rand() % 3));
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * (rand() % 3));
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * (rand() % 3));
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * (rand() % 3));
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * (rand() % 3));
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * (rand() % 3));
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * (rand() % 3));
						bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * (rand() % 3));
						for (x = 0; x < 16; x++)
						{
							bAddNewEffect(44, m_pEffectList[i]->m_dX * 32 + (rand() % 110) - 55 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 100) - 50, NULL, NULL, -1 * x - 1);
						}
						for (x = 0; x < 8; x++)
						{
							bAddNewEffect(45 + (rand() % 2), m_pEffectList[i]->m_dX * 32 + (rand() % 100) - 50 + 10, m_pEffectList[i]->m_dY * 32 + (rand() % 90) - 45, NULL, NULL, -1 * x - 1 - 10);
						}
						delete m_pEffectList[i];
						m_pEffectList[i] = NULL;
						break;

					case 174: // Lightning-Strike
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							bAddNewEffect(151, m_pEffectList[i]->m_sX, m_pEffectList[i]->m_sY,
								m_pEffectList[i]->m_dX + (rand() % 3) - 1, m_pEffectList[i]->m_dY + (rand() % 3) - 1, 0);
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX;
							else sDist = sAbsY;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 182: // Mass-Magic-Missile
						m_Misc.GetPoint(m_pEffectList[i]->m_mX
							, m_pEffectList[i]->m_mY
							, m_pEffectList[i]->m_dX * 32
							, m_pEffectList[i]->m_dY * 32
							, &m_pEffectList[i]->m_mX
							, &m_pEffectList[i]->m_mY
							, &m_pEffectList[i]->m_iErr
							, 50);
						bAddNewEffect(8, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, -1 * (rand() % 4));
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - m_pEffectList[i]->m_dY * 32) <= 2))
						{	// JLE 0043132A
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							bAddNewEffect(35, m_pEffectList[i]->m_dX * 32 + 22, m_pEffectList[i]->m_dY * 32 - 15, NULL, NULL, -7, 1);
							bAddNewEffect(36, m_pEffectList[i]->m_dX * 32 - 22, m_pEffectList[i]->m_dY * 32 - 7, NULL, NULL, -7, 1);
							bAddNewEffect(36, m_pEffectList[i]->m_dX * 32 + 30, m_pEffectList[i]->m_dY * 32 - 22, NULL, NULL, -5, 1);
							bAddNewEffect(36, m_pEffectList[i]->m_dX * 32 + 12, m_pEffectList[i]->m_dY * 32 + 22, NULL, NULL, -3, 1);
						}
						break;

					case 191: // Blizzard
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else /*if (m_pEffectList[i]->m_cFrame == 1)*/
						{
							bAddNewEffect(71, m_pEffectList[i]->m_sX, m_pEffectList[i]->m_sY,
								m_pEffectList[i]->m_dX * 32 + (rand() % 120) - 60, m_pEffectList[i]->m_dY * 32 + (rand() % 120) - 60, 0);
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX;
							else sDist = sAbsY;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 196: // Earth-Shock-Wave
						m_Misc.GetPoint(m_pEffectList[i]->m_mX
							, m_pEffectList[i]->m_mY
							, m_pEffectList[i]->m_dX * 32
							, m_pEffectList[i]->m_dY * 32
							, &m_pEffectList[i]->m_mX
							, &m_pEffectList[i]->m_mY
							, &m_pEffectList[i]->m_iErr
							, 40);
						bAddNewEffect(80, m_pEffectList[i]->m_mX + (rand() % 30) - 15, m_pEffectList[i]->m_mY + (rand() % 30) - 15, NULL, NULL, 0, 1);
						bAddNewEffect(80, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, 0, 0);
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX - 10;
							else sDist = sAbsY - 10;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 192: //Probando Lighting Wave
						m_Misc.GetPoint(m_pEffectList[i]->m_mX
							, m_pEffectList[i]->m_mY
							, m_pEffectList[i]->m_dX * 32
							, m_pEffectList[i]->m_dY * 32
							, &m_pEffectList[i]->m_mX
							, &m_pEffectList[i]->m_mY
							, &m_pEffectList[i]->m_iErr
							, 40);
						bAddNewEffect(7, m_pEffectList[i]->m_mX + (rand() % 30) - 15, m_pEffectList[i]->m_mY + (rand() % 30) - 15, NULL, NULL, 0, 1);//7
						bAddNewEffect(7, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, 0, 0);//7
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX - 10;
							else sDist = sAbsY - 10;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 198:  //Probando Fire Shock Wave
						m_Misc.GetPoint(m_pEffectList[i]->m_mX
							, m_pEffectList[i]->m_mY
							, m_pEffectList[i]->m_dX * 32
							, m_pEffectList[i]->m_dY * 32
							, &m_pEffectList[i]->m_mX
							, &m_pEffectList[i]->m_mY
							, &m_pEffectList[i]->m_iErr
							, 40);
						bAddNewEffect(14, m_pEffectList[i]->m_mX + (rand() % 30) - 15, m_pEffectList[i]->m_mY + (rand() % 30) - 15, NULL, NULL, 0, 1);
						bAddNewEffect(15, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, 0, 0);
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX - 10;
							else sDist = sAbsY - 10;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 197: // Storm-Of-Death
						m_Misc.GetPoint(m_pEffectList[i]->m_mX
							, m_pEffectList[i]->m_mY
							, m_pEffectList[i]->m_dX * 32
							, m_pEffectList[i]->m_dY * 32
							, &m_pEffectList[i]->m_mX
							, &m_pEffectList[i]->m_mY
							, &m_pEffectList[i]->m_iErr
							, 40);
						bAddNewEffect(168, m_pEffectList[i]->m_mX + (rand() % 30) - 15, m_pEffectList[i]->m_mY + (rand() % 30) - 15, NULL, NULL, 0, 1);
						bAddNewEffect(168, m_pEffectList[i]->m_mX + (rand() % 20) - 10, m_pEffectList[i]->m_mY + (rand() % 20) - 10, NULL, NULL, 0, 0);
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							sAbsX = abs(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							sAbsY = abs(((m_sViewPointY / 32) + 7) - m_pEffectList[i]->m_dY);
							if (sAbsX > sAbsY) sDist = sAbsX - 10;
							else sDist = sAbsY - 10;
							lPan = -(((m_sViewPointX / 32) + 10) - m_pEffectList[i]->m_dX);
							PlaySound('E', 1, sDist, lPan);
						}
						break;

					case 200:
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							bAddNewEffect(203, m_pEffectList[i]->m_sX + 40, m_pEffectList[i]->m_sY + 120, NULL, NULL, 0, 0);
							bAddNewEffect(204, m_pEffectList[i]->m_sX - 10, m_pEffectList[i]->m_sY + 70, NULL, NULL, 0, 0);
							bAddNewEffect(205, m_pEffectList[i]->m_sX - 10, m_pEffectList[i]->m_sY + 75, NULL, NULL, 0, 0);
							bAddNewEffect(206, m_pEffectList[i]->m_sX - 7, m_pEffectList[i]->m_sY + 27, NULL, NULL, 0, 0);
							bAddNewEffect(201, (rand() % 160) + x2, (rand() % 120) + y2, NULL, NULL, 0, 1);
							bAddNewEffect(202, (rand() % 160) + x2, (rand() % 120) + y2, NULL, NULL, 0, 1);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 201:
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							bAddNewEffect(203, m_pEffectList[i]->m_sX + 110, m_pEffectList[i]->m_sY + 120, NULL, NULL, 0, 0);
							bAddNewEffect(204, m_pEffectList[i]->m_sX - 10, m_pEffectList[i]->m_sY + 70, NULL, NULL, 0, 0);
							bAddNewEffect(205, m_pEffectList[i]->m_sX - 10, m_pEffectList[i]->m_sY + 75, NULL, NULL, 0, 0);
							bAddNewEffect(202, (rand() % 160) + x2, (rand() % 120) + y2, NULL, NULL, 0, 1);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 202:
						if (m_pEffectList[i]->m_cFrame >= m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							bAddNewEffect(203, m_pEffectList[i]->m_sX + 65, m_pEffectList[i]->m_sY + 120, NULL, NULL, 0, 0);
							bAddNewEffect(204, m_pEffectList[i]->m_sX - 10, m_pEffectList[i]->m_sY + 70, NULL, NULL, 0, 0);
							bAddNewEffect(205, m_pEffectList[i]->m_sX - 10, m_pEffectList[i]->m_sY + 75, NULL, NULL, 0, 0);
							bAddNewEffect(206, m_pEffectList[i]->m_sX - 7, m_pEffectList[i]->m_sY + 27, NULL, NULL, 0, 0);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 250: // Gate round
						m_Misc.GetPoint(m_pEffectList[i]->m_mX
							, m_pEffectList[i]->m_mY
							, m_pEffectList[i]->m_dX * 32
							, m_pEffectList[i]->m_dY * 32 - 40
							, &m_pEffectList[i]->m_mX
							, &m_pEffectList[i]->m_mY
							, &m_pEffectList[i]->m_iErr
							, 10);
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - (m_pEffectList[i]->m_dY * 32 - 40)) <= 2))
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 251: // Salmon burst (effect11s)
						m_Misc.GetPoint(m_pEffectList[i]->m_mX
							, m_pEffectList[i]->m_mY
							, m_pEffectList[i]->m_dX * 32
							, m_pEffectList[i]->m_dY * 32
							, &m_pEffectList[i]->m_mX
							, &m_pEffectList[i]->m_mY
							, &m_pEffectList[i]->m_iErr
							, 50);
						if ((abs(m_pEffectList[i]->m_mX - m_pEffectList[i]->m_dX * 32) <= 2)
							&& (abs(m_pEffectList[i]->m_mY - (m_pEffectList[i]->m_dY * 32 - 40)) <= 2))
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						else
						{
							bAddNewEffect(252, m_pEffectList[i]->m_dX * 32, m_pEffectList[i]->m_dY * 32, 0, 0, 0, 1);
							bAddNewEffect(252, m_pEffectList[i]->m_dX * 32 - 30, m_pEffectList[i]->m_dY * 32 - 15, 0, 0, -7, 1);
							bAddNewEffect(252, m_pEffectList[i]->m_dX * 32 - 35, m_pEffectList[i]->m_dY * 32 - 30, 0, 0, -5, 1);
							bAddNewEffect(252, m_pEffectList[i]->m_dX * 32 + 20, m_pEffectList[i]->m_dY * 32 + 30, 0, 0, -3, 1);
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;

					case 8:
					case 14:
					case 15:
					case 18:
					case 32:
					case 35: //
					case 36: //
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 57:
					//case 59:	//Fury
					case 61:
					case 63:
					case 64:
					case 67:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 80: //
					case 82: //
					case 85:
					case 86:
					case 87:

					case 101:
					case 102:
					case 111:
					case 112:
					case 113:
					case 121:
					case 122:
					case 123: // Stamina Rec
					case 124:
					case 125:
					case 126:
					case 127:
					case 128: // Gr Stamina Rec
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 142:
					case 144:
					case 150: // Berserk : Cirlcle 6 magic
					case 152: // Polymorph
					case 153:
					//case 159: //FuryOfWar
					case 162:
					case 165:
					case 166:
					case 168:
					case 171:
					case 176: //
					case 177: //

					case 180:
					case 183: //
					case 184: // EP's Magic Drain
					case 185: // Berserk : Cirlcle 6 magic
					case 190:
					//case 192://Lighting Shock Wave
					case 194:
					case 195:
					//case 198://Fire Shock Wave
					case 207:
					case 208:
					case 242: // Mage hero effect
					case 243: // War hero effect
					case 244: // Snoopy: d�plac� pour nvx sorts: Aura du casteur de Mass MagicMissile
					case 245:
					case 246:
						if (m_pEffectList[i]->m_cFrame > m_pEffectList[i]->m_cMaxFrame)
						{
							delete m_pEffectList[i];
							m_pEffectList[i] = NULL;
						}
						break;
				}
			}
		}
	return bRet;
}


BOOL   CGame::DrawObject_OnRun(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID, const bool frame_omision)
{
	int dx, dy;
	int iBodyIndex, iHairIndex, iUndiesIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iWeaponIndex, iShieldIndex, iHelmIndex, iR, iG, iB, iMantleIndex;
	BOOL bInv = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempWeaponColor, TempShieldColor, TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114) bInv = TRUE; //Energy-Ball,Wyvern

	if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
	{
		iWeaponColor = 0;
		iShieldColor = 0;
		iArmorColor = 0;
		iMantleColor = 0;
		iArmColor = 0;
		iPantsColor = 0;
		iBootsColor = 0;
		iHelmColor = 0;
	}
	else
	{
		// New Colors -> ZeroEoyPnk
		iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (iWeaponColor == 0) {
			iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (iWeaponColor != 0) iWeaponColor += 15;
		}

		iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (iShieldColor == 0) {
			iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (iShieldColor != 0) iShieldColor += 15;
		}

		iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (iArmorColor == 0) {
			iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (iArmorColor != 0) iArmorColor += 15;
		}

		iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (iMantleColor == 0) {
			iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (iMantleColor != 0) iMantleColor += 15;
		}

		iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (iArmColor == 0) {
			iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (iArmColor != 0) iArmColor += 15;
		}

		iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (iPantsColor == 0) {
			iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (iPantsColor != 0) iPantsColor += 15;
		}

		iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (iBootsColor == 0) {
			iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (iBootsColor != 0) iBootsColor += 15;
		}

		iHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (iHelmColor == 0) {
			iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (iHelmColor != 0) iHelmColor += 15;
		}
	}

	if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
	{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
		iShieldGlare = (_tmp_sAppr4 & 0x0003);

		// New Colors -> ZeroEoyPnk
		TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
		if (TempWeaponColor == 0) {
			TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
			if (TempWeaponColor != 0) TempWeaponColor += 15;
		}

		TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
		if (TempShieldColor == 0) {
			TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
			if (TempShieldColor != 0) TempShieldColor += 15;
		}

		TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
		if (TempArmorColor == 0) {
			TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
			if (TempArmorColor != 0) TempArmorColor += 15;
		}

		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		if (TempMantleColor == 0) {
			TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
			if (TempMantleColor != 0) TempMantleColor += 15;
		}

		TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
		if (TempArmColor == 0) {
			TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
			if (TempArmColor != 0) TempArmColor += 15;
		}

		TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
		if (TempPantsColor == 0) {
			TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
			if (TempPantsColor != 0) TempPantsColor += 15;
		}

		TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
		if (TempBootsColor == 0) {
			TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
			if (TempBootsColor != 0) TempBootsColor += 15;
		}

		TempHelmColor = (_tmp_iApprColor & 0x0000000F);
		if (TempHelmColor == 0) {
			TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
			if (TempHelmColor != 0) TempHelmColor += 15;
		}
	}

	if ((_tmp_iStatus & 0x10) != 0)
	{
	//	DecriptString(m_cPlayerName);
		if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
		else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
		//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
		else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
		else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
		else {
	//		EncriptString(m_cPlayerName);
			return FALSE;
		}
	//	EncriptString(m_cPlayerName);
	}

	switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (4 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 4;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 4;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 4;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 4;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 4;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 4;
			if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
				iWeaponIndex = -1;
			else
			{
				iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 6 + (_tmp_cDir - 1);
			}
			if ((_tmp_sAppr2 & 0x000F) == 0)
				iShieldIndex = -1;
			else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 6;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 4;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 4;
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (4 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 4;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 4;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 4;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 4;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 4;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 4;
			if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
				iWeaponIndex = -1;
			else
			{
				iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 6 + (_tmp_cDir - 1);
			}
			if ((_tmp_sAppr2 & 0x000F) == 0)
				iShieldIndex = -1;
			else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 6;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 4;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 4;
			break;

		default:
			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
	}
	dx = 0;
	dy = 0;
	const bool value = frame_omision;

	switch (_tmp_cDir) {
	case 1: dy = 30 - (_tmp_cFrame << 2) - value; break;
	case 2: dy = 30 - (_tmp_cFrame << 2) - value; dx = (_tmp_cFrame << 2) + value - 30; break;
	case 3: dx = (_tmp_cFrame << 2) + value - 30; break;
	case 4: dx = (_tmp_cFrame << 2) + value - 30; dy = (_tmp_cFrame << 2) + value - 30; break;
	case 5: dy = (_tmp_cFrame << 2) + value - 30; break;
	case 6: dy = (_tmp_cFrame << 2) + value - 30; dx = 30 - (_tmp_cFrame << 2) - value; break;
	case 7: dx = 30 - (_tmp_cFrame << 2) - value; break;
	case 8: dx = 30 - (_tmp_cFrame << 2) - value; dy = 30 - (_tmp_cFrame << 2) - value; break;
	}

	int fix_x = 0;
	int fix_y = 0;

	switch (_tmp_cDir) {
	case 1: fix_x = sX + dx;		 fix_y = sY + dy - value; break;//listo
	case 2: fix_x = sX + dx + value; fix_y = sY + dy - value; break;//listo
	case 3: fix_x = sX + dx + value; fix_y = sY + dy;		  break;//listo
	case 4: fix_x = sX + dx + value; fix_y = sY + dy + value; break;//listo
	case 5: fix_x = sX + dx;		 fix_y = sY + dy + value; break;//listo
	case 6: fix_x = sX + dx - value; fix_y = sY + dy + value; break;//listo
	case 7: fix_x = sX + dx - value; fix_y = sY + dy;		  break;//listo
	case 8: fix_x = sX + dx - value; fix_y = sY + dy - value; break;//listo
	}



	DecriptString(m_cCurLocation);
	if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX + dx, sY + dy, _tmp_cFrame, _tmp_sOwnerType);
	EncriptString(m_cCurLocation);

	if (_tmp_iEffectType != 0)
	{
		switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
		}
	}

	if (bTrans == FALSE)
	{
		CheckActiveAura(fix_x, fix_y, dwTime, _tmp_sOwnerType);
		if (_cDrawingOrder[_tmp_cDir] == 1)
		{
			if (iWeaponIndex != -1)
			{
				if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(fix_x, fix_y, _tmp_cFrame, dwTime);
				else
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				}
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
			}

			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
					}
					break;
			}

			if (bInv == TRUE)
				//m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite2(sX+dx, sY+dy, _tmp_cFrame, dwTime);
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
			else
			{
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
			}
			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 0))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iPantsIndex != -1)// PANTS ONRUN 1
			{
				if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iArmArmorIndex != -1)//HAUBERK ONRUN 1
			{
				if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);

					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONRUN 1
			{
				if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iHelmIndex != -1)//HELM ONRUN 1
			{
				if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);

					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 2))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iShieldIndex != -1)
			{
				if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				}
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 1))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
		}
		else
		{
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
					}
					break;
			}

			if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite2(fix_x, fix_y, _tmp_cFrame, dwTime);
			else
			{
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
			}

			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);


			if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 0))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iPantsIndex != -1)//PANTS ONRUN 2
			{
				if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if (iArmArmorIndex != -1)//HAUBERK ONRUN 2
			{
				if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);

					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONRUN 2
			{
				if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if (iHelmIndex != -1)//HELM ONRUN 2
			{
				if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);

					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 2))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iShieldIndex != -1)
			{
				if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
				}
				// ZeroEoyPnk - Fix del glare con armor merien
				ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
				switch (iShieldGlare) {//lalo glare
					case 0: break;//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
				}
			}

			if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 1))
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iWeaponIndex != -1)
			{
				if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(fix_x, fix_y, _tmp_cFrame, dwTime);
				else
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
				}
				DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
				switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
				}
			}
		}

		if ((_tmp_iStatus & 0x20) != 0) 	// Berserk
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, -5, -5, dwTime);

		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
		{
			if ((_tmp_iStatus & 0x00100000) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, -50, -50, dwTime);
			if (_tmp_AdminLevel > 0)
				ShowAdmin(fix_x, fix_y, _tmp_AdminLevel);
		}

		DrawAngel(40 + (_tmp_cDir - 1), sX + dx + 20, sY + dy - 20, _tmp_cFrame % 4, dwTime);
		CheckActiveAura2(fix_x, fix_y, dwTime, _tmp_sOwnerType);

		// Capture The Flag - Angel position Based
		DrawFlag(sX + dx - 10, sY + dy - 70, dwTime);

	}
	else if (strlen(_tmp_cName) > 0)
	{
		if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(fix_x, fix_y, _tmp_cName, _tmp_iStatus, ObjectID);
		else DrawNpcName(fix_x, fix_y, _tmp_sOwnerType, _tmp_iStatus);
	}

	// NewPartyBar - ZeroEoyPnk
	if (DecriptInt(m_iPartyStatus) != NULL) {
		for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
			if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
			//	DecriptString(m_cPlayerName);
				if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
					PartyBar(fix_x, fix_y, i, dwTime);
			//	EncriptString(m_cPlayerName);
			}
		}
	}

	//DecriptString(m_cPlayerName);
	if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(fix_x, fix_y, dwTime);
	//EncriptString(m_cPlayerName);

	if (_tmp_iChatIndex != NULL)
	{
		if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
		{
		/*	m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX + dx;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY + dy;*/
			m_pChatMsgList[_tmp_iChatIndex]->m_sX = fix_x;
			m_pChatMsgList[_tmp_iChatIndex]->m_sY = fix_y;
		}
		else
		{
			m_pMapData->ClearChatMsg(indexX, indexY);
		}
	}
	_tmp_dx = dx;
	_tmp_dy = dy;

	switch (_tmp_sOwnerType)
	{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
		/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
	}

	if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1)
		&& (m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY)
		&& (m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY)
		&& (m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX)
		&& (m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
	return FALSE;
}


void CGame::GetPlayerTurn()
{
	char cDir;
	short sX, sY, sCnt1, sCnt2;
	int   iError;

	sX = m_sPlayerX;
	sY = m_sPlayerY;
	sCnt1 = 0;
	m_cPlayerTurn = 0;
	iError = 0;
	while (1) {
		cDir = cGetNextMoveDir(sX, sY, m_sCommX, m_sCommY);
		if (cDir == 0) break;
		switch (cDir) {
		case 1: sY--;       break;
		case 2: sX++; sY--; break;
		case 3: sX++;       break;
		case 4: sX++; sY++; break;
		case 5: sY++;       break;
		case 6: sX--; sY++; break;
		case 7: sX--;       break;
		case 8: sX--; sY--; break;
		}
		sCnt1++;
		if (sCnt1 > 30) break;
	}

	sX = m_sPlayerX;
	sY = m_sPlayerY;
	sCnt2 = 0;
	m_cPlayerTurn = 1;
	iError = 0;
	while (1) {
		cDir = cGetNextMoveDir(sX, sY, m_sCommX, m_sCommY);
		if (cDir == 0) break;
		switch (cDir) {
		case 1: sY--;       break;
		case 2: sX++; sY--; break;
		case 3: sX++;       break;
		case 4: sX++; sY++; break;
		case 5: sY++;       break;
		case 6: sX--; sY++; break;
		case 7: sX--;       break;
		case 8: sX--; sY--; break;
		}
		sCnt2++;
		if (sCnt2 > 30) break;
	}

	if (sCnt1 > sCnt2)
		m_cPlayerTurn = 0;
	else m_cPlayerTurn = 1;
}
/*

int CGame::CalculateSteps(short startX, short startY, short targetX, short targetY) {
	char cDir;
	short sX = startX, sY = startY;
	int stepCount = 0;

	while (true) {
		cDir = cGetNextMoveDir(sX, sY, targetX, targetY);
		if (cDir == 0) break;  // Sin dirección válida, se detiene el bucle

		switch (cDir) {
		case 1: sY--;       break;
		case 2: sX++; sY--; break;
		case 3: sX++;       break;
		case 4: sX++; sY++; break;
		case 5: sY++;       break;
		case 6: sX--; sY++; break;
		case 7: sX--;       break;
		case 8: sX--; sY--; break;
		}

		stepCount++;
		if (stepCount > 30) break;  // Límite máximo de pasos
	}

	return stepCount;
}

void CGame::GetPlayerTurn() {
	// Calcular pasos para ambos enfoques
	int steps0 = CalculateSteps(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);  // Enfoque 0
	int steps1 = CalculateSteps(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);  // Enfoque 1

	// Determinar el turno basado en el menor número de pasos
	m_cPlayerTurn = (steps0 > steps1) ? 1 : 0;
}
*/



int CGame::_iCheckDlgBoxFocus(short msX, short msY, char cButtonSide)
{
	int i;
	char         cDlgID;
	short        sX, sY;
	DWORD		  dwTime = m_dwCurTime;
	if (cButtonSide == 1) {
		// Snoopy: 41->61
		for (i = 0; i < DEF_MAXDIALOGBOX; i++)
			// Snoopy: 40->60
			if (m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i] != NULL) 	// Snoopy: 40->60
			{
				cDlgID = m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i];
				if ((m_stDialogBoxInfo[cDlgID].sX <= msX) && ((m_stDialogBoxInfo[cDlgID].sX + m_stDialogBoxInfo[cDlgID].sSizeX) >= msX) &&
					(m_stDialogBoxInfo[cDlgID].sY <= msY) && ((m_stDialogBoxInfo[cDlgID].sY + m_stDialogBoxInfo[cDlgID].sSizeY) >= msY))
				{
					EnableDialogBox(cDlgID, NULL, NULL, NULL);

					m_stMCursor.sPrevX = msX;
					m_stMCursor.sPrevY = msY;
					m_stMCursor.sDistX = msX - m_stDialogBoxInfo[cDlgID].sX;
					m_stMCursor.sDistY = msY - m_stDialogBoxInfo[cDlgID].sY;
					TimeSCSelected = timeGetTime();

					switch (cDlgID) {
						case 1:
							if (bDlgBoxPress_Character(msX, msY) == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							break;
						case 3:
							if (bDlgBoxPress_MagicWindow(msX, msY) == FALSE) //Aqui comprobamos que no arrastre una magia
							{ //Si no es una magia es que estamos arrastrando el cuadro de dialogo entero :D
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							break;
						case 4:
						case 5:
						case 6:
						case 7:
						case 8:
						case 9:
						case 12:
						case 61:
						case 13:
						case 16:
						case 17:
						case 19:
						case 20:
						case 22:
						case 23:
						case 24:
						case 25:
						case 28:
							//case 29:
						case 31:
						case 32:
						case 33:
						case 34:
						case 35:
						case 36:
						case 37:
						case 38:
						case 40:
						case 41: //Snoopy: Drag exchange confirmation dialog
						case 42:  // Snoopy: Drag majestic stats
						//case 46: 
						case 47:
						case 49:
						case 50: // resur
						case 51:
						case 53: //
						case 54:
						case 55:
						case 56:
						case 60:						
						case 67:
						case 68:
						case 69:
						case 72:
						case 73:
						case 74:
						case 75:
						case 76:
						case 77:
						case 78:
						case 79:
						case 80:
							m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
							m_stMCursor.sSelectedObjectID = cDlgID;
							break;

						case 2:	// (Sell Item)
							if (bDlgBoxPress_Inventory(msX, msY) == FALSE)
							{
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							break;

						case 10:
							sX = m_stDialogBoxInfo[10].sX;
							sY = m_stDialogBoxInfo[10].sY;
							if ((msX >= sX + 340) && (msX <= sX + 360) && (msY >= sY + 22) && (msY <= sY + 138)) {
								m_stDialogBoxInfo[10].bIsScrollSelected = TRUE;
								return -1;
							}

							if (m_stDialogBoxInfo[10].bIsScrollSelected == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 11:
							sX = m_stDialogBoxInfo[11].sX;
							sY = m_stDialogBoxInfo[11].sY;
							if ((m_stDialogBoxInfo[11].cMode == 0) && (msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 20) && (msY <= sY + 330)) {
								m_stDialogBoxInfo[11].bIsScrollSelected = TRUE;
								return -1;
							}

							if ((m_stDialogBoxInfo[11].bIsScrollSelected == FALSE)) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 14:
							sX = m_stDialogBoxInfo[14].sX;
							sY = m_stDialogBoxInfo[14].sY;
							if ((msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 40) && (msY <= sY + 320)) {
								m_stDialogBoxInfo[14].bIsScrollSelected = TRUE;
								return -1;
							}

							if (m_stDialogBoxInfo[14].bIsScrollSelected == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 15:
							sX = m_stDialogBoxInfo[15].sX;
							sY = m_stDialogBoxInfo[15].sY;
							if ((msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 40) && (msY <= sY + 320))
							{
								m_stDialogBoxInfo[15].bIsScrollSelected = TRUE;
								return -1;
							}
							if (m_stDialogBoxInfo[15].bIsScrollSelected == FALSE)
							{
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 18:
							sX = m_stDialogBoxInfo[18].sX;
							sY = m_stDialogBoxInfo[18].sY;
							if ((msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 40) && (msY <= sY + 320)) {
								m_stDialogBoxInfo[18].bIsScrollSelected = TRUE;
								return -1;
							}

							if (m_stDialogBoxInfo[18].bIsScrollSelected == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 21:
							sX = m_stDialogBoxInfo[21].sX;
							sY = m_stDialogBoxInfo[21].sY;
							if ((msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 40) && (msY <= sY + 320)) {
								m_stDialogBoxInfo[21].bIsScrollSelected = TRUE;
								return -1;
							}

							if (m_stDialogBoxInfo[21].bIsScrollSelected == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 26:
							if (bDlgBoxPress_SkillDlg(msX, msY) == FALSE)
							{
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							break;

						case 27:
							sX = m_stDialogBoxInfo[27].sX;
							sY = m_stDialogBoxInfo[27].sY;
							if ((msX >= sX + 370) && (msX <= sX + 382) && (msY >= sY + 73) && (msY <= sY + 335)) {
								m_stDialogBoxInfo[27].bIsScrollSelected = TRUE;
								return -1;
							}

							if (m_stDialogBoxInfo[27].bIsScrollSelected == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 43:
							sX = m_stDialogBoxInfo[43].sX;
							sY = m_stDialogBoxInfo[43].sY;
							if ((msX >= sX + 246) && (msX <= sX + 260) && (msY >= sY + 32) && (msY <= sY + 336)) {
								m_stDialogBoxInfo[43].bIsScrollSelected = TRUE;
								return -1;
							}

							if (m_stDialogBoxInfo[43].bIsScrollSelected == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 44:
							if (BigBar == 1)
							{
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return 0;
							break;

						case 46:
							sX = m_stDialogBoxInfo[46].sX;
							sY = m_stDialogBoxInfo[46].sY;
							if ((msX >= sX + 370) && (msX <= sX + 382) && (msY >= sY + 73) && (msY <= sY + 335)) {
								m_stDialogBoxInfo[46].bIsScrollSelected = TRUE;
								return -1;
							}

							if (m_stDialogBoxInfo[46].bIsScrollSelected == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 48:
							if (bDlgBoxPress_Barrita(msX, msY) == FALSE)
							{
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							break;

							//NewPanel
						case 52:
							sX = m_stDialogBoxInfo[52].sX;
							sY = m_stDialogBoxInfo[52].sY;
							if (m_stDialogBoxInfo[52].sV5 == 6)
							{
								if ((msX >= sX + 66) && (msX <= sX + 178) && (msY >= sY + 122) && (msY <= sY + 136)) {
									m_stDialogBoxInfo[52].bIsScrollSelected = TRUE;
									return -1;
								}
								if ((msX >= sX + 66) && (msX <= sX + 178) && (msY >= sY + 142) && (msY <= sY + 156)) {
									m_stDialogBoxInfo[52].bIsScrollSelected = TRUE;
									return -1;
								}

								if (m_stDialogBoxInfo[52].bIsScrollSelected == FALSE) {
									m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
									m_stMCursor.sSelectedObjectID = cDlgID;
								}
								else return -1;
							}
							else
							{
								if ((msX >= sX + 370) && (msX <= sX + 382) && (msY >= sY + 73) && (msY <= sY + 335)) {
									m_stDialogBoxInfo[52].bIsScrollSelected = TRUE;
									return -1;
								}

								if (m_stDialogBoxInfo[52].bIsScrollSelected == FALSE) {
									m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
									m_stMCursor.sSelectedObjectID = cDlgID;
								}
								else return -1;
							}
							break;

						case 57:
							sX = m_stDialogBoxInfo[57].sX;
							sY = m_stDialogBoxInfo[57].sY;
							if ((m_stDialogBoxInfo[57].cMode == 0) && (msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 20) && (msY <= sY + 330)) {
								m_stDialogBoxInfo[57].bIsScrollSelected = TRUE;
								return -1;
							}

							if ((m_stDialogBoxInfo[57].bIsScrollSelected == FALSE)) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 58:
							sX = m_stDialogBoxInfo[58].sX;
							sY = m_stDialogBoxInfo[58].sY;
							if ((m_stDialogBoxInfo[58].cMode == 0) && (msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 20) && (msY <= sY + 330)) {
								m_stDialogBoxInfo[58].bIsScrollSelected = TRUE;
								return -1;
							}

							if ((m_stDialogBoxInfo[58].bIsScrollSelected == FALSE)) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

						case 59:
							sX = m_stDialogBoxInfo[59].sX;
							sY = m_stDialogBoxInfo[59].sY;
							if ((msX >= sX + 237) && (msX <= sX + 251) && (msY >= sY + 32) && (msY <= sY + 336)) {
								m_stDialogBoxInfo[59].bIsScrollSelected = TRUE;
								return -1;
							}

							if (m_stDialogBoxInfo[59].bIsScrollSelected == FALSE) {
								m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_DLGBOX;
								m_stMCursor.sSelectedObjectID = cDlgID;
							}
							else return -1;
							break;

					}
					return 1;
				}
			}
		return 0;
	}
	else if (cButtonSide == 2)
	{
		if ((dwTime - m_dwDialogCloseTime) < 300) return 0;
		// Snoopy: 40->60
		for (i = 0; i < DEF_MAXDIALOGBOX; i++)
			// Snoopy: 40->60
			if (m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i] != NULL) {
				// Snoopy: 40->60
				cDlgID = m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i];
				if ((m_stDialogBoxInfo[cDlgID].sX < msX) && ((m_stDialogBoxInfo[cDlgID].sX + m_stDialogBoxInfo[cDlgID].sSizeX) > msX) &&
					(m_stDialogBoxInfo[cDlgID].sY < msY) && ((m_stDialogBoxInfo[cDlgID].sY + m_stDialogBoxInfo[cDlgID].sSizeY) > msY))
				{
					if ((cDlgID != 5) && (cDlgID != 6) && (cDlgID != 8) && (cDlgID != 12) && ((cDlgID != 23) || (m_stDialogBoxInfo[23].cMode < 3)) && (cDlgID != 24) && (cDlgID != 27) && (cDlgID != 34) &&
						(cDlgID != 33) && !((cDlgID == 32) && ((m_stDialogBoxInfo[cDlgID].cMode == 1) || (m_stDialogBoxInfo[cDlgID].cMode == 3))))
						DisableDialogBox(cDlgID);
					m_dwDialogCloseTime = dwTime;
					return 1;
				}
			}
	}
	return 0;
}



void CGame::InitItemList(char * pData)
{
	short    cTotalItems;
	int     i, iAngelValue;
	short * sp;
	DWORD * dwp;
	WORD  * wp;
	char  * cp;

	for (i = 0; i < DEF_MAXITEMS; i++)
		m_cItemOrder[i] = -1;

	for (i = 0; i < DEF_MAXITEMEQUIPPOS; i++)
		m_sItemEquipmentStatus[i] = -1;

	for (i = 0; i < DEF_MAXITEMS; i++)
		m_bIsItemDisabled[i] = FALSE;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	cTotalItems = *cp;
	cp++;

	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pItemList[i] != NULL)
		{
			delete m_pItemList[i];
			m_pItemList[i] = NULL;
		}

	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pBankList[i] != NULL)
		{
			delete m_pBankList[i];
			m_pBankList[i] = NULL;
		}

	for (i = 0; i < cTotalItems; i++)
	{
		m_pItemList[i] = new class CItem;
		memcpy(m_pItemList[i]->m_cName, cp, 20);
		cp += 20;
		dwp = (DWORD *)cp;
		m_pItemList[i]->m_dwCount = *dwp;
		cp += 4;
		m_pItemList[i]->m_cItemType = *cp;
		cp++;
		m_pItemList[i]->m_cEquipPos = *cp;
		cp++;
		if (*cp == 0) m_bIsItemEquipped[i] = FALSE;
		else m_bIsItemEquipped[i] = TRUE;
		cp++;
		if (m_bIsItemEquipped[i] == TRUE)
		{
			m_sItemEquipmentStatus[m_pItemList[i]->m_cEquipPos] = i;
		}
		sp = (short *)cp;
		m_pItemList[i]->m_sLevelLimit = *sp;
		cp += 2;
		m_pItemList[i]->m_cGenderLimit = *cp;
		cp++;
		wp = (WORD *)cp;
		m_pItemList[i]->m_wCurLifeSpan = *wp;
		cp += 2;
		wp = (WORD *)cp;
		m_pItemList[i]->m_wWeight = *wp;
		cp += 2;
		sp = (short *)cp;
		m_pItemList[i]->m_sSprite = *sp;
		cp += 2;
		sp = (short *)cp;
		m_pItemList[i]->m_sSpriteFrame = *sp;
		cp += 2;
		m_pItemList[i]->m_cItemColor = *cp;
		cp++;
		//m_pItemList[i]->m_sItemSpecEffectValue2 = (short)*cp; // v1.41
		//cp++;
		//lalomanu
		sp = (short *)cp;
		m_pItemList[i]->m_sItemSpecEffectValue2 = *sp;
		cp += 2;

		dwp = (DWORD *)cp;
		m_pItemList[i]->m_dwAttribute = *dwp;
		cp += 4;
		m_pItemList[i]->m_sItemSpecEffectValue3 = (short)*cp; // v1.41
		cp++;
		sp = (short *)cp;
		m_pItemList[i]->m_sX = *sp;
		cp += 2;
		sp = (short *)cp;
		m_pItemList[i]->m_sY = *sp;
		cp += 2;
		if (m_pItemList[i]->m_sX < 0)   m_pItemList[i]->m_sX = 0;
		if (m_pItemList[i]->m_sX > 170) m_pItemList[i]->m_sX = 170;
		if (m_pItemList[i]->m_sY < -10) m_pItemList[i]->m_sY = -10;
		if (m_pItemList[i]->m_sY > 95)  m_pItemList[i]->m_sY = 95;

		m_cItemOrder[i] = i;
		// Snoopy: Add Angelic Stats
		if ((m_pItemList[i]->m_cItemType == 1)
			&& (m_bIsItemEquipped[i] == TRUE)
			&& (m_pItemList[i]->m_cEquipPos >= 11))
		{
			if (memcmp(m_pItemList[i]->m_cName, "AngelicPandent(STR)", 19) == 0)
			{
				iAngelValue = ((m_pItemList[i]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[i]->m_sItemSpecEffectValue3;
				m_iAngelicStr = EncriptInt(iAngelValue);
			}
			else if (memcmp(m_pItemList[i]->m_cName, "AngelicPandent(DEX)", 19) == 0)
			{
				iAngelValue = ((m_pItemList[i]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[i]->m_sItemSpecEffectValue3;
				m_iAngelicDex = EncriptInt(iAngelValue);
			}
			else if (memcmp(m_pItemList[i]->m_cName, "AngelicPandent(INT)", 19) == 0)
			{
				iAngelValue = ((m_pItemList[i]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[i]->m_sItemSpecEffectValue3;
				m_iAngelicInt = EncriptInt(iAngelValue);
			}
			else if (memcmp(m_pItemList[i]->m_cName, "AngelicPandent(MAG)", 19) == 0)
			{
				iAngelValue = ((m_pItemList[i]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[i]->m_sItemSpecEffectValue3;
				m_iAngelicMag = EncriptInt(iAngelValue);
			}
			//Nuevo Neck
		/*	else if (memcmp(m_pItemList[i]->m_cName, "AngelicPandent(VIT)", 19) == 0)
			{
				iAngelValue = ((m_pItemList[i]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[i]->m_sItemSpecEffectValue3;
				m_iAngelicVIT = EncriptInt(iAngelValue);
			}*/
		}
	}

	sp = (short *)cp;
	cTotalItems = *sp;
	cp += 2;

	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pBankList[i] != NULL)
		{
			delete m_pBankList[i];
			m_pBankList[i] = NULL;
		}

	for (i = 0; i < cTotalItems; i++)
	{
		m_pBankList[i] = new class CItem;
		memcpy(m_pBankList[i]->m_cName, cp, 20);
		cp += 20;

		dwp = (DWORD *)cp;
		m_pBankList[i]->m_dwCount = *dwp;
		cp += 4;

		m_pBankList[i]->m_sX = 40;
		m_pBankList[i]->m_sY = 30;

		m_pBankList[i]->m_cItemType = *cp;
		cp++;

		m_pBankList[i]->m_cEquipPos = *cp;
		cp++;

		sp = (short *)cp;
		m_pBankList[i]->m_sLevelLimit = *sp;
		cp += 2;

		m_pBankList[i]->m_cGenderLimit = *cp;
		cp++;

		wp = (WORD *)cp;
		m_pBankList[i]->m_wCurLifeSpan = *wp;
		cp += 2;

		wp = (WORD *)cp;
		m_pBankList[i]->m_wWeight = *wp;
		cp += 2;

		sp = (short *)cp;
		m_pBankList[i]->m_sSprite = *sp;
		cp += 2;

		sp = (short *)cp;
		m_pBankList[i]->m_sSpriteFrame = *sp;
		cp += 2;

		m_pBankList[i]->m_cItemColor = *cp;
		cp++;
		
		//m_pBankList[i]->m_sItemSpecEffectValue2 = (short)*cp; // v1.41
		//cp++;
		//lalomanu
		sp = (short *)cp;
		m_pBankList[i]->m_sItemSpecEffectValue2 = *sp;
		cp += 2;

		dwp = (DWORD *)cp;
		m_pBankList[i]->m_dwAttribute = *dwp;
		cp += 4;

		m_pBankList[i]->m_sItemSpecEffectValue3 = (short)*cp; // v1.41
		cp++;

		m_pBankList[i]->BankPage = (short)*cp; // v1.41
		cp++;
	}

	// Magic, Skill Mastery
	for (i = 0; i < DEF_MAXMAGICTYPE; i++)
	{
		m_cMagicMastery[i] = *cp;
		cp++;
	}

	for (i = 0; i < DEF_MAXSKILLTYPE; i++)
	{
		m_cSkillMastery[i] = (unsigned char)*cp;
		if (m_pSkillCfgList[i] != NULL)
			m_pSkillCfgList[i]->m_iLevel = (int)*cp;
		cp++;
	}
}

void CGame::DrawDialogBox_GuideMap(short msX, short msY, char cLB)
{
	int  m_iMaxMapIndex = DEF_SPRID_INTERFACE_GUIDEMAP + DecriptInt(m_cMapIndex) + 1;
	int  m_iMinMapIndex = DEF_SPRID_INTERFACE_GUIDEMAP;
	int  m_iMinMapSquare = DecriptInt(m_cMapIndex);
	int i;
	
	if (DecriptInt(m_cMapIndex) < 0) return;
	if ((DecriptInt(m_cMapIndex) >= 35) && (DecriptInt(m_cMapIndex) < 40))
	{
		m_iMaxMapIndex = DEF_SPRID_INTERFACE_GUIDEMAP + DecriptInt(m_cMapIndex) + 1;
		m_iMinMapIndex = DEF_SPRID_INTERFACE_GUIDEMAP + 35;
		m_iMinMapSquare = DecriptInt(m_cMapIndex) - 35;
	}
	else if (DecriptInt(m_cMapIndex) >= 40)
	{
		m_iMaxMapIndex = DEF_SPRID_INTERFACE_GUIDEMAP + DecriptInt(m_cMapIndex) + 1;
		m_iMinMapIndex = DEF_SPRID_INTERFACE_GUIDEMAP + 40;
		m_iMinMapSquare = DecriptInt(m_cMapIndex) - 40;
	}
	short sX, sY, shX, shY, szX, szY;
	sX = m_stDialogBoxInfo[9].sX;
	sY = m_stDialogBoxInfo[9].sY;
	szX = m_stDialogBoxInfo[9].sSizeX;
	szY = m_stDialogBoxInfo[9].sSizeY;
	if (sX < 20) sX = 0;
	if (sY < 20) sY = 0;

	//added resolution cambiarlalo
	if (c_reso->IsResolution() == C800x600)
	{
		if (sX > 800 - 128 - 20) sX = 800 - 128;
		if (sY > 600 - 128 - 20) sY = 600 - 128;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		if (sX > 1024 - 128 - 20) sX = 1024 - 128;
		if (sY > 768 - 128 - 20) sY = 768 - 128;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		if (sX > 640 - 128 - 20) sX = 640 - 128;
		if (sY > 480 - 128 - 20) sY = 480 - 128;
	}

	for (shX = -2; shX < 130; shX++)
	{
		m_DDraw.PutPixel(sX + shX, sY - 2, 50, 50, 50);
		m_DDraw.PutPixel(sX + shX, sY - 1, 50, 50, 50);
		m_DDraw.PutPixel(sX + shX, sY + 128, 50, 50, 50);
		m_DDraw.PutPixel(sX + shX, sY + 129, 50, 50, 50);
	}
	for (shY = -2; shY < 130; shY++)
	{
		m_DDraw.PutPixel(sX - 2, sY + shY, 50, 50, 50);
		m_DDraw.PutPixel(sX - 1, sY + shY, 50, 50, 50);
		m_DDraw.PutPixel(sX + 128, sY + shY, 50, 50, 50);
		m_DDraw.PutPixel(sX + 129, sY + shY, 50, 50, 50);
	}

	if (m_bZoomMap)
	{
		shX = m_sPlayerX - 64;
		shY = m_sPlayerY - 64;
		if (shX < 0) shX = 0;
		if (shY < 0) shY = 0;
		if (shX > m_pMapData->m_sMapSizeX - 128) shX = m_pMapData->m_sMapSizeX - 128;
		if (shY > m_pMapData->m_sMapSizeY - 128) shY = m_pMapData->m_sMapSizeY - 128;
		if (m_bDialogTrans) m_pSprite[m_iMaxMapIndex]->PutShiftTransSprite2(sX, sY, shX, shY, 0, m_dwCurTime);
		else m_pSprite[m_iMaxMapIndex]->PutShiftSpriteFast(sX, sY, shX, shY, 0, m_dwCurTime);

		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (i = 0; i <= DEF_MAXPARTYMEMBERS; i++) {
				if (strlen(m_stPartyMemberNameList[i].cName) != 0) {
					DecriptString(m_cMapName);
					if (memcmp(PartyStruct[i].PartyMapName, m_cMapName, 12) == 0) {
					//	DecriptString(m_cPlayerName);
						if (memcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName, 10) == 0)
							m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX - shX + m_sPlayerX, sY - shY + m_sPlayerY, 37, m_dwCurTime);
						else {
							if (PartyStruct[i].iParty_sX >= shX && PartyStruct[i].iParty_sX <= shX + 128 && PartyStruct[i].iParty_sY >= shY && PartyStruct[i].iParty_sY <= shY + 128)
								m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX - shX + PartyStruct[i].iParty_sX, sY - shY + PartyStruct[i].iParty_sY, 38, m_dwCurTime);
								//laloparty
								//m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY2]->PutSpriteFast(sX - shX + PartyStruct[i].iParty_sX, sY - shY + PartyStruct[i].iParty_sY, 2, m_dwCurTime);
						}
					//	EncriptString(m_cPlayerName);
					}
					EncriptString(m_cMapName);
				}
			}
		}
		else
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX - shX + m_sPlayerX, sY - shY + m_sPlayerY, 37, m_dwCurTime);

		if ((m_dwCurTime - m_dwMonsterEventTime) < 30000)
		{
			if ((m_dwCurTime % 500) < 370)
			{
				if (m_sEventX >= shX && m_sEventX <= shX + 128 && m_sEventY >= shY && m_sEventY <= shY + 128)
					m_pSprite[DEF_SPRID_INTERFACE_MONSTER]->PutSpriteFast(sX + m_sEventX - shX, sY + m_sEventY - shY, m_sMonsterID, m_dwCurTime);
			}
		}
		else
		{
			m_dwMonsterEventTime = 0;
			m_sMonsterID = 0;
		}
	}
	else // Sans zoom
	{
		if (m_bDialogTrans) m_pSprite[m_iMinMapIndex]->PutTransSprite2(sX, sY, m_iMinMapSquare, m_dwCurTime);
		else m_pSprite[m_iMinMapIndex]->PutSpriteFastNoColorKey(sX, sY, m_iMinMapSquare, m_dwCurTime);
		shX = (m_sPlayerX * 128) / (m_pMapData->m_sMapSizeX);
		shY = (m_sPlayerY * 128) / (m_pMapData->m_sMapSizeX);

		
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (i = 0; i <= DEF_MAXPARTYMEMBERS; i++) {
				if (strlen(m_stPartyMemberNameList[i].cName) != 0) {
					DecriptString(m_cMapName);
					if (memcmp(PartyStruct[i].PartyMapName, m_cMapName, 12) == 0) {
						//laloparty
						//if (i > 0) //1
						if (memcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName, 10) == 0)
						//m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX - shX + DecriptInt(m_sPlayerX), sY - shY + DecriptInt(m_sPlayerY), 37, m_dwCurTime);
						{
							shX = (PartyStruct[i].iParty_sX * 128) / (m_pMapData->m_sMapSizeX);
							shY = (PartyStruct[i].iParty_sY * 128) / (m_pMapData->m_sMapSizeX);
							m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + shX, sY + shY, 37, m_dwCurTime);
						//	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY2]->PutSpriteFast(sX + shX, sY + shY, 0, m_dwCurTime);
						}
						else
						{
							shX = (PartyStruct[i].iParty_sX * 128) / (m_pMapData->m_sMapSizeX);
							shY = (PartyStruct[i].iParty_sY * 128) / (m_pMapData->m_sMapSizeX);
						//	if (memcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName, 10) == 0)
							//	m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + shX, sY + shY, 37, m_dwCurTime);
						//		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY2]->PutSpriteFast(sX + shX, sY + shY, 0, m_dwCurTime);
						//	else
								m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + shX, sY + shY, 38, m_dwCurTime);
							//	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY2]->PutSpriteFast(sX + shX, sY + shY, 0, m_dwCurTime);
						}
					}
					EncriptString(m_cMapName);
				}
			}
		}
		else
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + shX, sY + shY, 37, m_dwCurTime);
			//m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY2]->PutSpriteFast(sX + shX, sY + shY, 0, m_dwCurTime);

		if ((G_dwGlobalTime - m_dwMonsterEventTime) < 30000)
		{
			if ((m_dwCurTime % 500) < 370)
			{
				shX = (m_sEventX * 128) / (m_pMapData->m_sMapSizeX);
				shY = (m_sEventY * 128) / (m_pMapData->m_sMapSizeX);
				m_pSprite[DEF_SPRID_INTERFACE_MONSTER]->PutSpriteFast(sX + shX, sY + shY, m_sMonsterID, m_dwCurTime);
			}
		}
		else
		{
			m_dwMonsterEventTime = 0;
			m_sMonsterID = 0;
		}
	}

	if (!m_bZoomMap)
	{
		if (m_bShinning && ShowShin == true) //ShowShin /*OPTION PANEL ACA*/
		{
			for (auto & u : m_minimap.list) {
				auto * p = &u;
				shX = (p->x * 128) / (m_pMapData->m_sMapSizeX);
				shY = (p->y * 128) / (m_pMapData->m_sMapSizeY);

				if (m_dwCurTime - p->time > 25000)
					continue;

				//int r = 255, g = 255, b = 255;
				int r = 255, g = 0, b = 0;

				m_DDraw.PutPixel(sX + shX, sY + shY - 1, r, g, b);
				m_DDraw.PutPixel(sX + shX - 1, sY + shY, r, g, b);
				m_DDraw.PutPixel(sX + shX, sY + shY, r, g, b);
				m_DDraw.PutPixel(sX + shX + 1, sY + shY, r, g, b);
				m_DDraw.PutPixel(sX + shX, sY + shY + 1, r, g, b);
			}
		}
	}


	if (cLB != 0) return;
	if (msX >= sX && msX < sX + szY && msY >= sY && msY < sY + szY)
	{
		if (sY > 213) shY = sY - 17;
		else shY = sY + szY + 4;
		if (m_bZoomMap) PutString(sX, shY, DEF_MSG_GUIDEMAP_MIN, RGB(200, 200, 120));//"(-)
		else PutString(sX, shY, DEF_MSG_GUIDEMAP_MAX, RGB(200, 200, 120));//"(+)

		if (m_bZoomMap)
		{
			shX = m_sPlayerX - 64;
			shY = m_sPlayerY - 64;
			if (shX < 0) shX = 0;
			if (shY < 0) shY = 0;
			if (shX > m_pMapData->m_sMapSizeX - 128) shX = m_pMapData->m_sMapSizeX - 128;
			if (shY > m_pMapData->m_sMapSizeY - 128) shY = m_pMapData->m_sMapSizeY - 128;
			shX += msX - sX;
			shY += msY - sY;
		}
		else
		{
			shX = (msX - sX)*m_pMapData->m_sMapSizeX / 128;
			shY = (msY - sY)*m_pMapData->m_sMapSizeX / 128;
		}
		wsprintf(G_cTxt, "%d, %d", shX, shY);

		if (DecriptInt(m_iPartyStatus) != NULL)
		{
			for (i = 0; i <= DEF_MAXPARTYMEMBERS; i++)
			{
				if (strlen(m_stPartyMemberNameList[i].cName) != 0) {
					DecriptString(m_cMapName);
					if (memcmp(PartyStruct[i].PartyMapName, m_cMapName, 12) == 0) {
						if (shX > PartyStruct[i].iParty_sX - 5 && shX < PartyStruct[i].iParty_sX + 5 && shY >  PartyStruct[i].iParty_sY - 5 && shY < PartyStruct[i].iParty_sY + 5) {
							strcpy(G_cTxt, m_stPartyMemberNameList[i].cName);
						}
					}
					EncriptString(m_cMapName);
				}
			}
		}
		PutString(msX - 10, msY - 13, G_cTxt, RGB(200, 200, 120));
	}
}

void CGame::DlgBoxClick_GuideMap(short msX, short msY)
{
	if (DecriptInt(m_cMapIndex) < 0) return;

	short sX, sY, shX, shY, szX, szY;
	sX = m_stDialogBoxInfo[9].sX;
	sY = m_stDialogBoxInfo[9].sY;
	szX = m_stDialogBoxInfo[9].sSizeX;
	szY = m_stDialogBoxInfo[9].sSizeY;

	int res_x = 0;
	int res_y = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 800;
		res_y = 600;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1024;
		res_y = 768;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 640;
		res_y = 480;
	}

	if (sX < 20) sX = 0;
	if (sY < 20) sY = 0;
	if (sX > res_x - 128 - 20) sX = res_x - 128;
	if (sY > res_y - 128 - 20) sY = res_y - 128;
	if ((DecriptInt(m_cMapIndex) == 11) && (DecriptBool(m_bAresden) == TRUE))
	{
		if (m_bCtrlPressed == TRUE)
		{
			if (m_bZoomMap)
			{
				shX = m_sPlayerX - 64;
				shY = m_sPlayerY - 64;
				if (shX < 0) shX = 0;
				if (shY < 0) shY = 0;
				if (shX > m_pMapData->m_sMapSizeX - 128) shX = m_pMapData->m_sMapSizeX - 128;
				if (shY > m_pMapData->m_sMapSizeY - 128) shY = m_pMapData->m_sMapSizeY - 128;
				shX = shX + msX - sX;
				shY = shY + msY - sY;
			}
			else
			{
				shX = (m_pMapData->m_sMapSizeX*(msX - sX)) / 128;
				shY = (m_pMapData->m_sMapSizeX*(msY - sY)) / 128;
			}

			if (shX > 49 && shX < 89 && shY > 105 && shY < 145)
			{	// Magic Shop
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 69, 125, NULL, NULL);
			}
			else if (shX > 96 && shX < 136 && shY > 225 && shY < 265)
			{
				//Pit Clay
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 116, 245, NULL, NULL);
			}
			else if (shX > 120 && shX < 160 && shY > 29 && shY < 69)
			{
				//Pit Clops
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 140, 49, NULL, NULL);
			}
			else if (shX > 150 && shX < 190 && shY > 125 && shY < 165)
			{
				//Cityhall
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 170, 145, NULL, NULL);
			}
			else if (shX > 120 && shX < 160 && shY > 185 && shY < 225)
			{
				//BlackSmith
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 140, 205, NULL, NULL);
			}
		}
	}
	else if ((DecriptInt(m_cMapIndex) == 3) && (DecriptBool(m_bAresden) == FALSE))
	{
		if (m_bCtrlPressed == TRUE)
		{
			if (m_bZoomMap)
			{
				shX = m_sPlayerX - 64;
				shY = m_sPlayerY - 64;
				if (shX < 0) shX = 0;
				if (shY < 0) shY = 0;
				if (shX > m_pMapData->m_sMapSizeX - 128) shX = m_pMapData->m_sMapSizeX - 128;
				if (shY > m_pMapData->m_sMapSizeY - 128) shY = m_pMapData->m_sMapSizeY - 128;
				shX = shX + msX - sX;
				shY = shY + msY - sY;
			}
			else
			{
				shX = (m_pMapData->m_sMapSizeX*(msX - sX)) / 128;
				shY = (m_pMapData->m_sMapSizeX*(msY - sY)) / 128;
			}

			if (shX > 138 && shX < 178 && shY > 37 && shY < 77)
			{	// Magic Shop
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 158, 57, NULL, NULL);
			}
			else if (shX > 138 && shX < 178 && shY > 229 && shY < 269)
			{
				//Pit Clay
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 158, 249, NULL, NULL);
			}
			else if (shX > 90 && shX < 130 && shY > 69 && shY < 109)
			{
				//Pit Clops
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 110, 89, NULL, NULL);
			}
			else if (shX > 150 && shX < 190 && shY > 125 && shY < 165)
			{
				//Cityhall
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 170, 145, NULL, NULL);
			}
			else if (shX > 222 && shX < 262 && shY > 109 && shY < 149)
			{
				//BlackSmith
				PlaySound('E', 14, 5);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RECALL_COORDS, NULL, 242, 129, NULL, NULL);
			}
		}
	}
}

void CGame::DrawDialogBoxs(short msX, short msY, short msZ, char cLB)
{
	int i;
	if (DecriptBool(m_bIsObserverMode) == TRUE) return;
	m_DInput.m_sZ = 0;
	//Snoopy: 41->61
	for (i = 0; i < DEF_MAXDIALOGBOX; i++)
		if (m_cDialogBoxOrder[i] != NULL)
		{
			switch (m_cDialogBoxOrder[i]) {
				case 1:
					DrawDialogBox_Character(msX, msY);
					break;
				case 2:
					DrawDialogBox_Inventory(msX, msY); //@@@
					break;
				case 3:
					DrawDialogBox_Magic(msX, msY, msZ); //@@@
					break;
				case 4:
					DrawDialogBox_ItemDrop(msX, msY); //@@@
					break;
				case 5:
					DrawDialogBox_ChangeInt(msX, msY); //@@@
					break;
				case 6:
					DrawDialogBox_WarningMsg(msX, msY); //@@@
					break;
				case 7:
					DrawDialogBox_GuildMenu(msX, msY);
					break;
				case 8:
					DrawDialogBox_GuildOperation(msX, msY);
					break;
				case 9:
					DrawDialogBox_GuideMap(msX, msY, cLB);
					break;
				case 10:
					DrawDialogBox_Chat(msX, msY, msZ, cLB); //@@@
					break;
				case 11:
					if (m_bIsDialogEnabled[14] != TRUE)
						DrawDialogBox_Shop(msX, msY, msZ, cLB);
					else
						DisableDialogBox(11);
					break;
				case 12:
					DrawDialogBox_LevelUpSetting(msX, msY); //@@@
					break;
				case 13:
					DrawDialogBox_CityHallMenu(msX, msY);
					break;
				case 14:
					if (m_bIsDialogEnabled[11] != TRUE)
						DrawDialogBox_Bank(msX, msY, msZ, cLB); //@@@
					else
						DisableDialogBox(14);
					break;
				case 15:
					DrawDialogBox_Skill(msX, msY, msZ, cLB); //@@@
					break;
				case 16:
					if (m_bIsDialogEnabled[14] != TRUE)
						DrawDialogBox_MagicShop(msX, msY, msZ); //@@@
					else
						DisableDialogBox(16);
					break;
				case 17:
					DrawDialogBox_QueryDropItemAmount();
					break;
				case 18:
					DrawDialogBox_Text(msX, msY, msZ, cLB); //@@@
					break;
				case 19:
					DrawDialogBox_SysMenu(msX, msY); //@@@
					break;
				case 20:
					DrawDialogBox_NpcActionQuery(msX, msY); //@@@
					break;
				case 21:
					DrawDialogBox_NpcTalk(msX, msY, cLB); //@@@
					break;
				case 22:
					DrawDialogBox_Map();
					break;
				case 23:
					if (m_bIsDialogEnabled[14] != TRUE)
						DrawDialogBox_SellorRepairItem(msX, msY);
					else
						DisableDialogBox(23);
					break;
				case 24:
					DrawDialogBox_Fishing(msX, msY);
					break;
				case 25:
					DrawDialogBox_ShutDownMsg(msX, msY); //@@@
					break;
				case 26: // Manuf
					DrawDialogBox_SkillDlg(msX, msY, msZ, cLB);
					break;
				case 27:
					DrawDialogBox_Exchange(msX, msY, msZ, cLB); //@@@
					break;
				case 28:
					DrawDialogBox_Quest(msX, msY); //@@@
					break;
				case 29:
					break;
				case 30:
				//	DrawDialogBox_IconPannel(msX, msY); //@@@
					if (c_reso->IsResolution() == C640x480)
						DrawDialogBox_IconPannel(msX, msY);
					else if (c_reso->IsResolution() == C800x600)
						DrawDialogBox_IconPannel800x600(msX, msY);
					else if (c_reso->IsResolution() == C1024x768)
						DrawDialogBox_IconPannel1024x768(msX, msY);
					break;
				case 31:
					DrawDialogBox_SellList(msX, msY); //@@@
					break;
				case 32:
					DrawDialogBox_Party(msX, msY); //@@@
					break;
				case 33:
					DrawDialogBox_CrusadeJob(msX, msY); //@@@
					break;
				case 34:
					DrawDialogBox_ItemUpgrade(msX, msY);
					break;
				case 35:
					DrawDialogBox_Help(msX, msY); //@@@
					break;
				case 36:
					DrawDialogBox_Commander(msX, msY); //@@@
					break;
				case 37:
					DrawDialogBox_Constructor(msX, msY); //@@@
					break;
				case 38:
					DrawDialogBox_Soldier(msX, msY); //@@@
					break;
				case 40:
					DrawDialogBox_Slates(msX, msY, msZ, cLB);
					break;
				case 41:	//Snoopy: Confirmation Exchange
					DrawDialogBox_ConfirmExchange(msX, msY);
					break;
				case 42:
					DrawDialogBox_ChangeStatsMajestic(msX, msY);
					break;
				case 43:
					DrawDialogBox_FriendList(msX, msY, msZ, cLB);
					break;
				case 44:
					DrawDialogBox_IconPannel3(msX, msY);
					break;
				case 45:
					DrawDialogBox_IconPannel2(msX, msY); //@@@
					break;
				case 46:
					DrawDialogBox_QuestList(msX, msY, msZ, cLB);
					break;
				case 47:
					DrawDialogBox_Achivements(msX, msY);
					break;
				case 48:
					DrawDialogBox_Barrita(msX, msY);
					break;
				case 49:
					DrawDialogBox_CharSell(msX, msY, msZ, cLB);
					break;
				case 50: // Snoopy: Resurection?
					DrawDialogBox_Resurect(msX, msY);
					break;
				case 51: // Gail
					if (m_bIsDialogEnabled[14] != TRUE)
						DrawDialogBox_CMDHallMenu(msX, msY);
					else
						DisableDialogBox(51);
					break;

				case 52: // NewPanel
					DrawDialogBox_NewPanel(msX, msY, msZ, cLB);
					break;
				case 53: // NewPanel
					DrawDialogBox_NewPanelConfirmation(msX, msY);
					break;
				case 54:
					DrawDialogBox_OpenCharSell(msX, msY, msZ, cLB);
					break;
				case 55:
					DrawDialogBox_Event(msX, msY);
					break;

				case 56:
					DrawDialogBox_Status(msX, msY);
					break;

				case 57:
					DrawDialogBox_Coins(msX, msY, msZ, cLB);
					break;

				case 58:
					DrawDialogBox_TradeItems(msX, msY, msZ, cLB);
					break;

				case 59:
					DrawDialogBox_EKPKLog(msX, msY, msZ, cLB);
					break;

				case 60:
					DrawDialogBox_PurchaseAssasainsPoints(msX, msY);
					break;

				case 61:
					DrawDialogBox_RankLevelUpSetting(msX, msY); 
					break;

				case 72:
					draw_enchanting(msX, msY, msZ, cLB); break;
				case 73:
					draw_rebirth(msX, msY);
					break;

				case 74: draw_requestrevive(msX, msY); break;

				case 75: draw_top10(msX, msY); break;
				case 76: DrawDialogBox_Market(msX, msY, msZ, cLB); break;

				case 77: draw_questlist(msX, msY, msZ, cLB); break;
				case 78: draw_charquests(msX, msY, msZ, cLB); break;
				case 79: draw_trades(msX, msY, msZ, cLB); break;
				case 80: draw_confirm(msX, msY, cLB); break;
			}
		}
}


void CGame::bSetItemToSellList(short msX, short msY)
{
	int i;
	char cItemID;

	cItemID = (char)m_stMCursor.sSelectedObjectID;

	if (m_pItemList[cItemID] == NULL) return;
	if (m_bIsItemDisabled[cItemID] == TRUE) return;
	if (m_cCommand < 0) return;

	for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
	{
		if (m_stItemListToSell[i].iIndex == cItemID)
		{
			AddEventList(BITEMDROP_SELLLIST1, 10);
			return;
		}
		if (strcmp(m_pItemList[cItemID]->m_cName, "Gold") == 0) {
			AddEventList(BITEMDROP_SELLLIST2, 10);
			return;
		}
		if (m_pItemList[cItemID]->m_wCurLifeSpan == 0 && m_pItemList[cItemID]->m_cItemType != 3)
		{
			ZeroMemory(G_cTxt, sizeof(G_cTxt));
			char cStr1[64], cStr2[64], cStr3[64];
			GetItemName(m_pItemList[cItemID], cStr1, cStr2, cStr3);
			wsprintf(G_cTxt, NOTIFYMSG_CANNOT_SELL_ITEM2, cStr1);
			AddEventList(G_cTxt, 10);
			return;
		}

		if (((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_ARROW)) &&
			(m_pItemList[cItemID]->m_dwCount > 1))
		{
			AddEventList("You Can't sell this item.", 10);
		}
		else
		{
			for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
			{
				if (m_stItemListToSell[i].iIndex == -1)
				{
					m_stDialogBoxInfo[17].sX = msX - 140;
					m_stDialogBoxInfo[17].sY = msY - 70;
					m_stDialogBoxInfo[17].cMode = 30;
					if (m_stDialogBoxInfo[17].sY < 0) m_stDialogBoxInfo[17].sY = 0;
					m_stDialogBoxInfo[17].sV1 = m_sPlayerX + 1;
					m_stDialogBoxInfo[17].sV2 = m_sPlayerY + 1;
					m_stDialogBoxInfo[17].sV3 = 1003;
					m_stDialogBoxInfo[17].sV4 = cItemID;
					ZeroMemory(m_stDialogBoxInfo[17].cStr, sizeof(m_stDialogBoxInfo[17].cStr));
					EnableDialogBox(17, cItemID, m_pItemList[cItemID]->m_dwCount, NULL);
					m_bIsItemDisabled[cItemID] = TRUE;
					return;
				}
			}
			AddEventList(BITEMDROP_SELLLIST3, 10);
		}
	}
}


void CGame::EnableDialogBox(int iBoxID, int cType, int sV1, int sV2, char * pString)
{
	int i;
	short sX, sY;

	int res_x2 = 0;
	int res_y2 = 0;
	if (c_reso->IsResolution() == C800x600)
	{
		res_x2 = 100;
		res_y2 = 55;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
	//	res_x2 = 100;
	//	res_y2 = 55;
		res_x2 = 160;
		res_y2 = 110;
	}

	switch (iBoxID) {
		case 11:
			if (m_bIsDialogEnabled[52])	DisableDialogBox(52);
			if (m_bIsDialogEnabled[57])	DisableDialogBox(57);
			if (m_bIsDialogEnabled[58])	DisableDialogBox(58);
			if (m_bIsDialogEnabled[11] == FALSE)
			{
				ListType = -1;
				_LoadShopMenuContents(cType);
				if (TitleShop[0].Init != -1)
					m_stDialogBoxInfo[11].cMode = -1;
				else
					m_stDialogBoxInfo[11].cMode = 0;
				m_stDialogBoxInfo[11].sV1 = -1;
				m_stDialogBoxInfo[11].sV2 = -1;
				m_stDialogBoxInfo[11].sView = 0;
				m_stDialogBoxInfo[11].bFlag = TRUE;
				m_stDialogBoxInfo[11].sV3 = 1;
				m_stDialogBoxInfo[57].sV6 = cType;

				
			}
			break;

		case 77:
			if (m_bIsDialogEnabled[77] == FALSE) {
				m_stDialogBoxInfo[77].cMode = cType;
				m_stDialogBoxInfo[77].sView = 0;
			}
			break;

		case 78:
			if (m_bIsDialogEnabled[78] == FALSE) {
				m_stDialogBoxInfo[78].sView = cType;
				m_stDialogBoxInfo[78].cMode = 0;
			}
			break;


		case 76:
			if (m_bIsDialogEnabled[76] == FALSE)
			{
				m_stDialogBoxInfo[76].sView = 0;
				m_stDialogBoxInfo[76].cMode = 0;
			}
			break;

		case 73:
			if (m_bIsDialogEnabled[73] == FALSE) {
				m_stDialogBoxInfo[73].sView = cType;
				m_stDialogBoxInfo[73].cMode = 0;
			}
			break;
		case 79:
			if (m_bIsDialogEnabled[79] == FALSE) {
				m_stDialogBoxInfo[79].sView = cType;
				m_stDialogBoxInfo[79].cMode = 0;
			}
			break;
		case 72:
			if (m_bIsDialogEnabled[72] == FALSE) {
				/*iPreviousUpgradeMode = cType;*/
				m_stDialogBoxInfo[72].cMode = cType;
				m_stDialogBoxInfo[72].sV1 = -1; 
				for (int i = 0; i < 20; i++)
				{
					m_stDialogBoxInfo[72].m_iEnchantingItem[i] = -1;
				}
				m_stDialogBoxInfo[72].sV2 = -1;
				m_stDialogBoxInfo[72].dwV1 = NULL;
				isComboBoxOpen = false; // Bandera para controlar si el combobox está abierto o cerrado
				selectedOptionIndex = -1; // Índice de la opción seleccionada
				isClickProcessed = false; // Bandera para controlar si el clic ya fue procesado
				selectedType = 0;

				
			}
			break;


		case 75:
			if (m_bIsDialogEnabled[75] == FALSE) {
				m_stDialogBoxInfo[75].sView = cType;
			}
			break;

		case 74:
			if (m_bIsDialogEnabled[74] == FALSE) {
				m_stDialogBoxInfo[74].sView = cType;
			}
			break;

		case 12: // levelup diag
			if (m_bIsDialogEnabled[12] == FALSE)
			{
				m_stDialogBoxInfo[12].sX = m_stDialogBoxInfo[1].sX + 20;
				m_stDialogBoxInfo[12].sY = m_stDialogBoxInfo[1].sY + 20;
				//m_stDialogBoxInfo[12].sV1 = DecriptInt(m_iLU_Point);


				m_iLU_Point = DecriptInt(m_iLevel) * 3 - ((DecriptInt(m_iStr) + DecriptInt(m_iVit) + DecriptInt(m_iDex) + DecriptInt(m_iInt) + DecriptInt(m_iMag) + DecriptInt(m_iCharisma))
					- 70)
					- 3 + DecriptInt(m_iAngelicStr) + DecriptInt(m_iAngelicDex) + DecriptInt(m_iAngelicInt) + DecriptInt(m_iAngelicMag);

				m_iLU_Point = m_iLU_Point + getRebirthStats();
				m_stDialogBoxInfo[12].sV1 = m_iLU_Point;/*
				m_iStatsPoint = m_iStatsPoint + getRebirthStats();*/
			}
			break;

		case 61: // Rankup diag
			if (m_bIsDialogEnabled[61] == FALSE)
			{
				m_stDialogBoxInfo[61].sX = m_stDialogBoxInfo[1].sX + 20;
				m_stDialogBoxInfo[61].sY = m_stDialogBoxInfo[1].sY + 20;
				m_stDialogBoxInfo[61].sV1 = m_iRankPoints;
			}
			break;

		case 3: // Magic Dialog
			break;

		case 4:
			if (m_bIsDialogEnabled[4] == FALSE) {
				m_stDialogBoxInfo[4].sView = cType;
			}
			break;

		case 5:
			if (m_bIsDialogEnabled[5] == FALSE) {
				m_stDialogBoxInfo[5].sView = cType;
			}
			break;

		case 6:
			if (m_bIsDialogEnabled[6] == FALSE) {
				m_stDialogBoxInfo[6].sView = cType;
			}
			break;

		case 7:
			if (m_stDialogBoxInfo[7].cMode == 1) {
				sX = m_stDialogBoxInfo[7].sX;
				sY = m_stDialogBoxInfo[7].sY;
				EndInputString();
				//DecriptString(m_cGuildName);
				StartInputString(sX + 75, sY + 140, 21, m_cGuildName);
				//EncriptString(m_cGuildName);
				//DecriptString(m_cGuildName);
			}
			break;

		case 17: // demande quantit�
			if (m_bIsDialogEnabled[17] == FALSE)
			{
				if (m_stDialogBoxInfo[17].cMode != 30) m_stDialogBoxInfo[17].cMode = 1;
				m_stDialogBoxInfo[17].sView = cType;
				EndInputString();
				ZeroMemory(m_cAmountString, sizeof(m_cAmountString));
				wsprintf(m_cAmountString, "%d", sV1);
				sX = m_stDialogBoxInfo[17].sX;
				sY = m_stDialogBoxInfo[17].sY;
				StartInputString(sX + 40, sY + 57, 11, m_cAmountString, FALSE);
			}
			else
			{
				if (m_stDialogBoxInfo[17].cMode == 1)
				{
					sX = m_stDialogBoxInfo[17].sX;
					sY = m_stDialogBoxInfo[17].sY;
					EndInputString();
					StartInputString(sX + 40, sY + 57, 11, m_cAmountString, FALSE);
				}
			}
			break;

		case 18:
			if (m_bIsDialogEnabled[18] == FALSE)
			{
				// Cierro NewPanel - Evita Errores
				DisableDialogBox(52);
				DisableDialogBox(53);
				switch (cType) {
					case NULL:
						m_stDialogBoxInfo[18].cMode = 0;
						m_stDialogBoxInfo[18].sView = 0;
						break;
					default:
						_LoadTextDlgContents(cType);
						m_stDialogBoxInfo[18].cMode = 0;
						m_stDialogBoxInfo[18].sView = 0;
						break;
				}
			}
			break;

		case 19:
			break;

		case 20: // Talk to npc or unicorn
			m_bIsItemDisabled[m_stDialogBoxInfo[20].sV1] = FALSE;
			if (m_bIsDialogEnabled[20] == FALSE)
			{
				m_stDialogBoxInfo[11].sV1 = m_stDialogBoxInfo[11].sV2 = m_stDialogBoxInfo[11].sV3 =
					m_stDialogBoxInfo[11].sV4 = m_stDialogBoxInfo[11].sV5 = m_stDialogBoxInfo[11].sV6 = NULL;
				m_stDialogBoxInfo[20].cMode = cType;
				m_stDialogBoxInfo[20].sView = 0;
				m_stDialogBoxInfo[20].sV1 = sV1;
				m_stDialogBoxInfo[20].sV2 = sV2;
			}
			break;

		case 21:
			if (m_bIsDialogEnabled[21] == FALSE)
			{
				if (sV1 != 100)
				{
					if (sV1 != 241)
					{
						m_stDialogBoxInfo[21].cMode = cType;
						m_stDialogBoxInfo[21].sView = 0;
						m_stDialogBoxInfo[21].sV1 = _iLoadTextDlgContents2(sV1 + 20);
						m_stDialogBoxInfo[21].sV2 = sV1 + 20;
					}
					else
					{
						m_stDialogBoxInfo[21].cMode = 0;
						m_stDialogBoxInfo[21].sView = 0;
						m_stDialogBoxInfo[21].sV1 = -1;
						m_stDialogBoxInfo[21].sV2 = sV2;
					}

				}
			}
			break;

		case 22:
			if (m_bIsDialogEnabled[22] == FALSE) {
				m_stDialogBoxInfo[22].sV1 = sV1;
				m_stDialogBoxInfo[22].sV2 = sV2;

				m_stDialogBoxInfo[22].sSizeX = 290;
				m_stDialogBoxInfo[22].sSizeY = 290;
			}
			break;

		case 23:
			if (m_bIsDialogEnabled[23] == FALSE) {
				m_stDialogBoxInfo[23].cMode = cType;
				m_stDialogBoxInfo[23].sV1 = sV1;		// ItemID
				m_stDialogBoxInfo[23].sV2 = sV2;
				if (cType == 2)
				{
					m_stDialogBoxInfo[23].sX = m_stDialogBoxInfo[11].sX;
					m_stDialogBoxInfo[23].sY = m_stDialogBoxInfo[11].sY;
				}
			}
			break;

		case 15:
			break;

		case 24:
			if (m_bIsDialogEnabled[24] == FALSE)
			{
				m_stDialogBoxInfo[24].cMode = cType;
				m_stDialogBoxInfo[24].sV1 = sV1;
				m_stDialogBoxInfo[24].sV2 = sV2;
				m_bSkillUsingStatus = TRUE;
			}
			break;

		case 25:
			if (m_bIsDialogEnabled[25] == FALSE) {
				m_stDialogBoxInfo[25].cMode = cType;
				m_stDialogBoxInfo[25].sV1 = sV1;
				m_stDialogBoxInfo[25].sV2 = sV2;
			}
			break;

		case 26:
			switch (cType) {
				case 1:
				case 2: //
					if (m_bIsDialogEnabled[26] == FALSE)
					{
						m_stDialogBoxInfo[26].cMode = cType;
						m_stDialogBoxInfo[26].sV1 = -1;
						m_stDialogBoxInfo[26].sV2 = -1;
						m_stDialogBoxInfo[26].sV3 = -1;
						m_stDialogBoxInfo[26].sV4 = -1;
						m_stDialogBoxInfo[26].sV5 = -1;
						m_stDialogBoxInfo[26].sV6 = -1;
						m_stDialogBoxInfo[26].cStr[0] = 0;
						m_bSkillUsingStatus = TRUE;
						m_stDialogBoxInfo[26].sSizeX = 195;
						m_stDialogBoxInfo[26].sSizeY = 215;
						DisableDialogBox(17);
						DisableDialogBox(20);
						DisableDialogBox(23);
					}
					break;

				case 3:	//
					if (m_bIsDialogEnabled[26] == FALSE)
					{
						m_stDialogBoxInfo[26].sView = 0;
						m_stDialogBoxInfo[26].cMode = cType;
						m_stDialogBoxInfo[26].sV1 = -1;
						m_stDialogBoxInfo[26].sV2 = -1;
						m_stDialogBoxInfo[26].sV3 = -1;
						m_stDialogBoxInfo[26].sV4 = -1;
						m_stDialogBoxInfo[26].sV5 = -1;
						m_stDialogBoxInfo[26].sV6 = -1;
						m_stDialogBoxInfo[26].cStr[0] = 0;
						m_stDialogBoxInfo[26].cStr[1] = 0;
						m_stDialogBoxInfo[26].cStr[4] = 0;
						m_bSkillUsingStatus = TRUE;
						_bCheckBuildItemStatus();
						//m_stDialogBoxInfo[26].sX = 0;
						//m_stDialogBoxInfo[26].sY = 0;
						m_stDialogBoxInfo[26].sSizeX = 270;
						m_stDialogBoxInfo[26].sSizeY = 381;
						DisableDialogBox(17);
						DisableDialogBox(20);
						DisableDialogBox(23);
					}
					break;

				case 6:
					if (m_bIsDialogEnabled[26] == FALSE)
					{
						m_stDialogBoxInfo[26].cMode = cType;
						m_stDialogBoxInfo[26].cStr[2] = sV1;
						m_stDialogBoxInfo[26].cStr[3] = sV2;
						m_stDialogBoxInfo[26].sSizeX = 270;
						m_stDialogBoxInfo[26].sSizeY = 381;
						m_bSkillUsingStatus = TRUE;
						_bCheckBuildItemStatus();
						DisableDialogBox(17);
						DisableDialogBox(20);
						DisableDialogBox(23);
					}
					break;
					// Crafting
				case 7:
				case 8:
					if (m_bIsDialogEnabled[26] == FALSE)
					{
						m_stDialogBoxInfo[26].cMode = cType;
						m_stDialogBoxInfo[26].sV1 = -1;
						m_stDialogBoxInfo[26].sV2 = -1;
						m_stDialogBoxInfo[26].sV3 = -1;
						m_stDialogBoxInfo[26].sV4 = -1;
						m_stDialogBoxInfo[26].sV5 = -1;
						m_stDialogBoxInfo[26].sV6 = -1;
						m_stDialogBoxInfo[26].cStr[0] = 0;
						m_stDialogBoxInfo[26].cStr[1] = 0;
						m_bSkillUsingStatus = TRUE;
						m_stDialogBoxInfo[26].sSizeX = 195;
						m_stDialogBoxInfo[26].sSizeY = 215;
						DisableDialogBox(17);
						DisableDialogBox(20);
						DisableDialogBox(23);
					}
					break;
			}
			break;

		case 27: // Snoopy: 7 mar 06 (multitrade) case rewriten
			if (m_bIsDialogEnabled[27] == FALSE)
			{
				m_stDialogBoxInfo[27].cMode = cType;
				for (i = 0; i <= DecriptInt(ItemsInExchange); i++)
				{
					ZeroMemory(m_stDialogBoxExchangeInfo[i].cStr1, sizeof(m_stDialogBoxExchangeInfo[i].cStr1));
					ZeroMemory(m_stDialogBoxExchangeInfo[i].cStr2, sizeof(m_stDialogBoxExchangeInfo[i].cStr2));
					m_stDialogBoxExchangeInfo[i].sV1 = -1;
					m_stDialogBoxExchangeInfo[i].sV2 = -1;
					m_stDialogBoxExchangeInfo[i].sV3 = -1;
					m_stDialogBoxExchangeInfo[i].sV4 = -1;
					m_stDialogBoxExchangeInfo[i].sV5 = -1;
					m_stDialogBoxExchangeInfo[i].sV6 = -1;
					m_stDialogBoxExchangeInfo[i].sV7 = -1;
					m_stDialogBoxExchangeInfo[i].dwV1 = 0;
					m_stDialogBoxExchangeInfo[i].cValueA = 0;
				}
				ItemsInExchange = EncriptInt(-1);
				for (i = 20; i <= DecriptInt(ItemsInExchange2) + 20; i++)
				{
					ZeroMemory(m_stDialogBoxExchangeInfo[i].cStr1, sizeof(m_stDialogBoxExchangeInfo[i].cStr1));
					ZeroMemory(m_stDialogBoxExchangeInfo[i].cStr2, sizeof(m_stDialogBoxExchangeInfo[i].cStr2));
					m_stDialogBoxExchangeInfo[i].sV1 = -1;
					m_stDialogBoxExchangeInfo[i].sV2 = -1;
					m_stDialogBoxExchangeInfo[i].sV3 = -1;
					m_stDialogBoxExchangeInfo[i].sV4 = -1;
					m_stDialogBoxExchangeInfo[i].sV5 = -1;
					m_stDialogBoxExchangeInfo[i].sV6 = -1;
					m_stDialogBoxExchangeInfo[i].sV7 = -1;
					m_stDialogBoxExchangeInfo[i].dwV1 = 0;
					m_stDialogBoxExchangeInfo[i].cValueA = 0;
				}
				m_stDialogBoxInfo[27].sV1 = 0;
				m_stDialogBoxInfo[27].sV2 = 0;
				ItemsInExchange2 = EncriptInt(-1);
				DisableDialogBox(17);
				DisableDialogBox(20);
				DisableDialogBox(23);
				DisableDialogBox(26);
			}
			break;

		case 41: // Snoopy: 7 mar 06 (MultiTrade) Confirmation dialog
			break;

		case 28:
			if (m_bIsDialogEnabled[28] == FALSE) {
				m_stDialogBoxInfo[28].cMode = cType;
				m_stDialogBoxInfo[28].sX = m_stDialogBoxInfo[1].sX + 20;
				m_stDialogBoxInfo[28].sY = m_stDialogBoxInfo[1].sY + 20;
				m_stDialogBoxInfo[28].sView = -1;
			}
			break;

		case 32:
			if (m_bIsDialogEnabled[32] == FALSE) {
				m_stDialogBoxInfo[32].cMode = cType;
				m_stDialogBoxInfo[32].sX = m_stDialogBoxInfo[1].sX + 20;
				m_stDialogBoxInfo[32].sY = m_stDialogBoxInfo[1].sY + 20;
			}
			break;

		case 33:
			if ((DecriptInt(m_iHP) <= 0) || (!DecriptBool(m_bCitizen) && !Assasain)) return;

			if (m_bIsDialogEnabled[33] == FALSE)
			{
				m_stDialogBoxInfo[33].cMode = cType;
				m_stDialogBoxInfo[33].sX = 360 + res_x2;
				m_stDialogBoxInfo[33].sY = 65 + res_y2;
				m_stDialogBoxInfo[33].sV1 = sV1;
			}
			break;

		case 34:
			if (m_bIsDialogEnabled[34] == FALSE) {
				m_stDialogBoxInfo[34].cMode = cType;
				m_stDialogBoxInfo[34].sV1 = -1;
				m_stDialogBoxInfo[34].dwV1 = NULL;
			}
			else
			{
				if (m_bIsDialogEnabled[34] == FALSE) {
					int iSoX, iSoM;
					iSoX = iSoM = 0;
					for (i = 0; i < DEF_MAXITEMS; i++)
						if (m_pItemList[i] != NULL) {
							if ((m_pItemList[i]->m_sSprite == 6) && (m_pItemList[i]->m_sSpriteFrame == 128)) iSoX++;
							if ((m_pItemList[i]->m_sSprite == 6) && (m_pItemList[i]->m_sSpriteFrame == 129)) iSoM++;
						}

					if ((iSoX > 0) || (iSoM > 0)) {
						// ���� ����
						m_stDialogBoxInfo[34].cMode = 6;
						m_stDialogBoxInfo[34].sV2 = iSoX;
						m_stDialogBoxInfo[34].sV3 = iSoM;
						m_stDialogBoxInfo[34].sV1 = -1;
						m_stDialogBoxInfo[34].dwV1 = NULL;
					}
					else {
						AddEventList(DRAW_DIALOGBOX_ITEMUPGRADE30, 10);
						return;
					}
				}
			}
			break;

		case 16:
			if (m_bIsDialogEnabled[iBoxID] == FALSE) {
				if (m_cSkillMastery[4] == 0) {
					DisableDialogBox(16);
					EnableDialogBox(21, 0, 480, 0);
					return;
				}
				else {
					m_stDialogBoxInfo[iBoxID].cMode = 0;
					m_stDialogBoxInfo[iBoxID].sView = 0;
				}
			}
			break;

		case 14:
			EndInputString();
			if (m_bIsDialogEnabled[iBoxID] == FALSE) {
				m_stDialogBoxInfo[iBoxID].cMode = 0;
				m_stDialogBoxInfo[iBoxID].sView = 0;
				EnableDialogBox(2, NULL, NULL, NULL);
				TempPage = 0;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, TempPage, NULL, NULL, NULL);
			}
			break;
		case 40: // Slates
			if (m_bIsDialogEnabled[40] == FALSE) {
				m_stDialogBoxInfo[40].sView = 0;
				m_stDialogBoxInfo[40].cMode = cType;
				m_stDialogBoxInfo[40].sV1 = -1;
				m_stDialogBoxInfo[40].sV2 = -1;
				m_stDialogBoxInfo[40].sV3 = -1;
				m_stDialogBoxInfo[40].sV4 = -1;
				m_stDialogBoxInfo[40].sV5 = -1;
				m_stDialogBoxInfo[40].sV6 = -1;
				m_stDialogBoxInfo[40].cStr[0] = 0;
				m_stDialogBoxInfo[40].cStr[1] = 0;
				m_stDialogBoxInfo[40].cStr[4] = 0;

				m_stDialogBoxInfo[40].sSizeX = 180;
				m_stDialogBoxInfo[40].sSizeY = 183;

				DisableDialogBox(17);
				DisableDialogBox(20);
				DisableDialogBox(23);
				DisableDialogBox(26);
			}
			break;
		case 42: // Diuuude: Change stats window
			if (m_bIsDialogEnabled[42] == FALSE) {
				m_stDialogBoxInfo[42].sX = m_stDialogBoxInfo[12].sX + 10;
				m_stDialogBoxInfo[42].sY = m_stDialogBoxInfo[12].sY + 10;
				m_stDialogBoxInfo[42].cMode = 0;
				m_stDialogBoxInfo[42].sView = 0;
				m_stDialogBoxInfo[42].sV1 = 0;
				m_bSkillUsingStatus = FALSE;
			}
			break;

		case 43:
			if (!m_bIsDialogEnabled[43]) {
				m_stDialogBoxInfo[43].sView = 0;
			}
			break;

		case 45:
			if (m_bIsDialogEnabled[45] == FALSE) {
				m_stDialogBoxInfo[45].cMode = 0;
			}
			break;

		case 46:
			if (m_bIsDialogEnabled[46] == FALSE) {
				m_stDialogBoxInfo[46].sView = 0;
				m_stDialogBoxInfo[46].cMode = 0;
			}
			break;

		case 48:
			if (m_bIsDialogEnabled[48] == FALSE) LoadShortCutsList();
			break;

		case 49:
			if (m_bIsDialogEnabled[49] == FALSE) m_bParalyze = EncriptBool(TRUE);
			break;

		case 50: // Snoopy: Resurection
			if (m_bIsDialogEnabled[50] == FALSE)
			{
				m_stDialogBoxInfo[50].sX = 185;
				m_stDialogBoxInfo[50].sY = 100;
				m_stDialogBoxInfo[50].cMode = 0;
				m_stDialogBoxInfo[50].sView = 0;
				m_bSkillUsingStatus = FALSE;
			}
			break;

		case 52:
			if (m_bIsDialogEnabled[11])	DisableDialogBox(11);
			if (m_bIsDialogEnabled[57])	DisableDialogBox(57);
			if (m_bIsDialogEnabled[58])	DisableDialogBox(58);
			if (m_bIsDialogEnabled[52] == FALSE)
			{
				m_stDialogBoxInfo[52].cMode = 10;
				m_stDialogBoxInfo[52].sV1 = -1;
				m_stDialogBoxInfo[52].sV2 = -1;
				m_stDialogBoxInfo[52].sView = 0;
				m_stDialogBoxInfo[52].bFlag = TRUE;
				m_stDialogBoxInfo[52].sV3 = -1;
				m_stDialogBoxInfo[52].sV4 = -1;
				m_stDialogBoxInfo[52].sV5 = 10;
				dwPanel = -1;
				iBarEight = 0;
				SubePanel = FALSE;
				OpenUpper = FALSE;
				OpenDown = FALSE;
			}
			break;

		case 53:
			if (m_bIsDialogEnabled[53] == FALSE)
			{
				m_stDialogBoxInfo[53].sV1 = cType;
			}
			break;

		case 54:
			if (m_bIsDialogEnabled[54] == FALSE)
			{
				m_stDialogBoxInfo[54].cMode = 0;
				m_stDialogBoxInfo[54].sView = 1;
				SellType = EncriptInt(0);
			}
			break;

		case 55:
			if (m_bIsDialogEnabled[55] == FALSE)
				m_stDialogBoxInfo[55].cMode = 0;

			TotalEvent = 0;
			AresdenWinEvent = 0;
			ElvineWinEvent = 0;
			DrawEvents = 0;
			break;

		case 56:
			if (m_bIsDialogEnabled[56] == FALSE)
			{
				m_stDialogBoxInfo[56].sView = 0;
				bSendCommand(CLIENT_REQUEST_FULLDATACHAR, NULL, NULL, NULL, NULL, NULL, NULL);
			}
			break;

		case 57:
			if (m_bIsDialogEnabled[11])	DisableDialogBox(11);
			if (m_bIsDialogEnabled[52])	DisableDialogBox(52);
			if (m_bIsDialogEnabled[58])	DisableDialogBox(58);
			if (m_bIsDialogEnabled[57] == FALSE)
			{
				ListType = -1;
				_LoadShopMenuContents(cType);
				if (TitleShop[0].Init != -1)
					m_stDialogBoxInfo[57].cMode = -1;
				else
					m_stDialogBoxInfo[57].cMode = 0;
				m_stDialogBoxInfo[57].sV1 = -1;
				m_stDialogBoxInfo[57].sV2 = -1;
				m_stDialogBoxInfo[57].sView = 0;
				m_stDialogBoxInfo[57].bFlag = TRUE;
				m_stDialogBoxInfo[57].sV3 = 1;
				m_stDialogBoxInfo[57].sV6 = cType;
			}
			break;

		case 58:
			if (m_bIsDialogEnabled[11])	DisableDialogBox(11);
			if (m_bIsDialogEnabled[52])	DisableDialogBox(52);
			if (m_bIsDialogEnabled[57])	DisableDialogBox(57);
			if (m_bIsDialogEnabled[58] == FALSE)
			{
				ListType = -1;
				_LoadShopMenuContents(cType);
				if (TitleShop[0].Init != -1)
					m_stDialogBoxInfo[58].cMode = -1;
				else
					m_stDialogBoxInfo[58].cMode = 0;
				m_stDialogBoxInfo[58].sV1 = -1;
				m_stDialogBoxInfo[58].sV2 = -1;
				m_stDialogBoxInfo[58].sView = 0;
				m_stDialogBoxInfo[58].bFlag = TRUE;
				m_stDialogBoxInfo[58].sV3 = 1;
				m_stDialogBoxInfo[58].sV6 = cType;
			}
			break;

		case 60:
			if (m_bIsDialogEnabled[60] == FALSE)
			{
				m_stDialogBoxInfo[60].sV1 = 0;
			}
			break;

		default:
			EndInputString();
			if (m_bIsDialogEnabled[iBoxID] == FALSE) {
				m_stDialogBoxInfo[iBoxID].cMode = 0;
				m_stDialogBoxInfo[iBoxID].sView = 0;
			}
			break;
	}
	if (iBoxID != 30)
	{
		if (m_bIsDialogEnabled[iBoxID] == FALSE)
		{
			if (c_reso->IsResolution() == C800x600)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 520) m_stDialogBoxInfo[iBoxID].sY = 420; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 780) m_stDialogBoxInfo[iBoxID].sX = 770; // 610
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 688) m_stDialogBoxInfo[iBoxID].sY = 588; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 1004) m_stDialogBoxInfo[iBoxID].sX = 994; // 610
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 400) m_stDialogBoxInfo[iBoxID].sY = 300; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 620) m_stDialogBoxInfo[iBoxID].sX = 610; // 610
			}
			if ((m_stDialogBoxInfo[iBoxID].sX + m_stDialogBoxInfo[iBoxID].sSizeX) < 10) m_stDialogBoxInfo[iBoxID].sX += 20;
			if ((m_stDialogBoxInfo[iBoxID].sY + m_stDialogBoxInfo[iBoxID].sSizeY) < 10) m_stDialogBoxInfo[iBoxID].sY += 20;
		}
	}
	if (BigBar != 0 && iBoxID == 30)
	{
		if (m_bIsDialogEnabled[iBoxID] == FALSE)
		{
			if (c_reso->IsResolution() == C800x600)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 520) m_stDialogBoxInfo[iBoxID].sY = 600; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 780) m_stDialogBoxInfo[iBoxID].sX = 800; // 610
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 688) m_stDialogBoxInfo[iBoxID].sY = 768; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 1004) m_stDialogBoxInfo[iBoxID].sX = 1024; // 610
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 400) m_stDialogBoxInfo[iBoxID].sY = 480; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 620) m_stDialogBoxInfo[iBoxID].sX = 640; // 610
			}
		}
	}
	m_bIsDialogEnabled[iBoxID] = TRUE;

	if (BigBar == 0 && iBoxID == 30)
	{
		if (m_bIsDialogEnabled[iBoxID] == TRUE)
		{
			if (c_reso->IsResolution() == C800x600)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 520) m_stDialogBoxInfo[iBoxID].sY = 547; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 780) m_stDialogBoxInfo[iBoxID].sX = 770; // 610
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 688) m_stDialogBoxInfo[iBoxID].sY = 715; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 1004) m_stDialogBoxInfo[iBoxID].sX = 994; // 610
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 400) m_stDialogBoxInfo[iBoxID].sY = 427; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 620) m_stDialogBoxInfo[iBoxID].sX = 610; // 610
			}
			if ((m_stDialogBoxInfo[iBoxID].sX + m_stDialogBoxInfo[iBoxID].sSizeX) < 10) m_stDialogBoxInfo[iBoxID].sX += 20;
			if ((m_stDialogBoxInfo[iBoxID].sY + m_stDialogBoxInfo[iBoxID].sSizeY) < 10) m_stDialogBoxInfo[iBoxID].sY += 20;
		}
	}

	if ((iBoxID != 30) && (iBoxID != 44))
	{
		if (m_bIsDialogEnabled[iBoxID] == TRUE)
		{
			if (c_reso->IsResolution() == C800x600)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 520) m_stDialogBoxInfo[iBoxID].sY = 470; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 780) m_stDialogBoxInfo[iBoxID].sX = 780; // 610
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 688) m_stDialogBoxInfo[iBoxID].sY = 638; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 1004) m_stDialogBoxInfo[iBoxID].sX = 1004; // 610
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				if (m_stDialogBoxInfo[iBoxID].sY > 400) m_stDialogBoxInfo[iBoxID].sY = 350; // 410
				if (m_stDialogBoxInfo[iBoxID].sX > 620) m_stDialogBoxInfo[iBoxID].sX = 620; // 610
			}
			if ((m_stDialogBoxInfo[iBoxID].sX + m_stDialogBoxInfo[iBoxID].sSizeX) < 10) m_stDialogBoxInfo[iBoxID].sX += 20;
			if ((m_stDialogBoxInfo[iBoxID].sY + m_stDialogBoxInfo[iBoxID].sSizeY) < 10) m_stDialogBoxInfo[iBoxID].sY += 20;
		}
	}

	if (pString != NULL) strcpy(m_stDialogBoxInfo[iBoxID].cStr, pString);
	//Snoopy: 39->59
	for (i = 0; i < DEF_MAXDIALOGBOX - 2; i++)
		if (m_cDialogBoxOrder[i] == iBoxID) m_cDialogBoxOrder[i] = NULL;
	//Snoopy: 39->59
	for (i = 1; i < DEF_MAXDIALOGBOX - 2; i++)
		if ((m_cDialogBoxOrder[i - 1] == NULL) && (m_cDialogBoxOrder[i] != NULL)) {
			m_cDialogBoxOrder[i - 1] = m_cDialogBoxOrder[i];
			m_cDialogBoxOrder[i] = NULL;
		}
	//Snoopy: 39->59
	for (i = 0; i < DEF_MAXDIALOGBOX - 2; i++)
		if (m_cDialogBoxOrder[i] == NULL) {
			m_cDialogBoxOrder[i] = iBoxID;
			return;
		}
}

void CGame::InitDataResponseHandler(char * pData)
{
	int * ip, i;
	short * sp, sX, sY;
	char  * cp, cMapFileName[32], cTxt[120], cPreCurLocation[12];
	BOOL  bIsObserverMode;
	HANDLE hFile;
	DWORD  dwFileSize;

	ZeroMemory(cPreCurLocation, sizeof(cPreCurLocation));
	m_bParalyze = EncriptBool(FALSE);
	m_pMapData->Init();
	//m_bHackMoveBlocked = EncriptBool(FALSE);
	m_bPackSarpadBlock = EncriptBool(FALSE);

	m_sMonsterID = 0;
	m_dwMonsterEventTime = 0;

	DisableDialogBox(7);
	DisableDialogBox(11);
	DisableDialogBox(13);
	DisableDialogBox(14);
	DisableDialogBox(16);
	DisableDialogBox(22);
	DisableDialogBox(20);
	DisableDialogBox(21);
	DisableDialogBox(23);
	DisableDialogBox(51); // Gail's diag
	DisableDialogBox(57); // MORLA 2.4 - shop 2
	//DisableDialogBox(54); // hora : elegir City
	if (BigBar != 2)
	{
		if (BigBar > 0)
			EnableDialogBox(30, NULL, NULL, NULL);//Barra Chica 44 Barra Grande 30
		else
			EnableDialogBox(44, NULL, NULL, NULL);
	}

	AllVsAll = FALSE;
	AllEks = FALSE;
	AllDkEks = FALSE;

	m_cCommand = DEF_OBJECTSTOP;
	//m_bCommandAvailable = TRUE;
	m_cCommandCount = 0;
	m_bIsGetPointingMode = FALSE;
	m_iPointCommandType = EncriptInt(-1);
	m_iIlusionOwnerH = EncriptInt(0);
	m_bIllusionMVT = EncriptBool(FALSE);
	m_cIlusionOwnerType = NULL;
	m_bIsTeleportRequested = FALSE;
	m_bIsConfusion = EncriptBool(FALSE);
	m_bSkillUsingStatus = FALSE;


	m_bItemUsingStatus = FALSE;

	m_cRestartCount = EncriptInt(-1);
	m_dwRestartCountTime = NULL;

	for (i = 0; i < DEF_MAXEFFECTS; i++)
	{
		if (m_pEffectList[i] != NULL) delete m_pEffectList[i];
		m_pEffectList[i] = NULL;
	}

	for (i = 0; i < DEF_MAXWHETHEROBJECTS; i++)
	{
		m_stWhetherObject[i].sX = 0;
		m_stWhetherObject[i].sBX = 0;
		m_stWhetherObject[i].sY = 0;
		m_stWhetherObject[i].cStep = 0;
	}

	for (i = 0; i < DEF_MAXGUILDNAMES; i++)
	{
		m_stGuildName[i].dwRefTime = 0;
		m_stGuildName[i].iGuildRank = -1;
		ZeroMemory(m_stGuildName[i].cCharName, sizeof(m_stGuildName[i].cCharName));
		ZeroMemory(m_stGuildName[i].cGuildName, sizeof(m_stGuildName[i].cGuildName));
	}

	for (i = 0; i < DEF_MAXCHATMSGS; i++) {
		if (m_pChatMsgList[i] != NULL) delete m_pChatMsgList[i];
		m_pChatMsgList[i] = NULL;
	}

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	// PlayerObjectID
	sp = (short *)cp;
	m_sPlayerObjectID = *sp;
	cp += 2;

	sp = (short *)cp;
	sX = *sp;
	cp += 2;

	sp = (short *)cp;
	sY = *sp;
	cp += 2;

	sp = (short *)cp;
	m_sPlayerType = *sp;
	cp += 2;

	sp = (short *)cp;
	m_sPlayerAppr1 = *sp;
	cp += 2;

	sp = (short *)cp;
	m_sPlayerAppr2 = *sp;
	cp += 2;

	sp = (short *)cp;
	m_sPlayerAppr3 = *sp;
	cp += 2;

	sp = (short *)cp;
	m_sPlayerAppr4 = *sp;
	cp += 2;

	ip = (int *)cp; // v1.4
	m_iPlayerApprColor = *ip;
	cp += 4;

	// New Colors -> ZeroEoyPnk
	ip = (int *)cp;
	m_iPlayerApprColor2 = *ip;
	cp += 4;

	// CLEROTH - BLACK FIX
	ip = (int *)cp;
	m_iPlayerStatus = *ip;
	cp += 4;

	ZeroMemory(m_cMapName, sizeof(m_cMapName));
	ZeroMemory(m_cMapMessage, sizeof(m_cMapMessage));
	memcpy(m_cMapName, cp, 10);
	m_cMapIndex = EncriptInt(GetOfficialMapName(m_cMapName, m_cMapMessage));
	EncriptString(m_cMapName);

	if (DecriptInt(m_cMapIndex) < 0)
	{
		m_stDialogBoxInfo[9].sSizeX = -1;
		m_stDialogBoxInfo[9].sSizeY = -1;
	}
	else
	{
		m_stDialogBoxInfo[9].sSizeX = 128;
		m_stDialogBoxInfo[9].sSizeY = 128;
	}
	cp += 10;

	strcpy(cPreCurLocation, m_cCurLocation);
	ZeroMemory(m_cCurLocation, sizeof(m_cCurLocation));

	memcpy(m_cCurLocation, cp, 10);
	EncriptString(m_cCurLocation);
	cp += 10;

	G_cSpriteAlphaDegree = *cp;
	cp++;

	m_cWhetherStatus = *cp;
	cp++;
	switch (G_cSpriteAlphaDegree) { //Snoopy:  Xmas bulbs
	// Will be sent by server if DayTime is 3 (and a snowy weather)
		case 1:	m_bIsXmas = FALSE; break;
		case 2: m_bIsXmas = FALSE; break;
		case 3: // Snoopy Special night with chrismas bulbs
			if (m_cWhetherStatus > 3) m_bIsXmas = TRUE;
			else m_bIsXmas = FALSE;
			G_cSpriteAlphaDegree = 2;
			break;
	}
	bIsObserverMode = (BOOL)*cp;
	cp++;

	m_cDiscount = (char)*cp;
	cp++;

	MyAdminLevel = (char)*cp;
	cp++;

	m_minimap.Clear();

	if (m_cWhetherStatus != NULL)
		SetWhetherStatus(TRUE, m_cWhetherStatus);
	else SetWhetherStatus(FALSE, m_cWhetherStatus);

	ZeroMemory(cMapFileName, sizeof(cMapFileName));
	strcat(cMapFileName, "mapdata\\");
	// CLEROTH - MW MAPS
	DecriptString(m_cMapName);
	if (memcmp(m_cMapName, "defaultmw", 9) == 0) {
		strcat(cMapFileName, "mw\\defaultmw");
	}
	else {
		strcat(cMapFileName, m_cMapName);
	}
	EncriptString(m_cMapName);

	strcat(cMapFileName, ".amd");
	m_pMapData->OpenMapDataFile(cMapFileName);

	m_pMapData->m_sPivotX = sX;
	m_pMapData->m_sPivotY = sY;

	//added resolution	
	m_sPlayerX = sX + 14 + 5;
	m_sPlayerY = sY + 12 + 5;

	m_cPlayerDir = 5;

	if (bIsObserverMode == FALSE) {
		m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
			m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor, // v1.4
			m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
			DEF_OBJECTSTOP, NULL, NULL, NULL, NULL, NULL, MyAdminLevel);
	}

	//added resolution
	/*if (c_reso->IsResolution() == C800x600)
	{
		m_sViewDstX = m_sViewPointX = (sX + 7) * 32 - 16;
		m_sViewDstY = m_sViewPointY = (sY + 8) * 32 - 16;
		_ReadMapData(sX + 7, sY + 8, cp);
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		m_sViewDstX = m_sViewPointX = (sX + 9) * 32;
		m_sViewDstY = m_sViewPointY = (sY + 10) * 32;
		_ReadMapData(sX +9, sY + 10, cp); 
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		m_sViewDstX = m_sViewPointX = (sX + 3) * 32;
		m_sViewDstY = m_sViewPointY = (sY + 6) * 32 - 64;
		_ReadMapData(sX + 3, sY + 6, cp);
	}*/
	if (c_reso->IsResolution() == C800x600)
	{
		m_sViewDstX = m_sViewPointX = (sX + 4 + 5 - 2) * 32 - 16;
		m_sViewDstY = m_sViewPointY = (sY + 5 + 5 - 2) * 32 - 16;
		_ReadMapData(sX + 4 + 5 - 2, sY + 5 + 5 - 2, cp);
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		m_sViewDstX = m_sViewPointX = (sX + 4 + 5) * 32;
		m_sViewDstY = m_sViewPointY = (sY + 5 + 5) * 32;
		_ReadMapData(sX + 4 + 5, sY + 5 + 5, cp);
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		m_sViewDstX = m_sViewPointX = (sX + 4 + 5 - 6) * 32;
		m_sViewDstY = m_sViewPointY = (sY + 5 + 5 - 4) * 32 - 32 - 32;
		_ReadMapData(sX + 4 + 5 - 6, sY + 5 + 5 - 4, cp);
	}

	//original
	/*m_sViewDstX = m_sViewPointX = (sX + 4 + 5) * 32;
	m_sViewDstY = m_sViewPointY = (sY + 5 + 5) * 32;
	_ReadMapData(sX + 4 + 5, sY + 5 + 5, cp);*/
	m_bIsRedrawPDBGS = TRUE;
	// ------------------------------------------------------------------------+
	wsprintf(cTxt, INITDATA_RESPONSE_HANDLER1, m_cMapMessage);
	AddEventList(cTxt, 10);

	//LaloRamos nuevos mensajes al entrar al mapa
	if (strcmp(m_cMapMessage, "Beginner Zone") == 0)
	{
		SetTopMsg("Bienvenidos a Helbreath Xsilium", 5);
	}

	/*if (strcmp(m_cMapMessage, "Mortal Combat") == 0)
	{
		SetTopMsg("Aqui nadie tendra piedad por ti!", 5);
	}*/

	/*if (strcmp(m_cMapMessage, "ArG Barracks") == 0)
	{
		SetTopMsg("Cursed Barracks Mixto", 5);
	}*/

	/*if (strcmp(m_cMapMessage, "Promiseland") == 0)
	{
		SetTopMsg("Ten Cuidado! Mapa habilitado para todos los niveles.", 5);
	}*/

	// ------------------------------------------------------------------------+

	ChangeGameMode(DEF_GAMEMODE_ONMAINGAME);
	m_DDraw.ClearBackB4();

	//v1.41
	if ((m_sPlayerAppr2 & 0xF000) != 0)
		m_bIsCombatMode = EncriptBool(TRUE);
	else m_bIsCombatMode = EncriptBool(FALSE);

	//v1.42
	if (m_bIsFirstConn == TRUE)
	{
		m_bIsFirstConn = FALSE;
		hFile = CreateFile("contents\\contents1000.txt", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
		if (hFile == INVALID_HANDLE_VALUE)
			dwFileSize = 0;
		else
		{
			dwFileSize = GetFileSize(hFile, NULL);
			CloseHandle(hFile);
		}
		bSendCommand(CLIENT_REQUEST_NOTICEMENT, NULL, NULL, (int)dwFileSize, NULL, NULL, NULL);
	}
	//cp += 2;
}

void CGame::DisableDialogBox(int iBoxID)
{
	int i;

	switch (iBoxID) {

	case 76:
		m_stDialogBoxInfo[76].cMode = 0;
		break;

	case 72:
		if (m_stDialogBoxInfo[72].sV1 != -1)
		{
			m_bIsItemDisabled[m_stDialogBoxInfo[72].sV1] = FALSE;
			m_stDialogBoxInfo[72].sV1 = -1;
		}
		if (m_stDialogBoxInfo[72].sV2 != -1)
		{
			m_bIsItemDisabled[m_stDialogBoxInfo[72].sV2] = FALSE;
			m_stDialogBoxInfo[72].sV2 = -1;
		}

		isComboBoxOpen = false; // Bandera para controlar si el combobox está abierto o cerrado
		selectedOptionIndex = -1; // Índice de la opción seleccionada
		isClickProcessed = false; // Bandera para controlar si el clic ya fue procesado
		selectedType = 0;

		for (int b = 0; b < 20; b++)
		{
			if (m_stDialogBoxInfo[72].m_iEnchantingItem[b] != -1)
			{
				m_bIsItemDisabled[m_stDialogBoxInfo[72].m_iEnchantingItem[b]] = FALSE;
				m_stDialogBoxInfo[72].m_iEnchantingItem[b] = -1;
			}
		}

		break;

		case 4:
			m_bIsItemDisabled[m_stDialogBoxInfo[4].sView] = FALSE;
			break;

		case 5:
			m_bIsItemDisabled[m_stDialogBoxInfo[5].sView] = FALSE;
			break;

		case 6:
			m_bIsItemDisabled[m_stDialogBoxInfo[6].sView] = FALSE;
			break;

		case 7:
			if (m_stDialogBoxInfo[7].cMode == 1)
				EndInputString();
			m_stDialogBoxInfo[7].cMode = 0;
			break;

		case 11:
			DeleteItems();
			m_stDialogBoxInfo[39].sV3 = 0;
			m_stDialogBoxInfo[39].sV4 = 0; // v1.4
			m_stDialogBoxInfo[39].sV5 = 0;
			m_stDialogBoxInfo[39].sV6 = 0;
			break;

		case 14:
			if (m_stDialogBoxInfo[14].cMode < 0) return;
			break;
		case 17:
			if (m_stDialogBoxInfo[17].cMode == 1) {
				EndInputString();
				if (!m_stDialogBoxInfo[17].IsMarketInput())
					m_bIsItemDisabled[m_stDialogBoxInfo[17].sView] = FALSE;
			}
			break;

		case 20: // v1.4
			m_bIsItemDisabled[m_stDialogBoxInfo[20].sV1] = FALSE;
			break;

		case 21:
			if (m_stDialogBoxInfo[21].sV2 == 500)
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GETMAGICABILITY, NULL, NULL, NULL, NULL, NULL);
			break;

		case 24:
			m_bSkillUsingStatus = FALSE;
			break;

		case 26:
			if (m_stDialogBoxInfo[26].sV1 != -1) m_bIsItemDisabled[m_stDialogBoxInfo[26].sV1] = FALSE;
			if (m_stDialogBoxInfo[26].sV2 != -1) m_bIsItemDisabled[m_stDialogBoxInfo[26].sV2] = FALSE;
			if (m_stDialogBoxInfo[26].sV3 != -1) m_bIsItemDisabled[m_stDialogBoxInfo[26].sV3] = FALSE;
			if (m_stDialogBoxInfo[26].sV4 != -1) m_bIsItemDisabled[m_stDialogBoxInfo[26].sV4] = FALSE;
			if (m_stDialogBoxInfo[26].sV5 != -1) m_bIsItemDisabled[m_stDialogBoxInfo[26].sV5] = FALSE;
			if (m_stDialogBoxInfo[26].sV6 != -1) m_bIsItemDisabled[m_stDialogBoxInfo[26].sV6] = FALSE;
			m_bSkillUsingStatus = FALSE;
			break;

		case 27: //Snoopy: 7 mar 06 (multiTrade) case rewriten
			for (i = 0; i <= DecriptInt(ItemsInExchange); i++)
			{
				ZeroMemory(m_stDialogBoxExchangeInfo[i].cStr1, sizeof(m_stDialogBoxExchangeInfo[i].cStr1));
				ZeroMemory(m_stDialogBoxExchangeInfo[i].cStr2, sizeof(m_stDialogBoxExchangeInfo[i].cStr2));
				m_stDialogBoxExchangeInfo[i].sV1 = -1;
				m_stDialogBoxExchangeInfo[i].sV2 = -1;
				m_stDialogBoxExchangeInfo[i].sV3 = -1;
				m_stDialogBoxExchangeInfo[i].sV4 = -1;
				m_stDialogBoxExchangeInfo[i].sV5 = -1;
				m_stDialogBoxExchangeInfo[i].sV6 = -1;
				m_stDialogBoxExchangeInfo[i].sV7 = -1;
				m_stDialogBoxExchangeInfo[i].dwV1 = 0;
				m_stDialogBoxExchangeInfo[i].cValueA = 0;
				if (m_bIsItemDisabled[m_stDialogBoxExchangeInfo[i].sItemID] == TRUE)
					m_bIsItemDisabled[m_stDialogBoxExchangeInfo[i].sItemID] = FALSE;
			}
			ItemsInExchange = EncriptInt(-1);
			for (i = 20; i <= DecriptInt(ItemsInExchange2) + 20; i++)
			{
				ZeroMemory(m_stDialogBoxExchangeInfo[i].cStr1, sizeof(m_stDialogBoxExchangeInfo[i].cStr1));
				ZeroMemory(m_stDialogBoxExchangeInfo[i].cStr2, sizeof(m_stDialogBoxExchangeInfo[i].cStr2));
				m_stDialogBoxExchangeInfo[i].sV1 = -1;
				m_stDialogBoxExchangeInfo[i].sV2 = -1;
				m_stDialogBoxExchangeInfo[i].sV3 = -1;
				m_stDialogBoxExchangeInfo[i].sV4 = -1;
				m_stDialogBoxExchangeInfo[i].sV5 = -1;
				m_stDialogBoxExchangeInfo[i].sV6 = -1;
				m_stDialogBoxExchangeInfo[i].sV7 = -1;
				m_stDialogBoxExchangeInfo[i].dwV1 = 0;
				m_stDialogBoxExchangeInfo[i].cValueA = 0;
				if (m_bIsItemDisabled[m_stDialogBoxExchangeInfo[i].sItemID] == TRUE)
					m_bIsItemDisabled[m_stDialogBoxExchangeInfo[i].sItemID] = FALSE;
			}
			ItemsInExchange2 = EncriptInt(-1);
			m_stDialogBoxInfo[27].sV1 = 0;
			m_stDialogBoxInfo[27].sV2 = 0;
			for (i = 0; i <= 2; i++)
			{
				ExchangeLog[i].Me = FALSE;
				ExchangeLog[i].Added = FALSE;
				ZeroMemory(ExchangeLog[i].ItemName, sizeof(ExchangeLog[i].ItemName));
			}
			break;

		case 31:
			for (i = 0; i < DEF_MAXSELLLIST; i++)
			{
				if (m_stSellItemList[i].iIndex != -1) m_bIsItemDisabled[m_stSellItemList[i].iIndex] = FALSE;
				m_stSellItemList[i].iIndex = -1;
				m_stSellItemList[i].iAmount = 0;
			}
			break;

		case 32:
			if (m_stDialogBoxInfo[32].cMode == 3)
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ACCEPTJOINPARTY, NULL, 2, NULL, NULL, m_stDialogBoxInfo[32].cStr);
			break;

		case 34:
			if (m_stDialogBoxInfo[34].sV1 != -1)
				m_bIsItemDisabled[m_stDialogBoxInfo[34].sV1] = FALSE;
			break;

		case 40:
			m_bIsItemDisabled[m_stDialogBoxInfo[40].sV1] = FALSE;
			m_bIsItemDisabled[m_stDialogBoxInfo[40].sV2] = FALSE;
			m_bIsItemDisabled[m_stDialogBoxInfo[40].sV3] = FALSE;
			m_bIsItemDisabled[m_stDialogBoxInfo[40].sV4] = FALSE;

			ZeroMemory(m_stDialogBoxInfo[40].cStr, sizeof(m_stDialogBoxInfo[40].cStr));
			ZeroMemory(m_stDialogBoxInfo[40].cStr2, sizeof(m_stDialogBoxInfo[40].cStr2));
			ZeroMemory(m_stDialogBoxInfo[40].cStr3, sizeof(m_stDialogBoxInfo[40].cStr3));
			ZeroMemory(m_stDialogBoxInfo[40].cStr4, sizeof(m_stDialogBoxInfo[40].cStr4));
			m_stDialogBoxInfo[40].sV1 = -1;
			m_stDialogBoxInfo[40].sV2 = -1;
			m_stDialogBoxInfo[40].sV3 = -1;
			m_stDialogBoxInfo[40].sV4 = -1;
			m_stDialogBoxInfo[40].sV5 = -1;
			m_stDialogBoxInfo[40].sV6 = -1;
			m_stDialogBoxInfo[40].sV9 = -1;
			m_stDialogBoxInfo[40].sV10 = -1;
			m_stDialogBoxInfo[40].sV11 = -1;
			m_stDialogBoxInfo[40].sV12 = -1;
			m_stDialogBoxInfo[40].sV13 = -1;
			m_stDialogBoxInfo[40].sV14 = -1;
			m_stDialogBoxInfo[40].dwV1 = 0;
			m_stDialogBoxInfo[40].dwV2 = 0;
			break;

		case 42:
			cStateChange1 = EncriptInt(0);
			cStateChange2 = EncriptInt(0);
			cStateChange3 = EncriptInt(0);
			TempDiscount = 0;
			ChangeStat = FALSE;
			break;

		case 43:
			SaveMuteList();
			break;

		case 44:
			//EnableDialogBox(45, NULL, NULL, NULL);
			break;

		case 45:
			EnableDialogBox(44, NULL, NULL, NULL);
			break;

		case 49:
			for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
			{
				if (m_stItemListToSell[i].iIndex != -1) m_bIsItemDisabled[m_stItemListToSell[i].iIndex] = FALSE;
				m_stItemListToSell[i].iIndex = -1;
				m_stItemListToSell[i].iAmount = 0;
				m_stItemListToSell[i].uiPrice = 0;
				ZeroMemory(m_stItemListToSell[i].cStr1, sizeof(m_stItemListToSell[i].cStr1));
				ZeroMemory(m_stItemListToSell[i].cStr2, sizeof(m_stItemListToSell[i].cStr2));
				ZeroMemory(m_stItemListToSell[i].cStr3, sizeof(m_stItemListToSell[i].cStr3));
			}
			//if (DecriptBool(MarketOpen)) bSendCommand(CLIENT_REQUEST_TIPESELLLIST, NULL, NULL, -1, NULL, NULL, NULL);
			if (MarketOpen) bSendCommand(CLIENT_REQUEST_TIPESELLLIST, NULL, NULL, -1, NULL, NULL, NULL);
			MarketOpen = FALSE; // EncriptBool(FALSE);
			m_bParalyze = FALSE; // EncriptBool(FALSE);
			break;

		case 52:
			DeleteItems();
			ReadSettingsCFG();
			if (m_bIsDialogEnabled[53]) DisableDialogBox(53);
			break;

		case 54:
			for (i = 0; i < DEF_MAXSELLITEMSLIST; i++) {
				if (m_pItemSellList[i] != NULL) {
					delete m_pItemSellList[i];
					m_pItemSellList[i] = NULL;
				}
			}
		//	m_bIsDialogEnabled[54] = false; //LaloMarket
			break;

		case 57:
		case 58:
			DeleteItems();
			break;
	}

	m_bIsDialogEnabled[iBoxID] = FALSE;
	// Snoopy: 39->59
	for (i = 0; i < DEF_MAXDIALOGBOX - 2; i++)
		if (m_cDialogBoxOrder[i] == iBoxID)
			m_cDialogBoxOrder[i] = NULL;

	// Snoopy: 39->59
	for (i = 1; i < DEF_MAXDIALOGBOX - 2; i++)
		if ((m_cDialogBoxOrder[i - 1] == NULL) && (m_cDialogBoxOrder[i] != NULL))
		{
			m_cDialogBoxOrder[i - 1] = m_cDialogBoxOrder[i];
			m_cDialogBoxOrder[i] = NULL;
		}
}


int CGame::iGetTopDialogBoxIndex()
{
	int i;
	//Snoopy: 38->58
	for (i = DEF_MAXDIALOGBOX - 3; i >= 0; i--)
		if (m_cDialogBoxOrder[i] != NULL)
			return m_cDialogBoxOrder[i];

	return NULL;
}
//Barra Chica LaloRamos
void CGame::DlgBoxClick_IconPannel3(short msX, short msY)
{
	if (BigBar != 1) return;
	short sX, sY;
	sX = m_stDialogBoxInfo[44].sX;
	sY = m_stDialogBoxInfo[44].sY;

	if (((msX >= 109 + sX) && (msX <= 250 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
	{
		//Event
		if (((msX >= 110 + sX) && (msX <= 123 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
		{
			if (m_bIsCrusadeMode == TRUE)
			{
				switch (DecriptInt(m_iCrusadeDuty)) {
					case 1: // Fighter
						EnableDialogBox(38, NULL, NULL, NULL);
						break;

					case 2: // Constructor
						EnableDialogBox(37, NULL, NULL, NULL);
						break;

					case 3: // Commander
						EnableDialogBox(36, NULL, NULL, NULL);
						break;

					default:
						EnableDialogBox(38, NULL, NULL, NULL);
						break;
				}
			}
			else
			{
				//Event Button
				if (m_bIsDialogEnabled[55] == TRUE)
					DisableDialogBox(55);
				else EnableDialogBox(55, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
		}

		// Attack Mode - Button 
		if ((sX + 130 <= msX) && (sX + 147 >= msX) && (sY + 20 <= msY) && (sY + 37 >= msY))
		{
			//Boton Atake
			if (DecriptBool(m_bIsCombatMode))
			{
				m_bIsCombatMode = EncriptBool(FALSE);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			else
			{
				m_bIsCombatMode = EncriptBool(TRUE);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
		}

		// Character
		if (((msX >= 151 + sX) && (msX <= 165 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY))) {
			if (m_bIsDialogEnabled[1] == TRUE)
				DisableDialogBox(1);
			else EnableDialogBox(1, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		// Inventory
		if (((msX >= 167 + sX) && (msX <= 182 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY))) {
			if (m_bIsDialogEnabled[2] == TRUE)
				DisableDialogBox(2);
			else EnableDialogBox(2, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		// Magic
		if (((msX >= 184 + sX) && (msX <= 198 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY))) {
			if (m_bIsDialogEnabled[3] == TRUE)
				DisableDialogBox(3);
			else EnableDialogBox(3, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		// Skill
		if (((msX >= 201 + sX) && (msX <= 215 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY))) {
			if (m_bIsDialogEnabled[15] == TRUE)
				DisableDialogBox(15);
			else EnableDialogBox(15, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		// Chat
		if (((msX >= 217 + sX) && (msX <= 232 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY))) {
			if (m_bIsDialogEnabled[10] == TRUE)
				DisableDialogBox(10);
			else EnableDialogBox(10, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		// System Menu
		if (((msX >= 234 + sX) && (msX <= 249 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY))) {
			if (m_bIsDialogEnabled[19] == TRUE)
				DisableDialogBox(19);
			else EnableDialogBox(19, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}
	}
}

//Barra Grande LaloRamos
void CGame::DlgBoxClick_IconPannel(short msX, short msY)
{
	if (BigBar != 0) return;

	short sX, sY;
	sX = m_stDialogBoxInfo[30].sX;
	sY = m_stDialogBoxInfo[30].sY;

	if ((msX > 322) && (msX < 355) && (434 < msY) && (475 > msY))
	{

		// Crusade EVENT LaloRamos PROBANDO NEUVA LINEA PARA ANTI BUG
		//	if (((msX >= 110 + sX) && (msX <= 123 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))//CAMBIAR
		//		{
		//	if ((msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 40) && (msY <= sY + 320)) {
		if (m_bIsCrusadeMode == TRUE)
		{
			switch (DecriptInt(m_iCrusadeDuty)) {
				case 1: // Fighter
					EnableDialogBox(38, NULL, NULL, NULL);
					break;

				case 2: // Constructor
					EnableDialogBox(37, NULL, NULL, NULL);
					break;

				case 3: // Commander
					EnableDialogBox(36, NULL, NULL, NULL);
					break;

				default:
					break;
			}
		}
		else
		{
			//Event Button
			if (m_bIsDialogEnabled[55] == TRUE)
				DisableDialogBox(55);
			else EnableDialogBox(55, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}
	}

/*	if ((362 < msX) && (404 > msX) && (434 < msY) && (475 > msY)) {
		// Combat Mode Toggle
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
	}*/
	//lalov11barra
	// Attack Mode - Button 
	if ((362 < msX) && (404 > msX) && (434 < msY) && (475 > msY)) //{
	{
		//Boton Atake
		if (DecriptBool(m_bIsCombatMode))
		{
			m_bIsCombatMode = EncriptBool(FALSE);
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}
		else
		{
			m_bIsCombatMode = EncriptBool(TRUE);
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}
	}

	// Character
	if ((413 <= msX) && (446 >= msX) && (434 < msY) && (475 > msY)) {
		if (m_bIsDialogEnabled[1] == TRUE)
			DisableDialogBox(1);
		else EnableDialogBox(1, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
	}

	// Inventory
	if ((453 <= msX) && (486 >= msX) && (434 < msY) && (475 > msY)) {
		if (m_bIsDialogEnabled[2] == TRUE)
			DisableDialogBox(2);
		else EnableDialogBox(2, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
	}

	// Magic
	if ((490 <= msX) && (522 >= msX) && (434 < msY) && (475 > msY)) {
		if (m_bIsDialogEnabled[3] == TRUE)
			DisableDialogBox(3);
		else EnableDialogBox(3, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
	}

	// Skill
	if ((526 <= msX) && (552 >= msX) && (434 < msY) && (475 > msY)) {
		if (m_bIsDialogEnabled[15] == TRUE)
			DisableDialogBox(15);
		else EnableDialogBox(15, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
	}

	// Chat
	if ((556 <= msX) && (587 >= msX) && (434 < msY) && (475 > msY)) {
		if (m_bIsDialogEnabled[10] == TRUE)
			DisableDialogBox(10);
		else EnableDialogBox(10, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
	}

	// System Menu
	if ((589 <= msX) && (621 >= msX) && (434 < msY) && (475 > msY)) {
		if (m_bIsDialogEnabled[19] == TRUE)
			DisableDialogBox(19);
		else EnableDialogBox(19, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
	}
}

void CGame::DrawChatMsgs(short sX, short sY, short dX, short dY)
{
	int i;
	int iFontSize;
	int iContador = 0;
	int x;
	int uX, uY, uU;
	int iSpace = 0;

	if (StaggerDmg)
	{
		for (i = 0; i < DEF_MAXCHATMSGS; i++) //excelente

			if (m_pChatMsgList[i] != NULL)
				if ((m_pChatMsgList[i]->m_sX >= sX) && (m_pChatMsgList[i]->m_sX <= dX) &&
					(m_pChatMsgList[i]->m_sY >= sY) && (m_pChatMsgList[i]->m_sY <= dY))
				{
					iContador++;


					switch (m_pChatMsgList[i]->m_cType) {
					case 41:
					case 42:


						if (m_pMapData->bSetChatMsgOwner(m_pChatMsgList[i]->m_iObjectID, -10, -10, i) == FALSE)
						{
							delete m_pChatMsgList[i];
							m_pChatMsgList[i] = NULL;
							break;
						}

						if (m_pChatMsgList[i]->iDispLines == 1)
							DrawChatMsgBox(m_pChatMsgList[i]->m_sX, m_pChatMsgList[i]->m_sY - (0 * 12), i, FALSE);

						break;
					case 21:
					case 22:
					case 23:


						if (m_pMapData->bSetChatMsgOwner(m_pChatMsgList[i]->m_iObjectID, -10, -10, i) == FALSE)
						{
							delete m_pChatMsgList[i];
							m_pChatMsgList[i] = NULL;
							break;
						}

						for (uU = 0; uU < DEF_MAXCHATMSGS; uU++)
						{
							if (m_pChatMsgList[uU] != NULL)
								if (m_pChatMsgList[uU]->iDispLines == 1)
								{
									for (int uV = 0; uV < DEF_MAXCHATMSGS; uV++)
									{
										if (m_pChatMsgList[uV] != NULL)
										{
											if (m_pChatMsgList[uV]->m_iObjectID == m_pChatMsgList[uU]->m_iObjectID)
											{
												m_pChatMsgList[uV]->m_sX = m_pChatMsgList[uU]->m_sX;
												m_pChatMsgList[uV]->m_sY = m_pChatMsgList[uU]->m_sY;
											}
										}
									}
								}
						}

						uX = m_pChatMsgList[i]->m_sX;
						uY = m_pChatMsgList[i]->m_sY;

						if (true)
						{
							/*if (m_pChatMsgList[i]->iDispLines == 5)
								PutString_SprFont3(uX - 17 + 26, 36 + uY - 65 - (0 * 12),
									m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 2);
							if (m_pChatMsgList[i]->iDispLines == 4)
								PutString_SprFont3(uX - 17 + 25, 28 + uY - 65 - (0 * 12),
									m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 2);
							if (m_pChatMsgList[i]->iDispLines == 3)
								PutString_SprFont3(uX - 17 + 18, 17 + uY - 65 - (0 * 12),
									m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 1);
							if (m_pChatMsgList[i]->iDispLines == 2)
								PutString_SprFont3(uX - 17 + 14, 7 + uY - 65 - (0 * 12),
									m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 1);
						}
						if (m_pChatMsgList[i]->iDispLines == 1)
							PutString_SprFont3(uX - 17, uY - 65 - (0 * 12),
								m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 0);*/

							if (m_pChatMsgList[i]->iDispLines == 5)
								PutString_SprFont3(uX - 17 + 26, 60 + uY - 65 - (0 * 12),
									m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 2);
							if (m_pChatMsgList[i]->iDispLines == 4)
								PutString_SprFont3(uX - 17 + 25, 45 + uY - 65 - (0 * 12),
									m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 2);
							if (m_pChatMsgList[i]->iDispLines == 3)
								PutString_SprFont3(uX - 17 + 18, 30 + uY - 65 - (0 * 12),
									m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 1);
							if (m_pChatMsgList[i]->iDispLines == 2)
								PutString_SprFont3(uX - 17 + 14, 15 + uY - 65 - (0 * 12),
									m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 1);
						}
						if (m_pChatMsgList[i]->iDispLines == 1)
							PutString_SprFont3(uX - 17, uY - 65 - (0 * 12),
								m_pChatMsgList[i]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 0);

						break;
					}

				}

		m_DDraw._GetBackBufferDC();
		for (i = 0; i < DEF_MAXCHATMSGS; i++)
			if (m_pChatMsgList[i] != NULL)
				if ((m_pChatMsgList[i]->m_sX >= sX) && (m_pChatMsgList[i]->m_sX <= dX) &&
					(m_pChatMsgList[i]->m_sY >= sY) && (m_pChatMsgList[i]->m_sY <= dY)) {

					switch (m_pChatMsgList[i]->m_cType) {
					case 41:
					case 42:
					case 21:
					case 22:
					case 23:
						break;

					case 20:
					default:
						DrawChatMsgBox(m_pChatMsgList[i]->m_sX, m_pChatMsgList[i]->m_sY, i, TRUE);
						break;
					}
				}
		m_DDraw._ReleaseBackBufferDC();
	}
	else
	{

		for (i = 0; i < DEF_MAXCHATMSGS; i++)
			if (m_pChatMsgList[i] != NULL)
				if ((m_pChatMsgList[i]->m_sX >= sX) && (m_pChatMsgList[i]->m_sX <= dX) &&
					(m_pChatMsgList[i]->m_sY >= sY) && (m_pChatMsgList[i]->m_sY <= dY)) {

					switch (m_pChatMsgList[i]->m_cType) {

					case 21:
					case 22:
					case 23:
						DrawChatMsgBox(m_pChatMsgList[i]->m_sX, m_pChatMsgList[i]->m_sY, i, FALSE);
						break;
					case 41:
					case 42:
					case 43://agregado Lalo Color Magia
						DrawChatMsgBox(m_pChatMsgList[i]->m_sX, m_pChatMsgList[i]->m_sY, i, FALSE);
						break;
					}
				}

		m_DDraw._GetBackBufferDC();
		for (i = 0; i < DEF_MAXCHATMSGS; i++)
			if (m_pChatMsgList[i] != NULL)
				if ((m_pChatMsgList[i]->m_sX >= sX) && (m_pChatMsgList[i]->m_sX <= dX) &&
					(m_pChatMsgList[i]->m_sY >= sY) && (m_pChatMsgList[i]->m_sY <= dY)) {

					switch (m_pChatMsgList[i]->m_cType) {
					case 41:
					case 42:
					case 21:
					case 22:
					case 23:
					case 43://agregado Lalo Color Magia
						break;

					case 20:
					default:
						DrawChatMsgBox(m_pChatMsgList[i]->m_sX, m_pChatMsgList[i]->m_sY, i, TRUE);
						break;
					}
				}
		m_DDraw._ReleaseBackBufferDC();
	}	
}



void CGame::_LoadTextDlgContents(int cType)
{
	char * pContents, *token, cTemp[120], cFileName[120];
	char   seps[] = "\n";
	int    iIndex = 0, i;
	class  CStrTok * pStrTok;
	DWORD  dwFileSize;
	HANDLE hFile;
	FILE * pFile;
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
	{
		if (m_pMsgTextList[i] != NULL)
			delete m_pMsgTextList[i];
		m_pMsgTextList[i] = NULL;
	}
	// cType
	ZeroMemory(cTemp, sizeof(cTemp));
	ZeroMemory(cFileName, sizeof(cFileName));

	wsprintf(cTemp, "contents%d", cType);
	strcat(cFileName, "contents");
	strcat(cFileName, "\\");
	strcat(cFileName, "\\");
	strcat(cFileName, cTemp);
	strcat(cFileName, ".txt");

	hFile = CreateFile(cFileName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFileName, "rt");
	if (pFile == NULL) return;
	else
	{
		pContents = new char[dwFileSize + 1];
		ZeroMemory(pContents, dwFileSize + 1);
		fread(pContents, dwFileSize, 1, pFile);
	}
	fclose(pFile);
	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != NULL)
	{
		m_pMsgTextList[iIndex] = new class CMsg(NULL, token, NULL);
		token = pStrTok->pGet();
		iIndex++;
	}
	delete pStrTok;
	delete[] pContents;
}



int CGame::_iLoadTextDlgContents2(int iType)
{
	char * pContents, *token, cTemp[120], cFileName[120];
	char   seps[] = "\n";
	int    iIndex = 0, i;
	class  CStrTok * pStrTok;
	DWORD  dwFileSize;
	HANDLE hFile;
	FILE * pFile;
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
	{
		if (m_pMsgTextList2[i] != NULL)
			delete m_pMsgTextList2[i];
		m_pMsgTextList2[i] = NULL;
	}
	// cType
	ZeroMemory(cTemp, sizeof(cTemp));
	ZeroMemory(cFileName, sizeof(cFileName));

	wsprintf(cTemp, "contents%d", iType);

	strcat(cFileName, "contents");
	strcat(cFileName, "\\");
	strcat(cFileName, "\\");
	strcat(cFileName, cTemp);
	strcat(cFileName, ".txt");
	hFile = CreateFile(cFileName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen(cFileName, "rt");
	if (pFile == NULL) return -1;
	else
	{
		pContents = new char[dwFileSize + 1];
		if (pContents == NULL) return -1;
		ZeroMemory(pContents, dwFileSize + 1);
		fread(pContents, dwFileSize, 1, pFile);
	}
	fclose(pFile);
	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != NULL)
	{
		m_pMsgTextList2[iIndex] = new class CMsg(NULL, token, NULL);
		token = pStrTok->pGet();
		iIndex++;
	}
	delete pStrTok;
	delete[] pContents;
	return iIndex;
}




void CGame::_LoadGameMsgTextContents()
{
	char * pContents, *token, cTemp[120], cFileName[120];
	char   seps[] = ";\n";
	int    iIndex = 0, i;
	class  CStrTok * pStrTok;
	DWORD  dwFileSize;
	HANDLE hFile;
	FILE * pFile;

	for (i = 0; i < DEF_MAXGAMEMSGS; i++) {
		if (m_pGameMsgList[i] != NULL)
			delete m_pGameMsgList[i];
		m_pGameMsgList[i] = NULL;
	}

	ZeroMemory(cTemp, sizeof(cTemp));
	ZeroMemory(cFileName, sizeof(cFileName));

	strcpy(cTemp, "GameMsgList");

	strcat(cFileName, "contents");
	strcat(cFileName, "\\");
	strcat(cFileName, "\\");
	strcat(cFileName, cTemp);
	strcat(cFileName, ".txt");

	hFile = CreateFile(cFileName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);

	pFile = fopen(cFileName, "rt");
	if (pFile == NULL) return;
	else {
		pContents = new char[dwFileSize + 1];
		ZeroMemory(pContents, dwFileSize + 1);
		fread(pContents, dwFileSize, 1, pFile);
	}

	fclose(pFile);

	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != NULL) {
		m_pGameMsgList[iIndex] = new class CMsg(NULL, token, NULL);
		token = pStrTok->pGet();
		iIndex++;
	}

	delete pStrTok;
	delete[] pContents;
}

void CGame::DlgBoxClick_Party(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[32].sX;
	sY = m_stDialogBoxInfo[32].sY;

	switch (m_stDialogBoxInfo[32].cMode) {
		case 0:
			if (DecriptInt(m_iPartyStatus) == 0)
			{
				if ((msX > sX + 80) && (msX < sX + 195) && (msY > sY + 80) && (msY < sY + 100))
				{
					m_stDialogBoxInfo[32].cMode = 2;
					m_bIsGetPointingMode = TRUE;
					m_iPointCommandType = EncriptInt(200);
					PlaySound('E', 14, 5);
				}
			}

			if (DecriptInt(m_iPartyStatus) != 0)
			{
				if ((msX > sX + 80) && (msX < sX + 195) && (msY > sY + 100) && (msY < sY + 120))
				{
					m_stDialogBoxInfo[32].cMode = 11;
					PlaySound('E', 14, 5);
				}
			}

			if (DecriptInt(m_iPartyStatus) != 0)
			{
				if ((msX > sX + 80) && (msX < sX + 195) && (msY > sY + 120) && (msY < sY + 140))
				{
					DecriptString(m_cMCName);
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_JOINPARTY, NULL, 2, NULL, NULL, m_cMCName);
					EncriptString(m_cMCName);
					m_stDialogBoxInfo[32].cMode = 4;
					PlaySound('E', 14, 5);
				}
			}

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) DisableDialogBox(32);
			break;

		case 1:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ACCEPTJOINPARTY, NULL, 1, NULL, NULL, m_stDialogBoxInfo[32].cStr);
				DisableDialogBox(32);
				PlaySound('E', 14, 5);
			}

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ACCEPTJOINPARTY, NULL, 0, NULL, NULL, m_stDialogBoxInfo[32].cStr);
				DisableDialogBox(32);
				PlaySound('E', 14, 5);
			}
			break;

		case 2:
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[32].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 3:
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[32].cMode = 0;
				//bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ACCEPTJOINPARTY, NULL, 2, NULL, NULL, m_stDialogBoxInfo[32].cStr);
				DisableDialogBox(32);
				PlaySound('E', 14, 5);
			}
			break;

		case 4:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[32].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 11:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				DecriptString(m_cMCName);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_JOINPARTY, NULL, NULL, NULL, NULL, m_cMCName);
				EncriptString(m_cMCName);

				m_stDialogBoxInfo[32].cMode = 5;
				PlaySound('E', 14, 5);
			}

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[32].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;
	}
}


void CGame::DlgBoxClick_CrusadeJob(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[33].sX;
	sY = m_stDialogBoxInfo[33].sY;

	switch (m_stDialogBoxInfo[33].cMode) {
		case 1:
			if (!DecriptBool(m_bCitizen) && !Assasain)
			{
				DisableDialogBox(33);
				PlaySound('E', 14, 5);
			}
			else
			{
				if (DecriptInt(m_iGuildRank) == 0)
				{
					if ((msX > sX + 24) && (msX < sX + 246) && (msY > sY + 150) && (msY < sY + 165))
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SELECTCRUSADEDUTY, NULL, 3, NULL, NULL, NULL);
						DisableDialogBox(33);
						PlaySound('E', 14, 5);
					}
				}
				else
				{
					if ((msX > sX + 24) && (msX < sX + 246) && (msY > sY + 150) && (msY < sY + 165))
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SELECTCRUSADEDUTY, NULL, 1, NULL, NULL, NULL);
						DisableDialogBox(33);
					}
					if (DecriptInt(m_iGuildRank) != -1)
					{
						if ((msX > sX + 24) && (msX < sX + 246) && (msY > sY + 175) && (msY < sY + 190))
						{
							bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SELECTCRUSADEDUTY, NULL, 2, NULL, NULL, NULL);
							DisableDialogBox(33);
							PlaySound('E', 14, 5);
						}
					}
				}
			}

			if ((msX > sX + 210) && (msX < sX + 260) && (msY >= sY + 296) && (msY <= sY + 316))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 813, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 2:
			if ((msX > sX + 24) && (msX < sX + 246) && (msY > sY + 160) && (msY < sY + 175))
			{
				switch (DecriptInt(m_iCrusadeDuty)) {
					case 1: EnableDialogBox(18, 803, NULL, NULL); break;
					case 2: EnableDialogBox(18, 805, NULL, NULL); break;
					case 3: EnableDialogBox(18, 808, NULL, NULL); break;
				}
			}

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				DisableDialogBox(33);
				PlaySound('E', 14, 5);
			}
			break;
	}
}

void CGame::_RequestMapStatus(char * pMapName, int iMode)
{
	bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_MAPSTATUS, NULL, iMode, NULL, NULL, pMapName);
}

void CGame::AddMapStatusInfo(char * pData, BOOL bIsLastData)
{
	char * cp, cTotal;
	short * sp, sIndex;
	int i;

	ZeroMemory(m_cStatusMapName, sizeof(m_cStatusMapName));

	cp = (char *)(pData + 6);
	memcpy(m_cStatusMapName, cp, 10);
	cp += 10;

	sp = (short *)cp;
	sIndex = *sp;
	cp += 2;

	cTotal = *cp;
	cp++;

	for (i = 1; i <= cTotal; i++) {
		m_stCrusadeStructureInfo[sIndex].cType = *cp;
		cp++;
		sp = (short *)cp;
		m_stCrusadeStructureInfo[sIndex].sX = *sp;
		cp += 2;
		sp = (short *)cp;
		m_stCrusadeStructureInfo[sIndex].sY = *sp;
		cp += 2;
		m_stCrusadeStructureInfo[sIndex].cSide = *cp;
		cp++;

		sIndex++;
	}

	if (bIsLastData == TRUE) {
		while (sIndex < DEF_MAXCRUSADESTRUCTURES) {
			m_stCrusadeStructureInfo[sIndex].cType = NULL;
			m_stCrusadeStructureInfo[sIndex].sX = NULL;
			m_stCrusadeStructureInfo[sIndex].sY = NULL;
			m_stCrusadeStructureInfo[sIndex].cSide = NULL;
			sIndex++;
		}
	}
}

#ifdef DEF_USING_WIN_IME
bool CGame::GetText(HWND hWnd, UINT msg, WPARAM wparam, LPARAM lparam)
{
	if (m_pInputBuffer == NULL) return FALSE;
	if (G_hEditWnd == NULL) return FALSE;
	switch (msg) {
		case WM_CHAR:
			if ((wparam == 22) || (wparam == 3) || (wparam == 9) || (wparam == 13)) return TRUE;
			if (strlen(m_pInputBuffer) < m_cInputMaxLen - 1) SendMessage(G_hEditWnd, msg, wparam, lparam);
			return TRUE;
		case WM_IME_COMPOSITION:
			if (strlen(m_pInputBuffer) < (m_cInputMaxLen - 2)) SendMessage(G_hEditWnd, msg, wparam, lparam);
			return TRUE;
		case WM_IME_CHAR:
		case WM_IME_COMPOSITIONFULL:
		case WM_IME_CONTROL:
		case WM_IME_ENDCOMPOSITION:
		case WM_IME_NOTIFY:
		case WM_IME_STARTCOMPOSITION:
		case WM_IME_SETCONTEXT:
		case WM_IME_KEYDOWN:
		case WM_IME_KEYUP:
		case WM_IME_SELECT:
			SendMessage(G_hEditWnd, msg, wparam, lparam);
			return TRUE;
		case WM_KEYUP:
			SendMessage(G_hEditWnd, msg, wparam, lparam);
			return FALSE;
		case WM_KEYDOWN:
			if (wparam == 8) SendMessage(G_hEditWnd, msg, wparam, lparam);
			return FALSE;
	}
	return FALSE;
}

#else // no IME

bool CGame::GetText(HWND hWnd, UINT msg, WPARAM wparam, LPARAM lparam)
{
	int len;
	HIMC hIMC = NULL;
	if (m_pInputBuffer == NULL) return FALSE;
	switch (msg) {
		case WM_IME_COMPOSITION:
			ZeroMemory(m_cEdit, sizeof(m_cEdit));
			if (lparam & GCS_RESULTSTR)
			{
				hIMC = ImmGetContext(hWnd);
				len = ImmGetCompositionString(hIMC, GCS_RESULTSTR, NULL, 0);
				if (len > 4) len = 4;
				ImmGetCompositionString(hIMC, GCS_RESULTSTR, m_cEdit, len);
				ImmReleaseContext(hWnd, hIMC);
				len = strlen(m_pInputBuffer) + strlen(m_cEdit);
				if (len < m_cInputMaxLen) strcpy(m_pInputBuffer + strlen(m_pInputBuffer), m_cEdit);
				ZeroMemory(m_cEdit, sizeof(m_cEdit));
			}
			else if (lparam & GCS_COMPSTR)
			{
				hIMC = ImmGetContext(hWnd);
				len = ImmGetCompositionString(hIMC, GCS_COMPSTR, NULL, 0);
				if (len > 4) len = 4;
				ImmGetCompositionString(hIMC, GCS_COMPSTR, m_cEdit, len);
				ImmReleaseContext(hWnd, hIMC);
				len = strlen(m_pInputBuffer) + strlen(m_cEdit);
				if (len >= m_cInputMaxLen) ZeroMemory(m_cEdit, sizeof(m_cEdit));
			}
			return TRUE;

		case WM_CHAR:
			if (wparam == 8)
			{
				if (strlen(m_pInputBuffer) > 0)
				{
					len = strlen(m_pInputBuffer);
					switch (GetCharKind(m_pInputBuffer, len - 1)) {
						case 1:
							m_pInputBuffer[len - 1] = NULL;
							break;
						case 2:
						case 3:
							m_pInputBuffer[len - 2] = NULL;
							m_pInputBuffer[len - 1] = NULL;
							break;
					}
					ZeroMemory(m_cEdit, sizeof(m_cEdit));
				}
			}
			else if ((wparam != 9) && (wparam != 13) && (wparam != 27))
			{
				len = strlen(m_pInputBuffer);
				if (len >= m_cInputMaxLen - 1) return FALSE;
				m_pInputBuffer[len] = wparam & 0xff;
				m_pInputBuffer[len + 1] = 0;
			}
			return TRUE;
	}
	return FALSE;
}
#endif


int CGame::GetCharKind(char *str, int index)
{
	int kind = 1;
	do
	{
		if (kind == 2) kind = 3;
		else
		{
			if ((unsigned char)*str < 128) kind = 1;
			else kind = 2;
		}
		str++;
		index--;
	} while (index >= 0);
	return kind;
}

void CGame::ShowReceivedString(BOOL bIsHide)
{
	ZeroMemory(G_cTxt, sizeof(G_cTxt));

#ifdef DEF_USING_WIN_IME
	if (G_hEditWnd != NULL) GetWindowText(G_hEditWnd, m_pInputBuffer, (int)m_cInputMaxLen);
	strcpy(G_cTxt, m_pInputBuffer);
#else
	strcpy(G_cTxt, m_pInputBuffer);
	if ((m_cEdit[0] != 0) && (strlen(m_pInputBuffer) + strlen(m_cEdit) + 1 <= m_cInputMaxLen))
	{
		strcpy(G_cTxt + strlen(m_pInputBuffer), m_cEdit);
	}
#endif
	if (bIsHide == TRUE)
	{
		for (unsigned char i = 0; i < strlen(G_cTxt); i++)
			if (G_cTxt[i] != NULL) G_cTxt[i] = '*';
	}

	if ((G_dwGlobalTime % 400) < 210) G_cTxt[strlen(G_cTxt)] = '_';

	PutString(m_iInputX + 1, m_iInputY + 1, G_cTxt, RGB(0, 0, 0));
	PutString(m_iInputX, m_iInputY + 1, G_cTxt, RGB(0, 0, 0));
	PutString(m_iInputX + 1, m_iInputY, G_cTxt, RGB(0, 0, 0));
	PutString(m_iInputX, m_iInputY, G_cTxt, RGB(255, 255, 255));
}

void CGame::ClearInputString()
{
	if (m_pInputBuffer != NULL)	ZeroMemory(m_pInputBuffer, sizeof(m_pInputBuffer));
	ZeroMemory(m_cEdit, sizeof(m_cEdit));
}

void CGame::StartInputString(int sX, int sY, unsigned char iLen, char * pBuffer, BOOL bIsHide)
{
	m_bInputStatus = TRUE;
	m_iInputX = sX;
	m_iInputY = sY;
	m_pInputBuffer = pBuffer;
	ZeroMemory(m_cEdit, sizeof(m_cEdit));
	m_cInputMaxLen = iLen;
#ifdef DEF_USING_WIN_IME
	if (bIsHide == FALSE) G_hEditWnd = CreateWindow(RICHEDIT_CLASS, NULL, WS_POPUP | ES_SELFIME, sX - 5, sY - 1, iLen * 12, 16, G_hWnd, (HMENU)0, G_hInstance, NULL);
	else G_hEditWnd = CreateWindow(RICHEDIT_CLASS, NULL, WS_POPUP | ES_PASSWORD | ES_SELFIME, sX - 5, sY - 1, iLen * 12, 16, G_hWnd, (HMENU)0, G_hInstance, NULL);
	SetWindowText(G_hEditWnd, m_pInputBuffer);
	SendMessage(G_hEditWnd, EM_EXLIMITTEXT, 0, iLen - 1);
	SendMessage(G_hEditWnd, EM_SETLANGOPTIONS, 0, ~IMF_AUTOFONT);
	COMPOSITIONFORM composform;
	composform.dwStyle = CFS_POINT;
	composform.ptCurrentPos.x = sX;
	composform.ptCurrentPos.y = sY;
	HIMC hImc = ImmGetContext(G_hWnd);
	ImmSetCompositionWindow(hImc, &composform);
	int StrLen = strlen(m_pInputBuffer);
	SendMessage(G_hEditWnd, EM_SETSEL, StrLen, StrLen);
#endif
}

void CGame::EndInputString()
{
	m_bInputStatus = FALSE;
	int len = strlen(m_cEdit);

	if (len > 0) {
		m_cEdit[len] = 0;
		strcpy(m_pInputBuffer + strlen(m_pInputBuffer), m_cEdit);
		ZeroMemory(m_cEdit, sizeof(m_cEdit));
	}
}

void CGame::ReceiveString(char *pString)
{
	strcpy(pString, m_pInputBuffer);

#ifdef DEF_USING_WIN_IME
	if (G_hEditWnd != NULL) GetWindowText(G_hEditWnd, pString, (int)m_cInputMaxLen);
#endif
}

void CGame::DrawNewDialogBox(char cType, int sX, int sY, int iFrame, BOOL bIsNoColorKey, BOOL bIsTrans)
{

	if (cType == DEF_SPRID_INTERFACE_ND_GAME2 && iFrame == 1 || cType == DEF_SPRID_INTERFACE_ND_GAME2 && iFrame == 3)
	{
		return;
	}

	DWORD dwTime = G_dwGlobalTime;

	if (m_pSprite[cType] == NULL) return;
	if (bIsNoColorKey == FALSE)
	{
		if (bIsTrans == TRUE)
			m_pSprite[cType]->PutTransSprite2(sX, sY, iFrame, dwTime);
		else m_pSprite[cType]->PutSpriteFast(sX, sY, iFrame, dwTime);
	}
	else m_pSprite[cType]->PutSpriteFastNoColorKey(sX, sY, iFrame, dwTime);
}

void CGame::DlgBoxClick_Commander(int msX, int msY) // Snoopy: Fixed for 351
{
	short sX, sY, tX, tY;
	double d1, d2, d3;
	if (m_bIsCrusadeMode == FALSE) return;
	sX = m_stDialogBoxInfo[36].sX;
	sY = m_stDialogBoxInfo[36].sY;

	switch (m_stDialogBoxInfo[36].cMode) {
		case 0: // Main
			if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[36].cMode = 1;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DecriptString(m_cMapName);
				if (DecriptInt(m_iTeleportLocX) == -1) {
					SetTopMsg(m_pGameMsgList[15]->m_pMsg, 5);
				}
				else if (strcmp(m_cMapName, m_cTeleportMapName) == 0) {
					SetTopMsg(m_pGameMsgList[16]->m_pMsg, 5);
				}
				else {
					m_stDialogBoxInfo[36].cMode = 2;
					PlaySound('E', 14, 5);
				}
				EncriptString(m_cMapName);
			}
			if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 46 + 100) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[36].cMode = 3;
				m_stDialogBoxInfo[36].sV1 = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 46 + 150) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[36].cMode = 4;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 808, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 1: // Set TP
			if ((msX >= sX + 15) && (msX <= sX + 15 + 278) && (msY >= sY + 60) && (msY <= sY + 60 + 272))
			{
				d1 = (double)(msX - (sX + 15));
				d2 = (double)(524.0f); //(752.0f);
				d3 = (d2*d1) / 279.0f;
				tX = (int)d3;
				d1 = (double)(msY - (sY + 60));
				d2 = (double)(524.0f); //(680.0f);
				d3 = (d2*d1) / (280.0f); //253.0f;
				tY = (int)d3;
				if (tX < 30) tX = 30;
				if (tY < 30) tY = 30;
				if (tX > 494) tX = 494;//722;
				if (tY > 494) tY = 494;//650;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SETGUILDTELEPORTLOC, NULL, tX, tY, NULL, "middleland");
				m_stDialogBoxInfo[36].cMode = 0;
				PlaySound('E', 14, 5);
				_RequestMapStatus("middleland", 1);
			}
			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[36].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 809, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 2: // Use TP
			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				if ((timeGetTime() - m_dwDamagedTime) < 10000) {
					wsprintf(G_cTxt, RECALL_IN_CRUSADE_10_SECS);//"Tp cannot be used until 10 seconds after taking damage."
					AddEventList(G_cTxt, 10);
					return;
				}
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GUILDTELEPORT, NULL, NULL, NULL, NULL, NULL);
				DisableDialogBox(36);
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[36].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 810, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 3: // Summon Unit
			if (DecriptBool(m_bAresden) == TRUE)
			{
				if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 3000)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 47, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 50 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 2000)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 46, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 100 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 1000)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 43, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 150 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 1500)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 51, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
			}
			else if (DecriptBool(m_bAresden) == FALSE)
			{
				if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 3000)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 45, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 50 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 2000)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 44, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 100 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 1000)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 43, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 150 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 1500)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 51, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
			}
			else if (Assasain)
			{
				if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 3000)
					{
						switch (iDice(1, 2))
						{
							case 1:
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 45, 1, m_stDialogBoxInfo[36].sV1, NULL);
								break;
							case 2:
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 47, 1, m_stDialogBoxInfo[36].sV1, NULL);
								break;
							default: break;
						}
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 50 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 2000)
					{
						switch (iDice(1, 2))
						{
							case 1:
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 46, 1, m_stDialogBoxInfo[36].sV1, NULL);
								break;
							case 2:
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 44, 1, m_stDialogBoxInfo[36].sV1, NULL);
								break;
							default: break;
						}
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 100 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 1000)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 43, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
				if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 150 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 1500)
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 51, 1, m_stDialogBoxInfo[36].sV1, NULL);
						PlaySound('E', 14, 5);
						DisableDialogBox(36);
					}
				}
			}

			if ((msX >= sX + 20) && (msX <= sX + 380) && (msY > sY + 140) && (msY < sY + 160))
			{
				m_stDialogBoxInfo[36].sV1 = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20) && (msX <= sX + 380) && (msY > sY + 160) && (msY < sY + 175))
			{
				m_stDialogBoxInfo[36].sV1 = 1;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[36].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 811, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 4: // Set constr
			if ((msX >= sX + 15) && (msX <= sX + 15 + 278)
				&& (msY >= sY + 60) && (msY <= sY + 60 + 272))
			{
				d1 = (double)(msX - (sX + 15));
				d2 = (double)(524.0);//(752.0f);
				d3 = (d2*d1) / 279.0f;
				tX = (int)d3;
				d1 = (double)(msY - (sY + 60));
				d2 = (double)(524.0);//(680.0f);
				d3 = (d2*d1) / (280.0);//253.0f;
				tY = (int)d3;
				if (tX < 30) tX = 30;
				if (tY < 30) tY = 30;
				if (tX > 494) tX = 494;//722;
				if (tY > 494) tY = 494;//650;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SETGUILDCONSTRUCTLOC, NULL, tX, tY, NULL, "middleland");
				m_stDialogBoxInfo[36].cMode = 0;
				PlaySound('E', 14, 5);
				_RequestMapStatus("middleland", 1);
			}
			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[36].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 812, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;
	}
}


void CGame::DlgBoxClick_Constructor(int msX, int msY)  // Snoopy: Fixed for 351
{
	short sX, sY;
	if (m_bIsCrusadeMode == FALSE) return;
	sX = m_stDialogBoxInfo[37].sX;
	sY = m_stDialogBoxInfo[37].sY;

	switch (m_stDialogBoxInfo[37].cMode) {
		case 0: // Main
			if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				if (DecriptInt(m_iConstructLocX) == -1)
				{
					SetTopMsg(m_pGameMsgList[14]->m_pMsg, 5);
				}
				else
				{
					m_stDialogBoxInfo[37].cMode = 1;
					PlaySound('E', 14, 5);
				}
			}
			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DecriptString(m_cMapName);
				if (DecriptInt(m_iTeleportLocX) == -1) {
					SetTopMsg(m_pGameMsgList[15]->m_pMsg, 5);
				}
				else if (strcmp(m_cMapName, m_cTeleportMapName) == 0) {
					SetTopMsg(m_pGameMsgList[16]->m_pMsg, 5);
				}
				else {
					m_stDialogBoxInfo[37].cMode = 2;
					PlaySound('E', 14, 5);
				}
				EncriptString(m_cMapName);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 805, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 1: // Choose building
			if (!Assasain)
			{
				if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 38, 1, m_stDialogBoxInfo[36].sV1, NULL);
					PlaySound('E', 14, 5);
					DisableDialogBox(37);
				}
			}
			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 50 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 39, 1, m_stDialogBoxInfo[36].sV1, NULL);
				PlaySound('E', 14, 5);
				DisableDialogBox(37);
			}
			if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 100 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 36, 1, m_stDialogBoxInfo[36].sV1, NULL);
				PlaySound('E', 14, 5);
				DisableDialogBox(37);
			}
			if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 150 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SUMMONWARUNIT, NULL, 37, 1, m_stDialogBoxInfo[36].sV1, NULL);
				PlaySound('E', 14, 5);
				DisableDialogBox(37);
			}

			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 322) && (msY <= sY + 322 + 52))
			{
				m_stDialogBoxInfo[37].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 322) && (msY <= sY + 322 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 806, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 2: // Use TP
			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				if ((timeGetTime() - m_dwDamagedTime) < 10000) {
					wsprintf(G_cTxt, RECALL_IN_CRUSADE_10_SECS);//"Tp cannot be used until 10 seconds after taking damage."
					AddEventList(G_cTxt, 10);
					return;
				}

				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GUILDTELEPORT, NULL, NULL, NULL, NULL, NULL);
				DisableDialogBox(37);
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[37].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 807, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;
	}
}


void CGame::DlgBoxClick_Soldier(int msX, int msY) // Snoopy: Fixed for 351
{
	short sX, sY;
	if (m_bIsCrusadeMode == FALSE) return;
	sX = m_stDialogBoxInfo[38].sX;
	sY = m_stDialogBoxInfo[38].sY;

	switch (m_stDialogBoxInfo[38].cMode) {
		case 0: // Main dlg
			if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DecriptString(m_cMapName);
				if (DecriptInt(m_iTeleportLocX) == -1) {
					SetTopMsg(m_pGameMsgList[15]->m_pMsg, 5);
				}
				else if (strcmp(m_cMapName, m_cTeleportMapName) == 0) {
					SetTopMsg(m_pGameMsgList[16]->m_pMsg, 5);
				}
				else {
					m_stDialogBoxInfo[38].cMode = 1;
					PlaySound('E', 14, 5);
				}
				EncriptString(m_cMapName);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 803, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 1: // Use TP
			if ((msX >= sX + 20) && (msX <= sX + 20 + 46 + 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				if ((timeGetTime() - m_dwDamagedTime) < 10000) {
					wsprintf(G_cTxt, RECALL_IN_CRUSADE_10_SECS);//"Tp cannot be used until 10 seconds after taking damage."
					AddEventList(G_cTxt, 10);
					return;
				}
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GUILDTELEPORT, NULL, NULL, NULL, NULL, NULL);
				DisableDialogBox(38);
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_stDialogBoxInfo[38].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				DisableDialogBox(18);
				EnableDialogBox(18, 804, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;
	}
}

void CGame::SetCameraShakingEffect(short sDist, int iMul)
{
	return;
	int iDegree;

	iDegree = 5 - sDist;
	if (iDegree <= 0) iDegree = 0;
	iDegree *= 2;

	if (iMul != 0) iDegree *= iMul;

	if (iDegree <= 2) return;

	m_iCameraShakingDegree = iDegree;
}

void CGame::MeteorStrikeComing(int iCode)
{
	switch (iCode) {
		case 1: //
			SetTopMsg(m_pGameMsgList[0]->m_pMsg, 5);
			break;
		case 2: //
			SetTopMsg(m_pGameMsgList[10]->m_pMsg, 10);
			break;
		case 3: //
			SetTopMsg(m_pGameMsgList[91]->m_pMsg, 5);
			break;
		case 4: //
			SetTopMsg(m_pGameMsgList[11]->m_pMsg, 10);
			break;
	}
}

void CGame::DrawObjectFOE(int ix, int iy, int iFrame, short sOwnerType)
{
	if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) < 0) // red crusade circle
	{
		if (iFrame <= 4) m_pEffectSpr[38]->PutTransSprite(ix, iy, iFrame, G_dwGlobalTime);
	}
}

void CGame::SetTopMsg(char *pString, unsigned char iLastSec)
{
	ZeroMemory(m_cTopMsg, sizeof(m_cTopMsg));
	strcpy(m_cTopMsg, pString);

	m_iTopMsgLastSec = iLastSec;
	m_dwTopMsgTime = G_dwGlobalTime;
}

void CGame::DrawTopMsg()
{
	int x;
	if (c_reso->IsResolution() == C800x600)
	{
		x = 799;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		x = 1023;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		x = 639;
	}
	if (strlen(m_cTopMsg) == 0) return;
	m_DDraw.DrawShadowBox(0, 0, x, 30);

	if ((((G_dwGlobalTime - m_dwTopMsgTime) / 250) % 2) == 0)
		PutAlignedString(0, x, 10, m_cTopMsg, 255, 255, 255);

	if (G_dwGlobalTime > (m_iTopMsgLastSec * 1000 + m_dwTopMsgTime)) {
		ZeroMemory(m_cTopMsg, sizeof(m_cTopMsg));
	}
}

//Barra Grande LaloRamos
void CGame::DrawDialogBox_IconPannel(short msX, short msY)
{
	if (BigBar != 0) return;
	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	int iMaxPoint, iBarWidth;

	sX = m_stDialogBoxInfo[30].sX;
	sY = m_stDialogBoxInfo[30].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, sX, sY, 14, FALSE, m_bDialogTrans);

	//	if ((362 < msX)	&& (404 > msX) && (434 < msY) && (475 > msY)) {
	//		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(362, 434, 16, dwTime);
	//	}

		//Boton modo atake!
	if ((sX + 130 <= msX) && (sX + 147 >= msX) && (sY + 20 <= msY) && (sY + 37 >= msY))
	{
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368, 440, 4, FALSE, m_bDialogTrans);
		if (DecriptBool(m_bIsSafeAttackMode))
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368, 440, 4, FALSE, m_bDialogTrans);
		else
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368, 440, 5, FALSE, m_bDialogTrans);
	}
	else
	{
		if (DecriptBool(m_bIsSafeAttackMode))
		{
			if (DecriptBool(m_bIsCombatMode))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368, 440, 4, FALSE, m_bDialogTrans);
		}
		else
			if (DecriptBool(m_bIsCombatMode))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368, 440, 5, FALSE, m_bDialogTrans);
	}

	// CLEROTH - LU
	if (DecriptInt(m_iLU_Point) > 0) {
		if ((322 <= msX) && (355 >= msX) && (434 < msY) && (475 > msY))
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322, 434, 17, dwTime);
		else m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322, 434, 18, dwTime);
	}

	//EVENT LaloRamos
	if (DecriptBool(m_bAresden) == TRUE)
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 322, 434, 2, FALSE, m_bDialogTrans);
	else
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322, 434, 15, dwTime);//15

	if (DecriptBool(m_bAresden) == TRUE)
	{
		if ((322 <= msX) && (355 >= msX) && (434 < msY) && (475 > msY))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322, 434, 1, dwTime);//0// Event
		}
	}
	else
	{
		if ((322 <= msX) && (355 >= msX) && (434 < msY) && (475 > msY))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322, 434, 0, dwTime);//1// Event
		}
	}
	if ((msY > 436) && (msY < 478))
	{
		if ((msX > 410) && (msX < 447))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(412, 434, 6, dwTime);// Character
		}
		if ((msX > 447) && (msX < 484))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(449, 434, 7, dwTime);// Inventory
		}
		if ((msX > 484) && (msX < 521))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(486, 434, 8, dwTime);// Magic
		}
		if ((msX > 521) && (msX < 558))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(523, 434, 9, dwTime);// Skill
		}
		if ((msX > 558) && (msX < 595))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(560, 434, 10, dwTime);// History
		}
		if ((msX > 595) && (msX < 631))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(597, 434, 11, dwTime);// System Menu
		}
	}

	if (((msX > 144) && (msX < 317) && (msY > 434) && (msY < 477)) || (m_bCtrlPressed))
	{
		int iLev = 0;
		int iCurExp = iGetLevelExp(DecriptInt(m_iLevel));
		int iNextExp = iGetLevelExp(DecriptInt(m_iLevel) + 1);

#ifdef DEF_4XXP_PER_LVL
		if (DecriptInt(m_iLevel) > 139)
		{
			iLev = (DecriptInt(m_iLevel) - 139) * 3;
			iNextExp = iGetLevelExp(DecriptInt(m_iLevel) + iLev);
		}
#endif

		if (m_iExp < iNextExp)
		{
			iNextExp = iNextExp - iCurExp;
			if (m_iExp > iCurExp) iCurExp = m_iExp - iCurExp; // curxp: partie faite
			else iCurExp = 0; // below current lvl !
			short sPerc = 0;
			if (iCurExp > 200000) sPerc = short(((iCurExp >> 4) * 10000) / (iNextExp >> 4));
			else sPerc = (short)((iCurExp * 10000) / iNextExp);
			wsprintf(G_cTxt, "Rest Exp: %d(%d.%02d%%)", iNextExp - iCurExp, sPerc / 100, sPerc % 100);
		}
		else
		{
			wsprintf(G_cTxt, "Exp: %d(100.00%)", m_iExp); // "Exp: 151000/150000"
		}
	}
	else wsprintf(G_cTxt, "%s(%d,%d)", m_cMapMessage, m_sPlayerX, m_sPlayerY);
	PutAlignedString(135, 328, 456, G_cTxt, 200, 200, 120);

	//LaloRamos - New Critical Ver lalito
	if (m_cSkillMastery[_iGetWeaponSkillType()] == 100)
	{
		if (m_iSuperAttackLeft > 0)
		{
			if (GetAsyncKeyState(VK_MENU) >> 15)
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutTransSprite(368, 440, 3, dwTime);
			//		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368, 440, 3, FALSE, m_bDialogTrans);
			wsprintf(G_cTxt, "%d", m_iSuperAttackLeft);
			if (m_iSuperAttackLeft < 10)
				PutString_SprFont(sX + 368, sY + 31, G_cTxt, 195, 195, 195);//, FALSE, -1);//137 lalo PutString_SprFont3 195, 195, 195,
			else
				PutString_SprFont(sX + 368, sY + 31, G_cTxt, 195, 195, 195);//, FALSE, -1);//134 lalo PutString_SprFont3 195, 195, 195,
		}
	}
	else
	{
		if (m_iSuperAttackLeft > 0)
		{
			wsprintf(G_cTxt, "%d", m_iSuperAttackLeft);//132/130
			if (m_iSuperAttackLeft < 10)
				PutString_SprFont(sX + 368, sY + 31, G_cTxt, 0, 0, 0);//, FALSE, -1);//137 lalo PutString_SprFont3
			else
				PutString_SprFont(sX + 368, sY + 31, G_cTxt, 0, 0, 0);//, FALSE, -1);//134 lalo PutString_SprFont3
		}
	}

	// HP bar
	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) / 2; // me hace muy maly si
	else				   iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) / 2;
	if (DecriptInt(m_iHP) > iMaxPoint) m_iHP = EncriptInt(iMaxPoint);
	iBarWidth = 101 - (DecriptInt(m_iHP) * 101) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 101) iBarWidth = 101;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(23, 437, 12, iBarWidth, m_dwCurTime);

	wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iHP));
	if (m_bIsPoisoned)
	{
		PutString_SprNum(85, 441, G_cTxt, m_wR[5] * 11, m_wG[5] * 11, m_wB[5] * 11);
		PutString_SprFont3(35, 440, "Poisoned", m_wR[5] * 8, m_wG[5] * 8, m_wB[5] * 8, TRUE, 2);
	}
	else PutString_SprNum(85, 441, G_cTxt, 200, 100, 100);

	//MP bar
	iMaxPoint = (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) * 2 + DecriptInt(m_iLevel) * 2 + (m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) / 2;
	if (DecriptInt(m_iMP) > iMaxPoint) m_iMP = EncriptInt(iMaxPoint);
	iBarWidth = 101 - (DecriptInt(m_iMP) * 101) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 101) iBarWidth = 101;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(23, 459, 12, iBarWidth, m_dwCurTime);
	wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iMP));
	PutString_SprNum(85, 463, G_cTxt, 100, 100, 200);

	// SP bar
	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) * 2;
	else				   iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) * 2;
	if (DecriptInt(m_iSP) > iMaxPoint) m_iSP = EncriptInt(iMaxPoint);
	iBarWidth = 167 - (DecriptInt(m_iSP) * 167) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 167) iBarWidth = 167;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(147, 435, 13, iBarWidth, m_dwCurTime);

		if (bPfm) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 133, 2, dwTime);
		}
		if (bZerk) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 176, 1, dwTime);
		}
		if (bInvi) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 219, 0, dwTime);
		}
		if (bShield) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 262, 4, dwTime);
		}
		if (bPfa) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 305, 3, dwTime);
		}
		if (m_stMCursor.sCursorFrame == 4) {
			bInvi = false;
		}
}
//Barra nueva resolucion
void CGame::DrawDialogBox_IconPannel800x600(short msX, short msY)
{
	if (BigBar != 0) return;
	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	int iMaxPoint, iBarWidth;
	int resy, resx, resi;

	resi = 0;
	resy = 0;
	resx = 0;
	int addx = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		resi = 120;
		resy = 120;
		resx = 80;
		addx = 10;
	}

	sX = m_stDialogBoxInfo[30].sX;
	sY = m_stDialogBoxInfo[30].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, sX, sY, 14, FALSE, m_bDialogTrans);

	//Boton modo atake!
	if ((362 + resx + addx < msX) && (404 + resx + addx > msX) && (434 + resy < msY) && (475 + resy > msY)) //{ // Combat Mode Icon
	{
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 2, 440 + resy, 4, FALSE, m_bDialogTrans);
		if (DecriptBool(m_bIsSafeAttackMode))
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 2, 440 + resy, 4, FALSE, m_bDialogTrans);
		else
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 1, 440 + resy, 5, FALSE, m_bDialogTrans);
	}
	else
	{
		if (DecriptBool(m_bIsSafeAttackMode))
		{
			if (DecriptBool(m_bIsCombatMode))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 2, 440 + resy, 4, FALSE, m_bDialogTrans);
		}
		else
			if (DecriptBool(m_bIsCombatMode))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 1, 440 + resy, 5, FALSE, m_bDialogTrans);
	}

	// CLEROTH - LU
	if (DecriptInt(m_iLU_Point) > 0) {
		if ((322 + resx + addx <= msX) && (355 + resx + addx >= msX) && (434 + resy < msY) && (475 + resy > msY))
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx + 1, 434 + resy, 17, dwTime);
		else m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 434 + resy, 18, dwTime);
	}

	//EVENT LaloRamos
	if (DecriptBool(m_bAresden) == TRUE)
		//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 322 + resx + addx + 1, 434 + resy, 2, FALSE, m_bDialogTrans);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 322 + resx + addx + 1, 433 + resy, 2, FALSE, m_bDialogTrans);
	else
		//m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 434 + resy, 15, dwTime);//15
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 433 + resy, 15, dwTime);//15

	if (DecriptBool(m_bAresden) == TRUE)
	{
		if ((322 + resx + addx <= msX) && (355 + resx + addx >= msX) && (434 + resy < msY) && (475 + resy > msY))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx + 1, 434 + resy, 1, dwTime);//0// Event
		}
	}
	else
	{
		if ((322 + resx + addx <= msX) && (355 + resx + addx >= msX) && (434 + resy < msY) && (475 + resy > msY))
		{
		//	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 434 + resy, 0, dwTime);//1// Event
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 433 + resy, 0, dwTime);//1// Event
		}
	}
	//if ((msY > 436) && (msY < 478))
	if ((msY > 436 + resy) && (msY < 478 + resy)) // Menu Icons
	{
		if ((msX > 410 + resx + addx) && (msX < 447 + resx + addx)) { // Character    
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(410 + resx + addx + 2, 434 + resy, 6, dwTime);
		}
		if ((msX > 447 + resx + addx) && (msX < 484 + resx + addx)) { // Inventory
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(447 + resx + addx + 1, 434 + resy, 7, dwTime);
		}
		if ((msX > 484 + resx + addx) && (msX < 521 + resx + addx)) { // Magic
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(484 + resx + addx, 434 + resy, 8, dwTime);
		}
		if ((msX > 521 + resx + addx) && (msX < 558 + resx + addx)) { // Skill
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(521 + resx + addx + 1, 434 + resy, 9, dwTime);
		}
		if ((msX > 558 + resx + addx) && (msX < 595 + resx + addx)) { // History
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(558 + resx + addx, 434 + resy, 10, dwTime);
		}
		if ((msX > 595 + resx + addx) && (msX < 631 + resx + addx)) { // System Menu
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(595 + resx + addx + 1, 434 + resy, 11, dwTime);
		}
	}

	if (((msX > 144 + resx + addx) && (msX < 317 + resx + addx) && (msY > 434 + resy) && (msY < 477 + resy)) || (m_bCtrlPressed))
	{
		int iLev = 0;
		int iCurExp = iGetLevelExp(DecriptInt(m_iLevel));
		int iNextExp = iGetLevelExp(DecriptInt(m_iLevel) + 1);

#ifdef DEF_4XXP_PER_LVL
		if (DecriptInt(m_iLevel) > 139)
		{
			iLev = (DecriptInt(m_iLevel) - 139) * 3;
			iNextExp = iGetLevelExp(DecriptInt(m_iLevel) + iLev);
		}
#endif

		if (m_iExp < iNextExp)
		{
			iNextExp = iNextExp - iCurExp;
			if (m_iExp > iCurExp) iCurExp = m_iExp - iCurExp; // curxp: partie faite
			else iCurExp = 0; // below current lvl !
			short sPerc = 0;
			if (iCurExp > 200000) sPerc = short(((iCurExp >> 4) * 10000) / (iNextExp >> 4));
			else sPerc = (short)((iCurExp * 10000) / iNextExp);
			wsprintf(G_cTxt, "Rest Exp: %d(%d.%02d%%)", iNextExp - iCurExp, sPerc / 100, sPerc % 100);
		}
		else
		{
			wsprintf(G_cTxt, "Exp: %d(100.00%)", m_iExp); // "Exp: 151000/150000"
			iNextExp = iNextExp - iCurExp;
			if (m_iExp > iCurExp) iCurExp = m_iExp - iCurExp; // curxp: partie faite
			else iCurExp = 0; // below current lvl !
			short sPerc = 0;
			if (iCurExp > 200000) sPerc = short(((iCurExp >> 4) * 10000) / (iNextExp >> 4));
			else sPerc = (short)((iCurExp * 10000) / iNextExp);
		}
	}
	else wsprintf(G_cTxt, "%s(%d,%d)", m_cMapMessage, m_sPlayerX, m_sPlayerY);
	PutAlignedString(135 + resx, 328 + resx, 456 + resy, G_cTxt, 200, 200, 120);

	//LaloRamos - New Critical Ver lalito
	if (m_cSkillMastery[_iGetWeaponSkillType()] == 100)
	{
		if (m_iSuperAttackLeft > 0)
		{
			if (GetAsyncKeyState(VK_MENU) >> 15)
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutTransSprite(368 + resx + 7, 440 + resi, 3, dwTime);//dwTime//m_dwCurTime
			wsprintf(G_cTxt, "%d", m_iSuperAttackLeft);
			if (m_iSuperAttackLeft < 10)
				PutString_SprFont(370 + resx + 10, 454 + resi, G_cTxt, 195, 195, 195);	//380
			else
				PutString_SprFont(370 + resx + 5, 454 + resi, G_cTxt, 195, 195, 195);
		}
	}
	else
	{
		if (m_iSuperAttackLeft > 0)
		{
			wsprintf(G_cTxt, "%d", m_iSuperAttackLeft);//132/130
			if (m_iSuperAttackLeft < 10)
				PutString_SprFont(370 + resx + 10, 454 + resi, G_cTxt, 0, 0, 0);//, FALSE, -1);//137 lalo PutString_SprFont3
			else		
				PutString_SprFont(370 + resx + 5, 454 + resi, G_cTxt, 0, 0, 0);//, FALSE, -1);//137 lalo PutString_SprFont3		
		}
	}

	// HP bar
	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) / 2;
	else				   iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) / 2;
	if (DecriptInt(m_iHP) > iMaxPoint) m_iHP = EncriptInt(iMaxPoint);
	iBarWidth = 101 - (DecriptInt(m_iHP) * 101) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 101) iBarWidth = 101;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(23 + resx, 437 + resy, 12, iBarWidth, m_dwCurTime);

	wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iHP));
	if (m_bIsPoisoned)
	{
		PutString_SprNum(85 + resx, 441 + resy, G_cTxt, m_wR[5] * 11, m_wG[5] * 11, m_wB[5] * 11);
		PutString_SprFont3(35 + resx, 439 + resy, "Poisoned", m_wR[5] * 8, m_wG[5] * 8, m_wB[5] * 8, TRUE, 2);
	}
	else PutString_SprNum(80 + resx, 441 + resy, G_cTxt, 200, 100, 100);

	//MP bar
	iMaxPoint = (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) * 2 + DecriptInt(m_iLevel) * 2 + (m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) / 2;
	if (DecriptInt(m_iMP) > iMaxPoint) m_iMP = EncriptInt(iMaxPoint);
	iBarWidth = 101 - (DecriptInt(m_iMP) * 101) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 101) iBarWidth = 101;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(23 + resx, 459 + resy, 12, iBarWidth, m_dwCurTime);

	wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iMP));
	PutString_SprNum(80 + resx, 463 + resy, G_cTxt, 100, 100, 200);

	// SP bar
	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) * 2;
	else				   iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) * 2;
	if (DecriptInt(m_iSP) > iMaxPoint) m_iSP = EncriptInt(iMaxPoint);
	iBarWidth = 167 - (DecriptInt(m_iSP) * 167) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 167) iBarWidth = 167;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(147 + resx, 434 + resy, 13, iBarWidth, m_dwCurTime);

	if (bPfm) {
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 133, 2, dwTime);
	}
	if (bZerk) {
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 176, 1, dwTime);
	}
	if (bInvi) {
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 219, 0, dwTime);
	}
	if (bShield) {
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 262, 4, dwTime);
	}
	if (bPfa) {
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 305, 3, dwTime);
	}
	if (m_stMCursor.sCursorFrame == 4) {
		bInvi = false;
	}
}
//Click en barra nueva resolucion
void CGame::DlgBoxClick_IconPannel800x600(short msX, short msY)
{
		if (BigBar != 0) return;

		short sX, sY;
		int resi = 0;
		int resx = 0;
		int addx = 0;

		if (c_reso->IsResolution() == C800x600)
		{
			resi = 120;
			resx = 80;
			addx = 10;
		}

		sX = m_stDialogBoxInfo[30].sX;
		sY = m_stDialogBoxInfo[30].sY;

		if ((322 + resx + addx <= msX) && (355 + resx + addx >= msX) && (434 + resi < msY) && (475 + resi > msY))
		{

			if (m_bIsCrusadeMode == TRUE)
			{
				switch (DecriptInt(m_iCrusadeDuty)) {
				case 1: // Fighter
					EnableDialogBox(38, NULL, NULL, NULL);
					break;

				case 2: // Constructor
					EnableDialogBox(37, NULL, NULL, NULL);
					break;

				case 3: // Commander
					EnableDialogBox(36, NULL, NULL, NULL);
					break;

				default:
					break;
				}
			}
			else
			{
				//Event Button
				if (m_bIsDialogEnabled[55] == TRUE)
					DisableDialogBox(55);
				else EnableDialogBox(55, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
		}

		if ((362 + resx + addx < msX) && (404 + resx + addx > msX) && (434 + resi < msY) && (475 + resi > msY)) {
			// Combat Mode Toggle
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 410 + resx + addx) && (msX < 447 + resx + addx)) { // Character    
			if (m_bIsDialogEnabled[1] == TRUE)
				DisableDialogBox(1);
			else EnableDialogBox(1, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 447 + resx + addx) && (msX < 484 + resx + addx)) { // Inventory
			if (m_bIsDialogEnabled[2] == TRUE)
				DisableDialogBox(2);
			else EnableDialogBox(2, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 484 + resx + addx) && (msX < 521 + resx + addx)) { // Magic
			if (m_bIsDialogEnabled[3] == TRUE)
				DisableDialogBox(3);
			else EnableDialogBox(3, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 521 + resx + addx) && (msX < 558 + resx + addx)) { // Skill
			if (m_bIsDialogEnabled[15] == TRUE)
				DisableDialogBox(15);
			else EnableDialogBox(15, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 558 + resx + addx) && (msX < 595 + resx + addx)) { // History
			if (m_bIsDialogEnabled[10] == TRUE)
				DisableDialogBox(10);
			else EnableDialogBox(10, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 595 + resx + addx) && (msX < 631 + resx + addx)) { // System Menu
			if (m_bIsDialogEnabled[19] == TRUE)
				DisableDialogBox(19);
			else EnableDialogBox(19, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}
	}	


//Barra Grande 1024x768
//Barra nueva resolucion
	void CGame::DrawDialogBox_IconPannel1024x768(short msX, short msY)
	{
		if (BigBar != 0) return;
		short sX, sY;
		DWORD dwTime = m_dwCurTime;
		int iMaxPoint, iBarWidth;
		int resy, resx, resi;

		resi = 0;
		resy = 0;
		resx = 0;
		int addx = 0;

		if (c_reso->IsResolution() == C1024x768)
		{
			resi = 286;
			resy = 286;
			resx = 195;
			addx = 0;
		}

		sX = m_stDialogBoxInfo[30].sX;
		sY = m_stDialogBoxInfo[30].sY;

		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, sX, sY, 14, FALSE, m_bDialogTrans);

		//Boton modo atake!
		if ((362 + resx + addx < msX) && (404 + resx + addx > msX) && (434 + resy < msY) && (475 + resy > msY)) //{ // Combat Mode Icon
		{
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 2, 440 + resy, 4, FALSE, m_bDialogTrans);
			if (DecriptBool(m_bIsSafeAttackMode))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 2, 440 + resy, 4, FALSE, m_bDialogTrans);
			else
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 1, 440 + resy, 5, FALSE, m_bDialogTrans);
		}
		else
		{
			if (DecriptBool(m_bIsSafeAttackMode))
			{
				if (DecriptBool(m_bIsCombatMode))
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 2, 440 + resy, 4, FALSE, m_bDialogTrans);
			}
			else
				if (DecriptBool(m_bIsCombatMode))
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 368 + resx + addx - 1, 440 + resy, 5, FALSE, m_bDialogTrans);
		}

		// CLEROTH - LU
		if (DecriptInt(m_iLU_Point) > 0) {
			if ((322 + resx + addx <= msX) && (355 + resx + addx >= msX) && (434 + resy < msY) && (475 + resy > msY))
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx + 1, 434 + resy, 17, dwTime);
			else m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 434 + resy, 18, dwTime);
		}

		//EVENT LaloRamos
		if (DecriptBool(m_bAresden) == TRUE)
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 322 + resx + addx + 1, 434 + resy, 2, FALSE, m_bDialogTrans);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL, 322 + resx + addx + 1, 433 + resy, 2, FALSE, m_bDialogTrans);
		else
			//m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 434 + resy, 15, dwTime);//15
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 433 + resy, 15, dwTime);//15

		if (DecriptBool(m_bAresden) == TRUE)
		{
			if ((322 + resx + addx <= msX) && (355 + resx + addx >= msX) && (434 + resy < msY) && (475 + resy > msY))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx + 1, 434 + resy, 1, dwTime);//0// Event
			}
		}
		else
		{
			if ((322 + resx + addx <= msX) && (355 + resx + addx >= msX) && (434 + resy < msY) && (475 + resy > msY))
			{
				//	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 434 + resy, 0, dwTime);//1// Event
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(322 + resx + addx, 433 + resy, 0, dwTime);//1// Event
			}
		}
		//if ((msY > 436) && (msY < 478))
		if ((msY > 436 + resy) && (msY < 478 + resy)) // Menu Icons
		{
			if ((msX > 410 + resx + addx) && (msX < 447 + resx + addx)) { // Character    
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(410 + resx + addx, 435 + resy, 6, dwTime);
			}
			if ((msX > 447 + resx + addx) && (msX < 484 + resx + addx)) { // Inventory
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(447 + resx + addx - 1, 435 + resy, 7, dwTime);
			}
			if ((msX > 484 + resx + addx) && (msX < 521 + resx + addx)) { // Magic
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(483 + resx + addx, 435 + resy, 8, dwTime);
			}
			if ((msX > 521 + resx + addx) && (msX < 558 + resx + addx)) { // Skill
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(521 + resx + addx, 435 + resy, 9, dwTime);
			}
			if ((msX > 558 + resx + addx) && (msX < 595 + resx + addx)) { // History
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(558 + resx + addx, 435 + resy, 10, dwTime);
			}
			if ((msX > 595 + resx + addx) && (msX < 631 + resx + addx)) { // System Menu
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFast(595 + resx + addx, 435 + resy, 11, dwTime);
			}
		}

		if (((msX > 144 + resx + addx) && (msX < 317 + resx + addx) && (msY > 434 + resy) && (msY < 477 + resy)) || (m_bCtrlPressed))
		{
			int iLev = 0;
			int iCurExp = iGetLevelExp(DecriptInt(m_iLevel));
			int iNextExp = iGetLevelExp(DecriptInt(m_iLevel) + 1);

#ifdef DEF_4XXP_PER_LVL
			if (DecriptInt(m_iLevel) > 139)
			{
				iLev = (DecriptInt(m_iLevel) - 139) * 3;
				iNextExp = iGetLevelExp(DecriptInt(m_iLevel) + iLev);
			}
#endif

			if (m_iExp < iNextExp)
			{
				iNextExp = iNextExp - iCurExp;
				if (m_iExp > iCurExp) iCurExp = m_iExp - iCurExp; // curxp: partie faite
				else iCurExp = 0; // below current lvl !
				short sPerc = 0;
				if (iCurExp > 200000) sPerc = short(((iCurExp >> 4) * 10000) / (iNextExp >> 4));
				else sPerc = (short)((iCurExp * 10000) / iNextExp);
				wsprintf(G_cTxt, "Rest Exp: %d(%d.%02d%%)", iNextExp - iCurExp, sPerc / 100, sPerc % 100);
			}
			else
			{
				wsprintf(G_cTxt, "Exp: %d(100.00%)", m_iExp); // "Exp: 151000/150000"
				iNextExp = iNextExp - iCurExp;
				if (m_iExp > iCurExp) iCurExp = m_iExp - iCurExp; // curxp: partie faite
				else iCurExp = 0; // below current lvl !
				short sPerc = 0;
				if (iCurExp > 200000) sPerc = short(((iCurExp >> 4) * 10000) / (iNextExp >> 4));
				else sPerc = (short)((iCurExp * 10000) / iNextExp);
			}
		}
		else wsprintf(G_cTxt, "%s(%d,%d)", m_cMapMessage, m_sPlayerX, m_sPlayerY);
		PutAlignedString(135 + resx, 328 + resx, 456 + resy, G_cTxt, 200, 200, 120);

		//LaloRamos - New Critical Ver lalito
		if (m_cSkillMastery[_iGetWeaponSkillType()] == 100)
		{
			if (m_iSuperAttackLeft > 0)
			{
				if (GetAsyncKeyState(VK_MENU) >> 15)
					m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutTransSprite(368 + resx, 440 + resi, 3, dwTime);//dwTime//m_dwCurTime
				wsprintf(G_cTxt, "%d", m_iSuperAttackLeft);
				if (m_iSuperAttackLeft < 10)
					PutString_SprFont(370 + resx + 10, 454 + resi, G_cTxt, 195, 195, 195);	//380
				else
					PutString_SprFont(370 + resx + 5, 454 + resi, G_cTxt, 195, 195, 195);
			}
		}
		else
		{
			if (m_iSuperAttackLeft > 0)
			{
				wsprintf(G_cTxt, "%d", m_iSuperAttackLeft);//132/130
				if (m_iSuperAttackLeft < 10)
					PutString_SprFont(370 + resx + 10, 454 + resi, G_cTxt, 0, 0, 0);//, FALSE, -1);//137 lalo PutString_SprFont3
				else
					PutString_SprFont(370 + resx + 5, 454 + resi, G_cTxt, 0, 0, 0);//, FALSE, -1);//137 lalo PutString_SprFont3		
			}
		}

		// HP bar
		if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) / 2;
		else				   iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) / 2;
		if (DecriptInt(m_iHP) > iMaxPoint) m_iHP = EncriptInt(iMaxPoint);
		iBarWidth = 101 - (DecriptInt(m_iHP) * 101) / iMaxPoint;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > 101) iBarWidth = 101;
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(23 + resx, 437 + resy, 12, iBarWidth, m_dwCurTime);

		wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iHP));
		if (m_bIsPoisoned)
		{
			PutString_SprNum(85 + resx, 441 + resy, G_cTxt, m_wR[5] * 11, m_wG[5] * 11, m_wB[5] * 11);
			PutString_SprFont3(35 + resx, 439 + resy, "Poisoned", m_wR[5] * 8, m_wG[5] * 8, m_wB[5] * 8, TRUE, 2);
		}
		else PutString_SprNum(80 + resx, 441 + resy, G_cTxt, 200, 100, 100);

		//MP bar
		iMaxPoint = (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) * 2 + DecriptInt(m_iLevel) * 2 + (m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) / 2;
		if (DecriptInt(m_iMP) > iMaxPoint) m_iMP = EncriptInt(iMaxPoint);
		iBarWidth = 101 - (DecriptInt(m_iMP) * 101) / iMaxPoint;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > 101) iBarWidth = 101;
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(23 + resx, 459 + resy, 12, iBarWidth, m_dwCurTime);

		wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iMP));
		PutString_SprNum(80 + resx, 463 + resy, G_cTxt, 100, 100, 200);

		// SP bar
		if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) * 2;
		else				   iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) * 2;
		if (DecriptInt(m_iSP) > iMaxPoint) m_iSP = EncriptInt(iMaxPoint);
		iBarWidth = 167 - (DecriptInt(m_iSP) * 167) / iMaxPoint;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > 167) iBarWidth = 167;
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL]->PutSpriteFastWidth(144 + resx, 436 + resy, 13, iBarWidth, m_dwCurTime);

		if (bPfm) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 133, 2, dwTime);
		}
		if (bZerk) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 176, 1, dwTime);
		}
		if (bInvi) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 219, 0, dwTime);
		}
		if (bShield) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 262, 4, dwTime);
		}
		if (bPfa) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 305, 3, dwTime);
		}
		if (m_stMCursor.sCursorFrame == 4) {
			bInvi = false;
		}
	}

	//Click en barra nueva resolucion 1024x768
	void CGame::DlgBoxClick_IconPannel1024x768(short msX, short msY)
	{
		if (BigBar != 0) return;

		short sX, sY;
		int resi = 0;
		int resx = 0;
		int addx = 0;

		if (c_reso->IsResolution() == C1024x768)
		{
			resi = 286;
			resx = 195;
			addx = 0;//10
		}

		sX = m_stDialogBoxInfo[30].sX;
		sY = m_stDialogBoxInfo[30].sY;

		if ((322 + resx + addx <= msX) && (355 + resx + addx >= msX) && (434 + resi < msY) && (475 + resi > msY))
		{

			if (m_bIsCrusadeMode == TRUE)
			{
				switch (DecriptInt(m_iCrusadeDuty)) {
				case 1: // Fighter
					EnableDialogBox(38, NULL, NULL, NULL);
					break;

				case 2: // Constructor
					EnableDialogBox(37, NULL, NULL, NULL);
					break;

				case 3: // Commander
					EnableDialogBox(36, NULL, NULL, NULL);
					break;

				default:
					break;
				}
			}
			else
			{
				//Event Button
				if (m_bIsDialogEnabled[55] == TRUE)
					DisableDialogBox(55);
				else EnableDialogBox(55, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
		}

		if ((362 + resx + addx < msX) && (404 + resx + addx > msX) && (434 + resi < msY) && (475 + resi > msY)) {
			// Combat Mode Toggle
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 410 + resx + addx) && (msX < 447 + resx + addx)) { // Character    
			if (m_bIsDialogEnabled[1] == TRUE)
				DisableDialogBox(1);
			else EnableDialogBox(1, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 447 + resx + addx) && (msX < 484 + resx + addx)) { // Inventory
			if (m_bIsDialogEnabled[2] == TRUE)
				DisableDialogBox(2);
			else EnableDialogBox(2, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 484 + resx + addx) && (msX < 521 + resx + addx)) { // Magic
			if (m_bIsDialogEnabled[3] == TRUE)
				DisableDialogBox(3);
			else EnableDialogBox(3, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 521 + resx + addx) && (msX < 558 + resx + addx)) { // Skill
			if (m_bIsDialogEnabled[15] == TRUE)
				DisableDialogBox(15);
			else EnableDialogBox(15, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 558 + resx + addx) && (msX < 595 + resx + addx)) { // History
			if (m_bIsDialogEnabled[10] == TRUE)
				DisableDialogBox(10);
			else EnableDialogBox(10, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}

		if ((msX > 595 + resx + addx) && (msX < 631 + resx + addx)) { // System Menu
			if (m_bIsDialogEnabled[19] == TRUE)
				DisableDialogBox(19);
			else EnableDialogBox(19, NULL, NULL, NULL);
			PlaySound('E', 14, 5);
		}
	}

//Barra Chica LaloRamos
void CGame::DrawDialogBox_IconPannel3(short msX, short msY)
{
	if (BigBar != 1) return;
	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	int iMaxPoint, iBarWidth, iTemp;
	char LongMapName[128];

	sX = m_stDialogBoxInfo[44].sX;
	sY = m_stDialogBoxInfo[44].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_ICONPANNEL3, sX, sY, 0, FALSE, m_bDialogTrans);

	if (DecriptBool(m_bAresden) == TRUE)
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 109, sY + 19, 10, dwTime);
	else
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 109, sY + 19, 11, dwTime);

	if (((msX >= 109 + sX) && (msX <= 249 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
	{
		if (DecriptBool(m_bAresden) == TRUE)
		{
			if (((msX >= 110 + sX) && (msX <= 123 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 109, sY + 20, 9, dwTime);// Event
			}
		}
		else
		{
			if (((msX >= 110 + sX) && (msX <= 123 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 109, sY + 20, 8, dwTime);// Event
			}
		}
		if (((msX >= 151 + sX) && (msX <= 165 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 151, sY + 20, 2, dwTime);// Character
		}
		if (((msX >= 167 + sX) && (msX <= 182 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 167, sY + 20, 3, dwTime);// Inventory
		}
		if (((msX >= 184 + sX) && (msX <= 198 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 184, sY + 20, 4, dwTime);// Magic
		}
		if (((msX >= 201 + sX) && (msX <= 215 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 201, sY + 20, 5, dwTime);// Skill
		}
		if (((msX >= 217 + sX) && (msX <= 232 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 217, sY + 20, 6, dwTime);// History
		}
		if (((msX >= 234 + sX) && (msX <= 249 + sX)) && ((msY >= 19 + sY) && (msY <= 38 + sY)))
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 234, sY + 20, 7, dwTime);// System Menu
		}
	}

	//Boton modo atake!
	if ((sX + 130 <= msX) && (sX + 147 >= msX) && (sY + 20 <= msY) && (sY + 37 >= msY))
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 130, sY + 20, 12, dwTime);

		if (DecriptBool(m_bIsSafeAttackMode))
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 133, sY + 22, 14, dwTime);
		else
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 133, sY + 22, 15, dwTime);
	}
	else
	{
		if (DecriptBool(m_bIsSafeAttackMode))
		{
			if (DecriptBool(m_bIsCombatMode))
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 133, sY + 22, 14, dwTime);
		}
		else
			if (DecriptBool(m_bIsCombatMode))
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX + 133, sY + 22, 15, dwTime);
	}

	//ZeroEoyPnk - New Critical
	if (m_cSkillMastery[_iGetWeaponSkillType()] == 100)
	{
		if (m_iSuperAttackLeft > 0)
		{
			if (GetAsyncKeyState(VK_MENU) >> 15)
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutTransSprite(sX + 133, sY + 22, 13, dwTime);
			wsprintf(G_cTxt, "%d", m_iSuperAttackLeft);
			if (m_iSuperAttackLeft < 10)
				PutString_SprFont(sX + 132, sY + 21, G_cTxt, 195, 195, 195);//, FALSE, -1);//137 lalo PutString_SprFont3 195, 195, 195,
			else
				PutString_SprFont(sX + 130, sY + 21, G_cTxt, 195, 195, 195);//, FALSE, -1);//134 lalo PutString_SprFont3 195, 195, 195,
		}
	}
	else
	{
		if (m_iSuperAttackLeft > 0)
		{
			wsprintf(G_cTxt, "%d", m_iSuperAttackLeft);
			if (m_iSuperAttackLeft < 10)
				PutString_SprFont(sX + 132, sY + 21, G_cTxt, 0, 0, 0);//, FALSE, -1);//137 lalo PutString_SprFont3
			else
				PutString_SprFont(sX + 130, sY + 21, G_cTxt, 0, 0, 0);//, FALSE, -1);//134 lalo PutString_SprFont3
		}
	}

	//show default bar - ZeroEoyPnk
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFastWidth(sX + 4, sY + 4, 1, 102, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFastWidth(sX + 4, sY + 16, 1, 102, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFastWidth(sX + 4, sY + 28, 1, 102, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFastWidth(sX + 109, sY + 4, 22, 141, dwTime);

	//New Bars - ZeroEoyPnk
	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) / 2;
	else				   iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) / 2;
	if (DecriptInt(m_iHP) > iMaxPoint) m_iHP = EncriptInt(iMaxPoint);
	iBarWidth = (DecriptInt(m_iHP) * 102) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 102) iBarWidth = 102;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFastWidth(sX + 4, sY + 4, 16, iBarWidth, m_dwCurTime);

	wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iHP));
	PutString_SprNum(sX + 51, sY + 6, G_cTxt, 255, 140, 140);//255

	//MP bar
	iMaxPoint = (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) * 2 + DecriptInt(m_iLevel) * 2 + (m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) / 2;
	if (DecriptInt(m_iMP) > iMaxPoint) m_iMP = EncriptInt(iMaxPoint);
	iBarWidth = (DecriptInt(m_iMP) * 102) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 102) iBarWidth = 102;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFastWidth(sX + 4, sY + 16, 17, iBarWidth, m_dwCurTime);

	wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iMP));
	PutString_SprNum(sX + 51, sY + 18, G_cTxt, 141, 150, 255);//255//17

	// SP bar
	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) * 2;
	else				   iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) * 2;
	if (DecriptInt(m_iSP) > iMaxPoint) m_iSP = EncriptInt(iMaxPoint);
	iBarWidth = (DecriptInt(m_iSP) * 102) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 102) iBarWidth = 102;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFastWidth(sX + 4, sY + 28, 18, iBarWidth, m_dwCurTime);

	wsprintf(G_cTxt, "%d", (short)DecriptInt(m_iSP));
	PutString_SprNum(sX + 51, sY + 30, G_cTxt, 140, 255, 150);//255//29

	// Exp Bar
	iMaxPoint = iGetLevelExp(DecriptInt(m_iLevel) + 1) - iGetLevelExp(DecriptInt(m_iLevel));
	iTemp = m_iExp - iGetLevelExp(DecriptInt(m_iLevel));
	if (iTemp > iMaxPoint) iTemp = iMaxPoint;
	iBarWidth = (iTemp * 141) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 141) iBarWidth = 141;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFastWidth(sX + 109, sY + 4, 21, iBarWidth, m_dwCurTime);

	//mapa y coords:
	if (m_bCtrlPressed == FALSE)
	{
		DecriptString(m_cMapName);
		ZeroMemory(LongMapName, sizeof(LongMapName));
		GetOfficialMapName(m_cMapName, LongMapName);
		EncriptString(m_cMapName);
		wsprintf(G_cTxt, "%s : %d , %d", LongMapName, m_sPlayerX, m_sPlayerY);
		PutString(sX + 110, sY + 1, G_cTxt, RGB(59, 59, 59));//120 lalo255  + 2
	}
	else
	{
		int Porcent = 0;
		Porcent = ((iTemp * 1000) / iMaxPoint);

		wsprintf(G_cTxt, "%d ( %d,%d%% )", iGetLevelExp(DecriptInt(m_iLevel) + 1) - m_iExp, Porcent / 10, Porcent % 10);
		PutString(sX + 110, sY + 1, G_cTxt, RGB(59, 59, 59));//120 lalo
	}

	if (c_reso->IsResolution() == C800x600)
	{
		if (bPfm) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 133, 2, dwTime);
		}
		if (bZerk) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 176, 1, dwTime);
		}
		if (bInvi) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 219, 0, dwTime);
		}
		if (bShield) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 262, 4, dwTime);
		}
		if (bPfa) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(761, 305, 3, dwTime);
		}
		if (m_stMCursor.sCursorFrame == 4) {
			bInvi = false;
		}
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		if (bPfm) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 133, 2, dwTime);
		}
		if (bZerk) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 176, 1, dwTime);
		}
		if (bInvi) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 219, 0, dwTime);
		}
		if (bShield) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 262, 4, dwTime);
		}
		if (bPfa) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(985, 305, 3, dwTime);
		}
		if (m_stMCursor.sCursorFrame == 4) {
			bInvi = false;
		}
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		if (bPfm) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 133, 2, dwTime);
		}

		if (bZerk) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 176, 1, dwTime);
		}
		if (bInvi) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 219, 0, dwTime);
		}
		if (bShield) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 262, 4, dwTime);
		}
		if (bPfa) {
			m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2]->PutSpriteFast(601, 305, 3, dwTime);
		}
		if (m_stMCursor.sCursorFrame == 4) {
			bInvi = false;
		}//lalito
	}

}


void CGame::DrawDialogBox_IconPannel2(short msX, short msY)
{
	if (BigBar != 2) return;

	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	int iMaxPoint, iBarWidth;

	sX = m_stDialogBoxInfo[45].sX;
	sY = m_stDialogBoxInfo[45].sY;

	//New Bars - ZeroEoyPnk

	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) / 2;
	else				   iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) / 2;
	if (DecriptInt(m_iHP) > iMaxPoint) m_iHP = EncriptInt(iMaxPoint);
	iBarWidth = 77 - (DecriptInt(m_iHP) * 77) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 77) iBarWidth = 77;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL4]->PutSpriteFastWidth(sX, sY, 3, iBarWidth, m_dwCurTime);

	//MP bar
	iMaxPoint = (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) * 2 + DecriptInt(m_iLevel) * 2 + (m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) / 2;
	if (DecriptInt(m_iMP) > iMaxPoint) m_iMP = EncriptInt(iMaxPoint);
	iBarWidth = 77 - (DecriptInt(m_iMP) * 77) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 77) iBarWidth = 77;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL4]->PutSpriteFastWidth(sX, sY + 5, 1, iBarWidth, m_dwCurTime);

	// SP bar
	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) * 2;
	else				   iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) * 2;
	if (DecriptInt(m_iSP) > iMaxPoint) m_iSP = EncriptInt(iMaxPoint);
	iBarWidth = 77 - (DecriptInt(m_iSP) * 77) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 77) iBarWidth = 77;
	m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL4]->PutSpriteFastWidth(sX, sY + 10, 2, iBarWidth, m_dwCurTime);
}


void CGame::DrawDialogBox_Text(short msX, short msY, short msZ, char cLB)
{
	short sX, sY;
	int i, iTotalLines, iPointerLoc;
	double d1, d2, d3;

	sX = m_stDialogBoxInfo[18].sX;
	sY = m_stDialogBoxInfo[18].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 0);

	iTotalLines = 0;
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
		if (m_pMsgTextList[i] != NULL) iTotalLines++;

	if (iTotalLines > 17) //DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 1);
	if (iGetTopDialogBoxIndex() == 18 && msZ != 0)
	{
		m_stDialogBoxInfo[18].sView = m_stDialogBoxInfo[18].sView - msZ / 60;
		m_DInput.m_sZ = 0;
	}
	if (m_stDialogBoxInfo[18].sView < 0) m_stDialogBoxInfo[18].sView = 0;
	if (iTotalLines > 17 && m_stDialogBoxInfo[18].sView > iTotalLines - 17) m_stDialogBoxInfo[18].sView = iTotalLines - 17;

	if (iTotalLines > 17) {
		d1 = (double)m_stDialogBoxInfo[18].sView;
		d2 = (double)(iTotalLines - 17);
		d3 = (274.0f * d1) / d2;
		iPointerLoc = (int)(d3 + 0.5);
		//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 1);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 242, sY + 35 + iPointerLoc, 7);
	}
	else iPointerLoc = 0;

	for (i = 0; i < 17; i++)
		if (m_pMsgTextList[i + m_stDialogBoxInfo[18].sView] != NULL) {
			if (m_bDialogTrans == FALSE) { // v2.173
				switch (m_pMsgTextList[i + m_stDialogBoxInfo[18].sView]->m_pMsg[0]) {
					case '_': PutAlignedString(sX + 24, sX + 236, sY + 50 + i * 13, (m_pMsgTextList[i + m_stDialogBoxInfo[18].sView]->m_pMsg + 1), 255, 255, 255); break;
					case ';': PutAlignedString(sX + 24, sX + 236, sY + 50 + i * 13, (m_pMsgTextList[i + m_stDialogBoxInfo[18].sView]->m_pMsg + 1), 4, 0, 50); break;
					default: PutAlignedString(sX + 24, sX + 236, sY + 50 + i * 13, m_pMsgTextList[i + m_stDialogBoxInfo[18].sView]->m_pMsg, 45, 25, 25); break;
				}
			}
			else PutAlignedString(sX + 24, sX + 236, sY + 50 + i * 13, m_pMsgTextList[i + m_stDialogBoxInfo[18].sView]->m_pMsg, 0, 0, 0);
		}

	if (cLB != 0 && iTotalLines > 17) {
		if ((iGetTopDialogBoxIndex() == 18)) {
			if ((msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 40) && (msY <= sY + 320)) {
				d1 = (double)(msY - (sY + 35));
				d2 = (double)(iTotalLines - 17);
				d3 = (d1 * d2) / 274.0f;
				iPointerLoc = (int)d3;
				if (iPointerLoc > iTotalLines - 17) iPointerLoc = iTotalLines - 17;
				m_stDialogBoxInfo[18].sView = iPointerLoc;
			}
		}
	}
	else m_stDialogBoxInfo[18].bIsScrollSelected = FALSE;

	if ((msX > sX + DEF_RBTNPOSX) && (msX < sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
}

void CGame::DrawDialogBox_ChangeInt(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[5].sX;
	sY = m_stDialogBoxInfo[5].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME1, sX, sY, 2);
	PutString(sX + 35, sY + 15, "Si cambias el stat de int, todas las magias", RGB(4, 0, 50));
	PutString(sX + 36, sY + 15, "Si cambias el stat de int, todas las magias", RGB(4, 0, 50));

	PutString(sX + 35, sY + 30, "de manuales se perderan", RGB(4, 0, 50));
	PutString(sX + 36, sY + 30, "de manuales se perderan", RGB(4, 0, 50));

	PutString(sX + 35, sY + 45, "Estas seguro que deseas cambiar tu int?", RGB(4, 0, 50));
	PutString(sX + 36, sY + 45, "Estas seguro que deseas cambiar tu int?", RGB(4, 0, 50));

	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 70) && (msY <= sY + 70 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 70, 19);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 70, 18);

	if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 70) && (msY <= sY + 70 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 70, 3);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 70, 2);
}


void CGame::DrawDialogBox_WarningMsg(short msX, short msY)//6
{
	short sX, sY;

	sX = m_stDialogBoxInfo[6].sX;
	sY = m_stDialogBoxInfo[6].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, sX, sY, 2);

	PutString2(sX + 63, sY + 35, DEF_MSG_WARNING1, 200, 200, 25);//" ** This is a battle area **"
	PutString(sX + 30, sY + 57, DEF_MSG_WARNING2, RGB(220, 130, 45));//"This is a dangerous area where you"
	PutString(sX + 30, sY + 74, DEF_MSG_WARNING3, RGB(220, 130, 45));//"cannot protected from others' attack."
	PutString(sX + 30, sY + 92, DEF_MSG_WARNING4, RGB(220, 130, 45));//"To play the game in safe, go to the"
	PutString(sX + 30, sY + 110, DEF_MSG_WARNING5, RGB(220, 130, 45));//" cityhall and change to civilian mode."

	if ((msX >= sX + 122) && (msX <= sX + 125 + DEF_BTNSZX) && (msY >= sY + 127) && (msY <= sY + 127 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 122, sY + 127, 1);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 122, sY + 127, 0);

}

void CGame::DrawDialogBox_ItemDrop(short msX, short msY)
{
	short sX, sY;
	char cTxt[120], cStr1[64], cStr2[64], cStr3[64];

	sX = m_stDialogBoxInfo[4].sX;
	sY = m_stDialogBoxInfo[4].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME1, sX, sY, 2);

	GetItemName(m_pItemList[m_stDialogBoxInfo[4].sView]->m_cName, m_pItemList[m_stDialogBoxInfo[4].sView]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[m_stDialogBoxInfo[4].sView]->m_sItemSpecEffectValue3);

	if (strlen(m_stDialogBoxInfo[4].cStr) == 0)  wsprintf(cTxt, "%s", cStr1);

	if (m_bIsSpecial)
	{
		PutString(sX + 35, sY + 20, cTxt, RGB(0, 255, 50));
		PutString(sX + 36, sY + 20, cTxt, RGB(0, 255, 50));
	}
	else
	{
		PutString(sX + 35, sY + 20, cTxt, RGB(4, 0, 50));
		PutString(sX + 36, sY + 20, cTxt, RGB(4, 0, 50));
	}
	PutString(sX + 35, sY + 36, DRAW_DIALOGBOX_ITEM_DROP1, RGB(4, 0, 50));
	PutString(sX + 36, sY + 36, DRAW_DIALOGBOX_ITEM_DROP1, RGB(4, 0, 50));

	if (m_bItemDrop)
	{
		if ((msX >= sX + 35) && (msX <= sX + 240) && (msY >= sY + 80) && (msY <= sY + 90))
		{
			PutString(sX + 35, sY + 80, DRAW_DIALOGBOX_ITEM_DROP2, RGB(255, 255, 255));
			PutString(sX + 36, sY + 80, DRAW_DIALOGBOX_ITEM_DROP2, RGB(255, 255, 255));
		}
		else
		{
			PutString(sX + 35, sY + 80, DRAW_DIALOGBOX_ITEM_DROP2, RGB(4, 0, 50));
			PutString(sX + 36, sY + 80, DRAW_DIALOGBOX_ITEM_DROP2, RGB(4, 0, 50));
		}
	}
	else
	{
		if ((msX >= sX + 35) && (msX <= sX + 240) && (msY >= sY + 80) && (msY <= sY + 90))
		{
			PutString(sX + 35, sY + 80, DRAW_DIALOGBOX_ITEM_DROP3, RGB(255, 255, 255));
			PutString(sX + 36, sY + 80, DRAW_DIALOGBOX_ITEM_DROP3, RGB(255, 255, 255));
		}
		else
		{
			PutString(sX + 35, sY + 80, DRAW_DIALOGBOX_ITEM_DROP3, RGB(4, 0, 50));
			PutString(sX + 36, sY + 80, DRAW_DIALOGBOX_ITEM_DROP3, RGB(4, 0, 50));
		}
	}

	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 55, 19);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 55, 18);

	if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 55, 3);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 55, 2);
}

void CGame::DrawDialogBox_NpcTalk(short msX, short msY, char cLB)
{
	short sX, sY;
	int i, iTotalLines, iPointerLoc;
	double d1, d2, d3;
	sX = m_stDialogBoxInfo[21].sX;
	sY = m_stDialogBoxInfo[21].sY;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);

	switch (m_stDialogBoxInfo[21].cMode) {
		case 0: //  OK
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 1: // Accept / Decline
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 33);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 32);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 41);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 40);
			break;

		case 2: // Next
			if ((msX >= sX + 190) && (msX <= sX + 278) && (msY >= sY + 296) && (msY <= sY + 316))
				PutString_SprFont(sX + 190, sY + 270, "Next", 6, 6, 20);
			else PutString_SprFont(sX + 190, sY + 270, "Next", 0, 0, 7);
			break;
	}

	if (m_stDialogBoxInfo[21].sV1 != -1)
	{
		for (i = 0; i < 17; i++)
			if ((i < DEF_TEXTDLGMAXLINES) && (m_pMsgTextList2[i + m_stDialogBoxInfo[21].sView] != NULL)) {
				PutAlignedString(sX, sX + m_stDialogBoxInfo[21].sSizeX, sY + 57 + i * 15, m_pMsgTextList2[i + m_stDialogBoxInfo[21].sView]->m_pMsg, 4, 0, 50);
			}

		iTotalLines = 0;
		for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
			if (m_pMsgTextList2[i] != NULL) iTotalLines++;

		if (iTotalLines > 17) {
			d1 = (double)m_stDialogBoxInfo[21].sView;
			d2 = (double)(iTotalLines - 17);
			d3 = (274.0f * d1) / d2;
			iPointerLoc = (int)d3;
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 3);
		}
		else iPointerLoc = 0;

		if (cLB != 0 && iTotalLines > 17) {
			if ((iGetTopDialogBoxIndex() == 21)) {
				if ((msX >= sX + 240) && (msX <= sX + 260) && (msY >= sY + 40) && (msY <= sY + 320)) {
					d1 = (double)(msY - (sY + 40));
					d2 = (double)(iTotalLines - 17);
					d3 = (d1 * d2) / 274.0f;
					iPointerLoc = (int)d3;

					if (iPointerLoc > iTotalLines) iPointerLoc = iTotalLines;
					m_stDialogBoxInfo[21].sView = iPointerLoc;
				}
			}
		}
		else m_stDialogBoxInfo[21].bIsScrollSelected = FALSE;
	}
	else
	{
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 29, "Your search become an Assassin?", 45, 25, 25);

		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 49, "To be Assassin, you will need to", 45, 25, 25);
		//Original
		//PutAlignedString(sX+19, sX+m_stDialogBoxInfo[21].sSizeX -21, sY + 64, "accumulate 1500 deaths of players", 45, 25, 25);
		//PutAlignedString(sX+19, sX+m_stDialogBoxInfo[21].sSizeX -21, sY + 79, "of your city.", 45,25,25);
		// New
		wsprintf(G_cTxt, "accumulate %d Assassin's points", DEF_ASSASAINPOINTS);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 64, G_cTxt, 45, 25, 25);

		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 94, "Once you become a murderers you will", 45, 25, 25);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 109, "have certain benefits and also some", 45, 25, 25);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 124, "disadvantages.", 45, 25, 25);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 139, "It is a big decision that you have taken, I", 45, 25, 25);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 154, "will try to help you achieve your objective.", 45, 25, 25);
		//PutAlignedString(sX+19, sX+m_stDialogBoxInfo[21].sSizeX -21, sY + 169, "As I said before, you need to kill 1500", 45,25,25);
		//PutAlignedString(sX+19, sX+m_stDialogBoxInfo[21].sSizeX -21, sY + 184, "players of your city.", 45,25,25);

		wsprintf(G_cTxt, "So far has %d Assassin's points.", m_stDialogBoxInfo[21].sV2);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 184, G_cTxt, 45, 25, 25);

		wsprintf(G_cTxt, "You still need %d Assassin's points.", DEF_ASSASAINPOINTS - m_stDialogBoxInfo[21].sV2);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 214, G_cTxt, 45, 25, 25);

		//PutAlignedString(sX+18, sX+m_stDialogBoxInfo[21].sSizeX -21, sY + 259, "Until then, you may come to see the missing points, whenever you want.", 45,25,25);

		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[21].sSizeX - 21, sY + 254, "Purchase Assassin's Points", 45, 25, 25);

		/*************************************************************************************************************************************************************************************/

		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 30, "Your search become an Assasain?", 255, 255, 255);

		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 50, "To be Assassin, you will need to", 255, 255, 255);
		//Original
		//PutAlignedString(sX+19, sX+m_stDialogBoxInfo[21].sSizeX -21, sY + 64, "accumulate 1500 deaths of players", 45, 25, 25);
		//PutAlignedString(sX+19, sX+m_stDialogBoxInfo[21].sSizeX -21, sY + 79, "of your city.", 45,25,25);
		// New
		wsprintf(G_cTxt, "accumulate %d Assassin's points", DEF_ASSASAINPOINTS);
		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 65, G_cTxt, 255, 255, 255);

		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 95, "Once you become a murderers you will", 255, 255, 255);
		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 110, "have certain benefits and also some", 255, 255, 255);
		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 125, "disadvantages.", 255, 255, 255);
		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 140, "It is a big decision that you have taken, I", 255, 255, 255);
		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 155, "will try to help you achieve your objective.", 255, 255, 255);
		/*PutAlignedString(sX+20, sX+m_stDialogBoxInfo[21].sSizeX -20, sY + 170, "As I said before, you need to kill 1500", 255,255,255);
		PutAlignedString(sX+20, sX+m_stDialogBoxInfo[21].sSizeX -20, sY + 185, "players of your city.", 255,255,255);

		wsprintf(G_cTxt, "So far has killed to %d players of your city.", m_stDialogBoxInfo[21].sV2);
		PutAlignedString(sX+20, sX+m_stDialogBoxInfo[21].sSizeX -20, sY + 200, G_cTxt, 255,255,255);

		wsprintf(G_cTxt, "You still need to kill %d players of your city.", 1500 - m_stDialogBoxInfo[21].sV2);
		PutAlignedString(sX+20, sX+m_stDialogBoxInfo[21].sSizeX -20, sY + 230, G_cTxt, 255,255,255);

		PutAlignedString(sX+19, sX+m_stDialogBoxInfo[21].sSizeX -20, sY + 260, "Until then, you may come to see the missing points, whenever you want.", 255,255,255);*/

		wsprintf(G_cTxt, "So far has %d Assassin's points.", m_stDialogBoxInfo[21].sV2);
		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 185, G_cTxt, 255, 255, 255);

		wsprintf(G_cTxt, "You still need %d Assassin's points.", DEF_ASSASAINPOINTS - m_stDialogBoxInfo[21].sV2);
		PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 215, G_cTxt, 255, 255, 255);

		if ((msX >= sX + 20) && (msX <= sX + m_stDialogBoxInfo[21].sSizeX - 20) && (msY >= sY + 255) && (msY <= sY + 270))
			PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 255, "Purchase Assassin's Points", 255, 200, 0);
		else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[21].sSizeX - 20, sY + 255, "Purchase Assassin's Points", 255, 255, 255);
	}
}

void CGame::DrawDialogBox_Slates(short msX, short msY, short msZ, char cLB)
{
	int iAdjX, iAdjY;
	short sX, sY;
	DWORD dwTime = m_dwCurTime;

	iAdjX = 5;
	iAdjY = 8;

	switch (m_stDialogBoxInfo[40].cMode) {
		// Slates Dialog - Diuuude
		case 1:
			sX = m_stDialogBoxInfo[40].sX;
			sY = m_stDialogBoxInfo[40].sY;
			iAdjX = -1;
			iAdjY = -7;

			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX, sY, 4); //lalobag
	//		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX, sY, 4, FALSE, m_bDialogTrans);

			if (m_stDialogBoxInfo[40].sV1 != -1) {
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX + 20, sY + 12, 5);
			}
			if (m_stDialogBoxInfo[40].sV2 != -1) {
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX + 20, sY + 87, 6);
			}
			if (m_stDialogBoxInfo[40].sV3 != -1) {
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX + 85, sY + 32, 7);
			}
			if (m_stDialogBoxInfo[40].sV4 != -1) {
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX + 70, sY + 97, 8);
			}

			if ((m_stDialogBoxInfo[40].sV1 != -1) && (m_stDialogBoxInfo[40].sV2 != -1) && (m_stDialogBoxInfo[40].sV3 != -1) && (m_stDialogBoxInfo[40].sV4 != -1)) {
				if ((msX >= sX + 120) && (msX <= sX + 180) && (msY >= sY + 150) && (msY <= sY + 165))
					PutString_SprFont(sX + 120, sY + 150, "Casting", 6, 6, 20);
				else PutString_SprFont(sX + 120, sY + 150, "Casting", 0, 0, 7);
			}

			break;

			// Slates Dialog - Diuuude
		case 2:
			PlaySound('E', 16, 0);
			if (m_stDialogBoxInfo[40].cStr[0] != 0)
			{
				sX = m_stDialogBoxInfo[40].sX + iAdjX + (m_stDialogBoxInfo[40].cStr[0] - (rand() % (m_stDialogBoxInfo[40].cStr[0] * 2)));
				sY = m_stDialogBoxInfo[40].sY + iAdjY + (m_stDialogBoxInfo[40].cStr[0] - (rand() % (m_stDialogBoxInfo[40].cStr[0] * 2)));
			}
			else
			{
				sX = m_stDialogBoxInfo[40].sX;
				sY = m_stDialogBoxInfo[40].sY;
			}
			m_pSprite[DEF_SPRID_INTERFACE_ND_INVENTORY]->PutSpriteFast(sX, sY, 4, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_INVENTORY]->PutSpriteFast(sX + 22, sY + 14, 3, dwTime);
			//PutString_SprFont(sX + iAdjX + 170, sY + iAdjY + 170, "KURURURURURURURURU!!!", 20,6,6);
			PutAlignedString(199, 438, 201, "KURURURURURURURURU!!!", 220, 140, 160);
			PutAlignedString(200, 439, 200, "KURURURURURURURURU!!!", 90, 220, 200);

			if ((dwTime - m_stDialogBoxInfo[40].dwT1) > 1000)
			{
				m_stDialogBoxInfo[40].dwT1 = dwTime;
				m_stDialogBoxInfo[40].cStr[0]++;
			}
			if (m_stDialogBoxInfo[40].cStr[0] >= 5)
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CREATESLATE, NULL, m_stDialogBoxInfo[40].sV1, m_stDialogBoxInfo[40].sV2, m_stDialogBoxInfo[40].sV3, NULL, m_stDialogBoxInfo[40].sV4);
				DisableDialogBox(40);
			}
			break;
	}
}

void CGame::DlgBoxClick_Slates(short msX, short msY)
{
	int iAdjX, iAdjY;
	short sX, sY;

	sX = m_stDialogBoxInfo[40].sX;
	sY = m_stDialogBoxInfo[40].sY;
	iAdjX = 5;
	iAdjY = 8;
	switch (m_stDialogBoxInfo[40].cMode) {
		// Slates DialogBox - Diuuude
		case 1:
			if ((m_stDialogBoxInfo[40].sV1 != -1) && (m_stDialogBoxInfo[40].sV2 != -1) && (m_stDialogBoxInfo[40].sV3 != -1) && (m_stDialogBoxInfo[40].sV4 != -1)) {
				if ((msX >= sX + 120) && (msX <= sX + 180) && (msY >= sY + 150) && (msY <= sY + 165)) {
					m_stDialogBoxInfo[40].cMode = 2;
					PlaySound('E', 14, 5);
				}
			}
			break;
	}
}

void CGame::DlgBoxClick_NpcTalk(int msX, int msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[21].sX;
	sY = m_stDialogBoxInfo[21].sY;

	switch (m_stDialogBoxInfo[21].cMode) {
		case 0: //  OK
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				DisableDialogBox(21);
				PlaySound('E', 14, 5);
			}
			break;

		case 1: // Accept / Decline
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Accept
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_QUESTACCEPTED, NULL, NULL, NULL, NULL, NULL);
				DisableDialogBox(21);
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Cancel
				DisableDialogBox(21);
				PlaySound('E', 14, 5);
			}
			break;

		case 2:	// Next
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				DisableDialogBox(21);
				PlaySound('E', 14, 5);
			}
			break;
	}

	if (m_stDialogBoxInfo[21].sV1 == -1) {
		if ((msX >= sX + 20) && (msX <= sX + m_stDialogBoxInfo[21].sSizeX - 20) && (msY >= sY + 255) && (msY <= sY + 270)) {
			EnableDialogBox(60, NULL, NULL, NULL);
		}
	}
}


void CGame::DrawShadowDialog(short sX, short sY, int dialognum)
{
	short limitX, limitY;
	limitX = sX + m_stDialogBoxInfo[dialognum].sSizeX;
	limitY = sY + m_stDialogBoxInfo[dialognum].sSizeY;

	m_DDraw.DrawDialogShadowBox(sX, sY, limitX, limitY);
	m_DDraw.DrawDialogShadowBox(sX, sY, limitX, limitY);

}


void CGame::DrawShadowDialog2(short sX, short sY, int dialognum)
{
	short limitX, limitY;
	limitX = sX + m_stDialogBoxInfo[dialognum].sSizeX;
	limitY = sY + m_stDialogBoxInfo[dialognum].sSizeY;

	m_DDraw.DrawDialogShadowBox(sX, sY, limitX, limitY);

}

void CGame::DrawDialogBox_Chat(short msX, short msY, short msZ, char cLB)
{
	short sX, sY;
	int i, iPointerLoc, z;
	double d1, d2, d3;
	BOOL Active = TRUE;
	sX = m_stDialogBoxInfo[10].sX;
	sY = m_stDialogBoxInfo[10].sY;
	int sizeX = m_stDialogBoxInfo[10].sSizeX;

	/*DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 4, FALSE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 22, FALSE, m_bDialogTrans);
*/


	DrawShadowDialog(sX, sY, 10);
	PutCenterString_SpriteFont(sX,sX + sizeX, sY + 5, "Chat History", 255, 255, 255);

	// Normal 60
	if (ChatActive[24] != 24)
		PutString2(sX + 90, sY + 27, "Local", 0, 255, 0);
	else
	{
		PutString2(sX + 90, sY + 27, "Local", 255, 0, 0);
		Active = FALSE;
	}

	// Guild 80
	if (ChatActive[1] != 1)
		PutString2(sX + 126, sY + 27, "Guild", 0, 255, 0);
	else
	{
		PutString2(sX + 126, sY + 27, "Guild", 255, 0, 0);
		Active = FALSE;
	}

	// General 20
	if (ChatActive[2] != 2)
		PutString2(sX + 20, sY + 27, "Global", 0, 255, 0);
	else
	{
		PutString2(sX + 20, sY + 27, "Global", 255, 0, 0);
		Active = FALSE;
	}

	// City 40
	if (ChatActive[3] != 3)
		PutString2(sX + 60, sY + 27, "City", 0, 255, 0);
	else
	{
		PutString2(sX + 60, sY + 27, "City", 255, 0, 0);
		Active = FALSE;
	}

	// Party 100
	if (ChatActive[4] != 4)
		PutString2(sX + 162, sY + 27, "Party", 0, 255, 0);
	else
	{
		PutString2(sX + 162, sY + 27, "Party", 255, 0, 0);
		Active = FALSE;
	}

	// GM 140
	if (ChatActive[10] != 10)
		PutString2(sX + 234, sY + 27, "GM", 0, 255, 0);
	else
	{
		PutString2(sX + 234, sY + 27, "GM", 255, 0, 0);
		Active = FALSE;
	}

	// Wisp 120
	if (ChatActive[20] != 20)
		PutString2(sX + 198, sY + 27, "Wisp", 0, 255, 0);
	else
	{
		PutString2(sX + 198, sY + 27, "Wisp", 255, 0, 0);
		Active = FALSE;
	}

	//ALL - None
	if (Active == FALSE)
		PutString2(sX + 311, sY + 27, "All", 0, 255, 0);
	else
		PutString2(sX + 305, sY + 27, "None", 0, 255, 0);


	if (msZ != 0 && (iGetTopDialogBoxIndex() == 10)) {
		m_stDialogBoxInfo[10].sView = m_stDialogBoxInfo[10].sView + msZ / 30;
		m_DInput.m_sZ = 0;
	}
	if (m_stDialogBoxInfo[10].sView < 0) m_stDialogBoxInfo[10].sView = 0;
	if (m_stDialogBoxInfo[10].sView > DEF_MAXCHATSCROLLMSGS - 8) m_stDialogBoxInfo[10].sView = DEF_MAXCHATSCROLLMSGS - 8;

	d1 = (double)m_stDialogBoxInfo[10].sView;
	d2 = (double)(105);
	d3 = (d1*d2) / (DEF_MAXCHATSCROLLMSGS - 8);
	iPointerLoc = (int)d3;
	iPointerLoc = 105 - iPointerLoc;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 346, sY + 33 + iPointerLoc, 7);

	z = 0;
	for (i = 0; i < DEF_MAXCHATSCROLLMSGS; i++)
	{
		m_sChatBox[i].ID = 999;
		ZeroMemory(m_sChatBox[i].Msg, 75);
		m_sChatBox[i].cType = NULL;
		if (m_pChatScrollList[i] != NULL)
		{
			if (m_pChatScrollList[i]->m_dwTime != ChatActive[m_pChatScrollList[i]->m_dwTime])
			{
				m_sChatBox[z].ID = z;
				ZeroMemory(m_sChatBox[z].Msg, 75);
				strcpy(m_sChatBox[z].Msg, m_pChatScrollList[i]->m_pMsg);
				m_sChatBox[z].cType = m_pChatScrollList[i]->m_dwTime;
				z++;
			}
		}
	}

	for (i = 0; i < 8; i++)
		if (m_sChatBox[i + m_stDialogBoxInfo[10].sView].ID != 999) {
				switch (m_sChatBox[i + m_stDialogBoxInfo[10].sView].cType) {
					case 1:  PutString2(sX + 25, sY + 130 - i * 13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 10, 230, 10); break; //
					case 2:  PutString2(sX + 25, sY + 130 - i * 13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 255, 85, 130); break;//chatgeneral
					case 3:  PutString2(sX + 25, sY + 130 - i * 13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 145, 105, 250); break;//chatciudad
					case 4:  PutString2(sX + 25, sY + 130 - i * 13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 255, 245, 45); break;//party
					case 10: PutString2(sX + 25, sY + 130 - i * 13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 130, 255, 130); break; // !GM  130,255,130
					/*case 11: PutString2(sX + 25, sY + 130 - i*13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 90,  170, 255); break; // MP
					case 12: PutString2(sX + 25, sY + 130 - i*13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 245, 55, 85); break; // HP
					case 13: PutString2(sX + 25, sY + 130 - i*13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 150, 250, 50); break; // SP*/
					case 20: PutString2(sX + 25, sY + 130 - i * 13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 150, 150, 170); break;
					case 24:  PutString2(sX + 25, sY + 130 - i * 13, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg, 230, 230, 230); break; //historial
				}			
		}

	if ((cLB != 0) && (iGetTopDialogBoxIndex() == 10))
	{
		if ((msX >= sX + 336) && (msX <= sX + 361) && (msY >= sY + 28) && (msY <= sY + 140)) {
			d1 = (double)(msY - (sY + 28));
			d2 = ((DEF_MAXCHATSCROLLMSGS - 8)*d1) / 105.0f;
			m_stDialogBoxInfo[10].sView = DEF_MAXCHATSCROLLMSGS - 8 - (int)d2;
		}

		if ((msX >= sX + 336) && (msX <= sX + 361) && (msY > sY + 18) && (msY < sY + 28))
			m_stDialogBoxInfo[10].sView = DEF_MAXCHATSCROLLMSGS - 8;

		if ((msX >= sX + 336) && (msX <= sX + 361) && (msY > sY + 140) && (msY < sY + 163))
			m_stDialogBoxInfo[10].sView = 0;
	}
	else m_stDialogBoxInfo[10].bIsScrollSelected = FALSE;
	TotalActive = Active;
}

void CGame::DlgBoxClick_Chat(short msX, short msY)
{
	short sX, sY;
	int i;
	sX = m_stDialogBoxInfo[10].sX;
	sY = m_stDialogBoxInfo[10].sY;

	// Normal 60
	if ((msX > sX + 90) && (msX < sX + 117) && (msY > sY + 29) && (msY < sY + 42))
		if (ChatActive[24] == 24)
			ChatActive[24] = 99;
		else
			ChatActive[24] = 24;

	// Guild 80
	if ((msX > sX + 125) && (msX < sX + 153) && (msY > sY + 29) && (msY < sY + 42))
		if (ChatActive[1] == 1)
			ChatActive[1] = 99;
		else
			ChatActive[1] = 1;

	// Global
	if ((msX > sX + 12) && (msX < sX + 52) && (msY > sY + 29) && (msY < sY + 42))
		if (ChatActive[2] == 2)
			ChatActive[2] = 99;
		else
			ChatActive[2] = 2;

	// City 40
	if ((msX > sX + 59) && (msX < sX + 82) && (msY > sY + 29) && (msY < sY + 42))
		if (ChatActive[3] == 3)
			ChatActive[3] = 99;
		else
			ChatActive[3] = 3;

	// Party 100
	if ((msX > sX + 162) && (msX < sX + 190) && (msY > sY + 29) && (msY < sY + 42))
		if (ChatActive[4] == 4)
			ChatActive[4] = 99;
		else
			ChatActive[4] = 4;

	// GM 140
	if ((msX > sX + 232) && (msX < sX + 253) && (msY > sY + 29) && (msY < sY + 42))
		if (ChatActive[10] == 10)
			ChatActive[10] = 99;
		else
			ChatActive[10] = 10;

	// Wisp 120
	if ((msX > sX + 197) && (msX < sX + 225) && (msY > sY + 29) && (msY < sY + 42))
		if (ChatActive[20] == 20)
			ChatActive[20] = 99;
		else
			ChatActive[20] = 20;

	// All - None
	if ((msX > sX + 305) && (msX < sX + 332) && (msY > sY + 29) && (msY < sY + 42))
	{
		if (TotalActive == TRUE)
		{
			for (i = 0; i <= 24; i++)
				ChatActive[i] = i;
		}
		else
		{
			for (i = 0; i <= 24; i++)
				ChatActive[i] = 99;
		}
	}
}


void CGame::DlgBoxClick_ItemUpgrade(int msX, int msY)
{
	short sX, sY;
	int i, iSoX, iSoM;
	sX = m_stDialogBoxInfo[34].sX;
	sY = m_stDialogBoxInfo[34].sY;
	switch (m_stDialogBoxInfo[34].cMode) {
		case 1:	// Upgrade Majestic, items in the window
			if ((m_stDialogBoxInfo[34].sV1 != -1) && (msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{
				int iValue = (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_dwAttribute & 0xF0000000) >> 28;
				iValue = iValue*(iValue + 6) / 8 + 2;
				if (DecriptInt(m_iGizonItemUpgradeLeft) < iValue) break;
				PlaySound('E', 14, 5);
				PlaySound('E', 44, 0);
				m_stDialogBoxInfo[34].cMode = 2;
				m_stDialogBoxInfo[34].dwV1 = timeGetTime();
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{	// Cancel
				PlaySound('E', 14, 5);
				m_bIsItemDisabled[m_stDialogBoxInfo[34].sV1] = FALSE;
				m_stDialogBoxInfo[34].cMode = 5;
				m_stDialogBoxInfo[34].sV1 = -1;
				m_stDialogBoxInfo[34].dwV1 = NULL;
			}
			break;

		case 3: // sucess
		case 4: // Not possible
		case 7: // Lost item
		case 8: // Failed
		case 9: // Failed
		case 10:// Failed
		case 12:// 12 Need stone!
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
			{	// OK
				PlaySound('E', 14, 5);
				m_bIsItemDisabled[m_stDialogBoxInfo[34].sV1] = FALSE;
				m_stDialogBoxInfo[34].cMode = 5;
				m_stDialogBoxInfo[34].sV1 = -1;
				m_stDialogBoxInfo[34].dwV1 = NULL;
				//DisableDialogBox(34);
			}
			break;
		case 5: // main menu
			if ((msX > sX + 24) && (msX < sX + 248) && (msY > sY + 100) && (msY < sY + 115))
			{
				PlaySound('E', 14, 5);
				iSoX = iSoM = 0;
				for (i = 0; i < DEF_MAXITEMS; i++)
					if (m_pItemList[i] != NULL)
					{
						if ((m_pItemList[i]->m_sSprite == 6) && (m_pItemList[i]->m_sSpriteFrame == 128)) iSoX++;
						if ((m_pItemList[i]->m_sSprite == 6) && (m_pItemList[i]->m_sSpriteFrame == 129)) iSoM++;
					}
				if ((iSoX > 0) || (iSoM > 0))
				{
					m_stDialogBoxInfo[34].cMode = 6;
					m_stDialogBoxInfo[34].sV2 = iSoX;
					m_stDialogBoxInfo[34].sV3 = iSoM;
				}
				else AddEventList(DRAW_DIALOGBOX_ITEMUPGRADE30, 10); //"Stone of Xelima or Merien is not present."
			}
			if ((msX > sX + 24) && (msX < sX + 248) && (msY > sY + 120) && (msY < sY + 135))
			{
				m_stDialogBoxInfo[34].cMode = 1;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{	// Cancel
				PlaySound('E', 14, 5);
				DisableDialogBox(34);
			}
			break;

		case 6: // Upgrade Xelima / Merien
			if ((m_stDialogBoxInfo[34].sV1 != -1) && (msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{	// Upgrade
				PlaySound('E', 14, 5);
				PlaySound('E', 44, 0);
				m_stDialogBoxInfo[34].cMode = 2;
				m_stDialogBoxInfo[34].dwV1 = timeGetTime();
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{	// Cancel
				PlaySound('E', 14, 5);
				m_bIsItemDisabled[m_stDialogBoxInfo[34].sV1] = FALSE;
				m_stDialogBoxInfo[34].cMode = 5;
				m_stDialogBoxInfo[34].sV1 = -1;
				m_stDialogBoxInfo[34].dwV1 = NULL;
			}
			break;
	}
}


void CGame::DlgBoxClick_SellList(short msX, short msY)
{
	int i, x;
	short sX, sY;
	sX = m_stDialogBoxInfo[31].sX;
	sY = m_stDialogBoxInfo[31].sY;
	for (i = 0; i < DEF_MAXSELLLIST; i++)
		if ((msX > sX + 25) && (msX < sX + 250) && (msY >= sY + 55 + i * 15) && (msY <= sY + 55 + 14 + i * 15))
		{
			if (m_pItemList[m_stSellItemList[i].iIndex] != NULL)
			{
				m_bIsItemDisabled[m_stSellItemList[i].iIndex] = FALSE;
				m_stSellItemList[i].iIndex = -1;

				PlaySound('E', 14, 5);

				// ������
				for (x = 0; x < DEF_MAXSELLLIST - 1; x++)
					if (m_stSellItemList[x].iIndex == -1) {
						m_stSellItemList[x].iIndex = m_stSellItemList[x + 1].iIndex;
						m_stSellItemList[x].iAmount = m_stSellItemList[x + 1].iAmount;

						m_stSellItemList[x + 1].iIndex = -1;
						m_stSellItemList[x + 1].iAmount = 0;
					}
			}
			return;
		}

	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		// Sell
		bSendCommand(CLIENT_REQUEST_SELLITEMLIST, NULL, NULL, NULL, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
		DisableDialogBox(31);
	}

	if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		// Cancel
		PlaySound('E', 14, 5);
		DisableDialogBox(31);
	}
}

// 3.51 LevelUp Box - Diuuude
void CGame::DlgBoxClick_LevelUpSettings(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[12].sX;
	sY = m_stDialogBoxInfo[12].sY;
	// Strength UP - Diuuude
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 127) && (msY <= sY + 133) && (DecriptInt(m_iLU_Point) > 0) && (DecriptInt(m_cLU_Str) + m_iStr < DEF_STATS_LIMIT)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_iLU_Point) >= 5) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Str) + m_iStr) + 5 <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
				m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) + 5);
			}
			else if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Str) + m_iStr) < DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Str) + m_iStr) < DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Vitality UP - Diuuude
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 146) && (msY <= sY + 152) && (DecriptInt(m_iLU_Point) > 0) && (DecriptInt(m_cLU_Vit) + m_iVit < DEF_STATS_LIMIT)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_iLU_Point) >= 5) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Vit) + m_iVit) + 5 <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
				m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) + 5);
			}
			else if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Vit) + m_iVit) < DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Vit) + m_iVit) < DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Dexterity UP - Diuuude
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 165) && (msY <= sY + 171) && (DecriptInt(m_iLU_Point) > 0) && (DecriptInt(m_cLU_Dex) + m_iDex < DEF_STATS_LIMIT)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_iLU_Point) >= 5) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Dex) + m_iDex) + 5 <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
				m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) + 5);
			}
			else if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Dex) + m_iDex) <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Dex) + m_iDex) <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Intelligence UP - Diuuude
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 184) && (msY <= sY + 190) && (DecriptInt(m_iLU_Point) > 0) && (DecriptInt(m_cLU_Int) + m_iInt < DEF_STATS_LIMIT)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_iLU_Point) >= 5) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Int) + m_iInt) + 5 <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
				m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) + 5);
			}
			else if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Int) + m_iInt) <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Int) + m_iInt) <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Magic UP - Diuuude
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 203) && (msY <= sY + 209) && (DecriptInt(m_iLU_Point) > 0) && (DecriptInt(m_cLU_Mag) + m_iMag < DEF_STATS_LIMIT)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_iLU_Point) >= 5) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Mag) + m_iMag) + 5 <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
				m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) + 5);
			}
			else if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Mag) + m_iMag) <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Mag) + m_iMag) <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Charisma UP - Diuuude
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 222) && (msY <= sY + 228) && (DecriptInt(m_iLU_Point) > 0) && (DecriptInt(m_cLU_Char) + m_iCharisma < DEF_STATS_LIMIT)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_iLU_Point) >= 5) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Char) + m_iCharisma) + 5 <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
				m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) + 5);
			}
			else if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Char) + m_iCharisma) <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_iLU_Point) > 0) && (m_bIsDialogEnabled[42] == FALSE) && ((DecriptInt(m_cLU_Char) + m_iCharisma) <= DEF_STATS_LIMIT)) {
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
				m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Strength DOWN - Diuuude
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 127) && (msY <= sY + 133) && (DecriptInt(m_cLU_Str) > 0)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_cLU_Str) >= 5) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) - 5);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
			}
			else if ((DecriptInt(m_cLU_Str) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_cLU_Str) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Vitality DOWN - Diuuude
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 146) && (msY <= sY + 152) && (DecriptInt(m_cLU_Vit) > 0)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_cLU_Vit) >= 5) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) - 5);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
			}
			else if ((DecriptInt(m_cLU_Vit) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_cLU_Vit) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Dexterity DOWN - Diuuude
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 165) && (msY <= sY + 171) && (DecriptInt(m_cLU_Dex) > 0)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_cLU_Dex) >= 5) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) - 5);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
			}
			else if ((DecriptInt(m_cLU_Dex) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_cLU_Dex) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Intelligence DOWN - Diuuude
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 184) && (msY <= sY + 190) && (DecriptInt(m_cLU_Int) > 0)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_cLU_Int) >= 5) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) - 5);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
			}
			else if ((DecriptInt(m_cLU_Int) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_cLU_Int) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Magic DOWN - Diuuude
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 203) && (msY <= sY + 209) && (DecriptInt(m_cLU_Mag) > 0)) {
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_cLU_Mag) >= 5) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) - 5);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
			}
			else if ((DecriptInt(m_cLU_Mag) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_cLU_Mag) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	// Charisma DOWN - Diuuude
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 222) && (msY <= sY + 228) && (DecriptInt(m_cLU_Char) > 0))
	{
		if (m_bCtrlPressed == TRUE) {
			if ((DecriptInt(m_cLU_Char) >= 5) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) - 5);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
			}
			else if ((DecriptInt(m_cLU_Char) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
		else {
			if ((DecriptInt(m_cLU_Char) > 0) && (m_bIsDialogEnabled[42] == FALSE)) {
				m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) - 1);
				m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
			}
			PlaySound('E', 14, 5);
		}
	}

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
	{
		if (m_stDialogBoxInfo[12].sV1 != DecriptInt(m_iLU_Point))
			// Send command to HG - Diuuude, Only if changed - Snoopy
			TempMajestic = 0;
		bSendCommand(CLIENT_REQUEST_LEVELUPSETTINGS, NULL, NULL, NULL, NULL, NULL, NULL);
		m_cLU_Str = EncriptInt(0);
		m_cLU_Vit = EncriptInt(0);
		m_cLU_Dex = EncriptInt(0);
		m_cLU_Int = EncriptInt(0);
		m_cLU_Mag = EncriptInt(0);
		m_cLU_Char = EncriptInt(0);
		DisableDialogBox(12);
		PlaySound('E', 14, 5);
	}
	if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
	{	// Change stats with Majestic
		if ((DecriptInt(m_iGizonItemUpgradeLeft) > 0) && (DecriptInt(m_iLU_Point) <= 0) && (DecriptInt(m_cLU_Str) == 0) && (DecriptInt(m_cLU_Vit) == 0) && (DecriptInt(m_cLU_Dex) == 0) && (DecriptInt(m_cLU_Int) == 0) && (DecriptInt(m_cLU_Mag) == 0) && (DecriptInt(m_cLU_Char) == 0))
		{
			DisableDialogBox(12);
			EnableDialogBox(42, 0, 0, 0);
			PlaySound('E', 14, 5);
		}
	}
}

void CGame::CannotConstruct(int iCode)
{
	switch (iCode) {
		case 1: //
			SetTopMsg(m_pGameMsgList[18]->m_pMsg, 5);
			break;

		case 2: //
			wsprintf(G_cTxt, "%s XY(%d, %d)", m_pGameMsgList[19]->m_pMsg, DecriptInt(m_iConstructLocX), DecriptInt(m_iConstructLocY));
			SetTopMsg(G_cTxt, 5);
			break;

		case 3: //
			SetTopMsg(m_pGameMsgList[20]->m_pMsg, 5);
			break;
		case 4: //
			SetTopMsg(m_pGameMsgList[20]->m_pMsg, 5);
			break;

	}
}

void CGame::DisplayCommaNumber_G_cTxt(int iGold)
{
	char cGold[20];
	int iStrLen;
	ZeroMemory(cGold, sizeof(cGold));
	ZeroMemory(G_cTxt, sizeof(G_cTxt));
	itoa(iGold, cGold, 10);
	iStrLen = strlen(cGold);
	iStrLen--;
	int cnt = 0;
	for (int i = 0; i < iStrLen + 1; i++)
	{
		if ((cnt != 0) && ((cnt + 1) % 4 == 0))
		{
			G_cTxt[cnt] = ',';
			i--;
		}
		else G_cTxt[cnt] = cGold[iStrLen - i];
		cnt++;
	}
	iStrLen = strlen(G_cTxt);
	G_cTxt[iStrLen] = '\0';
	strrev(G_cTxt);

}

void CGame::DrawInventoryShadowMenu(short x, short y, short x2, short y2)
{
	m_DDraw.DrawShadowBox(x, y, x2, y2);
	m_DDraw.DrawShadowBox(x, y, x2, y2);
}

void CGame::DrawDialogBox_Inventory(int msX, int msY)
{
	int i;
	short sX, sY, szX;
	DWORD dwTime = m_dwCurTime;
	char cItemColor;
	sX = m_stDialogBoxInfo[2].sX;
	sY = m_stDialogBoxInfo[2].sY;
	szX = m_stDialogBoxInfo[2].sSizeX;
	short sizex = m_stDialogBoxInfo[2].sSizeX;
	short sizey = m_stDialogBoxInfo[2].sSizeY;
	//	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX, sY, 0);
	/*DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX, sY, 0, FALSE, m_bDialogTrans);//LALORAMOSVER*/

	DrawShadowDialog2(sX, sY, 2);
	PutCenterString_SpriteFont(sX, sX + sizex, sY + 3, "Inventory", 255, 255, 255); 
	wsprintf(G_cTxt, "%d / 50", _iGetTotalItemNum());
	PutString(sX + m_stDialogBoxInfo[2].sSizeX - 200, sY + 7, G_cTxt, RGB(0, 255, 0));

	for (i = 0; i < DEF_MAXITEMS; i++)
		if ((m_cItemOrder[i] != -1) && (m_pItemList[m_cItemOrder[i]] != NULL))
		{
			if (((m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_ITEM)
				&& (m_stMCursor.sSelectedObjectID == m_cItemOrder[i])) || (m_bIsItemEquipped[m_cItemOrder[i]] == TRUE))
			{
			}
			else
			{
				cItemColor = m_pItemList[m_cItemOrder[i]]->m_cItemColor;
				if (m_bIsItemDisabled[m_cItemOrder[i]] == TRUE)
				{
					if (cItemColor == 0)
						m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_cItemOrder[i]]->m_sSprite]->PutTransSprite2(sX + 32 + m_pItemList[m_cItemOrder[i]]->m_sX,
							sY + 44 + m_pItemList[m_cItemOrder[i]]->m_sY, m_pItemList[m_cItemOrder[i]]->m_sSpriteFrame, dwTime);
					else
					{
						if ((m_pItemList[m_cItemOrder[i]]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
							|| (m_pItemList[m_cItemOrder[i]]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
							|| (m_pItemList[m_cItemOrder[i]]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
						{
							m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_cItemOrder[i]]->m_sSprite]->PutTransSpriteRGB(sX + 32 + m_pItemList[m_cItemOrder[i]]->m_sX,
								sY + 44 + m_pItemList[m_cItemOrder[i]]->m_sY, m_pItemList[m_cItemOrder[i]]->m_sSpriteFrame,
								m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0],
								dwTime);
						}
						else
						{
							m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_cItemOrder[i]]->m_sSprite]->PutTransSpriteRGB(sX + 32 + m_pItemList[m_cItemOrder[i]]->m_sX,
								sY + 44 + m_pItemList[m_cItemOrder[i]]->m_sY, m_pItemList[m_cItemOrder[i]]->m_sSpriteFrame,
								m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0],
								dwTime);
						}
					}
				}
				else
				{
					if (cItemColor == 0)
						m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_cItemOrder[i]]->m_sSprite]->PutSpriteFast(sX + 32 + m_pItemList[m_cItemOrder[i]]->m_sX,
							sY + 44 + m_pItemList[m_cItemOrder[i]]->m_sY, m_pItemList[m_cItemOrder[i]]->m_sSpriteFrame, dwTime);
					else
					{
						if ((m_pItemList[m_cItemOrder[i]]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
							|| (m_pItemList[m_cItemOrder[i]]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
							|| (m_pItemList[m_cItemOrder[i]]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
						{
							m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_cItemOrder[i]]->m_sSprite]->PutSpriteRGB(sX + 32 + m_pItemList[m_cItemOrder[i]]->m_sX,
								sY + 44 + m_pItemList[m_cItemOrder[i]]->m_sY, m_pItemList[m_cItemOrder[i]]->m_sSpriteFrame,
								m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0],
								dwTime);
						}
						else {
							m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_cItemOrder[i]]->m_sSprite]->PutSpriteRGB(sX + 32 + m_pItemList[m_cItemOrder[i]]->m_sX,
								sY + 44 + m_pItemList[m_cItemOrder[i]]->m_sY, m_pItemList[m_cItemOrder[i]]->m_sSpriteFrame,
								m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0],
								dwTime);
						}
					}
				}
				if ((m_pItemList[m_cItemOrder[i]]->m_cItemType == DEF_ITEMTYPE_CONSUME)
					|| (m_pItemList[m_cItemOrder[i]]->m_cItemType == DEF_ITEMTYPE_ARROW))
				{
					DisplayCommaNumber_G_cTxt((int)m_pItemList[m_cItemOrder[i]]->m_dwCount); // nbe show, as US: 1,200,000
					PutString2(sX + 29 + m_pItemList[m_cItemOrder[i]]->m_sX + 10, sY + 41 + m_pItemList[m_cItemOrder[i]]->m_sY + 10
						, G_cTxt, 200, 200, 200);
				}
			}
		}
	
	/*if ((msX >= sX + 23) && (msX <= sX + 76) && (msY >= sY + 172) && (msY <= sY + 184))
	{
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX + 23, sY + 172, 1);
	}

	if ((msX >= sX + 140) && (msX <= sX + 212) && (msY >= sY + 172) && (msY <= sY + 184))
	{
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_INVENTORY, sX + 140, sY + 172, 2);
	}*/

	if ((msX >= sX + 22) && (msX <= sX + 73) && (msY >= sY + 160) && (msY <= sY + 160 + 17))
		PutString2(sX + m_stDialogBoxInfo[2].sSizeX - 200, sY + 140 + 20, "Upgrade", 240, 240, 240);
	else
		PutString2(sX + m_stDialogBoxInfo[2].sSizeX - 200, sY + 140 + 20, "Upgrade", 0, 255, 0);

	if ((msX >= sX + 138) && (msX <= sX + 201 + 5) && (msY >= sY + 160) && (msY <= sY + 160 + 17))
		PutString2(sX + m_stDialogBoxInfo[2].sSizeX - 22 - 65, sY + 140 + 20, "Manufacture", 240, 240, 240);
	else
		PutString2(sX + m_stDialogBoxInfo[2].sSizeX - 22 - 65, sY + 140 + 20, "Manufacture", 0, 255, 0);

	/*if ((msX >= sX + 20) && (msX <= sX + 77) && (msY >= sY + 4) && (msY <= sY + 17)) {
		// Primera línea de texto
		PutString(sX + 20, sY + 4, "Enchanting", RGB(255, 255, 255));
		// Segunda línea con desplazamiento para negrita
		PutString(sX + 21, sY + 4, "Enchanting", RGB(255, 255, 255));
	}
	else {
		// Primera línea de texto
		PutString(sX + 20, sY + 4, "Enchanting", RGB(223, 205, 113));
		// Segunda línea con desplazamiento para negrita
		PutString(sX + 21, sY + 4, "Enchanting", RGB(223, 205, 113));
	}*/

	

	DrawDialogCord(sX, sY, msX, msY);
}


void CGame::CrusadeContributionResult(int iWarContribution)
{
	int i;
	char cTemp[120];
	DisableDialogBox(18);
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
	{
		if (m_pMsgTextList[i] != NULL)
			delete m_pMsgTextList[i];
		m_pMsgTextList[i] = NULL;
	}
	if (iWarContribution > 0)
	{
		PlaySound('E', 23, 0, 0);
		PlaySound('C', 21, 0, 0);
		PlaySound('C', 22, 0, 0);
		m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[22]->m_pMsg, NULL); // Congratulations! Your nation
		m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[23]->m_pMsg, NULL); // was victory in the battle!
		m_pMsgTextList[2] = new class CMsg(NULL, " ", NULL);
		m_pMsgTextList[3] = new class CMsg(NULL, m_pGameMsgList[24]->m_pMsg, NULL); // As a victorious citizen
		m_pMsgTextList[4] = new class CMsg(NULL, m_pGameMsgList[25]->m_pMsg, NULL); // You will receive
		m_pMsgTextList[5] = new class CMsg(NULL, m_pGameMsgList[26]->m_pMsg, NULL); // a prize
		m_pMsgTextList[6] = new class CMsg(NULL, " ", NULL);
		m_pMsgTextList[7] = new class CMsg(NULL, m_pGameMsgList[27]->m_pMsg, NULL); // Experience point of the battle contribution:
		ZeroMemory(cTemp, sizeof(cTemp));											//
		wsprintf(cTemp, "+%dExp Points!", iWarContribution);
		m_pMsgTextList[8] = new class CMsg(NULL, cTemp, NULL);
		for (i = 9; i < 18; i++)
			m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);

	}
	else if (iWarContribution < 0)
	{
		PlaySound('E', 24, 0, 0);
		PlaySound('C', 12, 0, 0);
		PlaySound('C', 13, 0, 0);
		m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[28]->m_pMsg, NULL); // Unfortunately! Your country
		m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[29]->m_pMsg, NULL); // have lost the all out war.
		m_pMsgTextList[2] = new class CMsg(NULL, " ", NULL);
		m_pMsgTextList[3] = new class CMsg(NULL, m_pGameMsgList[30]->m_pMsg, NULL); // As a losser citizen;
		m_pMsgTextList[4] = new class CMsg(NULL, m_pGameMsgList[31]->m_pMsg, NULL); // the prize that accomplishes
		m_pMsgTextList[5] = new class CMsg(NULL, m_pGameMsgList[32]->m_pMsg, NULL); // will not be given.
		m_pMsgTextList[6] = new class CMsg(NULL, " ", NULL);
		m_pMsgTextList[7] = new class CMsg(NULL, m_pGameMsgList[33]->m_pMsg, NULL); // I hope you to win
		m_pMsgTextList[8] = new class CMsg(NULL, m_pGameMsgList[34]->m_pMsg, NULL); // in the next battle
		for (i = 9; i < 18; i++)
			m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
	}
	else if (iWarContribution == 0)
	{
		PlaySound('E', 25, 0, 0);
		m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[50]->m_pMsg, NULL); // The battle that you have participated
		m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[51]->m_pMsg, NULL); // is already finished;
		m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[52]->m_pMsg, NULL); //
		m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
		m_pMsgTextList[4] = new class CMsg(NULL, m_pGameMsgList[53]->m_pMsg, NULL); // You must connect after finishing
		m_pMsgTextList[5] = new class CMsg(NULL, m_pGameMsgList[54]->m_pMsg, NULL); // the previous and before starting
		m_pMsgTextList[6] = new class CMsg(NULL, m_pGameMsgList[55]->m_pMsg, NULL); // the next battle so you can receive
		m_pMsgTextList[7] = new class CMsg(NULL, m_pGameMsgList[56]->m_pMsg, NULL); // the prize
		for (i = 8; i < 18; i++)
			m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
	}
	EnableDialogBox(18, NULL, NULL, NULL);
}


void CGame::CrusadeWarResult(int iWinnerSide)
{
	int i, iPlayerSide;
	DisableDialogBox(18);
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
	{
		if (m_pMsgTextList[i] != NULL)
			delete m_pMsgTextList[i];
		m_pMsgTextList[i] = NULL;
	}
	if (DecriptBool(m_bCitizen) == FALSE) iPlayerSide = 0;
	else if (DecriptBool(m_bAresden) == TRUE) iPlayerSide = 1;
	else if (DecriptBool(m_bAresden) == FALSE) iPlayerSide = 2;
	if (iPlayerSide == 0)
	{
		switch (iWinnerSide) {
			case 0:
				PlaySound('E', 25, 0, 0);
				m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[35]->m_pMsg, NULL); // All out war finished!
				m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[36]->m_pMsg, NULL); // There was a draw in the
				m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[37]->m_pMsg, NULL); // battle
				m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
				break;
			case 1:
				PlaySound('E', 25, 0, 0);
				m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[35]->m_pMsg, NULL); // All out war finished!
				m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[38]->m_pMsg, NULL); // Aresden was victorious
				m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[39]->m_pMsg, NULL); // and put an end to the war
				m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
				break;
			case 2:
				PlaySound('E', 25, 0, 0);
				m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[35]->m_pMsg, NULL); // All out war finished!
				m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[40]->m_pMsg, NULL); // Elvine was victorious
				m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[41]->m_pMsg, NULL); // and put an end to the war
				m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
				break;
		}
		for (i = 4; i < 18; i++)
			m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
	}
	else
	{
		if (iWinnerSide == 0)
		{
			PlaySound('E', 25, 0, 0);
			m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[35]->m_pMsg, NULL); // All out war finished!
			m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[36]->m_pMsg, NULL); // There was a draw in the
			m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[37]->m_pMsg, NULL); // battle
			m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
			for (i = 4; i < 18; i++)
				m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
		}
		else
		{
			if (iWinnerSide == iPlayerSide)
			{
				PlaySound('E', 23, 0, 0);
				PlaySound('C', 21, 0, 0);
				PlaySound('C', 22, 0, 0);
				switch (iWinnerSide) {
					case 1:
						m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[35]->m_pMsg, NULL); // All out war finished!;
						m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[38]->m_pMsg, NULL); // Aresden was victorious;
						m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[39]->m_pMsg, NULL); // and put an end to the war
						m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
						m_pMsgTextList[4] = new class CMsg(NULL, m_pGameMsgList[42]->m_pMsg, NULL); // Congratulations!
						m_pMsgTextList[5] = new class CMsg(NULL, m_pGameMsgList[43]->m_pMsg, NULL); // As a victorious citizen
						m_pMsgTextList[6] = new class CMsg(NULL, m_pGameMsgList[44]->m_pMsg, NULL); // You will receive
						m_pMsgTextList[7] = new class CMsg(NULL, m_pGameMsgList[45]->m_pMsg, NULL); // a prize
						break;
					case 2:
						m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[35]->m_pMsg, NULL); // All out war finished!
						m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[40]->m_pMsg, NULL); // Elvine was victorious
						m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[41]->m_pMsg, NULL); // and put an end to the war
						m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
						m_pMsgTextList[4] = new class CMsg(NULL, m_pGameMsgList[42]->m_pMsg, NULL); // Congratulations!
						m_pMsgTextList[5] = new class CMsg(NULL, m_pGameMsgList[43]->m_pMsg, NULL); // As a victorious citizen
						m_pMsgTextList[6] = new class CMsg(NULL, m_pGameMsgList[44]->m_pMsg, NULL); // You will receive
						m_pMsgTextList[7] = new class CMsg(NULL, m_pGameMsgList[45]->m_pMsg, NULL); // a prize
						break;
				}
				for (i = 8; i < 18; i++)
					m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
			}
			else if (iWinnerSide != iPlayerSide)
			{
				PlaySound('E', 24, 0, 0);
				PlaySound('C', 12, 0, 0);
				PlaySound('C', 13, 0, 0);
				switch (iWinnerSide) {
					case 1:
						m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[35]->m_pMsg, NULL); // All out war finished!
						m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[38]->m_pMsg, NULL); // Aresden was victorious;
						m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[39]->m_pMsg, NULL); // and put an end to the war
						m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
						m_pMsgTextList[4] = new class CMsg(NULL, m_pGameMsgList[46]->m_pMsg, NULL); // Unfortunately,
						m_pMsgTextList[5] = new class CMsg(NULL, m_pGameMsgList[47]->m_pMsg, NULL); // As a losser citizen
						m_pMsgTextList[6] = new class CMsg(NULL, m_pGameMsgList[48]->m_pMsg, NULL); // the prize that accomplishes
						m_pMsgTextList[7] = new class CMsg(NULL, m_pGameMsgList[49]->m_pMsg, NULL); // will not be given.
						break;
					case 2:
						m_pMsgTextList[0] = new class CMsg(NULL, m_pGameMsgList[35]->m_pMsg, NULL); // All out war finished!
						m_pMsgTextList[1] = new class CMsg(NULL, m_pGameMsgList[40]->m_pMsg, NULL); // Elvine was victorious
						m_pMsgTextList[2] = new class CMsg(NULL, m_pGameMsgList[41]->m_pMsg, NULL); // and put an end to the war
						m_pMsgTextList[3] = new class CMsg(NULL, " ", NULL);
						m_pMsgTextList[4] = new class CMsg(NULL, m_pGameMsgList[46]->m_pMsg, NULL); // Unfortunately,
						m_pMsgTextList[5] = new class CMsg(NULL, m_pGameMsgList[47]->m_pMsg, NULL); // As a losser citizen
						m_pMsgTextList[6] = new class CMsg(NULL, m_pGameMsgList[48]->m_pMsg, NULL); // the prize that accomplishes
						m_pMsgTextList[7] = new class CMsg(NULL, m_pGameMsgList[49]->m_pMsg, NULL); // will not be given.
						break;
				}
				for (i = 8; i < 18; i++)
					m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
			}
		}
	}
	EnableDialogBox(18, NULL, NULL, NULL);
	DisableDialogBox(36);
	DisableDialogBox(37);
	DisableDialogBox(38);
}

void CGame::_Draw_UpdateScreen_OnCreateNewAccount()
{
	m_DDraw.ClearBackB4();
	if (c_reso->IsResolution() == C640x480)
		m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, 0);
	else if (c_reso->IsResolution() == C800x600)
		m_pSprite[SPRID_BACKGROUND + 1]->PutSpriteFast(0, 0, 0, 0);
	else if (c_reso->IsResolution() == C1024x768)
		m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 168, 116, 1, TRUE);

	DecriptString(m_cAccountName);
	PutString2(329, 110, m_cAccountName, 200, 200, 200);
	EncriptString(m_cAccountName);

	DecriptString(m_cAccountPassword);
	PutString(329, 125, m_cAccountPassword, RGB(200, 200, 200), TRUE, 1);
	PutString(329, 140, m_cAccountPassword, RGB(200, 200, 200), TRUE, 1);
	EncriptString(m_cAccountPassword);

	PutString2(300, 202, m_cAccountCountry, 200, 200, 200);
	PutString2(300, 218, m_cAccountSSN, 200, 200, 200);
	PutString2(194, 257, m_cEmailAddr, 200, 200, 200);
}

void CGame::DrawChatMsgBox(short sX, short sY, int iChatIndex, BOOL bIsPreDC)
{
	char cMsg[100], cMsgA[22], cMsgB[22], cMsgC[22], *cp;
	int  iRet, iLines, i, iSize, iSize2, iLoc, iFontSize;
	DWORD dwTime;
	COLORREF rgb;
	BOOL bIsTrans;
	RECT rcRect;
	SIZE Size;
	short color = 0;
	int uX, uY, uU;

	ZeroMemory(cMsg, sizeof(cMsg));
	ZeroMemory(cMsgA, sizeof(cMsgA));
	ZeroMemory(cMsgB, sizeof(cMsgB));
	ZeroMemory(cMsgC, sizeof(cMsgC));


	dwTime = m_pChatMsgList[iChatIndex]->m_dwTime;
	strcpy(cMsg, m_pChatMsgList[iChatIndex]->m_pMsg);
	cp = (char *)cMsg;
	iLines = 0;

	if (StaggerDmg)
	{
		rgb = RGB(255, 255, 255);
		switch (m_pChatMsgList[iChatIndex]->m_cType) {

		case 1:
			rgb = RGB(255, 255, 255);
			break;
		case 20:
			rgb = RGB(255, 255, 20);
			if ((m_dwCurTime - dwTime) < 650) return;
			else dwTime += 650;
			break;

		case 30:
			color = 2;
			rgb = RGB(240, 15, 15);
			break;

		case 31:
			color = 3;
			rgb = RGB(7, 23, 247);
			break;

		case 41:
			rgb = RGB(255, 80, 80);
			break;

		case 42:
			rgb = RGB(255, 80, 80);
			if ((m_dwCurTime - dwTime) < 650) return;
			else dwTime += 650;
			break;

		case 43:
			rgb = RGB(255, 80, 80);
			break;
		case 44:
			rgb = RGB(80, 80, 255);
			break;
		case 45:
			rgb = RGB(80, 255, 80);
			break;


		}

		if (strlen(cp) != 0) {
			memcpy(cMsgA, cp, 20);

			iRet = GetCharKind(cMsgA, 19);
			if (iRet == CODE_HAN1) {
				cMsgA[20] = cp[20];
				cp++;
			}
			cp += 20;
			iLines = 1;
		}

		if (strlen(cp) != 0) {
			memcpy(cMsgB, cp, 20);

			iRet = GetCharKind(cMsgB, 19);
			if (iRet == CODE_HAN1) {
				cMsgB[20] = cp[20];
				cp++;
			}
			cp += 20;
			iLines = 2;
		}

		if (strlen(cp) != 0) {
			memcpy(cMsgC, cp, 20);

			iRet = GetCharKind(cMsgC, 19);
			if (iRet == CODE_HAN1) {
				cMsgC[20] = cp[20];
				cp++;
			}
			cp += 20;
			iLines = 3;
		}

		iSize = 0;
		for (i = 0; i < 20; i++)
			if (cMsgA[i] != 0)

				if ((unsigned char)cMsgA[i] >= 128) {
					iSize += 5;	//6
					i++;
				}
				else iSize += 4;

				iLoc = m_dwCurTime - dwTime;
				switch (m_pChatMsgList[iChatIndex]->m_cType) {
				case 21:
				case 22:
				case 23://...
					if (iLoc > 80) iLoc = 10;
					else iLoc = iLoc >> 3;
					break;
				default://
					if (iLoc > 352) iLoc = 9;
					else if (iLoc > 320) iLoc = 10;
					else iLoc = iLoc >> 5;
					break;
				}

				if (m_cDetailLevel == 0)
					bIsTrans = FALSE;
				else bIsTrans = TRUE;


				// nuevo 

				switch (m_pChatMsgList[iChatIndex]->m_cType) {
				case 41:
				case 42:
				case 43:
				case 44:
				case 45:
					iSize2 = 0;
					for (i = 0; i < 100; i++)
						if (cMsg[i] != 0)
							if ((unsigned char)cMsg[i] >= 128) {
								iSize2 += 2;
								i++;
							}
							else iSize2 += 4;

							if (m_Misc.bCheckIMEString(cMsg) == FALSE)
							{
								PutString(sX - iSize2, sY - 65 - iLoc, cMsg, RGB(180, 30, 30));
								PutString(sX - iSize2 + 1, sY - 65 - iLoc, cMsg, RGB(180, 30, 30));
							}
							else
							{
								DecriptString(m_cCurLocation);
								short loc_side = get_object_side(m_pChatMsgList[iChatIndex]->m_iObjectID);
								//if ((memcmp(m_cCurLocation, "evento13", 8) != 0) || (memcmp(m_cCurLocation, "evento14", 8) != 0))
								if ((memcmp(m_cCurLocation, "evento13", 8) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
								{
									switch (loc_side)
									{
									case OBJARESDEN: PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[23] * 4, m_wG[23] * 4, m_wB[23] * 4, FALSE, 0); break;//19
									case OBJELVINE: PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[23] * 4, m_wG[23] * 4, m_wB[23] * 4, FALSE, 0);  break;//20
									default:  PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[23] * 4, m_wG[23] * 4, m_wB[23] * 4, FALSE, 0); break;//1
									}
								}
								else
								{
									switch (loc_side)
									{
									case OBJARESDEN: PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[14] * 4, m_wG[14] * 4, m_wB[14] * 4, FALSE, 0); break;//19
									case OBJELVINE: PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[10] * 4, m_wG[10] * 4, m_wB[10] * 4, FALSE, 0);  break;//20
									default:  PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[5] * 4, m_wG[5] * 4, m_wB[5] * 4, FALSE, 0); break;//1
									}
								}
								EncriptString(m_cCurLocation);
							}
							break;
				case 21:
				case 22:
				case 23:
					if (m_pMapData->bSetChatMsgOwner(m_pChatMsgList[iChatIndex]->m_iObjectID, -10, -10, iChatIndex) == FALSE)
					{
						delete m_pChatMsgList[iChatIndex];
						m_pChatMsgList[iChatIndex] = NULL;
						break;
					}


					for (uU = 0; uU < DEF_MAXCHATMSGS; uU++)
					{
						if (m_pChatMsgList[uU] != NULL)
							if (m_pChatMsgList[uU]->iDispLines == 1)
							{
								for (int uV = 0; uV < DEF_MAXCHATMSGS; uV++)
								{
									if (m_pChatMsgList[uV] != NULL)
									{
										if (m_pChatMsgList[uV]->m_iObjectID == m_pChatMsgList[uU]->m_iObjectID)
										{
											m_pChatMsgList[uV]->m_sX = m_pChatMsgList[uU]->m_sX;
											m_pChatMsgList[uV]->m_sY = m_pChatMsgList[uU]->m_sY;
										}
									}
								}
							}
					}

					uX = m_pChatMsgList[i]->m_sX;
					uY = m_pChatMsgList[i]->m_sY;

					if (true) //FIXED
					{
						if (m_pChatMsgList[iChatIndex]->iDispLines == 5)
							PutString_SprFont3(26 + uX - 17, 60 + uY - 65 - (0 * 12),
								m_pChatMsgList[iChatIndex]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 2);
						if (m_pChatMsgList[iChatIndex]->iDispLines == 4)
							PutString_SprFont3(25 + uX - 17, 45 + uY - 65 - (0 * 12),
								m_pChatMsgList[iChatIndex]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 2);
						if (m_pChatMsgList[iChatIndex]->iDispLines == 3)
							PutString_SprFont3(18 + uX - 17, 30 + uY - 65 - (0 * 12),
								m_pChatMsgList[iChatIndex]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 1);
						if (m_pChatMsgList[iChatIndex]->iDispLines == 2)
							PutString_SprFont3(14 + uX - 17, 15 + uY - 65 - (0 * 12),
								m_pChatMsgList[iChatIndex]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 1);
					}
					if (m_pChatMsgList[iChatIndex]->iDispLines == 1)
						PutString_SprFont3(uX - 17, uY - 65 - (0 * 12),
							m_pChatMsgList[iChatIndex]->m_pMsg, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, false, 0);

				case 20:
				default:
					if (bIsPreDC == FALSE)
						m_DDraw._GetBackBufferDC();

					GetTextExtentPoint32(m_DDraw.m_hDC, cMsg, strlen(cMsg), &Size);

					switch (Size.cx / 160) {
					case 0:
						SetRect(&rcRect, sX - 80 + 1, sY - 65 - iLoc, sX + 80 + 1, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 65 - iLoc + 1, sX + 80, sY - iLoc + 1);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 65 - iLoc, sX + 80, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, rgb);
						break;

					case 1:
						SetRect(&rcRect, sX - 80 + 1, sY - 83 - iLoc, sX + 80 + 1, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 83 - iLoc + 1, sX + 80, sY - iLoc + 1);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 83 - iLoc, sX + 80, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, rgb);
						break;

					case 2:
						SetRect(&rcRect, sX - 80 + 1, sY - 101 - iLoc, sX + 80 + 1, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 101 - iLoc + 1, sX + 80, sY - iLoc + 1);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 101 - iLoc, sX + 80, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, rgb);
						break;

					case 3:
						SetRect(&rcRect, sX - 80 + 1, sY - 119 - iLoc, sX + 80 + 1, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 119 - iLoc + 1, sX + 80, sY - iLoc + 1);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 119 - iLoc, sX + 80, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, rgb);
						break;
					}

					if (bIsPreDC == FALSE)
						m_DDraw._ReleaseBackBufferDC();
					break;
				}
	}
	else
	{
		rgb = RGB(255, 255, 255);
		switch (m_pChatMsgList[iChatIndex]->m_cType) {
		case 1:
			rgb = RGB(255, 255, 255);
			break;
		case 20:
			rgb = RGB(255, 255, 20);
			// �޽��� ǥ�ÿ� �����̰� �ɸ���.
			if ((m_dwCurTime - dwTime) < 650) return;
			else dwTime += 650;
			break;
		case 41:
			rgb = RGB(255, 80, 80);
			break;

		case 42:
			rgb = RGB(255, 80, 80);
			if ((m_dwCurTime - dwTime) < 650) return;
			else dwTime += 650;
			break;
			//Nuevo Color magialalo
		case 43:
			rgb = RGB(36, 213, 0);
			break;
		}

		if (strlen(cp) != 0) {
			memcpy(cMsgA, cp, 20);

			iRet = GetCharKind(cMsgA, 19);
			if (iRet == CODE_HAN1) {
				cMsgA[20] = cp[20];
				cp++;
			}
			cp += 20;
			iLines = 1;
		}

		if (strlen(cp) != 0) {
			memcpy(cMsgB, cp, 20);

			iRet = GetCharKind(cMsgB, 19);
			if (iRet == CODE_HAN1) {
				cMsgB[20] = cp[20];
				cp++;
			}
			cp += 20;
			iLines = 2;
		}

		if (strlen(cp) != 0) {
			memcpy(cMsgC, cp, 20);

			iRet = GetCharKind(cMsgC, 19);
			if (iRet == CODE_HAN1) {
				cMsgC[20] = cp[20];
				cp++;
			}
			cp += 20;
			iLines = 3;
		}

		iSize = 0;
		for (i = 0; i < 20; i++)
			if (cMsgA[i] != 0)

				if ((unsigned char)cMsgA[i] >= 128) {
					iSize += 5;	//6
					i++;
				}
				else iSize += 4;

				iLoc = m_dwCurTime - dwTime;
				switch (m_pChatMsgList[iChatIndex]->m_cType) {
				case 21:
				case 22:
				case 23://...
					if (iLoc > 80) iLoc = 10;
					else iLoc = iLoc >> 3;
					break;
				default://
					if (iLoc > 352) iLoc = 9;
					else if (iLoc > 320) iLoc = 10;
					else iLoc = iLoc >> 5;
					break;
				}

				if (m_cDetailLevel >= 0)
					/*		 bIsTrans = FALSE;
					else*/ bIsTrans = TRUE;

				switch (m_pChatMsgList[iChatIndex]->m_cType) {
				case 41:
				case 42:
					iSize2 = 0;
					for (i = 0; i < 100; i++)
						if (cMsg[i] != 0)
							if ((unsigned char)cMsg[i] >= 128) {
								iSize2 += 5;
								i++;
							}
							else iSize2 += 4;
							if (m_Misc.bCheckIMEString(cMsg) == FALSE)
							{
								PutString(sX - iSize2, sY - 65 - iLoc, cMsg, RGB(180, 30, 30));
								PutString(sX - iSize2 + 1, sY - 65 - iLoc, cMsg, RGB(180, 30, 30));
							}
							else
							{
								DecriptString(m_cCurLocation);
								short loc_side = get_object_side(m_pChatMsgList[iChatIndex]->m_iObjectID);
								if ((memcmp(m_cCurLocation, "evento13", 8) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
								{
									switch (loc_side)
									{
									case OBJARESDEN: PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[23] * 4, m_wG[23] * 4, m_wB[23] * 4, FALSE, 0); break;//19
									case OBJELVINE: PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[23] * 4, m_wG[23] * 4, m_wB[23] * 4, FALSE, 0);  break;//20
									default:  PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[23] * 4, m_wG[23] * 4, m_wB[23] * 4, FALSE, 0); break;//1
									}
								}
								else
								{
									switch (loc_side)
									{
									case OBJARESDEN: PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[14] * 4, m_wG[14] * 4, m_wB[14] * 4, FALSE, 0); break;//19
									case OBJELVINE: PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[10] * 4, m_wG[10] * 4, m_wB[10] * 4, FALSE, 0);  break;//20
									default:  PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[5] * 4, m_wG[5] * 4, m_wB[5] * 4, FALSE, 0); break;//1
									}
								}
								EncriptString(m_cCurLocation);
							}
							break;
				case 43://agregado Lalo Color Magia
					iSize2 = 0;
					for (i = 0; i < 100; i++)
						if (cMsg[i] != 0)
							if ((unsigned char)cMsg[i] >= 128) {
								iSize2 += 5;
								i++;
							}
							else iSize2 += 4;
							if (m_Misc.bCheckIMEString(cMsg) == FALSE)
							{
								PutString(sX - iSize2, sY - 65 - iLoc, cMsg, RGB(30, 180, 30));
								PutString(sX - iSize2 + 1, sY - 65 - iLoc, cMsg, RGB(30, 180, 30));
							}
							else PutString_SprFont3(sX - iSize2, sY - 65 - iLoc, cMsg, m_wR[16] * 4, m_wG[16] * 4, m_wB[16] * 4, FALSE, 0);
							break;

				case 21:
				case 22:
				case 23:
					iFontSize = 23 - (int)m_pChatMsgList[iChatIndex]->m_cType;
					switch (iLines) {
					case 1:
						PutString_SprFont3(sX - iSize, sY - 65 - iLoc, cMsgA, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, bIsTrans, iFontSize);
						break;
					case 2:
						PutString_SprFont3(sX - iSize, sY - 81 - iLoc, cMsgA, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, bIsTrans, iFontSize);
						PutString_SprFont3(sX - iSize, sY - 65 - iLoc, cMsgB, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, bIsTrans, iFontSize);
						break;
					case 3:
						PutString_SprFont3(sX - iSize, sY - 97 - iLoc, cMsgA, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, bIsTrans, iFontSize);
						PutString_SprFont3(sX - iSize, sY - 81 - iLoc, cMsgB, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, bIsTrans, iFontSize);
						PutString_SprFont3(sX - iSize, sY - 65 - iLoc, cMsgC, m_wR[13] * 2, m_wG[13] * 2, m_wB[13] * 2, bIsTrans, iFontSize);
						break;
					}
					break;

				case 24: // HP - ZeroEoyPnk///lalin ver
					iFontSize = 23 - (int)m_pChatMsgList[iChatIndex]->m_cType;
					PutString_SprFont2(sX - iSize, sY - 65 - iLoc, cMsgA, 255, 0, 0);
					break;
				case 25: // MP - ZeroEoyPnk
					iFontSize = 23 - (int)m_pChatMsgList[iChatIndex]->m_cType;
					PutString_SprFont2(sX - iSize, sY - 65 - iLoc, cMsgA, 0, 0, 255);
					break;
				case 26: // SP - ZeroEoyPnk
					iFontSize = 23 - (int)m_pChatMsgList[iChatIndex]->m_cType;
					PutString_SprFont2(sX - iSize, sY - 65 - iLoc, cMsgA, 0, 255, 0);
					break;

				case 20:
				default:
					if (bIsPreDC == FALSE)
						m_DDraw._GetBackBufferDC();

					GetTextExtentPoint32(m_DDraw.m_hDC, cMsg, strlen(cMsg), &Size);

					switch (Size.cx / 160) {
					case 0:
						SetRect(&rcRect, sX - 80 + 1, sY - 65 - iLoc, sX + 80 + 1, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 65 - iLoc + 1, sX + 80, sY - iLoc + 1);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 65 - iLoc, sX + 80, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, rgb);
						break;

					case 1:
						SetRect(&rcRect, sX - 80 + 1, sY - 83 - iLoc, sX + 80 + 1, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 83 - iLoc + 1, sX + 80, sY - iLoc + 1);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 83 - iLoc, sX + 80, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, rgb);
						break;

					case 2:
						SetRect(&rcRect, sX - 80 + 1, sY - 101 - iLoc, sX + 80 + 1, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 101 - iLoc + 1, sX + 80, sY - iLoc + 1);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 101 - iLoc, sX + 80, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, rgb);
						break;

					case 3:
						SetRect(&rcRect, sX - 80 + 1, sY - 119 - iLoc, sX + 80 + 1, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 119 - iLoc + 1, sX + 80, sY - iLoc + 1);
						m_DDraw.DrawText(&rcRect, cMsg, RGB(0, 0, 0));

						SetRect(&rcRect, sX - 80, sY - 119 - iLoc, sX + 80, sY - iLoc);
						m_DDraw.DrawText(&rcRect, cMsg, rgb);
						break;
					}

					if (bIsPreDC == FALSE)
						m_DDraw._ReleaseBackBufferDC();
					break;
				}
	}	
}

void CGame::ClearContents_OnSelectCharacter()
{
	m_cCurFocus = 1;
}



void CGame::UpdateScreen_OnSelectCharacter()
{
	short sX, sY, msX, msY, msZ;
	char  cLB, cRB, cTotalChar;
	char  cMIresult;
	static class CMouseInterface * pMI;
	DWORD dwTime;
	static DWORD dwCTime;
	DWORD dwGlareTime;

	int iMIbuttonNum;

	dwTime = timeGetTime();
	sX = 0;
	sY = 0;
	cTotalChar = 0;
	MarketOpen = FALSE; // EncriptBool(FALSE);
	//added resolution lalo
	int res_x = 0;
	int res_y = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 80;
		res_y = 60;
	}
	else if(c_reso->IsResolution() == C1024x768)
	{
		res_x = 194;
		res_y = 142;
	}

	if (m_cGameModeCount == 0)
	{
		G_cSpriteAlphaDegree = 1;
		InitGameSettings();
		pMI = new class CMouseInterface;
		pMI->AddRect(100 + res_x, 50 + res_y, 210 + res_x, 250 + res_y);
		pMI->AddRect(211 + res_x, 50 + res_y, 321 + res_x, 250 + res_y);
		pMI->AddRect(322 + res_x, 50 + res_y, 431 + res_x, 250 + res_y);
		pMI->AddRect(432 + res_x, 50 + res_y, 542 + res_x, 250 + res_y);

		pMI->AddRect(360 + res_x, 283 + res_y, 545 + res_x, 315 + res_y);
		pMI->AddRect(360 + res_x, 316 + res_y, 545 + res_x, 345 + res_y);
		pMI->AddRect(360 + res_x, 346 + res_y, 545 + res_x, 375 + res_y);
		pMI->AddRect(360 + res_x, 376 + res_y, 545 + res_x, 405 + res_y);
		pMI->AddRect(360 + res_x, 406 + res_y, 545 + res_x, 435 + res_y);

		m_cMaxFocus = 4;
		if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
		if (m_cCurFocus < 1)		   m_cCurFocus = 1;

		m_cArrowPressed = 0;
		m_bEnterPressed = FALSE;

		dwCTime = timeGetTime();
		dwGlareTime = timeGetTime();
	}

	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_cArrowPressed != 0)
	{
		switch (m_cArrowPressed) {
			case 2:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;
			case 4:
				m_cCurFocus--;
				if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
				break;
		}
		m_cArrowPressed = 0;
	}

	if (m_bEscPressed == TRUE)
	{
		ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	if (m_bEnterPressed == TRUE)
	{
		m_bEnterPressed = FALSE;
		PlaySound('E', 14, 5);

		if (m_pCharList[m_cCurFocus - 1] != NULL)
		{
			if (m_pCharList[m_cCurFocus - 1]->m_sSex != NULL)
			{
				ZeroMemory(m_cPlayerName, sizeof(m_cPlayerName));
				strcpy(m_cPlayerName, m_pCharList[m_cCurFocus - 1]->m_cName);
			//	EncriptString(m_cPlayerName);

				m_iLevel = EncriptInt((int)m_pCharList[m_cCurFocus - 1]->m_sLevel);
			//	DecriptString(m_cPlayerName);
				if (m_Misc.bCheckValidString(m_cPlayerName) == TRUE) {
			//		EncriptString(m_cPlayerName);
					m_pSprite[DEF_SPRID_INTERFACE_ND_LOGIN]->_iCloseSprite();
					m_pSprite[DEF_SPRID_INTERFACE_ND_MAINMENU]->_iCloseSprite();
					m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
					GetIPByDNS();

					DecriptString(m_cLogServerAddr);
					m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
					EncriptString(m_cLogServerAddr);

					m_pLSock->bInitBufferSize(30000);
					ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
					m_dwConnectMode = NUCLEO_REQUEST_ENTERGAME;
					m_wEnterGameType = DEF_ENTERGAMEMSGTYPE_NEW;
					ZeroMemory(m_cMsg, sizeof(m_cMsg));
					strcpy(m_cMsg, "33");
					ZeroMemory(m_cMapName, sizeof(m_cMapName));
					memcpy(m_cMapName, m_pCharList[m_cCurFocus - 1]->m_cMapName, 10);
					EncriptString(m_cMapName);
					delete pMI;
					return;
				}
		//		EncriptString(m_cPlayerName);
			}
		}
		else
		{
			_InitOnCreateNewCharacter();
			ChangeGameMode(DEF_GAMEMODE_ONCREATENEWCHARACTER);
			delete pMI;
			return;
		}
	}

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	UpdateScreen_OnSelectCharacter(sX, sY, msX, msY);

	if ((dwTime - dwCTime) > 100)
	{
		m_cMenuFrame++;
		if (m_bDrawFlagDir == FALSE)
		{
			m_iDrawFlag++;
			if (m_iDrawFlag >= 25)
			{
				m_iDrawFlag = 25;
				m_bDrawFlagDir = TRUE;
			}
		}
		else
		{
			m_iDrawFlag--;
			if (m_iDrawFlag < 0)
			{
				m_iDrawFlag = 0;
				m_bDrawFlagDir = FALSE;
			}
		}
		if (m_bDrawFlagDir2 == FALSE)
		{
			m_sDrawFlag++;
			if (m_sDrawFlag >= 100)
			{
				m_sDrawFlag = 100;
				m_bDrawFlagDir2 = TRUE;
			}
		}
		else
		{
			m_sDrawFlag--;
			if (m_sDrawFlag < 0)
			{
				m_sDrawFlag = 0;
				m_bDrawFlagDir2 = FALSE;
			}
		}
		if (m_bDrawFlagDir3 == FALSE)
		{
			m_sDrawFlag3--;
			if (m_sDrawFlag3 <= -50)
			{
				m_sDrawFlag3 = -50;
				m_bDrawFlagDir3 = TRUE;
			}
		}
		else
		{
			m_sDrawFlag3++;
			if (m_sDrawFlag3 >= 0)
			{
				m_sDrawFlag3 = 0;
				m_bDrawFlagDir3 = FALSE;
			}
		}
		dwCTime = dwTime;
	}
	if (m_cMenuFrame >= 8)
	{
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8)
		{
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;

	DrawVersion();
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK) {
		PlaySound('E', 14, 5);

		switch (iMIbuttonNum) {
			case 1:
			case 2:
			case 3:
			case 4:
				if (m_cCurFocus != iMIbuttonNum)
					m_cCurFocus = iMIbuttonNum;
				else
				{
					if (m_pCharList[m_cCurFocus - 1] != NULL)
					{
						if (m_pCharList[m_cCurFocus - 1]->m_sSex != NULL)
						{
							ZeroMemory(m_cPlayerName, sizeof(m_cPlayerName));
							strcpy(m_cPlayerName, m_pCharList[m_cCurFocus - 1]->m_cName);
						//	EncriptString(m_cPlayerName);

							m_iLevel = EncriptInt((int)m_pCharList[m_cCurFocus - 1]->m_sLevel);
						//	DecriptString(m_cPlayerName);
							if (m_Misc.bCheckValidString(m_cPlayerName) == TRUE)
							{
						//		EncriptString(m_cPlayerName);
								m_pSprite[DEF_SPRID_INTERFACE_ND_LOGIN]->_iCloseSprite();
								m_pSprite[DEF_SPRID_INTERFACE_ND_MAINMENU]->_iCloseSprite();
								m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
								GetIPByDNS();

								DecriptString(m_cLogServerAddr);
								m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
								EncriptString(m_cLogServerAddr);

								m_pLSock->bInitBufferSize(30000);
								ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
								m_dwConnectMode = NUCLEO_REQUEST_ENTERGAME;
								m_wEnterGameType = DEF_ENTERGAMEMSGTYPE_NEW;
								ZeroMemory(m_cMsg, sizeof(m_cMsg));
								strcpy(m_cMsg, "33");
								ZeroMemory(m_cMapName, sizeof(m_cMapName));
								memcpy(m_cMapName, m_pCharList[m_cCurFocus - 1]->m_cMapName, 10);
								EncriptString(m_cMapName);
								delete pMI;
								return;
							}
					//		EncriptString(m_cPlayerName);
						}
					}
					else
					{
						_InitOnCreateNewCharacter();
						ChangeGameMode(DEF_GAMEMODE_ONCREATENEWCHARACTER);
						delete pMI;
						return;
					}
				}
				break;

			case 5:
				if (m_pCharList[m_cCurFocus - 1] != NULL)
				{
					if (m_pCharList[m_cCurFocus - 1]->m_sSex != NULL)
					{
						ZeroMemory(m_cPlayerName, sizeof(m_cPlayerName));
						strcpy(m_cPlayerName, m_pCharList[m_cCurFocus - 1]->m_cName);
					//	EncriptString(m_cPlayerName);

						m_iLevel = EncriptInt((int)m_pCharList[m_cCurFocus - 1]->m_sLevel);

					//	DecriptString(m_cPlayerName);
						if (m_Misc.bCheckValidString(m_cPlayerName) == TRUE) {
					//		EncriptString(m_cPlayerName);
							m_pSprite[DEF_SPRID_INTERFACE_ND_LOGIN]->_iCloseSprite();
							m_pSprite[DEF_SPRID_INTERFACE_ND_MAINMENU]->_iCloseSprite();
							m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
							GetIPByDNS();

							DecriptString(m_cLogServerAddr);
							m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
							EncriptString(m_cLogServerAddr);

							m_pLSock->bInitBufferSize(30000);
							ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
							m_dwConnectMode = NUCLEO_REQUEST_ENTERGAME;
							m_wEnterGameType = DEF_ENTERGAMEMSGTYPE_NEW;
							ZeroMemory(m_cMsg, sizeof(m_cMsg));
							strcpy(m_cMsg, "33");
							ZeroMemory(m_cMapName, sizeof(m_cMapName));
							memcpy(m_cMapName, m_pCharList[m_cCurFocus - 1]->m_cMapName, 10);
							EncriptString(m_cMapName);
							delete pMI;
							return;
						}
					//	EncriptString(m_cPlayerName);
					}
				}
				break;

			case 6:
			//	if (EncriptInt(m_iTotalChar) < 4)
				if (DecriptInt(m_iTotalChar) < 4)
				{
					_InitOnCreateNewCharacter();
					ChangeGameMode(DEF_GAMEMODE_ONCREATENEWCHARACTER);
					delete pMI;
					return;
				}
				break;

			case 7:
				if ((m_pCharList[m_cCurFocus - 1] != NULL) && (m_pCharList[m_cCurFocus - 1]->m_sLevel < 50))
				{
					ChangeGameMode(DEF_GAMEMODE_ONQUERYDELETECHARACTER);
					m_wEnterGameType = m_cCurFocus;
					delete pMI;
					return;
				}
				break;

			case 8:
				//GoHomepage(2);
				ChangeGameMode(DEF_GAMEMODE_ONCHANGEPASSWORD);
				delete pMI;
				return;

			case 9:
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				delete pMI;
				return;
		}
	}

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

BOOL CGame::bDlgBoxPress_Character(short msX, short msY)
{
	int i;
	short sX, sY, sSprH, sFrame;
	char cEquipPoiStatus[DEF_MAXITEMEQUIPPOS];

	if (m_bIsDialogEnabled[17] == TRUE) return FALSE;

	sX = m_stDialogBoxInfo[1].sX;
	sY = m_stDialogBoxInfo[1].sY;
	for (i = 0; i < DEF_MAXITEMEQUIPPOS; i++) cEquipPoiStatus[i] = -1;
	for (i = 0; i < DEF_MAXITEMS; i++)
	{
		if ((m_pItemList[i] != NULL) && (m_bIsItemEquipped[i] == TRUE))	cEquipPoiStatus[m_pItemList[i]->m_cEquipPos] = i;
	}

	if ((m_sPlayerType >= 1) && (m_sPlayerType <= 3))
	{
		if (cEquipPoiStatus[DEF_EQUIPPOS_HEAD] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 72, sY + 135, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_HEAD];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_RFINGER] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 32, sY + 193, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_RFINGER];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_LFINGER] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 90, sY + 175, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_LFINGER];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_NECK] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 35, sY + 120, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_NECK];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 57, sY + 186, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_TWOHAND];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_RHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 57, sY + 186, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_RHAND];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_LHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 90, sY + 170, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_LHAND];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_FULLBODY];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BODY] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_BODY];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BOOTS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_BOOTS];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_ARMS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_ARMS];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_PANTS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_PANTS];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BACK] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 41, sY + 137, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_BACK];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
	}
	else if ((m_sPlayerType >= 4) && (m_sPlayerType <= 6))
	{
		if (cEquipPoiStatus[DEF_EQUIPPOS_HEAD] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 72, sY + 139, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_HEAD];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_RFINGER] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 32, sY + 193, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_RFINGER];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_LFINGER] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 90, sY + 175, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_LFINGER];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_NECK] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 35, sY + 120, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_NECK];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 60, sY + 191, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_TWOHAND];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_RHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 60, sY + 191, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_RHAND];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_LHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 84, sY + 175, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_LHAND];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BODY] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_BODY];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_FULLBODY];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if ((cEquipPoiStatus[DEF_EQUIPPOS_BOOTS] != -1))
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_BOOTS];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_ARMS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_ARMS];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_PANTS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_PANTS];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BACK] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 45, sY + 143, sFrame, msX, msY))
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = m_sItemEquipmentStatus[DEF_EQUIPPOS_BACK];
				m_stMCursor.sDistX = 0;
				m_stMCursor.sDistY = 0;
				return TRUE;
			}
		}
	}
	return FALSE;
}

void CGame::DlgBoxClick_CityhallMenu(short msX, short msY)
{
	short sX, sY, sV1;
	BOOL bAccept = NULL;
	sX = m_stDialogBoxInfo[13].sX;
	sY = m_stDialogBoxInfo[13].sY;
	switch (m_stDialogBoxInfo[13].cMode) {
		case 0:
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 70) && (msY < sY + 95))
			{
				if (DecriptBool(m_bCitizen) == TRUE) return;
				m_stDialogBoxInfo[13].cMode = 1; // citizenship rq
				PlaySound('E', 14, 5);
			}
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 95) && (msY < sY + 120))
			{
				if (DecriptInt(m_iRewardGold) <= 0) return;
				m_stDialogBoxInfo[13].cMode = 5; // rq reward gold
				PlaySound('E', 14, 5);
			}
			//HERO ITEMS
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 120) && (msY < sY + 135))
			{
				if ((m_iEnemyKillCount < 100) || (m_iContribution < 10)) return;
				m_stDialogBoxInfo[13].cMode = 7;
				PlaySound('E', 14, 5);
			}
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 240) && (msY < sY + 257))
			{
				/*if (DecriptInt(m_iLevel) < 50) return;
				EnableDialogBox(58, -2, NULL, NULL);
				PlaySound('E', 14, 5);*/
				//if (m_bIsCrusadeMode == FALSE) return;
				trade_mode = DEF_NOTSELECTED;
				EnableDialogBox(79, NULL, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
				DisableDialogBox(13);
			}
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 145) && (msY < sY + 170))
			{
				DisableDialogBox(13);
				SendChat("/getquests");
				EnableDialogBox(77, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
				return;
			}
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 170) && (msY < sY + 195))
			{
				if (m_bIsCrusadeMode) return;
				if (DecriptInt(m_iPKCount) != 0) return;
				if (DecriptBool(m_bCitizen) == FALSE) return;
				if ((DecriptInt(m_iLevel) > 100) && (DecriptBool(m_bHunter) == FALSE)) return;
				m_stDialogBoxInfo[13].cMode = 9;
				PlaySound('E', 14, 5);
			}
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 195) && (msY < sY + 220))
			{
				if (DecriptInt(m_iPKCount) != 0) return;
				if (DecriptBool(m_bCitizen) == FALSE) return;
				m_stDialogBoxInfo[13].cMode = 10;
				m_iTeleportMapCount = EncriptInt(-1);
				bSendCommand(CLIENT_REQUEST_TELEPORT_LIST, NULL, NULL, 1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 220) && (msY < sY + 245)) {
				if (m_bIsCrusadeMode == FALSE) return;
				EnableDialogBox(33, 1, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			//trade dk
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 260) && (msY < sY + 270)) {
				if (DecriptInt(m_iLevel) < m_iPlayerMaxLevel) return;
				m_stDialogBoxInfo[13].cMode = 12;
				PlaySound('E', 14, 5);
			}
			break;

		case 1:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{	// Yes Click
				bSendCommand(CLIENT_REQUEST_CIVILRIGHT, DEF_MSGTYPE_CONFIRM, NULL, NULL, NULL, NULL, NULL);
				m_stDialogBoxInfo[13].cMode = 2;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{	// No Click
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 3:	//
		case 4:	// OK�
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 5:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GETREWARDMONEY, NULL, NULL, NULL, NULL, NULL);
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 7:
			// Hero's Cape
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 100) && (msY <= sY + 115))
			{
				if (m_iEnemyKillCount < 300) return;
				ZeroMemory(m_cTakeHeroItemName, sizeof(m_cTakeHeroItemName));
				memcpy(m_cTakeHeroItemName, DRAW_DIALOGBOX_CITYHALL_MENU47, strlen(DRAW_DIALOGBOX_CITYHALL_MENU47));
				m_stDialogBoxInfo[13].cMode = 11;
				m_stDialogBoxInfo[13].sV1 = 1; //---cape
				PlaySound('E', 14, 5);
			}
			// Hero's Helm
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 125) && (msY <= sY + 140))
			{
				if ((m_iEnemyKillCount < 150) || (m_iContribution < 20)) return;
				ZeroMemory(m_cTakeHeroItemName, sizeof(m_cTakeHeroItemName));
				memcpy(m_cTakeHeroItemName, DRAW_DIALOGBOX_CITYHALL_MENU48, strlen(DRAW_DIALOGBOX_CITYHALL_MENU48));
				m_stDialogBoxInfo[13].cMode = 11;
				m_stDialogBoxInfo[13].sV1 = 2; //---Helm
				PlaySound('E', 14, 5);
			}
			// Hero's Cap
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 150) && (msY <= sY + 165))
			{
				if ((m_iEnemyKillCount < 100) || (m_iContribution < 20)) return;
				ZeroMemory(m_cTakeHeroItemName, sizeof(m_cTakeHeroItemName));
				memcpy(m_cTakeHeroItemName, DRAW_DIALOGBOX_CITYHALL_MENU49, strlen(DRAW_DIALOGBOX_CITYHALL_MENU49));
				m_stDialogBoxInfo[13].cMode = 11;
				m_stDialogBoxInfo[13].sV1 = 3; //---Cap
				PlaySound('E', 14, 5);
			}
			// Hero's Armor
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 175) && (msY <= sY + 190))
			{
				if ((m_iEnemyKillCount < 300) || (m_iContribution < 30)) return;
				ZeroMemory(m_cTakeHeroItemName, sizeof(m_cTakeHeroItemName));
				memcpy(m_cTakeHeroItemName, DRAW_DIALOGBOX_CITYHALL_MENU50, strlen(DRAW_DIALOGBOX_CITYHALL_MENU50));
				m_stDialogBoxInfo[13].cMode = 11;
				m_stDialogBoxInfo[13].sV1 = 4; //---Armor
				PlaySound('E', 14, 5);
			}
			// Hero's Robe
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 200) && (msY <= sY + 215))
			{
				if ((m_iEnemyKillCount < 200) || (m_iContribution < 20)) return;
				ZeroMemory(m_cTakeHeroItemName, sizeof(m_cTakeHeroItemName));
				memcpy(m_cTakeHeroItemName, DRAW_DIALOGBOX_CITYHALL_MENU51, strlen(DRAW_DIALOGBOX_CITYHALL_MENU51));
				m_stDialogBoxInfo[13].cMode = 11;
				m_stDialogBoxInfo[13].sV1 = 5; //---Robe
				PlaySound('E', 14, 5);
			}
			// Hero's Hauberk
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 225) && (msY <= sY + 240))
			{
				if ((m_iEnemyKillCount < 100) || (m_iContribution < 10)) return;
				ZeroMemory(m_cTakeHeroItemName, sizeof(m_cTakeHeroItemName));
				memcpy(m_cTakeHeroItemName, DRAW_DIALOGBOX_CITYHALL_MENU52, strlen(DRAW_DIALOGBOX_CITYHALL_MENU52));
				m_stDialogBoxInfo[13].cMode = 11;
				m_stDialogBoxInfo[13].sV1 = 6; //---Hauberk
				PlaySound('E', 14, 5);
			}
			// Hero's Leggings
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 250) && (msY <= sY + 265))
			{
				if ((m_iEnemyKillCount < 150) || (m_iContribution < 15)) return;
				ZeroMemory(m_cTakeHeroItemName, sizeof(m_cTakeHeroItemName));
				memcpy(m_cTakeHeroItemName, DRAW_DIALOGBOX_CITYHALL_MENU53, strlen(DRAW_DIALOGBOX_CITYHALL_MENU53));
				m_stDialogBoxInfo[13].cMode = 11;
				m_stDialogBoxInfo[13].sV1 = 7; //---Leggings
				PlaySound('E', 14, 5);
			}
			break;

		case 8:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CANCELQUEST, NULL, m_stDialogBoxInfo[13].sV1, NULL, NULL, NULL);
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 9:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_HUNTMODE, NULL, NULL, NULL, NULL, NULL);
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 10:
			if (DecriptInt(m_iTeleportMapCount) > 0)
			{
				int pos, i;
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if ((m_stTeleportList[i].Event == FALSE) && (m_stTeleportList[i].TPEvent == FALSE))
					{
						pos++;
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 60 + pos * 15) && (msY <= sY + 74 + pos * 15))
						{
							bSendCommand(CLIENT_REQUEST_CHARGED_TELEPORT, NULL, NULL, m_stTeleportList[i].iIndex, NULL, NULL, NULL);
							DisableDialogBox(13);
							return;
						}
					}
				}

				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if (m_stTeleportList[i].Event == TRUE)
					{
						pos++;
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 150 + pos * 15) && (msY <= sY + 164 + pos * 15))
						{
							bSendCommand(CLIENT_REQUEST_CHARGED_TELEPORT, NULL, NULL, m_stTeleportList[i].iIndex, NULL, NULL, NULL);
							DisableDialogBox(13);
							return;
						}
					}
				}
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if (m_stTeleportList[i].TPEvent == TRUE)
					{
						pos++;
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 240 + pos * 15) && (msY <= sY + 254 + pos * 15))
						{
							bSendCommand(CLIENT_REQUEST_CHARGED_TELEPORT, NULL, NULL, m_stTeleportList[i].iIndex, NULL, NULL, NULL);
							DisableDialogBox(13);
							return;
						}
					}
				}
			}
			break;

		case 11:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GETHEROMANTLE, NULL, m_stDialogBoxInfo[13].sV1, NULL, NULL, NULL);
				m_stDialogBoxInfo[13].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{
				m_stDialogBoxInfo[13].cMode = 7;
				PlaySound('E', 14, 5);
			}
			break;

		case 12:
			//  Sword / rapier
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 100) && (msY <= sY + 115))
			{
				if (m_iStr < 39) return;
				m_stDialogBoxInfo[13].cMode = 0;
				sV1 = 1;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ITEMSDK, NULL, sV1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			//Hammer
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 75) && (msY <= sY + 90))
			{
				if (m_iStr < 39) return;
				m_stDialogBoxInfo[13].cMode = 0;
				sV1 = 8;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ITEMSDK, NULL, sV1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			// Wand
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 125) && (msY <= sY + 140))
			{
				m_stDialogBoxInfo[13].cMode = 0;
				sV1 = 2;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ITEMSDK, NULL, sV1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			// Helm / hat
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 150) && (msY <= sY + 165))
			{
				if (m_iStr >= 85) bAccept = TRUE;
				if (m_iMag >= 130) bAccept = TRUE;
				if (bAccept == NULL) return;
				m_stDialogBoxInfo[13].cMode = 0;
				sV1 = 3;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ITEMSDK, NULL, sV1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			// Armor / chain mail
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 175) && (msY <= sY + 190))
			{
				if (m_iStr < 30) return;
				m_stDialogBoxInfo[13].cMode = 0;
				sV1 = 4;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ITEMSDK, NULL, sV1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			// Robe
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 200) && (msY <= sY + 215))
			{
				if (m_iMag < 100) return;
				m_stDialogBoxInfo[13].cMode = 0;
				sV1 = 5;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ITEMSDK, NULL, sV1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			// Hauberk
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 225) && (msY <= sY + 240))
			{
				if (m_iStr < 15) return;
				m_stDialogBoxInfo[13].cMode = 0;
				sV1 = 6;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ITEMSDK, NULL, sV1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			// Leggings
			if ((msX >= sX + 35) && (msX <= sX + 220) && (msY >= sY + 250) && (msY <= sY + 265))
			{
				if (m_iStr < 20) return;
				m_stDialogBoxInfo[13].cMode = 0;
				sV1 = 7;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ITEMSDK, NULL, sV1, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;

		case 13:
			if (m_stQuest[0].sTargetType != 0)
			{
				if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 100) && (msY <= sY + 115))
				{
					m_stDialogBoxInfo[13].sV1 = 1;
					m_stDialogBoxInfo[13].cMode = 8;
				}
			}

			if (m_stQuest[1].sTargetType != 0)
			{
				if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 130) && (msY <= sY + 145))
				{
					m_stDialogBoxInfo[13].sV1 = 2;
					m_stDialogBoxInfo[13].cMode = 8;
				}
			}

			if (m_stQuest[2].sTargetType != 0)
			{
				if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 160) && (msY <= sY + 175))
				{
					m_stDialogBoxInfo[13].sV1 = 3;
					m_stDialogBoxInfo[13].cMode = 8;
				}
			}
			break;
	}
}
void CGame::CivilRightAdmissionHandler(char *pData)
{
	WORD * wp, wResult;
	char * cp;

	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	wResult = *wp;

	switch (wResult) {
		case 0:
			m_stDialogBoxInfo[13].cMode = 4;
			break;

		case 1:
			m_stDialogBoxInfo[13].cMode = 3;
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ZeroMemory(m_cLocation, sizeof(m_cLocation));
			memcpy(m_cLocation, cp, 10);
			EncriptString(m_cLocation);

			DecriptString(m_cLocation);
			if (memcmp(m_cLocation, "aresden", 7) == 0)
			{
				m_bAresden = EncriptBool(TRUE);
				m_bCitizen = EncriptBool(TRUE);
				m_bHunter = EncriptBool(FALSE);
				m_bElvine = EncriptBool(FALSE);
			}
			else if (memcmp(m_cLocation, "arehunter", 9) == 0)
			{
				m_bAresden = EncriptBool(TRUE);
				m_bCitizen = EncriptBool(TRUE);
				m_bHunter = EncriptBool(TRUE);
				m_bElvine = EncriptBool(FALSE);
			}
			else if (memcmp(m_cLocation, "elvine", 6) == 0)
			{
				m_bAresden = EncriptBool(FALSE);
				m_bCitizen = EncriptBool(TRUE);
				m_bHunter = EncriptBool(FALSE);
				m_bElvine = EncriptBool(TRUE);
			}
			else if (memcmp(m_cLocation, "elvhunter", 9) == 0)
			{
				m_bAresden = EncriptBool(FALSE);
				m_bCitizen = EncriptBool(TRUE);
				m_bHunter = EncriptBool(TRUE);
				m_bElvine = EncriptBool(TRUE);
			}
			else
			{
				m_bAresden = EncriptBool(FALSE); // Bug V3.92 II - > AMP In Aresden
				m_bCitizen = EncriptBool(FALSE);
				m_bHunter = EncriptBool(TRUE);
				m_bElvine = EncriptBool(FALSE);
			}
			EncriptString(m_cLocation);
			break;
	}
}

void CGame::DlgBoxClick_Text(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[18].sX;
	sY = m_stDialogBoxInfo[18].sY;

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		DisableDialogBox(18);
		PlaySound('E', 14, 5);
	}
}

void CGame::DlgBoxClick_Inventory(short msX, short msY)
{
	int i, sX, sY;
	sX = m_stDialogBoxInfo[2].sX;
	sY = m_stDialogBoxInfo[2].sY;

/*
	if ((msX >= sX + 20) && (msX <= sX + 77) && (msY >= sY + 4) && (msY <= sY + 17))
	{
		EnableDialogBox(72, NULL, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
		return;
	}*/

	if ((msX >= sX + 22) && (msX <= sX + 73) && (msY >= sY + 160) && (msY <= sY + 160 + 17))
	{
		if (DecriptInt(m_iGizonItemUpgradeLeft) == NULL)
		{
			m_iGizonItemUpgradeLeft = EncriptInt(0);
		}
		EnableDialogBox(34, 5, NULL, NULL);
		PlaySound('E', 14, 5);

	}
	if ((msX >= sX + 138) && (msX <= sX + 201 + 5) && (msY >= sY + 160) && (msY <= sY + 160 + 17))
	{
		if (m_cSkillMastery[13] == 0)
		{
			AddEventList(DLGBOXCLICK_INVENTORY1, 10);
			AddEventList(DLGBOXCLICK_INVENTORY2, 10);//"The manufacturing manual is purchasable in Blacksmith."
		}
		else if (m_bSkillUsingStatus == TRUE)
		{
			AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY5, 10);//""You are already using another skill."
			return;
		}
		else if (_bIsItemOnHand() == TRUE)
		{
			AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY4, 10);//""Your hands should be free to use this item."
			return;
		}
		else
		{
			for (i = 0; i < DEF_MAXITEMS; i++)
				if ((m_pItemList[i] != NULL) && (m_pItemList[i]->m_cItemType == DEF_ITEMTYPE_USE_SKILL_ENABLEDIALOGBOX)
					&& (m_pItemList[i]->m_sSpriteFrame == 113)
					&& (m_pItemList[i]->m_wCurLifeSpan > 0))
				{
					EnableDialogBox(26, 3, NULL, NULL, NULL);
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY12, 10);//"Using a manufacturing skill..."
					PlaySound('E', 14, 5);
					return;
				}
			AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY14, 10);
		}
		PlaySound('E', 14, 5);
	}
}

void CGame::DlgBoxClick_Character(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[1].sX;
	sY = m_stDialogBoxInfo[1].sY;

	if ((msX >= sX + 103) && (msX <= sX + 103 + 11) && (msY >= sY + 108) && (msY <= sY + 108 + 11))
	{
		//New Ventanita:P - ZeroEoyPnk y su Espanenglish xD
		if (m_bIsDialogEnabled[56] == FALSE)
			EnableDialogBox(56, 0, NULL, NULL);
		else
			DisableDialogBox(56);
		PlaySound('E', 14, 5);
	}


	if ((msX >= sX + 15) && (msX <= sX + 15 + DEF_BTNSZX) && (msY >= sY + 340) && (msY <= sY + 340 + DEF_BTNSZY)) {
		SendChat("/getcharquests");
		EnableDialogBox(78, NULL, NULL, NULL);
		DisableDialogBox(1);
		PlaySound('E', 14, 5);
	}
	else if ((msX >= sX + 98) && (msX <= sX + 98 + DEF_BTNSZX) && (msY >= sY + 340) && (msY <= sY + 340 + DEF_BTNSZY)) {
		EnableDialogBox(32, NULL, NULL, NULL);
		DisableDialogBox(1);
		PlaySound('E', 14, 5);
	}
	else if ((msX >= sX + 180) && (msX <= sX + 180 + DEF_BTNSZX) && (msY >= sY + 340) && (msY <= sY + 340 + DEF_BTNSZY)) {
		EnableDialogBox(12, NULL, NULL, NULL);
		DisableDialogBox(1);
		PlaySound('E', 14, 5);
	}
}

void CGame::DlgBoxClick_FeedBackCard(short msX, short msY)
{

}

void CGame::DlgBoxClick_MagicShop(short msX, short msY)
{
	int i, iCPivot, iYloc, iAdjX, iAdjY;
	short sX, sY;

	sX = m_stDialogBoxInfo[16].sX;
	sY = m_stDialogBoxInfo[16].sY;

	iAdjX = -20;
	iAdjY = -35;

	iCPivot = m_stDialogBoxInfo[16].sView * 10;

	iYloc = 0;
	for (i = 0; i < 9; i++) {
		if ((m_pMagicCfgList[iCPivot + i] != NULL) && (m_pMagicCfgList[iCPivot + i]->m_bIsVisible)) {
			if ((msX >= sX + iAdjX + 44) && (msX <= sX + iAdjX + 135 + 44 + 100) && (msY >= sY + iAdjY + 70 + iYloc + 35) && (msY <= sY + iAdjY + 70 + 14 + iYloc + 35)) {
				if (m_cMagicMastery[iCPivot + i] == 0)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_STUDYMAGIC, NULL, NULL, NULL, NULL, m_pMagicCfgList[iCPivot + i]->m_cName);
					//bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_STUDYMAGIC, NULL, iCPivot + i, NULL, NULL, NULL); //2002.02.07 ���� ���� ���������� �������ӿ��� ������ȣ�� ����..
					PlaySound('E', 14, 5);
				}
				return;
			}
			iYloc += 18;
		}
	}

	if ((msX >= sX + iAdjX + 42 + 31) && (msX <= sX + iAdjX + 50 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 0;
	if ((msX >= sX + iAdjX + 55 + 31) && (msX <= sX + iAdjX + 68 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 1;
	if ((msX >= sX + iAdjX + 73 + 31) && (msX <= sX + iAdjX + 93 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 2;
	if ((msX >= sX + iAdjX + 98 + 31) && (msX <= sX + iAdjX + 113 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 3;
	if ((msX >= sX + iAdjX + 118 + 31) && (msX <= sX + iAdjX + 129 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 4;
	if ((msX >= sX + iAdjX + 133 + 31) && (msX <= sX + iAdjX + 150 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 5;
	if ((msX >= sX + iAdjX + 154 + 31) && (msX <= sX + iAdjX + 177 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 6;
	if ((msX >= sX + iAdjX + 181 + 31) && (msX <= sX + iAdjX + 210 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 7;
	if ((msX >= sX + iAdjX + 214 + 31) && (msX <= sX + iAdjX + 230 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 8;
	if ((msX >= sX + iAdjX + 234 + 31) && (msX <= sX + iAdjX + 245 + 31) && (msY >= sY + iAdjY + 248 + 35) && (msY <= sY + iAdjY + 260 + 35))
		m_stDialogBoxInfo[16].sView = 9;
}

void CGame::_RemoveChatMsgListByObjectID(int iObjectID)
{
	int i;

	for (i = 1; i < DEF_MAXCHATMSGS; i++)
		if ((m_pChatMsgList[i] != NULL) && (m_pChatMsgList[i]->m_iObjectID == iObjectID)) {
			delete m_pChatMsgList[i];
			m_pChatMsgList[i] = NULL;
		}
}

void CGame::PlaySound(char cType, int iNum, int iDist, long lPan)
{
	int iVol;

	if (m_bSoundFlag == FALSE) return;
	if (m_bSoundStat == FALSE) return;

	if (iDist > 10) iDist = 10;

	iVol = (m_cSoundVolume - 100) * 20;
	iVol += -200 * iDist;

	if (iVol > 0) iVol = 0;
	if (iVol < -10000) iVol = -10000;

	if (iVol > -2000) {

		switch (cType) {
			case 'C':
				if (m_pCSound[iNum] == NULL) return;
				m_pCSound[iNum]->Play(FALSE, lPan, iVol);
				break;

			case 'M':
				if (m_pMSound[iNum] == NULL) return;
				m_pMSound[iNum]->Play(FALSE, lPan, iVol);
				break;

			case 'E':
				if (m_pESound[iNum] == NULL) return;
				m_pESound[iNum]->Play(FALSE, lPan, iVol);
				break;
		}
	}
}

void CGame::_DrawBlackRect(int iSize)
{
	int ix, iy, sx, sy, dcx, dcy;
	DWORD dwTime;

	dwTime = timeGetTime();

	dcx = 40 - iSize * 2;
	dcy = 30 - iSize * 2;

	sx = iSize * 16;
	sy = iSize * 16;

	for (ix = 0; ix < dcx; ix++) {
		m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(ix * 16 + sx, iSize * 16, 12, dwTime);
		m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(ix * 16 + sx, 464 - iSize * 16, 12, dwTime);
	}

	for (iy = 0; iy < dcy; iy++) {
		m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(iSize * 16, iy * 16 + sy, 12, dwTime);
		m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(624 - iSize * 16, iy * 16 + sy, 12, dwTime);
	}
}

BOOL CGame::_bCheckItemByType(char cType)
{
	int i;

	for (i = 0; i < DEF_MAXITEMS; i++)
		if ((m_pItemList[i] != NULL) && (m_pItemList[i]->m_cItemType == cType)) return TRUE;

	return FALSE;
}


void CGame::DynamicObjectHandler(char * pData)
{
	WORD * wp;
	char * cp;
	short * sp, sX, sY, sV1, sV2, sV3;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE);
	wp = (WORD *)cp;
	cp += 2;

	sp = (short *)cp;
	sX = *sp;
	cp += 2;

	sp = (short *)cp;
	sY = *sp;
	cp += 2;

	sp = (short *)cp;
	sV1 = *sp;
	cp += 2;

	sp = (short *)cp;
	sV2 = *sp;		   // Dyamic Object Index
	cp += 2;

	sp = (short *)cp;
	sV3 = *sp;
	cp += 2;

	switch (*wp) {
		case DEF_MSGTYPE_CONFIRM:// Dynamic Object
			m_pMapData->bSetDynamicObject(sX, sY, sV2, sV1, TRUE);
			break;

		case DEF_MSGTYPE_REJECT:// Dynamic object
			m_pMapData->bSetDynamicObject(sX, sY, sV2, NULL, TRUE);
			break;
	}
}

BOOL CGame::_bIsItemOnHand() // Snoopy: Fixed to remove ShieldCast
{
	int i;
	WORD wWeaponType;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if ((m_pItemList[i] != NULL) && (m_bIsItemEquipped[i] == TRUE))
		{
			if ((m_pItemList[i]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
				|| (m_pItemList[i]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
				return TRUE;
		}
	for (i = 0; i < DEF_MAXITEMS; i++)
		if ((m_pItemList[i] != NULL) && (m_bIsItemEquipped[i] == TRUE))
		{
			if (m_pItemList[i]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
			{
				wWeaponType = ((m_sPlayerAppr2 & 0x0FF0) >> 4);
				// Snoopy 34 for all wands.
				if ((wWeaponType >= 34) && (wWeaponType < 40)) return FALSE;
				//else if( wWeaponType == 27 ) return FALSE; // Farming's hoe !
				else return TRUE;
			}
		}
	return FALSE;
}

int CGame::_iCalcTotalWeight()
{
	int i, iCnt;
	iCnt = 0;

	for (i = 0; i < DEF_MAXITEMS; i++) {
		if (m_pItemList[i] != NULL) {
			iCnt++; // Cada ítem suma 1 al total del peso
		}
	}

	return iCnt; // El peso total será igual a la cantidad de ítems
}


void CGame::DlgBoxClick_ChangeInt(short msX, short msY)
{	// Snoopy: removed feedback card
	short sX, sY;
	sX = m_stDialogBoxInfo[5].sX;
	sY = m_stDialogBoxInfo[5].sY;
	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 70) && (msY <= sY + 70 + DEF_BTNSZY))
	{
		bSendCommand(CLIENT_REQUEST_LEVELUPSETTINGS, NULL, NULL, NULL, NULL, NULL, NULL);
		m_cLU_Str = EncriptInt(0);
		m_cLU_Vit = EncriptInt(0);
		m_cLU_Dex = EncriptInt(0);
		m_cLU_Int = EncriptInt(0);
		m_cLU_Mag = EncriptInt(0);
		m_cLU_Char = EncriptInt(0);
		m_iLU_Point = EncriptInt(0);
		DisableDialogBox(42);
		DisableDialogBox(5);
		PlaySound('E', 14, 5);
	}

	if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 70) && (msY <= sY + 70 + DEF_BTNSZY))
		DisableDialogBox(5);
}


void CGame::DlgBoxClick_WarningMsg(short msX, short msY)// ������.
{
	short sX, sY;
	sX = m_stDialogBoxInfo[6].sX;
	sY = m_stDialogBoxInfo[6].sY;

	if ((msX >= sX + 120) && (msX <= sX + 120 + DEF_BTNSZX) && (msY >= sY + 127) && (msY <= sY + 127 + DEF_BTNSZY))
		DisableDialogBox(6);
}

void CGame::DlgBoxClick_ItemDrop(short msX, short msY)
{
	short sX, sY;
	if (m_cCommand < 0) return;

	sX = m_stDialogBoxInfo[4].sX;
	sY = m_stDialogBoxInfo[4].sY;

	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
	{
		m_stDialogBoxInfo[4].cMode = 3;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON,
			CLIENT_COMMON_ITEMDROP,
			NULL,
			m_stDialogBoxInfo[4].sView,
			1,
			NULL,
			m_pItemList[m_stDialogBoxInfo[4].sView]->m_cName);
		//m_stDialogBoxInfo[40].sView ;
		DisableDialogBox(4);
	}

	else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
	{

		for (int i = 0; i < DEF_MAXSELLLIST; i++)
			m_bIsItemDisabled[i] = FALSE;

		DisableDialogBox(4);
	}
	else if ((msX >= sX + 35) && (msX <= sX + 240) && (msY >= sY + 80) && (msY <= sY + 90))
	{
		m_bItemDrop = !m_bItemDrop;
	}
}

void CGame::DlgBoxClick_ItemSellorRepair(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[23].sX;
	sY = m_stDialogBoxInfo[23].sY;

	switch (m_stDialogBoxInfo[23].cMode) {
		case 1:
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Sell
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SELLITEMCONFIRM, NULL, m_stDialogBoxInfo[23].sV1, m_stDialogBoxInfo[23].sV4, m_stDialogBoxInfo[23].sV3, m_pItemList[m_stDialogBoxInfo[23].sV1]->m_cName); //v1.2
				m_stDialogBoxInfo[23].cMode = 3;
			}
			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Cancel
				m_bIsItemDisabled[m_stDialogBoxInfo[23].sV1] = FALSE;
				DisableDialogBox(23);
			}
			break;

		case 2:
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Repair
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_REPAIRITEMCONFIRM, NULL, m_stDialogBoxInfo[23].sV1, NULL, NULL, m_pItemList[m_stDialogBoxInfo[23].sV1]->m_cName);
				m_stDialogBoxInfo[23].cMode = 4;
			}
			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Cancel
				m_bIsItemDisabled[m_stDialogBoxInfo[23].sV1] = FALSE;
				DisableDialogBox(23);
			}
			break;
	}
}


int CGame::iGetLevelExp(int iLevel)
{
	int iRet;
	if (iLevel == 0) return 0;
	iRet = iGetLevelExp(iLevel - 1) + iLevel * (50 + (iLevel * (iLevel / 17) * (iLevel / 17)));
	return iRet;
}

int CGame::_iGetTotalItemNum()
{
	int i, iCnt;
	iCnt = 0;
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pItemList[i] != NULL) iCnt++;
	return iCnt;
}

BOOL CGame::bCheckExID(char * pName)
{
	short i;

	if (memcmp(m_cPlayerName, pName, 10) == 0) { 
		return FALSE;
	}
	//LaloVer lalomuted
	for (i = 0; i <= m_iTotalMutes; i++)
	{
		if (ListMute[i].status)
			if (memcmp(ListMute[i].m_cMuteName, pName, 10) == 0)//0
				return TRUE;
	}
	return FALSE;
}

void CGame::DrawWhetherEffects()
{
#define MAXNUM 1000
	static int ix1[MAXNUM];
	static int iy2[MAXNUM];
	static int iFrame[MAXNUM];
	static int iNum = 0;
	int i;
	short dX, dY, sCnt;
	char cTempFrame;
	DWORD dwTime = m_dwCurTime;


	switch (m_cWhetherEffectType) {
	case 1:
	case 2:
	case 3: // rain
		switch (m_cWhetherEffectType) {
		case 1: sCnt = DEF_MAXWHETHEROBJECTS / 5; break;
		case 2:	sCnt = DEF_MAXWHETHEROBJECTS / 2; break;
		case 3:	sCnt = DEF_MAXWHETHEROBJECTS;     break;
		}

		if (c_reso->IsResolution() == C800x600)
		{
			for (i = 0; i < sCnt; i++)
			{
				if ((m_stWhetherObject[i].cStep >= 0) && (m_stWhetherObject[i].cStep < 20) && (m_stWhetherObject[i].sX != 0))
				{
					dX = m_stWhetherObject[i].sX - m_sViewPointX;
					dY = m_stWhetherObject[i].sY - m_sViewPointY;
					cTempFrame = 16 + (m_stWhetherObject[i].cStep / 6);
					m_pEffectSpr[11]->PutTransSprite(dX, dY + 120, cTempFrame, dwTime);
				}
				else if ((m_stWhetherObject[i].cStep >= 20) && (m_stWhetherObject[i].cStep < 25) && (m_stWhetherObject[i].sX != 0))
				{
					dX = m_stWhetherObject[i].sX - m_sViewPointX;
					dY = m_stWhetherObject[i].sY - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite(dX, dY + 120, m_stWhetherObject[i].cStep, dwTime);
				}
			}
		}
		else if (c_reso->IsResolution() == C1024x768)
		{
			for (i = 0; i < sCnt; i++)
			{
				if ((m_stWhetherObject[i].cStep >= 0) && (m_stWhetherObject[i].cStep < 20) && (m_stWhetherObject[i].sX != 0))
				{
					dX = m_stWhetherObject[i].sX - m_sViewPointX;
					dY = m_stWhetherObject[i].sY - m_sViewPointY;
					cTempFrame = 16 + (m_stWhetherObject[i].cStep / 6);
					m_pEffectSpr[11]->PutTransSprite(dX, dY + 288, cTempFrame, dwTime);
				}
				else if ((m_stWhetherObject[i].cStep >= 20) && (m_stWhetherObject[i].cStep < 25) && (m_stWhetherObject[i].sX != 0))
				{
					dX = m_stWhetherObject[i].sX - m_sViewPointX;
					dY = m_stWhetherObject[i].sY - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite(dX, dY + 288, m_stWhetherObject[i].cStep, dwTime);
				}
			}
		}
		else if (c_reso->IsResolution() == C640x480)
		{
			for (i = 0; i < sCnt; i++)
			{
				if ((m_stWhetherObject[i].cStep >= 0) && (m_stWhetherObject[i].cStep < 20) && (m_stWhetherObject[i].sX != 0))
				{
					dX = m_stWhetherObject[i].sX - m_sViewPointX;
					dY = m_stWhetherObject[i].sY - m_sViewPointY;
					cTempFrame = 16 + (m_stWhetherObject[i].cStep / 6);
					m_pEffectSpr[11]->PutTransSprite(dX, dY, cTempFrame, dwTime);
				}
				else if ((m_stWhetherObject[i].cStep >= 20) && (m_stWhetherObject[i].cStep < 25) && (m_stWhetherObject[i].sX != 0))
				{
					dX = m_stWhetherObject[i].sX - m_sViewPointX;
					dY = m_stWhetherObject[i].sY - m_sViewPointY;
					m_pEffectSpr[11]->PutTransSprite(dX, dY, m_stWhetherObject[i].cStep, dwTime);
				}
			}
		}
		break;

	case 4:
	case 5:
	case 6: // Snow
		switch (m_cWhetherEffectType) {
		case 4: sCnt = DEF_MAXWHETHEROBJECTS / 5; break;
		case 5:	sCnt = DEF_MAXWHETHEROBJECTS / 2; break;
		case 6:	sCnt = DEF_MAXWHETHEROBJECTS;     break;
		}

			if (c_reso->IsResolution() == C800x600)
			{
				for (i = 0; i < sCnt; i++)
				{
					if ((m_stWhetherObject[i].cStep >= 0) && (m_stWhetherObject[i].cStep < 80))
					{
						dX = m_stWhetherObject[i].sX - m_sViewPointX;
						dY = m_stWhetherObject[i].sY - m_sViewPointY;
						// Snoopy: Snow on lower bar
						if (dY >= 580)
						{
							cTempFrame = 39 + (m_stWhetherObject[i].cStep / 20) * 3;
							dX = m_stWhetherObject[i].sBX;
							if (BigBar > 0)
								dY = 599;
							else
								dY = 546;
						}
						else cTempFrame = 39 + (m_stWhetherObject[i].cStep / 20) * 3 + (rand() % 3);
						m_pEffectSpr[11]->PutTransSprite(dX, dY + 120, cTempFrame, dwTime);
					}
				}
				if (m_bIsXmas == TRUE)
				{
					for (i = 0; i <= MAXNUM; i++)
					{
						if (iy2[i] > 10) m_pEffectSpr[11]->PutTransSprite(ix1[i], iy2[i] + 120, iFrame[i], dwTime);
					}
				}
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				for (i = 0; i < sCnt; i++)
				{
					if ((m_stWhetherObject[i].cStep >= 0) && (m_stWhetherObject[i].cStep < 80))
					{
						dX = m_stWhetherObject[i].sX - m_sViewPointX;
						dY = m_stWhetherObject[i].sY - m_sViewPointY;
						// Snoopy: Snow on lower bar
						if (dY >= 748)
						{
							cTempFrame = 39 + (m_stWhetherObject[i].cStep / 20) * 3;
							dX = m_stWhetherObject[i].sBX;
							if (BigBar > 0)
								dY = 767;
							else
								dY = 714;
						}
						else cTempFrame = 39 + (m_stWhetherObject[i].cStep / 20) * 3 + (rand() % 3);
						m_pEffectSpr[11]->PutTransSprite(dX, dY + 288, cTempFrame, dwTime);
					}
				}
				if (m_bIsXmas == TRUE)
				{
					for (i = 0; i <= MAXNUM; i++)
					{
						if (iy2[i] > 10) m_pEffectSpr[11]->PutTransSprite(ix1[i], iy2[i] + 288, iFrame[i], dwTime);
					}
				}
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				for (i = 0; i < sCnt; i++)
				{
					if ((m_stWhetherObject[i].cStep >= 0) && (m_stWhetherObject[i].cStep < 80))
					{
						dX = m_stWhetherObject[i].sX - m_sViewPointX;
						dY = m_stWhetherObject[i].sY - m_sViewPointY;
						// Snoopy: Snow on lower bar
						if (dY >= 460)
						{
							cTempFrame = 39 + (m_stWhetherObject[i].cStep / 20) * 3;
							dX = m_stWhetherObject[i].sBX;
							if (BigBar > 0)
								dY = 479;
							else
								dY = 426;
						}
						else cTempFrame = 39 + (m_stWhetherObject[i].cStep / 20) * 3 + (rand() % 3);
						m_pEffectSpr[11]->PutTransSprite(dX, dY, cTempFrame, dwTime);
					}
				}
			if (m_bIsXmas == TRUE)
			{
				for (i = 0; i <= MAXNUM; i++)
				{
					if (iy2[i] > 10) m_pEffectSpr[11]->PutTransSprite(ix1[i], iy2[i], iFrame[i], dwTime);
				}
			}
		}
			break;
	}
}

void CGame::WhetherObjectFrameCounter()
{
	int i;
	short sCnt;
	char  cAdd;
	DWORD dwTime = m_dwCurTime;

	if ((dwTime - m_dwWOFtime) < 30) return;
	m_dwWOFtime = dwTime;

	switch (m_cWhetherEffectType) {
		case 1:
		case 2:
		case 3: // Rain
			switch (m_cWhetherEffectType) {
				case 1: sCnt = DEF_MAXWHETHEROBJECTS / 5; break;
				case 2:	sCnt = DEF_MAXWHETHEROBJECTS / 2; break;
				case 3:	sCnt = DEF_MAXWHETHEROBJECTS;     break;
			}
			for (i = 0; i < sCnt; i++)
			{
				m_stWhetherObject[i].cStep++;
				if ((m_stWhetherObject[i].cStep >= 0) && (m_stWhetherObject[i].cStep < 20))
				{
					cAdd = (40 - m_stWhetherObject[i].cStep);
					if (cAdd < 0) cAdd = 0;
					m_stWhetherObject[i].sY = m_stWhetherObject[i].sY + cAdd;
					if (cAdd != 0)
						m_stWhetherObject[i].sX = m_stWhetherObject[i].sX - 1;
				}
				else if (m_stWhetherObject[i].cStep >= 25)
				{
					if (m_bIsWhetherEffect == FALSE)
					{
						m_stWhetherObject[i].sX = 0;
						m_stWhetherObject[i].sY = 0;
						m_stWhetherObject[i].cStep = 30;
					}
					else
					{
						m_stWhetherObject[i].sX = (m_pMapData->m_sPivotX * 32) + ((rand() % 940) - 200) + 300;
						m_stWhetherObject[i].sY = (m_pMapData->m_sPivotY * 32) + ((rand() % 800) - 600) + 240;
						m_stWhetherObject[i].cStep = -1 * (rand() % 10);
					}
				}
			}
			break;

		case 4:
		case 5:
		case 6:
			switch (m_cWhetherEffectType) {
				case 4: sCnt = DEF_MAXWHETHEROBJECTS / 5; break;
				case 5:	sCnt = DEF_MAXWHETHEROBJECTS / 2; break;
				case 6:	sCnt = DEF_MAXWHETHEROBJECTS;     break;
			}
			int sY2, sY3, sY4;
			if (c_reso->IsResolution() == C800x600)
			{
				sY2 = 599;
				sY3 = 590;
				sY4 = 546;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				sY2 = 767;
				sY3 = 758;
				sY4 = 714;
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				sY2 = 479;
				sY3 = 470;
				sY4 = 426;
			}
			for (i = 0; i < sCnt; i++)
			{
				m_stWhetherObject[i].cStep++;
				if ((m_stWhetherObject[i].cStep >= 0) && (m_stWhetherObject[i].cStep < 80))
				{
					cAdd = (80 - m_stWhetherObject[i].cStep) / 10;
					if (cAdd < 0) cAdd = 0;
					m_stWhetherObject[i].sY = m_stWhetherObject[i].sY + cAdd;

					//Snoopy: Snow on lower bar
					if (BigBar > 0)
					{
						if (m_stWhetherObject[i].sY > (sY2 + m_sViewPointY))
						{
							m_stWhetherObject[i].sY = sY3 + m_sViewPointY;
							if ((rand() % 10) != 2) m_stWhetherObject[i].cStep--;
							if (m_stWhetherObject[i].sBX == 0) m_stWhetherObject[i].sBX = m_stWhetherObject[i].sX - m_sViewPointX;


						}
						else m_stWhetherObject[i].sX += 1 - (rand() % 3);
					}
					else
					{
						if (m_stWhetherObject[i].sY > (sY4 + m_sViewPointY))
						{
							m_stWhetherObject[i].sY = sY4 + m_sViewPointY;
							if ((rand() % 10) != 2) m_stWhetherObject[i].cStep--;
							if (m_stWhetherObject[i].sBX == 0) m_stWhetherObject[i].sBX = m_stWhetherObject[i].sX - m_sViewPointX;


						}
						else m_stWhetherObject[i].sX += 1 - (rand() % 3);
					}
				}
				else if (m_stWhetherObject[i].cStep >= 80)
				{
					if (m_bIsWhetherEffect == FALSE)
					{
						m_stWhetherObject[i].sX = 0;
						m_stWhetherObject[i].sY = 0;
						m_stWhetherObject[i].sBX = 0;
						m_stWhetherObject[i].cStep = 80;
					}
					else
					{
						m_stWhetherObject[i].sX = (m_pMapData->m_sPivotX * 32) + ((rand() % 940) - 200) + 300;
						m_stWhetherObject[i].sY = (m_pMapData->m_sPivotY * 32) + ((rand() % 800) - 600) + 600;
						m_stWhetherObject[i].cStep = -1 * (rand() % 10);
						m_stWhetherObject[i].sBX = 0;
					}
				}
			}
			break;
	}
}

void CGame::SetWhetherStatus(BOOL bStart, char cType)
{
	SYSTEMTIME SysTime;
	GetLocalTime(&SysTime);
	if (bStart == TRUE)
	{
		m_bIsWhetherEffect = TRUE;
		m_cWhetherEffectType = cType;
		if ((m_bSoundStat == TRUE) && (m_bSoundFlag) && (cType >= 1) && (cType <= 3)) m_pESound[38]->Play(TRUE);

		for (int i = 0; i < DEF_MAXWHETHEROBJECTS; i++)
		{
			m_stWhetherObject[i].sX = 1;
			m_stWhetherObject[i].sBX = 1;
			m_stWhetherObject[i].sY = 1;
			m_stWhetherObject[i].cStep = -1 * (rand() % 40);
		}
		if (cType >= 4 && cType <= 6)
		{
			if (m_bMusicStat) StartBGM(false);
		}
	}
	else
	{
		m_bIsWhetherEffect = FALSE;
		m_cWhetherEffectType = NULL;
		if ((m_bSoundStat == TRUE) && (m_bSoundFlag)) m_pESound[38]->bStop();
	}
}

void CGame::DlgBoxClick_ShutDownMsg(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[25].sX;
	sY = m_stDialogBoxInfo[25].sY;
	if ((msX >= sX + 210) && (msX <= sX + 210 + DEF_BTNSZX) && (msY > sY + 127) && (msY < sY + 127 + DEF_BTNSZY)) {
		DisableDialogBox(25);
		PlaySound('E', 14, 5);
	}
}

void CGame::DrawLine(int x0, int y0, int x1, int y1, int iR, int iG, int iB)
{
	int dx, dy, x_inc, y_inc, error, index, dstR, dstG, dstB;
	int iResultX, iResultY;
	WORD * pDst;

	if ((x0 == x1) && (y0 == y1)) return;
	error = 0;
	iResultX = x0;
	iResultY = y0;
	dx = x1 - x0;
	dy = y1 - y0;
	if (dx >= 0)
	{
		x_inc = 1;
	}
	else
	{
		x_inc = -1;
		dx = -dx;
	}
	if (dy >= 0)
	{
		y_inc = 1;
	}
	else
	{
		y_inc = -1;
		dy = -dy;
	}
	if (dx > dy)
	{
		for (index = 0; index <= dx; index++)
		{
			error += dy;
			if (error > dx)
			{
				error -= dx;
				iResultY += y_inc;
			}
			iResultX += x_inc;
			//added resolution
			int rx, ry;

			if (c_reso->IsResolution() == C800x600)
			{
				rx = 800;
				ry = 600;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				rx = 1024;
				ry = 768;
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				rx = 640;
				ry = 480;
			}
		
		
			if ((iResultX >= 0) && (iResultX < rx) && (iResultY >= 0) && (iResultY < ry)) {
				pDst = (WORD *)m_DDraw.m_pBackB4Addr + iResultX + ((iResultY)*m_DDraw.m_sBackB4Pitch);
				switch (m_DDraw.m_cPixelFormat) {
					case 1:
						dstR = (int)m_DDraw.m_lTransRB100[(pDst[0] & 0xF800) >> 11][iR];
						dstG = (int)m_DDraw.m_lTransG100[(pDst[0] & 0x7E0) >> 5][iG];
						dstB = (int)m_DDraw.m_lTransRB100[(pDst[0] & 0x1F)][iB];
						*pDst = (WORD)((dstR << 11) | (dstG << 5) | dstB);
						break;

					case 2:
						dstR = (int)m_DDraw.m_lTransRB100[(pDst[0] & 0x7C00) >> 10][iR];
						dstG = (int)m_DDraw.m_lTransG100[(pDst[0] & 0x3E0) >> 5][iG];
						dstB = (int)m_DDraw.m_lTransRB100[(pDst[0] & 0x1F)][iB];
						*pDst = (WORD)((dstR << 10) | (dstG << 5) | dstB);
						break;
				}
			}
		}
	}
	else
	{
		for (index = 0; index <= dy; index++)
		{
			error += dx;
			if (error > dy)
			{
				error -= dy;
				iResultX += x_inc;
			}
			iResultY += y_inc;
			//added resolution
			int rx, ry;

			if (c_reso->IsResolution() == C800x600)
			{
				rx = 800;
				ry = 600;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				rx = 1024;
				ry = 768;
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				rx = 640;
				ry = 480;
			}

			if ((iResultX >= 0) && (iResultX < rx) && (iResultY >= 0) && (iResultY < ry)) {
				pDst = (WORD *)m_DDraw.m_pBackB4Addr + iResultX + ((iResultY)*m_DDraw.m_sBackB4Pitch);
				switch (m_DDraw.m_cPixelFormat) {
					case 1:
						dstR = (int)m_DDraw.m_lTransRB100[(pDst[0] & 0xF800) >> 11][iR];
						dstG = (int)m_DDraw.m_lTransG100[(pDst[0] & 0x7E0) >> 5][iG];
						dstB = (int)m_DDraw.m_lTransRB100[(pDst[0] & 0x1F)][iB];
						*pDst = (WORD)((dstR << 11) | (dstG << 5) | dstB);
						break;

					case 2:
						dstR = (int)m_DDraw.m_lTransRB100[(pDst[0] & 0x7C00) >> 10][iR];
						dstG = (int)m_DDraw.m_lTransG100[(pDst[0] & 0x3E0) >> 5][iG];
						dstB = (int)m_DDraw.m_lTransRB100[(pDst[0] & 0x1F)][iB];
						*pDst = (WORD)((dstR << 10) | (dstG << 5) | dstB);
						break;
				}
			}
		}
	}
}


void CGame::DrawLine2(int x0, int y0, int x1, int y1, int iR, int iG, int iB)
{
	int dx, dy, x_inc, y_inc, error, index, dstR, dstG, dstB;
	int iResultX, iResultY;
	WORD * pDst;

	int rx, ry;

	if (c_reso->IsResolution() == C800x600)
	{
		rx = 800;
		ry = 600;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		rx = 1024;
		ry = 768;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		rx = 640;
		ry = 480;
	}


	if ((x0 == x1) && (y0 == y1)) return;

	error = 0;
	iResultX = x0;
	iResultY = y0;
	dx = x1 - x0;
	dy = y1 - y0;
	if (dx >= 0)
	{
		x_inc = 1;
	}
	else
	{
		x_inc = -1;
		dx = -dx;
	}
	if (dy >= 0)
	{
		y_inc = 1;
	}
	else
	{
		y_inc = -1;
		dy = -dy;
	}
	if (dx > dy)
	{
		for (index = 0; index <= dx; index++)
		{
			error += dy;
			if (error > dx)
			{
				error -= dx;
				iResultY += y_inc;
			}
			iResultX += x_inc;
			if ((iResultX >= 0) && (iResultX < rx) && (iResultY >= 0) && (iResultY < ry)) {
				pDst = (WORD *)m_DDraw.m_pBackB4Addr + iResultX + ((iResultY)*m_DDraw.m_sBackB4Pitch);
				switch (m_DDraw.m_cPixelFormat) {
					case 1:
						dstR = (int)m_DDraw.m_lTransRB50[(pDst[0] & 0xF800) >> 11][iR];
						dstG = (int)m_DDraw.m_lTransG50[(pDst[0] & 0x7E0) >> 5][iG];
						dstB = (int)m_DDraw.m_lTransRB50[(pDst[0] & 0x1F)][iB];
						*pDst = (WORD)((dstR << 11) | (dstG << 5) | dstB);
						break;

					case 2:
						dstR = (int)m_DDraw.m_lTransRB50[(pDst[0] & 0x7C00) >> 10][iR];
						dstG = (int)m_DDraw.m_lTransG50[(pDst[0] & 0x3E0) >> 5][iG];
						dstB = (int)m_DDraw.m_lTransRB50[(pDst[0] & 0x1F)][iB];
						*pDst = (WORD)((dstR << 10) | (dstG << 5) | dstB);
						break;
				}
			}
		}
	}
	else
	{
		for (index = 0; index <= dy; index++)
		{
			error += dx;
			if (error > dy)
			{
				error -= dy;
				iResultX += x_inc;
			}
			iResultY += y_inc;
			if ((iResultX >= 0) && (iResultX < rx) && (iResultY >= 0) && (iResultY < ry)) {
				pDst = (WORD *)m_DDraw.m_pBackB4Addr + iResultX + ((iResultY)*m_DDraw.m_sBackB4Pitch);
				switch (m_DDraw.m_cPixelFormat) {
					case 1:
						dstR = (int)m_DDraw.m_lTransRB50[(pDst[0] & 0xF800) >> 11][iR];
						dstG = (int)m_DDraw.m_lTransG50[(pDst[0] & 0x7E0) >> 5][iG];
						dstB = (int)m_DDraw.m_lTransRB50[(pDst[0] & 0x1F)][iB];
						*pDst = (WORD)((dstR << 11) | (dstG << 5) | dstB);
						break;

					case 2:
						dstR = (int)m_DDraw.m_lTransRB50[(pDst[0] & 0x7C00) >> 10][iR];
						dstG = (int)m_DDraw.m_lTransG50[(pDst[0] & 0x3E0) >> 5][iG];
						dstB = (int)m_DDraw.m_lTransRB50[(pDst[0] & 0x1F)][iB];
						*pDst = (WORD)((dstR << 10) | (dstG << 5) | dstB);
						break;
				}
			}
		}
	}
}

void CGame::_DrawThunderEffect(int sX, int sY, int dX, int dY, int rX, int rY, char cType)
{
	int j, iErr, pX1, pY1, iX1, iY1, tX, tY;
	char cDir;
	DWORD dwTime;
	WORD  wR1, wG1, wB1, wR2, wG2, wB2, wR3, wG3, wB3, wR4, wG4, wB4;
	dwTime = m_dwCurTime;
	sX = pX1 = iX1 = tX = sX;
	sY = pY1 = iY1 = tY = sY;
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(50, 50, 100), &wR1, &wG1, &wB1);
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(30, 30, 100), &wR2, &wG2, &wB2);
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0, 0, 30), &wR3, &wG3, &wB3);
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(50, 50, 200), &wR4, &wG4, &wB4);

	for (j = 0; j < 100; j++)
	{
		switch (cType) {
			case 1:
				DrawLine(pX1, pY1, iX1, iY1, 15, 15, 20);
				DrawLine(pX1 - 1, pY1, iX1 - 1, iY1, wR1, wG1, wB1);
				DrawLine(pX1 + 1, pY1, iX1 + 1, iY1, wR1, wG1, wB1);
				DrawLine(pX1, pY1 - 1, iX1, iY1 - 1, wR1, wG1, wB1);
				DrawLine(pX1, pY1 + 1, iX1, iY1 + 1, wR1, wG1, wB1);

				DrawLine(pX1 - 2, pY1, iX1 - 2, iY1, wR2, wG2, wB2);
				DrawLine(pX1 + 2, pY1, iX1 + 2, iY1, wR2, wG2, wB2);
				DrawLine(pX1, pY1 - 2, iX1, iY1 - 2, wR2, wG2, wB2);
				DrawLine(pX1, pY1 + 2, iX1, iY1 + 2, wR2, wG2, wB2);

				DrawLine(pX1 - 1, pY1 - 1, iX1 - 1, iY1 - 1, wR3, wG3, wB3);
				DrawLine(pX1 + 1, pY1 - 1, iX1 + 1, iY1 - 1, wR3, wG3, wB3);
				DrawLine(pX1 + 1, pY1 - 1, iX1 + 1, iY1 - 1, wR3, wG3, wB3);
				DrawLine(pX1 - 1, pY1 + 1, iX1 - 1, iY1 + 1, wR3, wG3, wB3);
				break;

			case 2:
				DrawLine2(pX1, pY1, iX1, iY1, wR4, wG4, wB4);
				break;
		}
		iErr = 0;
		m_Misc.GetPoint(sX, sY, dX, dY, &tX, &tY, &iErr, j * 10);
		pX1 = iX1;
		pY1 = iY1;
		cDir = m_Misc.cGetNextMoveDir(iX1, iY1, tX, tY);
		switch (cDir) {
			case 1:	rY -= 5; break;
			case 2: rY -= 5; rX += 5; break;
			case 3:	rX += 5; break;
			case 4: rX += 5; rY += 5; break;
			case 5: rY += 5; break;
			case 6: rX -= 5; rY += 5; break;
			case 7: rX -= 5; break;
			case 8: rX -= 5; rY -= 5; break;
		}
		if (rX < -20) rX = -20;
		if (rX > 20) rX = 20;
		if (rY < -20) rY = -20;
		if (rY > 20) rY = 20;
		iX1 = iX1 + rX;
		iY1 = iY1 + rY;
		if ((abs(tX - dX) < 5) && (abs(tY - dY) < 5)) break;
	}
	switch (cType) {
		case 1:
			m_pEffectSpr[6]->PutTransSprite(iX1, iY1, (rand() % 2), dwTime);
			break;
	}
}

BOOL CGame::bDlgBoxPress_SkillDlg(short msX, short msY)
{
	int i, iAdjX, iAdjY;
	char  cItemID;
	short sX, sY, x1, y1, x2, y2, sArray[10];
	sX = m_stDialogBoxInfo[26].sX;
	sY = m_stDialogBoxInfo[26].sY;
	iAdjX = 5;
	iAdjY = 10;
	switch (m_stDialogBoxInfo[26].cMode) {
		case 1:
			ZeroMemory(sArray, sizeof(sArray));
			sArray[1] = m_stDialogBoxInfo[26].sV1;
			sArray[2] = m_stDialogBoxInfo[26].sV2;
			sArray[3] = m_stDialogBoxInfo[26].sV3;
			sArray[4] = m_stDialogBoxInfo[26].sV4;
			sArray[5] = m_stDialogBoxInfo[26].sV5;
			sArray[6] = m_stDialogBoxInfo[26].sV6;
			for (i = 1; i <= 6; i++)
				if ((sArray[i] != -1) && (m_pItemList[sArray[i]] != NULL))
				{
					cItemID = (char)sArray[i];
					switch (i) {
						case 1: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55, sY + iAdjY + 55, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 2: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 45 * 1, sY + iAdjY + 55, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 3: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 45 * 2, sY + iAdjY + 55, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 4: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55, sY + iAdjY + 100, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 5: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 45 * 1, sY + iAdjY + 100, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 6: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 45 * 2, sY + iAdjY + 100, m_pItemList[cItemID]->m_sSpriteFrame); break;
					}
					x1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.left;
					y1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.top;
					x2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.right;
					y2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.bottom;
					if ((msX > x1) && (msX < x2) && (msY > y1) && (msY < y2))
					{
						switch (i) {
							case 1: m_stDialogBoxInfo[26].sV1 = -1; break;
							case 2: m_stDialogBoxInfo[26].sV2 = -1; break;
							case 3: m_stDialogBoxInfo[26].sV3 = -1; break;
							case 4: m_stDialogBoxInfo[26].sV4 = -1; break;
							case 5: m_stDialogBoxInfo[26].sV5 = -1; break;
							case 6: m_stDialogBoxInfo[26].sV6 = -1; break;
						}
						m_bIsItemDisabled[cItemID] = FALSE;
						m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
						m_stMCursor.sSelectedObjectID = cItemID;
						m_stMCursor.sDistX = msX + iAdjX - x1 + (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_sPivotX;
						m_stMCursor.sDistY = msY + iAdjY - y1 + (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_sPivotY;
						return TRUE;
					}
				}
			break;

		case 4:
			ZeroMemory(sArray, sizeof(sArray));
			sArray[1] = m_stDialogBoxInfo[26].sV1;
			sArray[2] = m_stDialogBoxInfo[26].sV2;
			sArray[3] = m_stDialogBoxInfo[26].sV3;
			sArray[4] = m_stDialogBoxInfo[26].sV4;
			sArray[5] = m_stDialogBoxInfo[26].sV5;
			sArray[6] = m_stDialogBoxInfo[26].sV6;
			for (i = 1; i <= 6; i++)
				if ((sArray[i] != -1) && (m_pItemList[sArray[i]] != NULL))
				{
					cItemID = (char)sArray[i];
					switch (i) {
						case 1: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 30 + 13, sY + iAdjY + 55 + 180, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 2: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 45 * 1 + 30 + 13, sY + iAdjY + 55 + 180, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 3: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 45 * 2 + 30 + 13, sY + iAdjY + 55 + 180, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 4: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 30 + 13, sY + iAdjY + 100 + 180, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 5: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 45 * 1 + 30 + 13, sY + iAdjY + 100 + 180, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 6: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55 + 45 * 2 + 30 + 13, sY + iAdjY + 100 + 180, m_pItemList[cItemID]->m_sSpriteFrame); break;
					}
					x1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.left;
					y1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.top;
					x2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.right;
					y2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.bottom;

					if ((msX > x1) && (msX < x2) && (msY > y1) && (msY < y2))
					{
						switch (i) {
							case 1: m_stDialogBoxInfo[26].sV1 = -1; break;
							case 2: m_stDialogBoxInfo[26].sV2 = -1; break;
							case 3: m_stDialogBoxInfo[26].sV3 = -1; break;
							case 4: m_stDialogBoxInfo[26].sV4 = -1; break;
							case 5: m_stDialogBoxInfo[26].sV5 = -1; break;
							case 6: m_stDialogBoxInfo[26].sV6 = -1; break;
						}
						m_bIsItemDisabled[cItemID] = FALSE;
						m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
						m_stMCursor.sSelectedObjectID = cItemID;
						m_stMCursor.sDistX = msX + iAdjX - x1 + (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_sPivotX;
						m_stMCursor.sDistY = msY + iAdjY - y1 + (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_sPivotY;
						m_stDialogBoxInfo[26].cStr[4] = (char)_bCheckCurrentBuildItemStatus();
						return TRUE;
					}
				}
			break;
			// Crafting
		case 7:
			ZeroMemory(sArray, sizeof(sArray));
			sArray[1] = m_stDialogBoxInfo[26].sV1;
			sArray[2] = m_stDialogBoxInfo[26].sV2;
			sArray[3] = m_stDialogBoxInfo[26].sV3;
			sArray[4] = m_stDialogBoxInfo[26].sV4;
			sArray[5] = m_stDialogBoxInfo[26].sV5;
			sArray[6] = m_stDialogBoxInfo[26].sV6;
			for (i = 1; i <= 6; i++)
				if ((sArray[i] != -1) && (m_pItemList[sArray[i]] != NULL))
				{
					cItemID = (char)sArray[i];
					switch (i) {
						case 1: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 55, sY + iAdjY + 55, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 2: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 65 + 45 * 1, sY + iAdjY + 40, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 3: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 65 + 45 * 2, sY + iAdjY + 55, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 4: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 65, sY + iAdjY + 100, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 5: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 65 + 45 * 1, sY + iAdjY + 115, m_pItemList[cItemID]->m_sSpriteFrame); break;
						case 6: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + iAdjX + 75 + 45 * 2, sY + iAdjY + 100, m_pItemList[cItemID]->m_sSpriteFrame); break;
					}
					x1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.left;
					y1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.top;
					x2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.right;
					y2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.bottom;
					if ((msX > x1) && (msX < x2) && (msY > y1) && (msY < y2))
					{
						switch (i) {
							case 1: m_stDialogBoxInfo[26].sV1 = -1; break;
							case 2: m_stDialogBoxInfo[26].sV2 = -1; break;
							case 3: m_stDialogBoxInfo[26].sV3 = -1; break;
							case 4: m_stDialogBoxInfo[26].sV4 = -1; break;
							case 5: m_stDialogBoxInfo[26].sV5 = -1; break;
							case 6: m_stDialogBoxInfo[26].sV6 = -1; break;
						}
						m_bIsItemDisabled[cItemID] = FALSE;
						m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
						m_stMCursor.sSelectedObjectID = cItemID;
						m_stMCursor.sDistX = msX + iAdjX - x1 + (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_sPivotX;
						m_stMCursor.sDistY = msY + iAdjY - y1 + (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_sPivotY;
						return TRUE;
					}
				}
			break;
	}

	return FALSE;
}
// Snoopy: added StormBlade
int CGame::_iGetAttackType()
{
	WORD wWeaponType;
	wWeaponType = ((m_sPlayerAppr2 & 0x0FF0) >> 4);
	if (wWeaponType == 0)
	{
		if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[5] >= 100)) return 20;
		else return 1;		// Boxe
	}
	else if ((wWeaponType >= 1) && (wWeaponType <= 2))
	{
		if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[7] >= 100)) return 21;
		else return 1;		//Dag, SS
	}
	else if ((wWeaponType > 2) && (wWeaponType < 20))
	{
		if ((wWeaponType == 7) || (wWeaponType == 18)) // Added Kloness Esterk
		{
			if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[9] >= 100)) return 22;
			else return 1;  // Esterk
		}
		else if (wWeaponType == 15)
		{
			if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[8] >= 100)) return 30;
			else return 5;  // StormBlade
		}
		else
		{
			if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[8] >= 100)) return 23;
			else return 1;	// LongSwords
		}
	}
	else if ((wWeaponType >= 20) && (wWeaponType < 29))
	{
		if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[10] >= 100)) return 24;
		else return 1;		// Haches
	}
	else if ((wWeaponType >= 30) && (wWeaponType < 33))
	{
		if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[14] >= 100)) return 26;
		else return 1;		// Hammers
	}
	else if ((wWeaponType >= 34) && (wWeaponType < 40))
	{
		if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[21] >= 100)) return 27;
		else return 1;		// Wands
	}
	else if (wWeaponType >= 40)
	{
		if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[6] >= 100)) return 25;
		else return 2;		// Bows
	}
	else if ((wWeaponType == 29) || (wWeaponType == 33))
	{
		if ((m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[8] >= 100)) return 23;
		else return 1;		// LS
	}
	return 0;
}

int CGame::_iGetWeaponSkillType()
{
	WORD wWeaponType;
	wWeaponType = ((m_sPlayerAppr2 & 0x0FF0) >> 4);
	if (wWeaponType == 0)
	{
		return 5; // Openhand
	}
	else if ((wWeaponType >= 1) && (wWeaponType < 3))
	{
		return 7; // SS
	}
	else if ((wWeaponType >= 3) && (wWeaponType < 20))
	{
		if ((wWeaponType == 7) || (wWeaponType == 18)) // Esterk or KlonessEsterk
			return 9; // Fencing
		else return 8; // LS
	}
	else if ((wWeaponType >= 20) && (wWeaponType < 29))
	{
		return 10; // Axe (20..28)
	}
	else if ((wWeaponType >= 30) && (wWeaponType < 33))
	{
		return 14; // Hammer (30,31,32)
	}
	else if ((wWeaponType >= 34) && (wWeaponType < 40))
	{
		return 21; // Wand
	}
	else if (wWeaponType >= 40)
	{
		return 6;  // Bow
	}
	else if ((wWeaponType == 29) || (wWeaponType == 33))
	{
		return 8;  // LS LightingBlade || BlackShadow
	}
	return 1; // Fishing !
}

void CGame::NotifyMsg_AdminInfo(char *pData)
{
	char * cp, cStr[256];
	int  * ip, iV1, iV2, iV3, iV4, iV5;

	cp = (char *)(pData + 6);

	ip = (int *)cp;
	iV1 = *ip;
	cp += 4;

	ip = (int *)cp;
	iV2 = *ip;
	cp += 4;

	ip = (int *)cp;
	iV3 = *ip;
	cp += 4;

	ip = (int *)cp;
	iV4 = *ip;
	cp += 4;

	ip = (int *)cp;
	iV5 = *ip;
	cp += 4;

	ZeroMemory(cStr, sizeof(cStr));
	wsprintf(cStr, "%d %d %d %d %d", iV1, iV2, iV3, iV4, iV5);
	AddEventList(cStr);
}

BOOL CGame::_bCheckBadWords(char *pMsg)
{
	char cStr[500];
	int i, iLen;
	ZeroMemory(cStr, sizeof(cStr));
	strcpy(cStr, pMsg);
	iLen = strlen(cStr);

	for (i = 0; i < iLen; i++) {
		if (m_pCGameMonitor->bCheckBadWord((char *)(cStr + i)) == TRUE) return TRUE;
		if ((unsigned char)cStr[i] >= 128) i++;
	}

	return FALSE;
}

/*********************************************************************************************************************
**  void CGame::bItemDrop_ExchangeDialog(short msX, short msY)	(snoopy)											**
**  description			:: modifyed for MultiTrade																	**
**********************************************************************************************************************/
void CGame::bItemDrop_ExchangeDialog(short msX, short msY)
{
	char cItemID;
	BOOL Check = FALSE;

	if (m_cCommand < 0) return;

	cItemID = (char)m_stMCursor.sSelectedObjectID;
	if (((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_ARROW)) &&
		(m_pItemList[cItemID]->m_dwCount > 1))
	{
		m_stDialogBoxInfo[17].sX = msX - 140;
		m_stDialogBoxInfo[17].sY = msY - 70;
		if (m_stDialogBoxInfo[17].sY < 0) m_stDialogBoxInfo[17].sY = 0;
		m_stDialogBoxInfo[17].sV1 = m_sPlayerX + 1;
		m_stDialogBoxInfo[17].sV2 = m_sPlayerY + 1;
		m_stDialogBoxInfo[17].sV3 = 1000;
		m_stDialogBoxInfo[17].sV4 = cItemID;

		if (DecriptInt(ItemsInExchange) + 1 > 19) return;
		m_stDialogBoxExchangeInfo[DecriptInt(ItemsInExchange) + 1].sItemID = cItemID;

		ZeroMemory(m_stDialogBoxInfo[17].cStr, sizeof(m_stDialogBoxInfo[17].cStr));
		EnableDialogBox(17, cItemID, m_pItemList[cItemID]->m_dwCount, NULL);
	}
	else
	{
		if (DecriptInt(ItemsInExchange) + 1 > 19) return;
		m_stDialogBoxExchangeInfo[DecriptInt(ItemsInExchange) + 1].sItemID = cItemID;

		m_bIsItemDisabled[cItemID] = TRUE;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SETEXCHANGEITEM, NULL, cItemID, 1, NULL, NULL);
	}
}
/*********************************************************************************************************************
**  void CGame::DlgBoxClick_Exchange(short msX, short msY)		(snoopy)											**
**  description			:: modifyed for MultiTrade																	**
**********************************************************************************************************************/
void CGame::DlgBoxClick_Exchange(short msX, short msY)
{
	short sX, sY, sY1;
	BOOL MultiLine, MultiLine2;
	int Line, Line2, i;
	char cNameStr[120], cSubStr1[120], cSubStr2[120];
	short TotalLine, MaxItemsView = 14;

	sX = m_stDialogBoxInfo[27].sX;
	sY = m_stDialogBoxInfo[27].sY;
	switch (m_stDialogBoxInfo[27].cMode) {
		case 1: // Not yet confirmed the exchange
			MultiLine = FALSE;
			Line = 50;
			MultiLine2 = FALSE;
			Line2 = 50;

			if ((DecriptInt(ItemsInExchange) != -1) && (!ConfirmExchange) && (!MeConfirmed))
			{
				TotalLine = 0;
				i = m_stDialogBoxInfo[27].sV1;
				while (TotalLine <= MaxItemsView)
				{
					if (i <= DecriptInt(ItemsInExchange))
					{
						if (MultiLine)
							Line += (15 * 2);
						else
							Line += 15;

						GetItemName(m_stDialogBoxExchangeInfo[i].cStr1, m_stDialogBoxExchangeInfo[i].dwV1, cNameStr, cSubStr1, cSubStr2, m_stDialogBoxExchangeInfo[i].cValueA);

						sY1 = Line + 15;
						if (strlen(cNameStr) > 23)
						{
							sY1 += 15;
							MultiLine = TRUE;
							TotalLine += 2;
						}
						else
						{
							MultiLine = FALSE;
							TotalLine++;
						}

						/*if ((msX >= sX + 16) && (msX <= sX + 139) && (msY >= sY + Line + 1) && (msY <= sY + sY1 - 1))
							bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, DEF_REQUEST_REMOVEITEMEXCHANGE, NULL, i, NULL, NULL, NULL);*/
						i++;
					}
					else
						TotalLine = MaxItemsView + 1;
				}
				// Up
				if (m_stDialogBoxInfo[27].sV1 > 0)
				{
					if ((msX >= sX + 139) && (msX <= sX + 11 + 139) && (msY >= sY + 59) && (msY <= sY + 11 + 59))
					{
						m_stDialogBoxInfo[27].sV1--;
						if (m_stDialogBoxInfo[27].sV1 < 0)
							m_stDialogBoxInfo[27].sV1 = 0;
					}
				}

				// Down
				if ((msX >= sX + 139) && (msX <= sX + 11 + 139) && (msY >= sY + 280) && (msY <= sY + 11 + 280))
				{
					if (i <= DecriptInt(ItemsInExchange))
					{
						m_stDialogBoxInfo[27].sV1++;
						if (TotalLine == MaxItemsView + 1)
							m_stDialogBoxInfo[27].sV1++;
					}
				}
			}

			if (DecriptInt(ItemsInExchange2) != -1)
			{
				TotalLine = 0;
				i = m_stDialogBoxInfo[27].sV2;
				while (TotalLine <= MaxItemsView)
				{
					if (i + 20 <= DecriptInt(ItemsInExchange2) + 20)
					{
						GetItemName(m_stDialogBoxExchangeInfo[i + 20].cStr1, m_stDialogBoxExchangeInfo[i + 20].dwV1, cNameStr, cSubStr1, cSubStr2, m_stDialogBoxExchangeInfo[i + 20].cValueA);

						if (strlen(cNameStr) > 23)
							TotalLine += 2;
						else
							TotalLine++;
						i++;
					}
					else
						TotalLine = MaxItemsView + 1;
				}
				// Up
				if (m_stDialogBoxInfo[27].sV2 > 0)
				{
					if ((msX >= sX + 283) && (msX <= sX + 11 + 283) && (msY >= sY + 59) && (msY <= sY + 11 + 59))
					{
						m_stDialogBoxInfo[27].sV2--;
						if (m_stDialogBoxInfo[27].sV2 < 0)
							m_stDialogBoxInfo[27].sV2 = 0;
					}
				}

				// Down
				if ((msX >= sX + 283) && (msX <= sX + 11 + 283) && (msY >= sY + 280) && (msY <= sY + 11 + 280))
				{
					if (i + 20 <= DecriptInt(ItemsInExchange2) + 20)
					{
						m_stDialogBoxInfo[27].sV2++;
						if (TotalLine == MaxItemsView + 1)
							m_stDialogBoxInfo[27].sV2++;
					}
				}
			}

			if ((msX >= sX + DEF_LBTNPOSX - 16) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX - 16) && (msY >= sY + DEF_BTNPOSY + 78) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY + 78))
			{
				if (!MeConfirmed)
				{
					if ((m_stDialogBoxExchangeInfo[0].sV1 != -1) && (m_stDialogBoxExchangeInfo[20].sV1 != -1))
					{
						PlaySound('E', 14, 5);
						// Show confirmation Diag instead.
						EnableDialogBox(41, NULL, NULL, NULL);
						m_stDialogBoxInfo[41].cMode = 1;
					}
				}
			}
			if ((msX >= sX + DEF_RBTNPOSX + 68) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX + 68) && (msY >= sY + DEF_BTNPOSY + 78) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY + 78))
			{
				DisableDialogBox(27);
				DisableDialogBox(22);
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CANCELEXCHANGEITEM, NULL, NULL, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
			}
			break;
	}
}
/*********************************************************************************************************************
**  void CGame::DlgBoxClick_ConfirmExchange(short msX, short msY)		(snoopy)									**
**  description			:: click on confirmation diag																**
**********************************************************************************************************************/
void CGame::DlgBoxClick_ConfirmExchange(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[41].sX;
	sY = m_stDialogBoxInfo[41].sY;

	switch (m_stDialogBoxInfo[41].cMode) {
		case 1: // Not yet confirmed the exchange
			// yes
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
			{
				if ((m_stDialogBoxExchangeInfo[0].sV1 != -1) && (m_stDialogBoxExchangeInfo[20].sV1 != -1))
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CONFIRMEXCHANGEITEM, NULL
						, m_stDialogBoxExchangeInfo[0].sV1 // ItemID; inutilis� par serveur
						, m_stDialogBoxExchangeInfo[0].sV3 // Amount; inutilis� par serveur
						, NULL, NULL);
					PlaySound('E', 14, 5);
					MeConfirmed = TRUE;
					m_stDialogBoxInfo[41].cMode = 2;
				}
				return;
			}
			// No
			if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
			{
				DisableDialogBox(41);
				//DisableDialogBox(27);
				//DisableDialogBox(22);
				//bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CANCELEXCHANGEITEM, NULL, NULL, NULL, NULL, NULL);
				PlaySound('E', 14, 5);
				return;
			}
			break;
		case 2: // waiting for other side to confirm
			break;
	}
}

void CGame::DlgBoxClick_Quest(int msX, int msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[28].sX;
	sY = m_stDialogBoxInfo[28].sY;

	if (m_stDialogBoxInfo[28].sView == -1)
	{
		if (m_stQuest[0].sTargetType != 0)
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 100) && (msY <= sY + 115))
				m_stDialogBoxInfo[28].sView = 1;

		if (m_stQuest[1].sTargetType != 0)
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 130) && (msY <= sY + 145))
				m_stDialogBoxInfo[28].sView = 2;

		if (m_stQuest[2].sTargetType != 0)
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 160) && (msY <= sY + 175))
				m_stDialogBoxInfo[28].sView = 3;
	}

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		DisableDialogBox(28);
		PlaySound('E', 14, 5);
	}
}

int CGame::_iGetBankItemCount()
{
	int i, iCnt;

	iCnt = 0;
	for (i = 0; i < DEF_MAXBANKITEMS; i++)
		if (m_pBankList[i] != NULL)
			if (m_pBankList[i]->BankPage == m_stDialogBoxInfo[14].cMode)
				iCnt++;

	return iCnt;
}

BOOL CGame::_bDecodeBuildItemContents()
{
	char cFileName[255], cTemp[255];
	HANDLE hFile;
	FILE * pFile;
	DWORD  dwFileSize;
	char * pBuffer;
	BOOL   bRet;
	int    i;

	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		if (m_pBuildItemList[i] != NULL)
		{
			delete m_pBuildItemList[i];
			m_pBuildItemList[i] = NULL;
		}

	ZeroMemory(cTemp, sizeof(cTemp));
	ZeroMemory(cFileName, sizeof(cFileName));

	strcpy(cTemp, "BItemcfg");
	strcat(cFileName, "contents");
	strcat(cFileName, "\\");
	strcat(cFileName, "\\");
	strcat(cFileName, cTemp);
	strcat(cFileName, ".txt");

	hFile = CreateFile(cFileName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);

	pFile = fopen(cFileName, "rt");
	if (pFile == NULL) return FALSE;
	else
	{
		pBuffer = new char[dwFileSize + 1];
		ZeroMemory(pBuffer, dwFileSize + 1);
		fread(pBuffer, dwFileSize, 1, pFile);
		bRet = __bDecodeBuildItemContents(pBuffer);
		delete[] pBuffer;
	}
	fclose(pFile);
	return bRet;
}

BOOL CGame::_bCheckBuildItemStatus()
{
	int iIndex, i, j, iMatch, iCount;
	char cTempName[21];
	int  iItemCount[DEF_MAXITEMS];

	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		if (m_pDispBuildItemList[i] != NULL)
		{
			delete m_pDispBuildItemList[i];
			m_pDispBuildItemList[i] = NULL;
		}
	iIndex = 0;
	for (i = 0; i < DEF_MAXBUILDITEMS; i++)
		if (m_pBuildItemList[i] != NULL)
		{	// Skill-Limit
			if (m_cSkillMastery[13] >= m_pBuildItemList[i]->m_iSkillLimit)
			{
				iMatch = 0;
				m_pDispBuildItemList[iIndex] = new class CBuildItem;
				memcpy(m_pDispBuildItemList[iIndex]->m_cName, m_pBuildItemList[i]->m_cName, 20);

				memcpy(m_pDispBuildItemList[iIndex]->m_cElementName1, m_pBuildItemList[i]->m_cElementName1, 20);
				memcpy(m_pDispBuildItemList[iIndex]->m_cElementName2, m_pBuildItemList[i]->m_cElementName2, 20);
				memcpy(m_pDispBuildItemList[iIndex]->m_cElementName3, m_pBuildItemList[i]->m_cElementName3, 20);
				memcpy(m_pDispBuildItemList[iIndex]->m_cElementName4, m_pBuildItemList[i]->m_cElementName4, 20);
				memcpy(m_pDispBuildItemList[iIndex]->m_cElementName5, m_pBuildItemList[i]->m_cElementName5, 20);
				memcpy(m_pDispBuildItemList[iIndex]->m_cElementName6, m_pBuildItemList[i]->m_cElementName6, 20);

				m_pDispBuildItemList[iIndex]->m_iElementCount[1] = m_pBuildItemList[i]->m_iElementCount[1];
				m_pDispBuildItemList[iIndex]->m_iElementCount[2] = m_pBuildItemList[i]->m_iElementCount[2];
				m_pDispBuildItemList[iIndex]->m_iElementCount[3] = m_pBuildItemList[i]->m_iElementCount[3];
				m_pDispBuildItemList[iIndex]->m_iElementCount[4] = m_pBuildItemList[i]->m_iElementCount[4];
				m_pDispBuildItemList[iIndex]->m_iElementCount[5] = m_pBuildItemList[i]->m_iElementCount[5];
				m_pDispBuildItemList[iIndex]->m_iElementCount[6] = m_pBuildItemList[i]->m_iElementCount[6];

				m_pDispBuildItemList[iIndex]->m_iSprH = m_pBuildItemList[i]->m_iSprH;
				m_pDispBuildItemList[iIndex]->m_iSprFrame = m_pBuildItemList[i]->m_iSprFrame;
				m_pDispBuildItemList[iIndex]->m_iMaxSkill = m_pBuildItemList[i]->m_iMaxSkill;
				m_pDispBuildItemList[iIndex]->m_iSkillLimit = m_pBuildItemList[i]->m_iSkillLimit;

				// ItemCount
				for (j = 0; j < DEF_MAXITEMS; j++)
					if (m_pItemList[j] != NULL)
						iItemCount[j] = m_pItemList[j]->m_dwCount;
					else iItemCount[j] = 0;

					// Element1
					ZeroMemory(cTempName, sizeof(cTempName));
					memcpy(cTempName, m_pBuildItemList[i]->m_cElementName1, 20);
					iCount = m_pBuildItemList[i]->m_iElementCount[1];
					if (iCount == 0) iMatch++;
					else
					{
						for (j = 0; j < DEF_MAXITEMS; j++)
							if (m_pItemList[j] != NULL) {
								if ((memcmp(m_pItemList[j]->m_cName, cTempName, 20) == 0) && (m_pItemList[j]->m_dwCount >= (DWORD)(iCount)) &&
									(iItemCount[j] > 0))
								{
									iMatch++;
									m_pDispBuildItemList[iIndex]->m_bElementFlag[1] = TRUE;
									iItemCount[j] -= iCount;
									goto CBIS_STEP2;
								}
							}
					}

				CBIS_STEP2:;
					// Element2
					ZeroMemory(cTempName, sizeof(cTempName));
					memcpy(cTempName, m_pBuildItemList[i]->m_cElementName2, 20);
					iCount = m_pBuildItemList[i]->m_iElementCount[2];
					if (iCount == 0) iMatch++;
					else
					{
						for (j = 0; j < DEF_MAXITEMS; j++)
							if (m_pItemList[j] != NULL)
							{
								if ((memcmp(m_pItemList[j]->m_cName, cTempName, 20) == 0) && (m_pItemList[j]->m_dwCount >= (DWORD)(iCount)) &&
									(iItemCount[j] > 0))
								{
									iMatch++;
									m_pDispBuildItemList[iIndex]->m_bElementFlag[2] = TRUE;
									iItemCount[j] -= iCount;
									goto CBIS_STEP3;
								}
							}
					}

				CBIS_STEP3:;
					// Element3
					ZeroMemory(cTempName, sizeof(cTempName));
					memcpy(cTempName, m_pBuildItemList[i]->m_cElementName3, 20);
					iCount = m_pBuildItemList[i]->m_iElementCount[3];
					if (iCount == 0) iMatch++;
					else
					{
						for (j = 0; j < DEF_MAXITEMS; j++)
							if (m_pItemList[j] != NULL)
							{
								if ((memcmp(m_pItemList[j]->m_cName, cTempName, 20) == 0) && (m_pItemList[j]->m_dwCount >= (DWORD)(iCount)) &&
									(iItemCount[j] > 0))
								{
									iMatch++;
									m_pDispBuildItemList[iIndex]->m_bElementFlag[3] = TRUE;
									iItemCount[j] -= iCount;
									goto CBIS_STEP4;
								}
							}
					}

				CBIS_STEP4:;
					// Element4 �˻�
					ZeroMemory(cTempName, sizeof(cTempName));
					memcpy(cTempName, m_pBuildItemList[i]->m_cElementName4, 20);
					iCount = m_pBuildItemList[i]->m_iElementCount[4];
					if (iCount == 0) iMatch++;
					else
					{
						for (j = 0; j < DEF_MAXITEMS; j++)
							if (m_pItemList[j] != NULL)
							{
								if ((memcmp(m_pItemList[j]->m_cName, cTempName, 20) == 0) && (m_pItemList[j]->m_dwCount >= (DWORD)(iCount)) &&
									(iItemCount[j] > 0))
								{
									iMatch++;
									m_pDispBuildItemList[iIndex]->m_bElementFlag[4] = TRUE;
									iItemCount[j] -= iCount;
									goto CBIS_STEP5;
								}
							}
					}

				CBIS_STEP5:;

					// Element5
					ZeroMemory(cTempName, sizeof(cTempName));
					memcpy(cTempName, m_pBuildItemList[i]->m_cElementName5, 20);
					iCount = m_pBuildItemList[i]->m_iElementCount[5];
					if (iCount == 0) iMatch++;
					else
					{
						for (j = 0; j < DEF_MAXITEMS; j++)
							if (m_pItemList[j] != NULL)
							{
								if ((memcmp(m_pItemList[j]->m_cName, cTempName, 20) == 0) && (m_pItemList[j]->m_dwCount >= (DWORD)(iCount)) &&
									(iItemCount[j] > 0))
								{
									iMatch++;
									m_pDispBuildItemList[iIndex]->m_bElementFlag[5] = TRUE;
									iItemCount[j] -= iCount;
									goto CBIS_STEP6;
								}
							}
					}

				CBIS_STEP6:;

					// Element6
					ZeroMemory(cTempName, sizeof(cTempName));
					memcpy(cTempName, m_pBuildItemList[i]->m_cElementName6, 20);
					iCount = m_pBuildItemList[i]->m_iElementCount[6];
					if (iCount == 0) iMatch++;
					else
					{
						for (j = 0; j < DEF_MAXITEMS; j++)
							if (m_pItemList[j] != NULL)
							{
								if ((memcmp(m_pItemList[j]->m_cName, cTempName, 20) == 0) && (m_pItemList[j]->m_dwCount >= (DWORD)(iCount)) &&
									(iItemCount[j] > 0))
								{
									iMatch++;
									m_pDispBuildItemList[iIndex]->m_bElementFlag[6] = TRUE;
									iItemCount[j] -= iCount;
									goto CBIS_STEP7;
								}
							}
					}

				CBIS_STEP7:;

					if (iMatch == 6) m_pDispBuildItemList[iIndex]->m_bBuildEnabled = TRUE;
					iIndex++;
			}
		}
	return TRUE;
}

BOOL CGame::_ItemDropHistory(char * ItemName)
{
	BOOL bFlag = FALSE;
	if (DecriptInt(m_iItemDropCnt) == 0)
	{
		strcpy(m_cItemDrop[DecriptInt(m_iItemDropCnt)], ItemName);
		m_iItemDropCnt = EncriptInt((DecriptInt(m_iItemDropCnt) + 1));
		return TRUE;
	}
	if ((1 <= DecriptInt(m_iItemDropCnt)) && (20 >= DecriptInt(m_iItemDropCnt)))
	{
		for (int i = 0; i < DecriptInt(m_iItemDropCnt); i++)
		{
			if (strcmp(m_cItemDrop[i], ItemName) == 0)
			{
				bFlag = TRUE;
				break;
			}
		}
		if (bFlag)
		{
			if (m_bItemDrop)
				return FALSE;
			else
				return TRUE;
		}

		if (20 < DecriptInt(m_iItemDropCnt))
		{
			for (int i = 0; i < DecriptInt(m_iItemDropCnt); i++)
				strcpy(m_cItemDrop[i - 1], ItemName);
			strcpy(m_cItemDrop[20], ItemName);
			m_iItemDropCnt = EncriptInt(21);
		}
		else
		{
			strcpy(m_cItemDrop[DecriptInt(m_iItemDropCnt)], ItemName);
			m_iItemDropCnt = EncriptInt((DecriptInt(m_iItemDropCnt) + 1));
		}
	}
	return TRUE;
}


BOOL CGame::__bDecodeBuildItemContents(char *pBuffer)
{
	char * pContents, *token;
	char seps[] = "= ,\t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int  iIndex = 0;
	class CStrTok * pStrTok;
	pContents = pBuffer;
	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();

	while (token != NULL)
	{
		if (cReadModeA != 0)
		{
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1:
							ZeroMemory(m_pBuildItemList[iIndex]->m_cName, sizeof(m_pBuildItemList[iIndex]->m_cName));
							memcpy(m_pBuildItemList[iIndex]->m_cName, token, strlen(token));
							cReadModeB = 2;
							break;
						case 2:
							m_pBuildItemList[iIndex]->m_iSkillLimit = atoi(token);
							cReadModeB = 3;
							break;
						case 3: // m_cElementName1
							ZeroMemory(m_pBuildItemList[iIndex]->m_cElementName1, sizeof(m_pBuildItemList[iIndex]->m_cElementName1));
							memcpy(m_pBuildItemList[iIndex]->m_cElementName1, token, strlen(token));
							cReadModeB = 4;
							break;
						case 4: // m_iElementCount1
							m_pBuildItemList[iIndex]->m_iElementCount[1] = atoi(token);
							cReadModeB = 5;
							break;
						case 5: // m_cElementName2
							ZeroMemory(m_pBuildItemList[iIndex]->m_cElementName2, sizeof(m_pBuildItemList[iIndex]->m_cElementName2));
							memcpy(m_pBuildItemList[iIndex]->m_cElementName2, token, strlen(token));
							cReadModeB = 6;
							break;
						case 6: // m_iElementCount2
							m_pBuildItemList[iIndex]->m_iElementCount[2] = atoi(token);
							cReadModeB = 7;
							break;
						case 7: // m_cElementName3
							ZeroMemory(m_pBuildItemList[iIndex]->m_cElementName3, sizeof(m_pBuildItemList[iIndex]->m_cElementName3));
							memcpy(m_pBuildItemList[iIndex]->m_cElementName3, token, strlen(token));
							cReadModeB = 8;
							break;
						case 8: // m_iElementCount3
							m_pBuildItemList[iIndex]->m_iElementCount[3] = atoi(token);
							cReadModeB = 9;
							break;
						case 9: // m_cElementName4
							ZeroMemory(m_pBuildItemList[iIndex]->m_cElementName4, sizeof(m_pBuildItemList[iIndex]->m_cElementName4));
							memcpy(m_pBuildItemList[iIndex]->m_cElementName4, token, strlen(token));
							cReadModeB = 10;
							break;
						case 10: // m_iElementCount4
							m_pBuildItemList[iIndex]->m_iElementCount[4] = atoi(token);
							cReadModeB = 11;
							break;
						case 11: // m_cElementName5
							ZeroMemory(m_pBuildItemList[iIndex]->m_cElementName5, sizeof(m_pBuildItemList[iIndex]->m_cElementName5));
							memcpy(m_pBuildItemList[iIndex]->m_cElementName5, token, strlen(token));
							cReadModeB = 12;
							break;
						case 12: // m_iElementCount5
							m_pBuildItemList[iIndex]->m_iElementCount[5] = atoi(token);
							cReadModeB = 13;
							break;
						case 13: // m_cElementName6
							ZeroMemory(m_pBuildItemList[iIndex]->m_cElementName6, sizeof(m_pBuildItemList[iIndex]->m_cElementName6));
							memcpy(m_pBuildItemList[iIndex]->m_cElementName6, token, strlen(token));
							cReadModeB = 14;
							break;
						case 14: // m_iElementCount6
							m_pBuildItemList[iIndex]->m_iElementCount[6] = atoi(token);
							cReadModeB = 15;
							break;

						case 15:
							m_pBuildItemList[iIndex]->m_iSprH = atoi(token);
							cReadModeB = 16;
							break;

						case 16:
							m_pBuildItemList[iIndex]->m_iSprFrame = atoi(token);
							cReadModeB = 17;
							break;

						case 17:
							m_pBuildItemList[iIndex]->m_iMaxSkill = atoi(token);

							cReadModeA = 0;
							cReadModeB = 0;
							iIndex++;
							break;
					}
					break;

				default:
					break;
			}
		}
		else
		{
			if (memcmp(token, "BuildItem", 9) == 0)
			{
				cReadModeA = 1;
				cReadModeB = 1;
				m_pBuildItemList[iIndex] = new class CBuildItem;
			}
		}
		token = pStrTok->pGet();
	}
	delete pStrTok;
	if ((cReadModeA != 0) || (cReadModeB != 0)) return FALSE;
	return TRUE;
}


BOOL CGame::_bCheckCurrentBuildItemStatus()
{
	int i, iCount2, iMatch, iIndex, iItemIndex[7];
	int iCount;
	int iItemCount[7];
	char cTempName[21];
	BOOL bItemFlag[7];

	iIndex = m_stDialogBoxInfo[26].cStr[0];

	if (m_pBuildItemList[iIndex] == NULL) return FALSE;

	iItemIndex[1] = m_stDialogBoxInfo[26].sV1;
	iItemIndex[2] = m_stDialogBoxInfo[26].sV2;
	iItemIndex[3] = m_stDialogBoxInfo[26].sV3;
	iItemIndex[4] = m_stDialogBoxInfo[26].sV4;
	iItemIndex[5] = m_stDialogBoxInfo[26].sV5;
	iItemIndex[6] = m_stDialogBoxInfo[26].sV6;

	for (i = 1; i <= 6; i++)
		if (iItemIndex[i] != -1)
			iItemCount[i] = m_pItemList[iItemIndex[i]]->m_dwCount;
		else iItemCount[i] = 0;
		iMatch = 0;
		for (i = 1; i <= 6; i++) bItemFlag[i] = FALSE;

		// Element1
		ZeroMemory(cTempName, sizeof(cTempName));
		memcpy(cTempName, m_pDispBuildItemList[iIndex]->m_cElementName1, 20);
		iCount = m_pDispBuildItemList[iIndex]->m_iElementCount[1];
		if (iCount == 0) iMatch++;
		else
		{
			for (i = 1; i <= 6; i++)
			{
				if ((iItemIndex[i] != -1) && (memcmp(m_pItemList[iItemIndex[i]]->m_cName, cTempName, 20) == 0) &&
					(m_pItemList[iItemIndex[i]]->m_dwCount >= (DWORD)(iCount)) &&
					(iItemCount[i] > 0) && (bItemFlag[i] == FALSE))
				{
					iMatch++;
					iItemCount[i] -= iCount;
					bItemFlag[i] = TRUE;
					goto CCBIS_STEP2;
				}
			}
		}

	CCBIS_STEP2:;

		// Element2
		ZeroMemory(cTempName, sizeof(cTempName));
		memcpy(cTempName, m_pDispBuildItemList[iIndex]->m_cElementName2, 20);
		iCount = m_pDispBuildItemList[iIndex]->m_iElementCount[2];
		if (iCount == 0) iMatch++;
		else
		{
			for (i = 1; i <= 6; i++)
			{
				if ((iItemIndex[i] != -1) && (memcmp(m_pItemList[iItemIndex[i]]->m_cName, cTempName, 20) == 0) &&
					(m_pItemList[iItemIndex[i]]->m_dwCount >= (DWORD)(iCount)) &&
					(iItemCount[i] > 0) && (bItemFlag[i] == FALSE))
				{
					iMatch++;
					iItemCount[i] -= iCount;
					bItemFlag[i] = TRUE;
					goto CCBIS_STEP3;
				}
			}
		}

	CCBIS_STEP3:;


		// Element3
		ZeroMemory(cTempName, sizeof(cTempName));
		memcpy(cTempName, m_pDispBuildItemList[iIndex]->m_cElementName3, 20);
		iCount = m_pDispBuildItemList[iIndex]->m_iElementCount[3];
		if (iCount == 0) iMatch++;
		else
		{
			for (i = 1; i <= 6; i++)
			{
				if ((iItemIndex[i] != -1) && (memcmp(m_pItemList[iItemIndex[i]]->m_cName, cTempName, 20) == 0) &&
					(m_pItemList[iItemIndex[i]]->m_dwCount >= (DWORD)(iCount)) &&
					(iItemCount[i] > 0) && (bItemFlag[i] == FALSE))
				{
					iMatch++;
					iItemCount[i] -= iCount;
					bItemFlag[i] = TRUE;
					goto CCBIS_STEP4;
				}
			}
		}

	CCBIS_STEP4:;

		// Element4
		ZeroMemory(cTempName, sizeof(cTempName));
		memcpy(cTempName, m_pDispBuildItemList[iIndex]->m_cElementName4, 20);
		iCount = m_pDispBuildItemList[iIndex]->m_iElementCount[4];
		if (iCount == 0) iMatch++;
		else
		{
			for (i = 1; i <= 6; i++)
			{
				if ((iItemIndex[i] != -1) && (memcmp(m_pItemList[iItemIndex[i]]->m_cName, cTempName, 20) == 0) &&
					(m_pItemList[iItemIndex[i]]->m_dwCount >= (DWORD)(iCount)) &&
					(iItemCount[i] > 0) && (bItemFlag[i] == FALSE))
				{
					iMatch++;
					iItemCount[i] -= iCount;
					bItemFlag[i] = TRUE;
					goto CCBIS_STEP5;
				}
			}
		}

	CCBIS_STEP5:;

		// Element5
		ZeroMemory(cTempName, sizeof(cTempName));
		memcpy(cTempName, m_pDispBuildItemList[iIndex]->m_cElementName5, 20);
		iCount = m_pDispBuildItemList[iIndex]->m_iElementCount[5];
		if (iCount == 0) iMatch++;
		else
		{
			for (i = 1; i <= 6; i++)
			{
				if ((iItemIndex[i] != -1) && (memcmp(m_pItemList[iItemIndex[i]]->m_cName, cTempName, 20) == 0) &&
					(m_pItemList[iItemIndex[i]]->m_dwCount >= (DWORD)(iCount)) &&
					(iItemCount[i] > 0) && (bItemFlag[i] == FALSE))
				{
					iMatch++;
					iItemCount[i] -= iCount;
					bItemFlag[i] = TRUE;
					goto CCBIS_STEP6;
				}
			}
		}

	CCBIS_STEP6:;

		// Element6
		ZeroMemory(cTempName, sizeof(cTempName));
		memcpy(cTempName, m_pDispBuildItemList[iIndex]->m_cElementName6, 20);
		iCount = m_pDispBuildItemList[iIndex]->m_iElementCount[6];
		if (iCount == 0) iMatch++;
		else
		{
			for (i = 1; i <= 6; i++)
			{
				if ((iItemIndex[i] != -1) && (memcmp(m_pItemList[iItemIndex[i]]->m_cName, cTempName, 20) == 0) &&
					(m_pItemList[iItemIndex[i]]->m_dwCount >= (DWORD)(iCount)) &&
					(iItemCount[i] > 0) && (bItemFlag[i] == FALSE))
				{
					iMatch++;
					iItemCount[i] -= iCount;
					bItemFlag[i] = TRUE;
					goto CCBIS_STEP7;
				}
			}
		}

	CCBIS_STEP7:;

		iCount = 0;
		for (i = 1; i <= 6; i++)
			if (m_pDispBuildItemList[iIndex]->m_iElementCount[i] != 0) iCount++;
		iCount2 = 0;
		for (i = 1; i <= 6; i++)
			if (iItemIndex[i] != -1) iCount2++;
		if ((iMatch == 6) && (iCount == iCount2)) return TRUE;
		return FALSE;
}

void CGame::NoticementHandler(char * pData)
{
	char * cp;
	FILE * pFile;
	WORD * wp;
	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	switch (*wp)
	{
		case DEF_MSGTYPE_CONFIRM:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			pFile = fopen("contents\\contents1000.txt", "wt");
			if (pFile == NULL) return;
			fwrite(cp, strlen(cp), 1, pFile);
			fclose(pFile);
			break;
		case DEF_MSGTYPE_REJECT:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			pFile = fopen("contents\\contents1000.txt", "wt");
			if (pFile == NULL) return;
			fwrite(cp, strlen(cp), 1, pFile);
			fclose(pFile);
			break;
	}
	AddEventList("Press Ctrol + P for news and Panel.", 10);
	if (DecriptInt(m_iLevel) < 42) EnableDialogBox(35, NULL, NULL, NULL);

}

int CGame::_iGetFOE(int iStatus, short sOwnerType)
{
	BOOL bPK, bCitizen, bAresden, bHunter;
	if (DecriptInt(m_iPKCount) != 0 && Assasain == FALSE) return -1;
	//	CLEROTH			0x00000000 status is int NOT short ( 3.51 )
	if (iStatus & 0x80000000)
		bPK = TRUE;
	else
		bPK = FALSE;

	if (iStatus & 0x40000000)
		bCitizen = TRUE;
	else
		bCitizen = FALSE;

	if (iStatus & 0x20000000)
		bAresden = TRUE;
	else
		bAresden = FALSE;

	if (iStatus & 0x10000000)
		bHunter = TRUE;
	else
		bHunter = FALSE;

	if (iStatus & 0x00000000) return 0;

	if (Assasain)
	{
		if (bHunter && bCitizen == FALSE) return 1;
		else return -1;
	}

	if (bPK == TRUE) return -2;
	if (bCitizen == FALSE && bHunter) return -1;
	if (bCitizen == FALSE) return 0;
	if (DecriptBool(m_bCitizen) == FALSE) return 0;
	if ((DecriptBool(m_bAresden) == TRUE) && (bAresden == TRUE)) return 1;
	if ((DecriptBool(m_bAresden) == FALSE) && (bAresden == FALSE)) return 1;
	if (m_bIsCrusadeMode == TRUE) return -1;
	else
	{
		if ((DecriptBool(m_bHunter) == FALSE) && (bHunter == FALSE)) return -1;
		else return 0;
	}
}

void CGame::_SetIlusionEffect(int iOwnerH)
{
	char cDir;

	m_iIlusionOwnerH = EncriptInt(iOwnerH);

	ZeroMemory(m_cName_IE, sizeof(m_cName_IE));
	m_pMapData->GetOwnerStatusByObjectID(iOwnerH, &m_cIlusionOwnerType, &cDir, &m_sAppr1_IE, &m_sAppr2_IE, &m_sAppr3_IE, &m_sAppr4_IE, &m_iStatus_IE, &m_iApprColor_IE, &m_iApprColor_IE2, m_cName_IE);
}

void CGame::ResponsePanningHandler(char *pData)
{
	char * cp, cDir;
	short * sp, sX, sY;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	sX = *sp;
	cp += 2;

	sp = (short *)cp;
	sY = *sp;
	cp += 2;

	cDir = *cp;
	cp++;

	switch (cDir) {
	case 1: m_sViewDstY -= 32; m_sPlayerY--; break;
	case 2: m_sViewDstY -= 32; m_sPlayerY--; m_sViewDstX += 32; m_sPlayerX++; break;
	case 3: m_sViewDstX += 32; m_sPlayerX++; break;
	case 4: m_sViewDstY += 32; m_sPlayerY++; m_sViewDstX += 32; m_sPlayerX++; break;
	case 5: m_sViewDstY += 32; m_sPlayerY++; break;
	case 6: m_sViewDstY += 32; m_sPlayerY++; m_sViewDstX -= 32; m_sPlayerX--; break;
	case 7: m_sViewDstX -= 32; m_sPlayerX--; break;
	case 8: m_sViewDstY -= 32; m_sPlayerY--; m_sViewDstX -= 32; m_sPlayerX--; break;
	}

	m_pMapData->ShiftMapData(cDir);
	_ReadMapData(sX, sY, cp);

	m_bIsRedrawPDBGS = TRUE;

	m_bIsObserverCommanded = EncriptBool(FALSE);
}

BOOL CGame::bReadItemNameConfigFile()
{
	FILE * pFile;
	HANDLE hFile;
	DWORD  dwFileSize;
	char * cp, *token, cReadModeA, cReadModeB;
	char seps[] = "=\n";
	int iIndex;

	cReadModeA = 0;
	cReadModeB = 0;
	iIndex = 0;

	hFile = CreateFile("contents\\ItemName.cfg", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen("contents\\ItemName.cfg", "rt");
	if (pFile == NULL) return FALSE;
	else {
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);

		token = strtok(cp, seps);
		while (token != NULL) {

			if (cReadModeA != 0) {
				switch (cReadModeA) {
					case 1:
						switch (cReadModeB) {
							case 1:
								m_pItemNameList[iIndex] = new class CItemName;
								strcpy(m_pItemNameList[iIndex]->m_cOriginName, token);
								cReadModeB = 2;
								break;

							case 2:
								strcpy(m_pItemNameList[iIndex]->m_cName, token);
								cReadModeA = 0;
								cReadModeB = 0;
								iIndex++;
								break;
						}
				}
			}
			else {
				if (memcmp(token, "Item", 4) == 0) {
					cReadModeA = 1;
					cReadModeB = 1;
				}
			}
			token = strtok(NULL, seps);
		}
		delete[] cp;
	}
	if (pFile != NULL) fclose(pFile);

	return TRUE;
}

void CGame::DrawDialogBox_Map()
{
	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	double dV1, dV2, dV3;
	int    tX, tY, szX, szY, dX, dY;

	sX = m_stDialogBoxInfo[22].sX;
	sY = m_stDialogBoxInfo[22].sY;

	szX = 0;
	szY = 0;

	switch (m_stDialogBoxInfo[22].sV1) {
		case 1:
			switch (m_stDialogBoxInfo[22].sV2) {
				case 0: // aresden
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS1]->PutTransSprite2(sX, sY, 0, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS1]->PutSpriteFast(sX, sY, 0, dwTime);
					dX = 19;
					dY = 20;
					szX = 260;
					szY = 260;
					break;

				case 1: // elvine
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS1]->PutTransSprite2(sX, sY, 1, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS1]->PutSpriteFast(sX, sY, 1, dwTime);
					dX = 20;
					dY = 18;
					szX = 260;
					szY = 260;
					break;

				case 2: // middleland
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS2]->PutTransSprite2(sX, sY, 0, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS2]->PutSpriteFast(sX, sY, 0, dwTime);
					dX = 11;
					dY = 31;
					szX = 280;
					szY = 253;
					break;

				case 3: // default
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS2]->PutTransSprite2(sX, sY, 1, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS2]->PutSpriteFast(sX, sY, 1, dwTime);
					dX = 52;
					dY = 42;
					szX = 200;
					szY = 200;
					break;

				case 4: // aresden �
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS3]->PutTransSprite2(sX, sY, 0, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS3]->PutSpriteFast(sX, sY, 0, dwTime);
					dX = 40;
					dY = 40;
					szX = 220;
					szY = 220;
					break;

				case 5: // elvine �
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS3]->PutTransSprite2(sX, sY, 1, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS3]->PutSpriteFast(sX, sY, 1, dwTime);
					dX = 40;
					dY = 40;
					szX = 220;
					szY = 220;
					break;

				case 6: // aresden
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS4]->PutTransSprite2(sX, sY, 0, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS4]->PutSpriteFast(sX, sY, 0, dwTime);
					dX = 40;
					dY = 40;
					szX = 220;
					szY = 220;
					break;

				case 7: // elvine
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS4]->PutTransSprite2(sX, sY, 1, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS4]->PutSpriteFast(sX, sY, 1, dwTime);
					dX = 40;
					dY = 40;
					szX = 220;
					szY = 220;
					break;
				case 8: // aresden
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS5]->PutTransSprite2(sX, sY, 0, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS5]->PutSpriteFast(sX, sY, 0, dwTime);
					dX = 40;
					dY = 32;
					szX = 220;
					szY = 220;
					break;

				case 9: // elvine
					if (m_bDialogTrans)
						m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS5]->PutTransSprite2(sX, sY, 1, dwTime);
					else m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS5]->PutSpriteFast(sX, sY, 1, dwTime);
					dX = 40;
					dY = 38;
					szX = 220;
					szY = 220;
					break;

			}

			dV1 = (double)m_pMapData->m_sMapSizeX;
			dV2 = (double)m_sPlayerX;
			dV3 = (dV2*(double)szX) / dV1;
			tX = (int)dV3 + dX;

			dV1 = (double)m_pMapData->m_sMapSizeY;
			if (dV1 == 752) dV1 = 680;
			dV2 = (double)m_sPlayerY;
			dV3 = (dV2*(double)szY) / dV1;
			tY = (int)dV3 + dY;


			//m_pSprite[DEF_SPRID_INTERFACE_MAPS1]->PutSpriteFast(sX +tX, sY +tY, 4, dwTime);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, sX + tX, sY + tY, 43);
			wsprintf(G_cTxt, "%d,%d", m_sPlayerX, m_sPlayerY);
			PutString_SprFont3(sX + 10 + tX - 5, sY + 10 + tY - 6, G_cTxt, m_wR[13] * 4, m_wG[13] * 4, m_wB[13] * 4, FALSE, 2);
			break;
	}
}
//ANGEL+20
/*********************************************************************************************************************
**  void CGame::NotifyMsg_SetExchangeItem(char *pData)		(snoopy)												**
**  description			:: Recieve a msg from gserver and sets the item												**
**********************************************************************************************************************/
void CGame::NotifyMsg_SetExchangeItem(char *pData)
{
	short * sp, sDir, sSprite, sSpriteFrame, sPerformance;
	int * ip, iAmount, i;
	int sCurLife, sMaxLife;
	char * cp, cColor, cValueA, cItemName[24], cCharName[12];
	DWORD * dwp, dwAttribute;
	ZeroMemory(cItemName, sizeof(cItemName));
	ZeroMemory(cCharName, sizeof(cCharName));

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *)cp;
	sDir = *sp;
	cp += 2;
	sp = (short *)cp;
	sSprite = *sp;
	cp += 2;
	sp = (short *)cp;
	sSpriteFrame = *sp;
	cp += 2;
	ip = (int *)cp;
	iAmount = *ip;
	cp += 4;
	cColor = *cp;
	cp++;
	ip = (int *)cp;
	sCurLife = *ip;
	cp += 4;
	ip = (int *)cp;
	sMaxLife = *ip;
	cp += 4;
	sp = (short *)cp;
	sPerformance = *sp;
	cp += 2;
	memcpy(cItemName, cp, 20);
	cp += 20;
	memcpy(cCharName, cp, 10);
	cp += 10;
	dwp = (DWORD *)cp;
	dwAttribute = *dwp;
	cp += 4;
	cValueA = *cp;
	cp++;

	if (sDir >= 1000)  // Set the item I want to exchange
	{
		ItemsInExchange = EncriptInt(DecriptInt(ItemsInExchange) + 1);
		if (DecriptInt(ItemsInExchange) == 20)
		{
			ItemsInExchange = EncriptInt(DecriptInt(ItemsInExchange) - 1);
			return;
		}

		i = DecriptInt(ItemsInExchange);
		/*i = 0;
		while (m_stDialogBoxExchangeInfo[i].sV1 !=-1)
		{
			if (i > 19) return; // Error situation
			i++;
		}*/
	}
	else // Set the item he proposes me.
	{
		ItemsInExchange2 = EncriptInt(DecriptInt(ItemsInExchange2) + 1);
		if (DecriptInt(ItemsInExchange2) == 40)
		{
			ItemsInExchange2 = EncriptInt(DecriptInt(ItemsInExchange2) - 1);
			return;
		}

		i = 20 + DecriptInt(ItemsInExchange2);
		/*while (m_stDialogBoxExchangeInfo[i].sV1 !=-1)
		{
			if (i > 40) return; // Error situation
			i++;
		}*/
	}
	m_stDialogBoxExchangeInfo[i].sV1 = sSprite;
	m_stDialogBoxExchangeInfo[i].sV2 = sSpriteFrame;
	m_stDialogBoxExchangeInfo[i].sV3 = iAmount;
	m_stDialogBoxExchangeInfo[i].sV4 = cColor;
	m_stDialogBoxExchangeInfo[i].sV5 = (int)sCurLife;
	m_stDialogBoxExchangeInfo[i].sV6 = (int)sMaxLife;
	m_stDialogBoxExchangeInfo[i].sV7 = (int)sPerformance;
	memcpy(m_stDialogBoxExchangeInfo[i].cStr1, cItemName, 20);
	memcpy(m_stDialogBoxExchangeInfo[i].cStr2, cCharName, 10);
	m_stDialogBoxExchangeInfo[i].dwV1 = dwAttribute;
	m_stDialogBoxExchangeInfo[i].cValueA = cValueA;

	if (i < 20)
		FExchangeLog(TRUE, TRUE, i);
	else
		FExchangeLog(FALSE, TRUE, i);
}

void CGame::NotifyMsg_DismissGuildApprove(char * pData)
{
	char * cp, cName[24], cLocation[12];
	ZeroMemory(cName, sizeof(cName));
	ZeroMemory(cLocation, sizeof(cLocation));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cName, cp, 20);
	cp += 20;
	cp += 2;
	memcpy(cLocation, cp, 10);
	cp += 10;
	ZeroMemory(m_cGuildName, sizeof(m_cGuildName));
	m_iGuildRank = EncriptInt(-1);
	ZeroMemory(m_cLocation, sizeof(m_cLocation));
	memcpy(m_cLocation, cLocation, 10);
	EncriptString(m_cLocation);

	DecriptString(m_cLocation);
	if (memcmp(m_cLocation, "aresden", 7) == 0)
	{
		m_bAresden = EncriptBool(TRUE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(FALSE);
		m_bElvine = EncriptBool(FALSE);
	}
	else if (memcmp(m_cLocation, "arehunter", 9) == 0)
	{
		m_bAresden = EncriptBool(TRUE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(FALSE);
	}
	else if (memcmp(m_cLocation, "elvine", 6) == 0)
	{
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(FALSE);
		m_bElvine = EncriptBool(TRUE);
	}
	else if (memcmp(m_cLocation, "elvhunter", 9) == 0)
	{
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(TRUE);
	}
	else
	{
		m_bAresden = EncriptBool(FALSE);  // Bug V3.92 II - > AMP In Aresden
		m_bCitizen = EncriptBool(FALSE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(FALSE);
	}
	EncriptString(m_cLocation);

	EnableDialogBox(8, NULL, NULL, NULL);
	_PutGuildOperationList(cName, 5);
}

void CGame::NotifyMsg_DismissGuildReject(char * pData)
{
	char * cp, cName[21];
	ZeroMemory(cName, sizeof(cName));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cName, cp, 20);
	cp += 20;
	EnableDialogBox(8, NULL, NULL, NULL);
	_PutGuildOperationList(cName, 6);
}

void CGame::NotifyMsg_DownSkillIndexSet(char *pData)
{
	WORD * wp;
	short sSkillIndex;
	char * cp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	sSkillIndex = (short)*wp;
	cp += 2;
	m_iDownSkillIndex = EncriptInt(sSkillIndex);
	m_stDialogBoxInfo[15].bFlag = FALSE;
}

void CGame::NotifyMsg_FishChance(char * pData)
{
	int iFishChance;
	char * cp;
	WORD * wp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	iFishChance = (int)*wp;
	cp += 2;
	m_stDialogBoxInfo[24].sV1 = iFishChance;
}

void CGame::NotifyMsg_GuildDisbanded(char * pData)
{
	char * cp, cName[24], cLocation[12];
	ZeroMemory(cName, sizeof(cName));
	ZeroMemory(cLocation, sizeof(cLocation));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cName, cp, 20);
	cp += 20;
	memcpy(cLocation, cp, 10);
	cp += 10;
	m_Misc.ReplaceString(cName, '_', ' ');
	EnableDialogBox(8, NULL, NULL, NULL);
	_PutGuildOperationList(cName, 7);
	ZeroMemory(m_cGuildName, sizeof(m_cGuildName));
	m_iGuildRank = EncriptInt(-1);
	ZeroMemory(m_cLocation, sizeof(m_cLocation));
	memcpy(m_cLocation, cLocation, 10);
	EncriptString(m_cLocation);

	DecriptString(m_cLocation);
	if (memcmp(m_cLocation, "aresden", 7) == 0)
	{
		m_bAresden = EncriptBool(TRUE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(FALSE);
		m_bElvine = EncriptBool(FALSE);
	}
	else if (memcmp(m_cLocation, "arehunter", 9) == 0)
	{
		m_bAresden = EncriptBool(TRUE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(FALSE);
	}
	else if (memcmp(m_cLocation, "elvine", 6) == 0)
	{
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(FALSE);
		m_bElvine = EncriptBool(TRUE);
	}
	else if (memcmp(m_cLocation, "elvhunter", 9) == 0)
	{
		m_bAresden = EncriptBool(FALSE);
		m_bCitizen = EncriptBool(TRUE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(TRUE);
	}
	else
	{
		m_bAresden = EncriptBool(FALSE); // Bug V3.92 II - > AMP In Aresden
		m_bCitizen = EncriptBool(FALSE);
		m_bHunter = EncriptBool(TRUE);
		m_bElvine = EncriptBool(FALSE);
	}
	EncriptString(m_cLocation);
}

void CGame::NotifyMsg_WhetherChange(char * pData)
{
	char * cp;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	m_cWhetherStatus = *cp;
	cp++;

	if (m_cWhetherStatus != NULL)
		SetWhetherStatus(TRUE, m_cWhetherStatus);
	else SetWhetherStatus(FALSE, NULL);
}

void CGame::NotifyMsg_TimeChange(char * pData)
{
	char * cp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	G_cSpriteAlphaDegree = *cp;
	switch (G_cSpriteAlphaDegree) {
		case 1:	m_bIsXmas = FALSE; PlaySound('E', 32, 0); break;
		case 2: m_bIsXmas = FALSE; PlaySound('E', 31, 0); break;
		case 3: // Snoopy Special night with chrismas bulbs
			if (m_cWhetherEffectType > 3) m_bIsXmas = TRUE;
			else m_bIsXmas = FALSE;
			PlaySound('E', 31, 0);
			G_cSpriteAlphaDegree = 2; break;
	}
	m_cGameModeCount = 1;
	m_bIsRedrawPDBGS = TRUE;
}

void CGame::NotifyMsg_RepairItemPrice(char * pData)
{
	char * cp, cName[21];
	DWORD * dwp, wV1, wV2, wV3, wV4;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	dwp = (DWORD *)cp;
	wV1 = *dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	wV2 = *dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	wV3 = *dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	wV4 = *dwp;
	cp += 4;
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;
	EnableDialogBox(23, 2, wV1, wV2);
	m_stDialogBoxInfo[23].sV3 = wV3;
}

void CGame::NotifyMsg_SellItemPrice(char * pData)
{
	char * cp, cName[21];
	DWORD * dwp, wV1, wV2, wV3, wV4;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	dwp = (DWORD *)cp;
	wV1 = *dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	wV2 = *dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	wV3 = *dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	wV4 = *dwp;
	cp += 4;
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;
	EnableDialogBox(23, 1, wV1, wV2);
	m_stDialogBoxInfo[23].sV3 = wV3;
	m_stDialogBoxInfo[23].sV4 = wV4;
}

void CGame::NotifyMsg_QueryDismissGuildPermission(char * pData)
{
	char * cp, cName[12];
	ZeroMemory(cName, sizeof(cName));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cName, cp, 10);
	cp += 10;
	EnableDialogBox(8, NULL, NULL, NULL);
	_PutGuildOperationList(cName, 2);
}


void CGame::NotifyMsg_QueryJoinGuildPermission(char * pData)
{
	char * cp, cName[12];
	ZeroMemory(cName, sizeof(cName));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cName, cp, 10);
	cp += 10;
	EnableDialogBox(8, NULL, NULL, NULL);
	_PutGuildOperationList(cName, 1);
}


void CGame::NotifyMsg_QuestContents(char *pData)
{
	int * ip;
	short * sp, Pos;
	char  * cp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *)cp;
	Pos = *sp;
	cp += 2;
	m_stQuest[Pos].sQuestType = Pos + 1;

	sp = (short *)cp;
	m_stQuest[Pos].sWho = *sp;
	cp += 2;
	sp = (short *)cp;
	m_stQuest[Pos].sContribution = *sp;
	cp += 2;
	sp = (short *)cp;
	m_stQuest[Pos].sTargetType = *sp;
	cp += 2;
	ip = (int *)cp;
	m_stQuest[Pos].sTargetCount = *ip;
	cp += 4;
	sp = (short *)cp;
	m_stQuest[Pos].sX = *sp;
	cp += 2;
	sp = (short *)cp;
	m_stQuest[Pos].sY = *sp;
	cp += 2;
	sp = (short *)cp;
	m_stQuest[Pos].sRange = *sp;
	cp += 2;
	sp = (short *)cp;
	m_stQuest[Pos].bIsQuestCompleted = (BOOL)*sp;
	cp += 2;
	ZeroMemory(m_stQuest[Pos].cTargetName, sizeof(m_stQuest[Pos].cTargetName));
	memcpy(m_stQuest[Pos].cTargetName, cp, 20);
	cp += 20;
}

void CGame::NotifyMsg_PlayerProfile(char * pData)
{
	char * cp;
	char cTemp[500];
	int i;
	ZeroMemory(cTemp, sizeof(cTemp));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	strcpy(cTemp, cp);
	for (i = 0; i < 500; i++)
		if (cTemp[i] == '_') cTemp[i] = ' ';
	AddEventList(cTemp, 10);
}

void CGame::NotifyMsg_NoticeMsg(char * pData)
{
	char * cp, cMsg[1000];
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	strcpy(cMsg, cp);
	AddEventList(cMsg, 12);
}
/*********************************************************************************************************************
**  void CGame::NotifyMsg_OpenExchageWindow(char *pData)		(snoopy)											**
**  description			:: Recieve a msg from gserver and sets the item	and opens trade windows						**
**********************************************************************************************************************/
void CGame::NotifyMsg_OpenExchageWindow(char *pData)
{
	short * sp, sDir, sSprite, sSpriteFrame, sPerformance;
	int * ip, iAmount;
	int sCurLife, sMaxLife;
	char * cp, cColor, cValueA, cItemName[24], cCharName[12];
	DWORD * dwp, dwAttribute;
	ZeroMemory(cItemName, sizeof(cItemName));
	ZeroMemory(cCharName, sizeof(cCharName));

	ConfirmExchange = FALSE;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *)cp;
	sDir = *sp;
	cp += 2;
	sp = (short *)cp;
	sSprite = *sp;
	cp += 2;
	sp = (short *)cp;
	sSpriteFrame = *sp;
	cp += 2;
	ip = (int *)cp;
	iAmount = *ip;
	cp += 4;
	cColor = *cp;
	cp++;
	ip = (int *)cp;
	sCurLife = *ip;
	cp += 4;
	ip = (int *)cp;
	sMaxLife = *ip;
	cp += 4;
	sp = (short *)cp;
	sPerformance = *sp;
	cp += 2;
	memcpy(cItemName, cp, 20);
	cp += 20;
	memcpy(cCharName, cp, 10);
	cp += 10;
	dwp = (DWORD *)cp;
	dwAttribute = *dwp;
	cp += 4;
	cValueA = *cp;
	cp++;

	//DecriptString(m_cPlayerName);
	if (memcmp(cCharName, m_cPlayerName, 10) != 0) {
		ZeroMemory(PlayerNameExc, sizeof(PlayerNameExc));
		memcpy(PlayerNameExc, cCharName, 10);
	}
	//DecriptString(m_cPlayerName);

	EnableDialogBox(27, 1, 0, 0, NULL);
	int i;
	if (sDir >= 1000)  // Set the item I want to exchange
	{
		ItemsInExchange = EncriptInt(DecriptInt(ItemsInExchange) + 1);
		i = DecriptInt(ItemsInExchange);
		/*while (m_stDialogBoxExchangeInfo[i].sV1 !=-1)
		{
			if (i > 19) return; // Error situation
			i++;
		}
		*/
		if ((sDir > 1000) && (i == 0))
		{
			m_bIsItemDisabled[sDir - 1000] = TRUE;
			m_stDialogBoxExchangeInfo[0].sItemID = sDir - 1000;
		}
	}
	else // Set the item he proposes me.
	{
		ItemsInExchange2 = EncriptInt(DecriptInt(ItemsInExchange2) + 1);
		i = 20 + DecriptInt(ItemsInExchange2);
		/*while (m_stDialogBoxExchangeInfo[i].sV1 !=-1)
		{
			if (i > 40) return; // Error situation
			i++;
		}*/
	}
	m_stDialogBoxExchangeInfo[i].sV1 = sSprite;
	m_stDialogBoxExchangeInfo[i].sV2 = sSpriteFrame;
	m_stDialogBoxExchangeInfo[i].sV3 = iAmount;
	m_stDialogBoxExchangeInfo[i].sV4 = cColor;
	m_stDialogBoxExchangeInfo[i].sV5 = (int)sCurLife;
	m_stDialogBoxExchangeInfo[i].sV6 = (int)sMaxLife;
	m_stDialogBoxExchangeInfo[i].sV7 = (int)sPerformance;
	memcpy(m_stDialogBoxExchangeInfo[i].cStr1, cItemName, 20);
	memcpy(m_stDialogBoxExchangeInfo[i].cStr2, cCharName, 10);
	m_stDialogBoxExchangeInfo[i].dwV1 = dwAttribute;
	m_stDialogBoxExchangeInfo[i].cValueA = cValueA;

	if (i < 20)
		FExchangeLog(TRUE, TRUE, i);
	else
		FExchangeLog(FALSE, TRUE, i);
}

void CGame::NotifyMsg_JoinGuildApprove(char * pData)
{
	char * cp, cName[21];
	short * sp;
	ZeroMemory(cName, sizeof(cName));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cName, cp, 20);
	cp += 20;
	sp = (short *)cp;
	cp += 2;
	//agregado lalo
	//DecriptString(m_cGuildName);
	ZeroMemory(m_cGuildName, sizeof(m_cGuildName));
	strcpy(m_cGuildName, cName);
	//EncriptString(m_cGuildName);

	m_iGuildRank = EncriptInt(*sp);
	EnableDialogBox(8, NULL, NULL, NULL);
	_PutGuildOperationList(cName, 3);
}


void CGame::NotifyMsg_JoinGuildReject(char * pData)
{
	char * cp, cName[21];
	ZeroMemory(cName, sizeof(cName));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cName, cp, 20);
	cp += 20;
	EnableDialogBox(8, NULL, NULL, NULL);
	_PutGuildOperationList(cName, 4);
}

void CGame::DlgBoxClick_Help(int msX, int msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[35].sX;
	sY = m_stDialogBoxInfo[35].sY;
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 0) && (msY < sY + 50 + 15 * 1))
	{
		DisableDialogBox(18);
		EnableDialogBox(18, 1000, NULL, NULL);
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 1) && (msY < sY + 50 + 15 * 2)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 900, NULL, NULL);
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 2) && (msY < sY + 50 + 15 * 3)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 901, NULL, NULL);
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 3) && (msY < sY + 50 + 15 * 4)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 902, NULL, NULL);
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 4) && (msY < sY + 50 + 15 * 5)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 903, NULL, NULL);
		m_bIsF1HelpWindowEnabled = TRUE;
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 5) && (msY < sY + 50 + 15 * 6)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 904, NULL, NULL); //
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 6) && (msY < sY + 50 + 15 * 7)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 905, NULL, NULL); //
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 7) && (msY < sY + 50 + 15 * 8)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 906, NULL, NULL); //
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 8) && (msY < sY + 50 + 15 * 9)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 907, NULL, NULL); //
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 9) && (msY < sY + 50 + 15 * 10)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 908, NULL, NULL); //
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 10) && (msY < sY + 50 + 15 * 11)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 909, NULL, NULL); //
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 11) && (msY < sY + 50 + 15 * 12)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 910, NULL, NULL); //
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 12) && (msY < sY + 50 + 15 * 13)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 911, NULL, NULL); // FAQ
	}

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 13) && (msY < sY + 50 + 15 * 14)) {
		DisableDialogBox(18);
		EnableDialogBox(18, 912, NULL, NULL); //
	}
	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		PlaySound('E', 14, 5);
		DisableDialogBox(35);
	}
}

/*********************************************************************************************************************
** void CGame::CreateScreenShot()										(snoopy)									**
**  description			:: Fixed Screen Shots																		**
**********************************************************************************************************************/
void CGame::CreateScreenShot()
{	//HelShot20060307_173003_Warehouse000.jpg
	int i;
	FILE * pFile;
	char cFn[256];
	char LongMapName[128];
	char SStime[32];
	SYSTEMTIME SysTime;
	GetLocalTime(&SysTime);
	
	int res_x = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 10;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 10;
	}
	DecriptString(m_cMapName);
	ZeroMemory(LongMapName, sizeof(LongMapName));
	GetOfficialMapName(m_cMapName, LongMapName);
	EncriptString(m_cMapName);

	ZeroMemory(SStime, sizeof(SStime));
	wsprintf(SStime, "%02d/%02d/%02d - %02d:%02d:%02d"
		, SysTime.wDay, SysTime.wMonth, SysTime.wYear
		, SysTime.wHour, SysTime.wMinute, SysTime.wSecond
		, LongMapName);

//	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGO2, -5, -13, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGO2, 1, -13, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGO, 5, 15, 0);
	PutString(30, 70 + res_x, SStime, RGB(255, 255, 255)); //ScreenShot time

	for (i = 0; i < 1000; i++)
	{
		ZeroMemory(cFn, sizeof(cFn));
		wsprintf(cFn, "SAVE\\Captura_%02d_%02d_%04d_%02d%02d%02d_%s%03d.jpg"
			, SysTime.wDay, SysTime.wMonth, SysTime.wYear
			, SysTime.wHour, SysTime.wMinute, SysTime.wSecond
			, LongMapName
			, i);
		_mkdir("SAVE");
		pFile = fopen(cFn, "rb");
		if (pFile == NULL)
		{
			m_DDraw.Screenshot(cFn, m_DDraw.m_lpBackB4);
			CxImage  image;
			image.Load(cFn, CXIMAGE_FORMAT_BMP);
			if (image.IsValid())
			{
				image.SetJpegQuality(80);
				image.Save(cFn, CXIMAGE_FORMAT_JPG);
			}
			wsprintf(G_cTxt, NOTIFYMSG_CREATE_SCREENSHOT1, cFn);
			AddEventList(G_cTxt, 10);
			return;
		}
		fclose(pFile);
	}
	AddEventList(NOTIFYMSG_CREATE_SCREENSHOT2, 10);
}

void CGame::UpdateScreen_OnConnecting()
{
	short sX, sY, msX, msY, msZ;
	char cLB, cRB;
	DWORD dwTime = timeGetTime();
	static class CMouseInterface * pMI;
	static DWORD dwMTime, dwCTime;

	//added resolution lalo
	int res_x = 0;
	int res_y = 0;
	int res_x2 = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 800;
		res_y = 600;
		res_x2 = 81;
		res_y2 = 89;

	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1024;
		res_y = 768;
		res_x2 = 193;
		res_y2 = 172;

	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 640;
		res_y = 480;
	}

	if (m_cGameModeCount == 0) {
		m_bEnterPressed = FALSE;
		m_bEscPressed = FALSE;
		dwCTime = dwMTime = timeGetTime();
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_bEscPressed == TRUE) {

		if ((dwTime - m_dwTime) > 1000)
		{
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			if (m_pLSock != NULL)
			{
				delete m_pLSock;
				m_pLSock = NULL;
			}
			if (m_pGSock != NULL)
			{
				delete m_pGSock;
				m_pGSock = NULL;
			}
		}
		m_bEscPressed = FALSE;
		return;
	}

	if ((dwTime - dwMTime) > 150) dwMTime = dwTime;

	if ((dwTime - dwCTime) > 100) {
		m_cMenuFrame++;
		dwCTime = dwTime;
	}
	if (m_cMenuFrame >= 8) {
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8) {
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;

	m_DDraw.ClearBackB4();

	m_bIsHideLocalCursor = TRUE;
	switch (m_cMsg[0]) {
		case '0':
			_Draw_UpdateScreen_OnCreateNewAccount();
			break;

		case '1':
			sX = 146 + res_x2;
			sY = 114 + res_y2;
			DecriptString(m_cAccountName);
			DecriptString(m_cAccountPassword);
			_Draw_OnLogin(m_cAccountName, m_cAccountPassword, 0, 0);
			EncriptString(m_cAccountName);
			EncriptString(m_cAccountPassword);
			break;

		case '2':
		//	DecriptString(m_cPlayerName);
			_bDraw_OnCreateNewCharacter(m_cPlayerName, 0, 0, 0);
		//	EncriptString(m_cPlayerName);
			break;

		case '3':
			UpdateScreen_OnSelectCharacter(0, 0, 0, 0);
			break;

		case '4':
			// Change Password
			UpdateScreen_OnSelectCharacter(0, 0, 0, 0, TRUE);
			break;

		case '5':
			m_DDraw.ClearBackB4();
			break;
	}
	m_bIsHideLocalCursor = FALSE;

	//m_DDraw.DrawShadowBox(0, 0, 640, 480);
	m_DDraw.DrawShadowBox(0, 0, res_x, res_y);
	//m_DDraw.DrawShadowBox(0, 0, 1024, 768);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 162 + res_x2, 125 + res_y2, 2);
	wsprintf(G_cTxt, "Connecting to Server... %3dSec", (dwTime - m_dwTime) / 1000);
	PutString_SprFont(172 + res_x2 + 35, 190 + res_y2, G_cTxt, 7, 0, 0);

	if ((dwTime - m_dwTime) > 7000)
	{
		PutAlignedString(180 + res_x2, 463 + res_y2, 195 + res_y2 + 30, UPDATE_SCREEN_ON_CONNECTING1);//"Press ESC key during long time of no"
		PutAlignedString(180 + res_x2, 463 + res_y2, 195 + res_y2 + 45, UPDATE_SCREEN_ON_CONNECTING2);//"connection and return to the main menu."
	}
	else PutAlignedString(180 + res_x2, 463 + res_y2, 195 + res_y2 + 30, UPDATE_SCREEN_ON_CONNECTING3);//"  Connecting to server. Please wait..."
	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 8, dwTime);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::UpdateScreen_OnWaitInitData()
{
	short msX, msY, msZ;
	char cLB, cRB;
	DWORD dwTime = timeGetTime();

	//added resolution lalo
	int res_x2 = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x2 = 81;
		res_y2 = 89;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x2 = 193;
		res_y2 = 172;
	}

	if (m_cGameModeCount == 0) {
		m_bEnterPressed = FALSE;
		m_bEscPressed = FALSE;
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_bEscPressed == TRUE) {
		if ((dwTime - m_dwTime) > 7000)
		{
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			if (m_pLSock != NULL)
			{
				delete m_pLSock;
				m_pLSock = NULL;
			}
			if (m_pGSock != NULL)
			{
				delete m_pGSock;
				m_pGSock = NULL;
			}
		}
		m_bEscPressed = FALSE;
		return;
	}

	m_DDraw.ClearBackB4();
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 162 + res_x2, 125 + res_y2, 2);

	wsprintf(G_cTxt, "Waiting for response... %dsec", (dwTime - m_dwTime) / 1000);
	PutString_SprFont(172 + res_x2 + 44, 190 + res_y2, G_cTxt, 7, 0, 0);
	if ((dwTime - m_dwTime) > 7000) {
		PutAlignedString(174 + res_x2, 467 + res_y2, 190 + res_y2 + 30, UPDATE_SCREEN_ON_WAIT_INIT_DATA1);//"Press ESC key during long time of no"
		PutAlignedString(174 + res_x2, 467 + res_y2, 190 + res_y2 + 45, UPDATE_SCREEN_ON_WAIT_INIT_DATA2);//"connection and return to the main menu."
	}
	else PutAlignedString(174 + res_x2, 467 + res_y2, 195 + res_y2 + 30, UPDATE_SCREEN_ON_WAIT_INIT_DATA3);//  Connecting to server. Please wait..."

	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 8, dwTime);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::UpdateScreen_OnConnectionLost()
{
	short msX, msY, msZ;
	char cLB, cRB;
	static DWORD dwTime;
	//added resolution lalo
	int res_x2 = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x2 = 81;
		res_y2 = 89;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x2 = 193;
		res_y2 = 172;
	}
	if (m_cGameModeCount == 0)
	{
		dwTime = timeGetTime();
		if (m_bSoundFlag) m_pESound[38]->bStop();
		if ((m_bSoundFlag) && (m_bMusicStat == TRUE))
		{
			if (m_pBGM != NULL) m_pBGM->bStop();
		}
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;
	m_DDraw.ClearBackB4();
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 162 + res_x2, 125 + res_y2, 2);
	PutString_SprFont(172 + res_x2 + 54, 180 + res_y2, "Connection Lost!", 7, 0, 0);
	PutString(172 + res_x2 + 50, 180 + res_y2 + 30, UPDATE_SCREEN_ON_CONNECTION_LOST, RGB(0, 0, 0));//"
	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();

	if (Disconect == FALSE)
	{
		if ((timeGetTime() - m_dwTime) > 5000)
		{
			//Cambiado por log out normal LALOv10
			//if (strlen(G_cCmdLineTokenA) != 0)
			if (strlen(G_cCmdLineTokenA) == -1)
				ChangeGameMode(DEF_GAMEMODE_ONQUIT);
			else
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		}
	}
	else
	{
		//if (strlen(G_cCmdLineTokenA) != 0)
		if (strlen(G_cCmdLineTokenA) == -1)
			ChangeGameMode(DEF_GAMEMODE_ONQUIT);
		else
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
	}
}

BOOL CGame::_bDraw_OnCreateNewCharacter(char * pName, short msX, short msY, int iPoint)
{
	BOOL bFlag = TRUE;
	DWORD dwTime = timeGetTime();
	int i = 0;

	int add_x = 0;
	int add_y = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		add_x = 80;
		add_y = 60;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		add_x = 192/* + 24*/;
		add_y = 144/* + 50*/;
	}

	m_DDraw.ClearBackB4();
	if (c_reso->IsResolution() == C640x480)
		m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, 0);
	else if (c_reso->IsResolution() == C800x600)
		m_pSprite[SPRID_BACKGROUND + 1]->PutSpriteFast(0, 0, 0, 0);
	else if (c_reso->IsResolution() == C1024x768)
		m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, 0);
	/*if (!bOnGame)
	{
	if (c_reso->IsResolution() == C640x480)	DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND640, 0, 0, 0, TRUE); else if (c_reso->IsResolution() == C800x600) DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND800, 0, 0, 0, TRUE); else if (c_reso->IsResolution() == C1024x768) DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND1024, 0, 0, 0, TRUE);
	}*/
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_NEWCHAR, add_x + 24, add_y + 50, 0, TRUE);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 69, TRUE);
	PutAlignedString(64 + add_x, 282 + add_x, 90 + add_y, _BDRAW_ON_CREATE_NEW_CHARACTER1, 5, 5, 5);//"
	PutAlignedString(57 + add_x, 191 + add_x, 110 + add_y, DEF_MSG_CHARACTERNAME, 5, 5, 5);//"Character Name"
	if (m_cCurFocus != 1) PutString(197 + add_x, 112 + add_y, pName, RGB(25, 35, 25));
	PutAlignedString(64 + add_x, 282 + add_x, 140 + add_y, _BDRAW_ON_CREATE_NEW_CHARACTER2, 5, 5, 5);//"
	PutString(100 + add_x, 160 + add_y, DEF_MSG_GENDER, RGB(5, 5, 5));//"Gender"
	PutString(100 + add_x, 175 + add_y, DEF_MSG_SKINCOLOR, RGB(5, 5, 5));//"Skin Color"
	PutString(100 + add_x, 190 + add_y, DEF_MSG_HAIRSTYLE, RGB(5, 5, 5));//"Hair Style"
	PutString(100 + add_x, 205 + add_y, DEF_MSG_HAIRCOLOR, RGB(5, 5, 5));//"Hair Color"
	PutString(100 + add_x, 220 + add_y, DEF_MSG_UNDERWEARCOLOR, RGB(5, 5, 5));//"Underwear Color"
	//PutAlignedString(64, 282, 245, _BDRAW_ON_CREATE_NEW_CHARACTER3, 5,5,5);
	//wsprintf(G_cTxt, _BDRAW_ON_CREATE_NEW_CHARACTER4,  iPoint);//" %d points"
	//PutAlignedString(64, 282, 260, G_cTxt, 15,10,10);
	PutString(100 + add_x, 275 + add_y, DEF_MSG_STRENGTH, RGB(5, 5, 5));//"Strength"
	PutString(100 + add_x, 292 + add_y, DEF_MSG_VITALITY, RGB(5, 5, 5));//"Vitality"
	PutString(100 + add_x, 309 + add_y, DEF_MSG_DEXTERITY, RGB(5, 5, 5));//"Dexterity"
	PutString(100 + add_x, 326 + add_y, DEF_MSG_INTELLIGENCE, RGB(5, 5, 5));//"Intelligence"
	PutString(100 + add_x, 343 + add_y, DEF_MSG_MAGIC, RGB(5, 5, 5));//"Magic"
	PutString(100 + add_x, 360 + add_y, DEF_MSG_CHARISMA, RGB(5, 5, 5));//"Charisma"

	wsprintf(G_cTxt, "%d", m_ccStr);
	PutString(204 + add_x, 277 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));
	wsprintf(G_cTxt, "%d", m_ccVit);
	PutString(204 + add_x, 277 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));
	wsprintf(G_cTxt, "%d", m_ccDex);
	PutString(204 + add_x, 277 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));
	wsprintf(G_cTxt, "%d", m_ccInt);
	PutString(204 + add_x, 277 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));
	wsprintf(G_cTxt, "%d", m_ccMag);
	PutString(204 + add_x, 277 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));
	wsprintf(G_cTxt, "%d", m_ccChr);
	PutString(204 + add_x, 277 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));


	if (strlen(pName) <= 0) bFlag = FALSE;
	if (iPoint > 0) bFlag = FALSE;
	if (m_Misc.bCheckValidName(pName) == FALSE) bFlag = FALSE;


	if ((bFlag == TRUE) && (m_cCurFocus == 2)) m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(384 + add_x, 445 + add_y, 25, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(384 + add_x, 445 + add_y, 24, dwTime);
	if (m_cCurFocus == 3)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(500 + add_x, 445 + add_y, 17, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(500 + add_x, 445 + add_y, 16, dwTime);
	if (m_cCurFocus == 4)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(60 + add_x, 445 + add_y, 68, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(60 + add_x, 445 + add_y, 67, dwTime);
	if (m_cCurFocus == 5)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(145 + add_x, 445 + add_y, 66, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(145 + add_x, 445 + add_y, 65, dwTime);
	if (m_cCurFocus == 6)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(230 + add_x, 445 + add_y, 64, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(230 + add_x, 445 + add_y, 63, dwTime);


	ShowReceivedString();

	switch (m_cGender) {
	case 1:	_tmp_sOwnerType = 1; break;
	case 2:	_tmp_sOwnerType = 4; break; //@@@@@@@@@@@@@@@@@!!!!!!!!!!!!!!!!!
	}
	_tmp_sOwnerType += m_cSkinCol - 1;
	_tmp_cDir = m_cMenuDir;
	_tmp_sAppr1 = 0;
	_tmp_sAppr1 = _tmp_sAppr1 | (m_cUnderCol);
	_tmp_sAppr1 = _tmp_sAppr1 | (m_cHairStyle << 8);
	_tmp_sAppr1 = _tmp_sAppr1 | (m_cHairCol << 4);
	_tmp_sAppr2 = 0;
	_tmp_sAppr3 = 0;
	_tmp_sAppr4 = 0;
	ZeroMemory(_tmp_cName, sizeof(_tmp_cName));
	memcpy(_tmp_cName, m_cPlayerName, 10);
	_tmp_cAction = DEF_OBJECTMOVE;
	_tmp_cFrame = m_cMenuFrame;

	_Draw_CharacterBody(507 + add_x, 267 + add_y, _tmp_sOwnerType);
	DrawObject_OnMove_ForMenu(0, 0, 500 + add_x, 174 + add_y, FALSE, dwTime, msX, msY);

	i = 0;

	PutString(445 + add_x, 192 + add_y, DEF_MSG_HITPOINT, RGB(5, 5, 5));//"Hit Point"
	wsprintf(G_cTxt, "%d", m_ccVit * 3 + 2 + m_ccStr / 2);
	PutString(550 + add_x, 192 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));

	PutString(445 + add_x, 208 + add_y, DEF_MSG_MANAPOINT, RGB(5, 5, 5));//"Mana Point"
	wsprintf(G_cTxt, "%d", m_ccMag * 2 + 2 + m_ccInt / 2);
	PutString(550 + add_x, 192 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));

	PutString(445 + add_x, 224 + add_y, DEF_MSG_STAMINARPOINT, RGB(5, 5, 5));//"Staminar Point"
	wsprintf(G_cTxt, "%d", m_ccStr * 2 + 2);
	PutString(550 + add_x, 192 + add_y + 16 * i++, G_cTxt, RGB(25, 35, 25));

	return bFlag;
}

void CGame::UpdateScreen_OnCreateNewCharacter()
{
	static class CMouseInterface * pMI;
	int i = 0;
	int iMIbuttonNum;
	static int iPoint;
	char cLB, cRB, cMIresult;
	static char cName[12];
	static char cPrevFocus;
	short msX, msY, msZ;
	BOOL bFlag;
	static DWORD dwMTime;
	DWORD dwTime = timeGetTime();

	//added resolution lalo
	int res_x = 0;
	int res_y = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 80;
		res_y = 60;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 194;
		res_y = 142;
	}

	if (m_cGameModeCount == 0)
	{
		pMI = new class CMouseInterface;
		pMI->AddRect(65 + res_x + 4, 65 + res_y + 45, 275 + 4, 82 + 45);

		pMI->AddRect(232 + res_x + 4, 111 + res_y + 45, 274 + res_x + 4 - 21, 124 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 111 + res_y + 45, 289 + res_x + 4 - 13, 124 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 126 + res_y + 45, 274 + res_x + 4 - 21, 139 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 126 + res_y + 45, 289 + res_x + 4 - 13, 139 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 141 + res_y + 45, 274 + res_x + 4 - 21, 154 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 141 + res_y + 45, 289 + res_x + 4 - 13, 154 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 156 + res_y + 45, 274 + res_x + 4 - 21, 169 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 156 + res_y + 45, 289 + res_x + 4 - 13, 169 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 171 + res_y + 45, 274 + res_x + 4 - 21, 184 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 171 + res_y + 45, 289 + res_x + 4 - 13, 184 + res_y + 45);


		pMI->AddRect(232 + res_x + 4, 231 + res_y + 45, 253 + res_x + 4, 244 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 231 + res_y + 45, 276 + res_x + 4, 244 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 246 + res_y + 45, 253 + res_x + 4, 259 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 246 + res_y + 45, 276 + res_x + 4, 259 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 261 + res_y + 45, 253 + res_x + 4, 274 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 261 + res_y + 45, 276 + res_x + 4, 274 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 276 + res_y + 45, 253 + res_x + 4, 289 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 276 + res_y + 45, 276 + res_x + 4, 289 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 291 + res_y + 45, 253 + res_x + 4, 304 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 291 + res_y + 45, 276 + res_x + 4, 304 + res_y + 45);

		pMI->AddRect(232 + res_x + 4, 306 + res_y + 45, 253 + res_x + 4, 319 + res_y + 45);
		pMI->AddRect(255 + res_x + 4, 306 + res_y + 45, 276 + res_x + 4, 319 + res_y + 45);

		pMI->AddRect(384 + res_x, 445 + res_y, 384 + res_x + 72, 445 + res_y + 15);
		pMI->AddRect(500 + res_x, 445 + res_y, 500 + res_x + 72, 445 + res_y + 15);

		pMI->AddRect(60 + res_x, 445 + res_y, 60 + res_x + 72, 445 + res_y + 15);
		pMI->AddRect(145 + res_x, 445 + res_y, 145 + res_x + 72, 445 + res_y + 15);
		pMI->AddRect(230 + res_x, 445 + res_y, 230 + res_x + 72, 445 + res_y + 15);

		iPoint = DecriptInt(m_ccStr) + m_ccVit + m_ccDex + m_ccInt + m_ccMag + m_ccChr;
		iPoint = 70 - iPoint;
		cPrevFocus = 1;
		m_cCurFocus = 1;
		m_cMaxFocus = 6;
		m_bEnterPressed = FALSE;
		m_cArrowPressed = 0;
		dwMTime = timeGetTime();
		StartInputString(193 + res_x + 4, 65 + res_y + 45, 11, cName);
		ClearInputString();
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_cArrowPressed != 0)
	{
		switch (m_cArrowPressed) {
			case 1:
				m_cCurFocus--;
				if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
				break;

			case 3:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;
		}
		m_cArrowPressed = 0;
	}

	if (cPrevFocus != m_cCurFocus) {
		EndInputString();
		switch (m_cCurFocus) {
			case 1:
				StartInputString(193 + res_x + 4, 65 + res_y + 45, 11, cName);
				break;
		}
		cPrevFocus = m_cCurFocus;
	}

	if (m_bEscPressed == TRUE) {
		ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	bFlag = _bDraw_OnCreateNewCharacter(cName, msX, msY, iPoint);

	if ((dwTime - dwMTime) > 100)
	{
		m_cMenuFrame++;
		dwMTime = dwTime;
	}
	if (m_cMenuFrame >= 8)
	{
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8)
		{
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;

	DrawVersion();
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK)
	{
		PlaySound('E', 14, 5);
		switch (iMIbuttonNum) {
			case 1:
				m_cCurFocus = 1;
				break;
			case 2:
				m_cGender = EncriptInt(DecriptInt(m_cGender) - 1);
				if (DecriptInt(m_cGender) < 1) m_cGender = EncriptInt(2);
				break;
			case 3:
				m_cGender = EncriptInt(DecriptInt(m_cGender) + 1);
				if (DecriptInt(m_cGender) > 2) m_cGender = EncriptInt(1);
				break;
			case 4:
				m_cSkinCol = EncriptInt(DecriptInt(m_cSkinCol) - 1);
				if (DecriptInt(m_cSkinCol) < 1) m_cSkinCol = EncriptInt(3);
				break;
			case 5:
				m_cSkinCol = EncriptInt(DecriptInt(m_cSkinCol) + 1);
				if (DecriptInt(m_cSkinCol) > 3) m_cSkinCol = EncriptInt(1);
				break;
			case 6:
				m_cHairStyle = EncriptInt(DecriptInt(m_cHairStyle) - 1);
				if (DecriptInt(m_cHairStyle) < 0) m_cHairStyle = EncriptInt(7);
				break;
			case 7:
				m_cHairStyle = EncriptInt(DecriptInt(m_cHairStyle) + 1);
				if (DecriptInt(m_cHairStyle) > 7) m_cHairStyle = EncriptInt(0);
				break;
			case 8:
				m_cHairCol = EncriptInt(DecriptInt(m_cHairCol) - 1);
				if (DecriptInt(m_cHairCol) < 0) m_cHairCol = EncriptInt(15);
				break;
			case 9:
				m_cHairCol = EncriptInt(DecriptInt(m_cHairCol) + 1);
				if (DecriptInt(m_cHairCol) > 15) m_cHairCol = EncriptInt(0);
				break;
			case 10:
				m_cUnderCol = EncriptInt(DecriptInt(m_cUnderCol) - 1);
				if (DecriptInt(m_cUnderCol) < 0) m_cUnderCol = EncriptInt(7);
				break;
			case 11:
				m_cUnderCol = EncriptInt(DecriptInt(m_cUnderCol) + 1);
				if (DecriptInt(m_cUnderCol) > 7) m_cUnderCol = EncriptInt(0);
				break;
			case 12:
				if (iPoint > 0) {
					if (DecriptInt(m_ccStr) < 14) {
						m_ccStr = EncriptInt(DecriptInt(m_ccStr) + 1);
						iPoint--;
					}
				}
				break;
			case 13:
				if (DecriptInt(m_ccStr) > 10) {
					m_ccStr = EncriptInt(DecriptInt(m_ccStr) - 1);
					iPoint++;
				}
				break;
			case 14:
				if (iPoint > 0) {
					if (m_ccVit < 14) {
						m_ccVit++;
						iPoint--;
					}
				}
				break;
			case 15:
				if (m_ccVit > 10) {
					m_ccVit--;
					iPoint++;
				}
				break;
			case 16:
				if (iPoint > 0) {
					if (m_ccDex < 14) {
						m_ccDex++;
						iPoint--;
					}
				}
				break;
			case 17:
				if (m_ccDex > 10) {
					m_ccDex--;
					iPoint++;
				}
				break;
			case 18:
				if (iPoint > 0) {
					if (m_ccInt < 14) {
						m_ccInt++;
						iPoint--;
					}
				}
				break;
			case 19:
				if (m_ccInt > 10) {
					m_ccInt--;
					iPoint++;
				}
				break;
			case 20:
				if (iPoint > 0) {
					if (m_ccMag < 14) {
						m_ccMag++;
						iPoint--;
					}
				}
				break;
			case 21:
				if (m_ccMag > 10) {
					m_ccMag--;
					iPoint++;
				}
				break;
			case 22:
				if (iPoint > 0) {
					if (m_ccChr < 14) {
						m_ccChr++;
						iPoint--;
					}
				}
				break;
			case 23:
				if (m_ccChr > 10)
				{
					m_ccChr--;
					iPoint++;
				}
				break;

			case 24:
				if (m_cCurFocus != 2)
				{
					m_cCurFocus = 2;
					return;
				}
				if (bFlag == FALSE) return;
				//if (m_Misc.bCheckValidName(m_cPlayerName) == FALSE) break;
				if (m_Misc.bCheckValidName(cName) == FALSE) break;
				ZeroMemory(m_cPlayerName, sizeof(m_cPlayerName));
				strcpy(m_cPlayerName, cName);
				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_CREATENEWCHARACTER;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "22");
				delete pMI;
				return;


			case 25:
				if (m_cCurFocus != 3)
				{
					m_cCurFocus = 3;
					return;
				}
				ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
				delete pMI;
				return;


			case 26: // WARRIOR
				if (m_cCurFocus != 4)
				{
					m_cCurFocus = 4;
					return;
				}

				m_ccMag = EncriptInt(10);
				m_ccInt = EncriptInt(10);
				m_ccChr = EncriptInt(10);
				m_ccStr = EncriptInt(14);
				m_ccVit = EncriptInt(12);
				m_ccDex = EncriptInt(14);
				iPoint = DecriptInt(m_ccStr) + DecriptInt(m_ccVit) + DecriptInt(m_ccDex) + DecriptInt(m_ccInt) + DecriptInt(m_ccMag) + DecriptInt(m_ccChr);
				iPoint = 70 - iPoint;
				break;

			case 27: // MAGE
				if (m_cCurFocus != 5) {
					m_cCurFocus = 5;
					return;
				}

				m_ccMag = EncriptInt(14);
				m_ccInt = EncriptInt(14);
				m_ccChr = EncriptInt(10);
				m_ccStr = EncriptInt(10);
				m_ccVit = EncriptInt(12);
				m_ccDex = EncriptInt(10);
				iPoint = DecriptInt(m_ccStr) + DecriptInt(m_ccVit) + DecriptInt(m_ccDex) + DecriptInt(m_ccInt) + DecriptInt(m_ccMag) + DecriptInt(m_ccChr);
				iPoint = 70 - iPoint;
				break;

			case 28: // PRIEST
				if (m_cCurFocus != 6) {
					m_cCurFocus = 6;
					return;
				}

				m_ccMag = EncriptInt(12);
				m_ccInt = EncriptInt(10);
				m_ccChr = EncriptInt(14);
				m_ccStr = EncriptInt(14);
				m_ccVit = EncriptInt(10);
				m_ccDex = EncriptInt(10);
				iPoint = DecriptInt(m_ccStr) + DecriptInt(m_ccVit) + DecriptInt(m_ccDex) + DecriptInt(m_ccInt) + DecriptInt(m_ccMag) + DecriptInt(m_ccChr);
				iPoint = 70 - iPoint;
				break;
		}


	}

	if ((msX >= 65 + res_x + 4 - 127) && (msX <= 275 + res_x + 4) && (msY >= 65 + res_y + 45) && (msY <= 82 + res_y + 45)) {
		PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER1);
	}
	else
		if ((msX >= 261 + res_x + 4 - 212) && (msX <= 289 + 4) && (msY >= 111 + res_y + 45) && (msY <= 124 + res_y + 45)) {
			PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER2);
		}
		else
			if ((msX >= 261 + res_x + 4 - 212) && (msX <= 289 + 4) && (msY >= 126 + res_y + 45) && (msY <= 139 + res_y + 45)) {
				PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER3);
			}
			else
				if ((msX >= 261 + res_x + 4 - 212) && (msX <= 289 + 4) && (msY >= 141 + res_y + 45) && (msY <= 154 + res_y + 45)) {
					PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER4);
				}
				else
					if ((msX >= 261 + res_x + 4 - 212) && (msX <= 289 + 4) && (msY >= 156 + res_y + 45) && (msY <= 169 + res_y + 45)) {
						PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER5);
					}
					else
						if ((msX >= 261 + res_x + 4 - 212) && (msX <= 289 + res_x + 4) && (msY >= 171 + res_y + 45) && (msY <= 184 + res_y + 45)) {
							PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER6);
						}
						else
							if ((msX >= 240 + res_x + 4 - 175) && (msX <= 268 + res_x + 4) && (msY >= 231 + res_y + 45) && (msY <= 244 + res_y + 45)) {
								// Str
								i = 0;
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER7);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER8);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER9);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER10);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER11);
							}
							else if ((msX >= 240 + res_x + 4 - 175) && (msX <= 268 + res_x + 4) && (msY >= 246 + res_y + 45) && (msY <= 259 + res_y + 45)) {
								// Vit
								i = 0;
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER12);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER13);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER14);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER15);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER16);//"
							}
							else if ((msX >= 240 + res_x + 4 - 175) && (msX <= 268 + res_x + 4) && (msY >= 261 + res_y + 45) && (msY <= 274 + res_y + 45)) {
								// Dex
								i = 0;
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER17);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER18);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER19);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER20);//"
							}
							else if ((msX >= 240 + res_x + 4 - 175) && (msX <= 268 + res_x + 4) && (msY >= 276 + res_y + 45) && (msY <= 289 + res_y + 45)) {
								// Int
								i = 0;
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER21);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER22);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER23);//"
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER24);
							}
							else if ((msX >= 240 + res_x + 4 - 175) && (msX <= 268 + res_x + 4) && (msY >= 291 + res_y + 45) && (msY <= 304 + res_y + 45)) {
								// Mag
								i = 0;
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER25);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER26);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER27);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER28);
							}
							else if ((msX >= 240 + res_x + 4 - 175) && (msX <= 268 + res_x + 4) && (msY >= 306 + res_y + 45) && (msY <= 319 + res_y + 45)) {
								// Charisma
								i = 0;
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER29);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER30);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER31);
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER32);
							}
							else if ((msX >= 384 + res_x) && (msX <= 384 + res_x + 72) && (msY >= 445 + res_y) && (msY <= 445 + res_y + 15)) {
								m_cCurFocus = 2;
								if (strlen(cName) <= 0)
								{
									i = 0;
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER35);//"Please enter a character name."
								}
								else if (iPoint > 0)
								{
									i = 0;
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER36);//"You need to select your character class."
								}
								else if (m_Misc.bCheckValidName(cName) == FALSE)
								{
									i = 0;
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER39);//"Cannot use special characters "
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER40);//"in your character's name. Please"
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER41);//"type another name."
								}/*else if (_bCheckBadWords(cName) == TRUE)
								{	i= 0 ;
									PutAlignedString(370, 580, 345 + 16*i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER42);//"The character's name is not appropriate."
									PutAlignedString(370, 580, 345 + 16*i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER43);//"Please retry with another name."
								}*/else
								{
									i = 0;
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER44);//"
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER45);//"
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER46);//"
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER47);//"
									PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y + 16 * i++, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER48);//"
								}
							}
							else if ((msX >= 500 + res_x) && (msX <= 500 + res_x + 72) && (msY >= 445 + res_y) && (msY <= 445 + res_y + 15))
							{
								m_cCurFocus = 3;
								PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER49);
							}

							if ((msX >= 60 + res_x) && (msX <= 60 + res_x + 72) && (msY >= 445 + res_y) && (msY <= 445 + res_y + 15)) {
		m_cCurFocus = 4;
		PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER50);
	}

							if ((msX >= 145 + res_x) && (msX <= 145 + res_x + 72) && (msY >= 445 + res_y) && (msY <= 445 + res_y + 15)) {
		m_cCurFocus = 5;
		PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER51);
	}

							if ((msX >= 230 + res_x) && (msX <= 230 + res_x + 72) && (msY >= 445 + res_y) && (msY <= 445 + res_y + 15)) {
		m_cCurFocus = 6;
		PutAlignedString(370 + res_x, 580 + res_y, 345 + res_y, UPDATE_SCREEN_ON_CREATE_NEW_CHARACTER52);
	}

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}


void CGame::_LoadAgreementTextContents(char cType)
{
	char * pContents, *token, cTemp[120], cFileName[120];
	char   seps[] = "\n";
	int    iIndex = 0, i;
	class  CStrTok * pStrTok;
	DWORD  dwFileSize;
	HANDLE hFile;
	FILE * pFile;

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++) {
		if (m_pAgreeMsgTextList[i] != NULL)
			delete m_pAgreeMsgTextList[i];
		m_pAgreeMsgTextList[i] = NULL;
	}

	ZeroMemory(cTemp, sizeof(cTemp));
	ZeroMemory(cFileName, sizeof(cFileName));

	wsprintf(cTemp, "contents%d", cType);

	strcat(cFileName, "contents");
	strcat(cFileName, "\\");
	strcat(cFileName, "\\");
	strcat(cFileName, cTemp);
	strcat(cFileName, ".txt");

	hFile = CreateFile(cFileName, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);

	pFile = fopen(cFileName, "rt");
	if (pFile == NULL) return;
	else {
		pContents = new char[dwFileSize + 1];
		ZeroMemory(pContents, dwFileSize + 1);
		fread(pContents, dwFileSize, 1, pFile);
	}

	fclose(pFile);
	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != NULL) {
		m_pAgreeMsgTextList[iIndex] = new class CMsg(NULL, token, NULL);
		token = pStrTok->pGet();
		iIndex++;
	}
	delete pStrTok;
	delete[] pContents;
}

void CGame::UpdateScreen_OnAgreement()
{
	short sX, sY, msX, msY, msZ;
	char  cLB, cRB;
	char  cMIresult;
	static class CMouseInterface * pMI;
	int i, iTotalLines, iPointerLoc;
	DWORD dwTime = timeGetTime();
	double d1, d2, d3;
	int iMIbuttonNum;
	sX = 0;
	sY = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		sX = 140;
		sY = 160;
	}
	if (c_reso->IsResolution() == C1024x768)
	{
		sX = 224;
		sY = 328;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		sX = 121;
		sY = 22;
	}

	if (m_cGameModeCount == 0) {
		m_iAgreeView = EncriptInt(0);
		_LoadAgreementTextContents(0);

		pMI = new class CMouseInterface;
		pMI->AddRect(sX + 82 - 105, sY + 355, sX + 131 - 105, sY + 374);
		pMI->AddRect(sX + 235 - 105, sY + 355, sX + 303 - 105, sY + 375);
	}

	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;
	if (m_bEnterPressed == TRUE) {
		PlaySound('E', 14, 5);
		ChangeGameMode(DEF_GAMEMODE_ONCREATENEWACCOUNT);
		ClearContents_OnCreateNewAccount();
		delete pMI;
		return;
	}
	if (m_bEscPressed == TRUE) {
		PlaySound('E', 14, 5);
		ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK) {
		switch (iMIbuttonNum) {
			case 1: // Agree
				PlaySound('E', 14, 5);
				ChangeGameMode(DEF_GAMEMODE_ONCREATENEWACCOUNT);
				ClearContents_OnCreateNewAccount();
				delete pMI;
				return;

			case 2:	// Disagree
				PlaySound('E', 14, 5);
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				delete pMI;
				return;
		}
	}

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_AGREEMENT, 0, 0, 0, TRUE);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, 43, 38, 12, FALSE);

	iTotalLines = 0;
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
		if (m_pAgreeMsgTextList[i] != NULL) iTotalLines++;

	d1 = (double)DecriptInt(m_iAgreeView);
	d2 = (double)(iTotalLines - 20);
	d3 = (double)d1 / d2;
	d1 = 338.0f * d3;
	iPointerLoc = (int)d1;
	m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutSpriteFast(sX + 361 - 112, sY + 37 + 13 + iPointerLoc, 7, dwTime);

	for (i = 0; i < 20; i++)
		if (m_pAgreeMsgTextList[i + DecriptInt(m_iAgreeView)] != NULL) {
			PutAlignedString(60, 360, sY + 65 + i * 13, m_pAgreeMsgTextList[i + DecriptInt(m_iAgreeView)]->m_pMsg, 45, 25, 25);
		}

	if (msZ != 0)
	{
		m_iAgreeView = EncriptInt(DecriptInt(m_iAgreeView) - msZ / 60);
		m_DInput.m_sZ = 0;
	}
	if (cLB != 0 && iTotalLines > 20)
	{
		if ((msX >= sX + 345 - 112) && (msX <= sX + 380 - 112) && (msY >= sY + 50) && (msY <= sY + 395))
		{
			d1 = (double)(msY - (sY + 37 + 13));
			d2 = (double)(iTotalLines - 17);
			d3 = (double)(d1 * d2) / (338.0f);
			m_iAgreeView = EncriptInt((int)d3);
			m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutTransSprite(sX + 361 - 112, sY + 37 + 13 + iPointerLoc, 4, dwTime);
		}
	}
	if (DecriptInt(m_iAgreeView) < 0) m_iAgreeView = EncriptInt(0);
	if (iTotalLines > 20 && DecriptInt(m_iAgreeView) > iTotalLines - 20) m_iAgreeView = EncriptInt(iTotalLines - 20);

	if ((msX > sX + 82 - 105) && (msX < sX + 131 - 105) && (msY > sY + 355 - 3) && (msY < sY + 374 + 3))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 43 + 20 - 23 + 45 - 105, sY + 265 + 90, 13);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 43 + 20 - 23 + 45 - 105, sY + 265 + 90, 12);

	if ((msX > sX + 235 - 105) && (msX < sX + 303 - 105) && (msY > sY + 355 - 3) && (msY < sY + 375 + 3))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 158 + 57 - 23 + 45 - 105, sY + 265 + 90, 15);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 158 + 57 - 23 + 45 - 105, sY + 265 + 90, 14);

	DrawVersion();
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}
/*

void CGame::UpdateScreen_OnCreateNewAccount()
{
	short msX, msY, msZ;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;
	static class CMouseInterface * pMI;
	static char cName[12], cPassword[12], cConfirm[12], cPrevFocus, cSSN_A[8], cSSN_B[8], cQuiz[44], cAnswer[20], cTempQuiz[44];
	DWORD dwTime = timeGetTime();
	int iFlag = 0;

	m_DDraw.ClearBackB4();

	int addx = 0;
	int addy = 0;
	int addx2 = 0;
	int addy2 = 0;
	int addx3 = 10;
	int addy3 = 40;
	if (c_reso->IsResolution() == C800x600)
	{
		addx2 = 44;
		addy2 = 29;
		addx = 76;
		addy = 43;
	}
/ *
	else if (c_reso->IsResolution() == C1024x768)
	{

	}* /

	ZeroMemory(m_cLogServerAddr, sizeof(m_cLogServerAddr));
	
	strcpy(m_cLogServerAddrBuffer, DEF_SERVER_IP);
	m_iLogServerPort = EncriptInt(DEF_SERVER_PORT);

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 0, 0, 0, TRUE);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 168 + addx2, 116 + addy2, 1, TRUE);

	if (m_cGameModeCount == 0)
	{
		pMI = new class CMouseInterface;
		

		if (c_reso->IsResolution() == C800x600)
		{
			pMI->AddRect(394, 202, 580, 228); // Account
			pMI->AddRect(394, 232, 580, 258); // Pasword
			pMI->AddRect(394, 263, 580, 288); // Confirm Pass

			pMI->AddRect(394, 292, 580, 319); // Mail 173,234,467,225
			pMI->AddRect(394, 323, 580, 348); // Quiz
			pMI->AddRect(394, 354, 580, 378); // Answer

			pMI->AddRect(275, 408, 407, 423); // Create
			pMI->AddRect(370, 408, 442, 423); // Clear
			pMI->AddRect(466, 408, 539, 423); // Cancel
		}
		else
		{
			pMI->AddRect(189 + addx, 325 + addy2, 262 + addx, 343 + addy2); // Create
			pMI->AddRect(284 + addx, 325 + addy2, 357 + addx, 343 + addy2); // Clear
			pMI->AddRect(380 + addx, 325 + addy2, 453 + addx, 343 + addy2); // Cancel
			pMI->AddRect(173 + addx, 162 + addy2, 467 + addx, 183 + addy2); // Account
			pMI->AddRect(173 + addx, 186 + addy2, 467 + addx, 207 + addy2); // Pasword
			pMI->AddRect(173 + addx, 210 + addy2, 467 + addx, 231 + addy2); // Confirm Pass
			pMI->AddRect(173 + addx, 234 + addy2, 467 + addx, 250 + addy2); // Mail 173,234,467,225
			pMI->AddRect(173 + addx, 258 + addy2, 467 + addx, 279 + addy2); // Quiz
			pMI->AddRect(173 + addx, 282 + addy2, 467 + addx, 303 + addy2); // Answer
		}

		cPrevFocus = 1;
		m_cCurFocus = 1;
		m_cMaxFocus = 9; //12
		m_bEnterPressed = FALSE;
		m_cArrowPressed = 0;
		ZeroMemory(m_cEmailAddr, sizeof(m_cEmailAddr));
		ZeroMemory(cName, sizeof(cName));
		ZeroMemory(cPassword, sizeof(cPassword));
		ZeroMemory(cConfirm, sizeof(cConfirm));
		ZeroMemory(cSSN_A, sizeof(cSSN_A));
		ZeroMemory(cSSN_B, sizeof(cSSN_B));
		ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
		ZeroMemory(cQuiz, sizeof(cQuiz));
		ZeroMemory(cTempQuiz, sizeof(cTempQuiz));
		ZeroMemory(cAnswer, sizeof(cAnswer));
		StartInputString(321 + addx, 168 + addy - 2, 11, cName);
		ClearInputString();
	}

	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;
	if (m_cArrowPressed != 0)
	{
		switch (m_cArrowPressed) {
			case 1:
				m_cCurFocus--;
				if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
				break;
			case 3:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;
		}
		m_cArrowPressed = 0;
	}

	if (m_bEscPressed == TRUE)
	{
		ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	if (cPrevFocus != m_cCurFocus)
	{
		EndInputString();
		if (c_reso->IsResolution() == C800x600)
		{
			switch (m_cCurFocus) {
			case 1:
				StartInputString(321 + addx, 168 + addy - 2, 11, cName);
				break;
			case 2:
				StartInputString(321 + addx, 192 + addy + 5, 11, cPassword);
				break;
			case 3:
				StartInputString(321 + addx, 216 + addy + 10, 11, cConfirm);
				break;
			case 4:
				StartInputString(321 + addx, 240 + addy + 15, 31, m_cEmailAddr);
				break;
			case 5:
				StartInputString(321 + addx, 264 + addy + 20, 44, cQuiz);
				break;
			case 6:
				StartInputString(321 + addx, 288 + addy + 25 + 1, 19, cAnswer);
				break;
			}
		}
		else
		{
			switch (m_cCurFocus) {
			case 1:
				StartInputString(321 + addx, 168 + addy, 11, cName);
				break;
			case 2:
				StartInputString(321 + addx, 192 + addy, 11, cPassword);
				break;
			case 3:
				StartInputString(321 + addx, 216 + addy, 11, cConfirm);
				break;
			case 4:
				StartInputString(321 + addx, 240 + addy, 31, m_cEmailAddr);
				break;
			case 5:
				StartInputString(321 + addx, 264 + addy, 44, cQuiz);
				break;
			case 6:
				StartInputString(321 + addx, 288 + addy, 19, cAnswer);
				break;
			}
		}
		
		cPrevFocus = m_cCurFocus;
	}

	if ((m_cCurFocus == 2) || (m_cCurFocus == 3))
		ShowReceivedString(TRUE);
	else if ((m_cCurFocus == 1) || (m_cCurFocus == 4) || (m_cCurFocus == 5) || (m_cCurFocus == 6))
		ShowReceivedString();

	if (m_cCurFocus != 1) {
		if (m_Misc.bCheckValidName(cName) != FALSE)
			PutString2(321 + addx, 168 + addy - 2, cName, 100, 200, 100);
		else PutString2(321 + addx, 168 + addy, cName, 200, 100, 100);
	}

	if (c_reso->IsResolution() == C800x600)
	{
		if (m_cCurFocus != 2) {
			if (m_Misc.bCheckValidName(cPassword) != FALSE)
				PutString(321 + addx, 192 + addy + 5, cPassword, RGB(100, 200, 100), TRUE, 1);
			else PutString(321 + addx, 192 + addy + 5, cPassword, RGB(200, 100, 100), TRUE, 1);
		}
	}
	else
	{
		if (m_cCurFocus != 2) {
			if (m_Misc.bCheckValidName(cPassword) != FALSE)
				PutString(321 + addx, 192 + addy, cPassword, RGB(100, 200, 100), TRUE, 1);
			else PutString(321 + addx, 192 + addy, cPassword, RGB(200, 100, 100), TRUE, 1);
		}
	}

	if (c_reso->IsResolution() == C800x600)
	{
		if (m_cCurFocus != 3) {
			if (memcmp(cPassword, cConfirm, 10) == 0)
				PutString(321 + addx, 216 + addy + 10, cConfirm, RGB(100, 200, 100), TRUE, 1);
			else PutString(321 + addx, 216 + addy + 10, cConfirm, RGB(200, 100, 100), TRUE, 1);
		}
	}
	else
	{
		if (m_cCurFocus != 3) {
			if (memcmp(cPassword, cConfirm, 10) == 0)
				PutString(321 + addx, 216 + addy, cConfirm, RGB(100, 200, 100), TRUE, 1);
			else PutString(321 + addx, 216 + addy, cConfirm, RGB(200, 100, 100), TRUE, 1);
		}
	}
	if (memcmp(cPassword, cConfirm, 10) != 0) iFlag = 9;
	if (c_reso->IsResolution() == C800x600)
	{
		if (m_cCurFocus != 4) {
			if (m_Misc.bIsValidEmail(m_cEmailAddr))
				PutString2(321 + addx, 240 + addy + 15, m_cEmailAddr, 100, 200, 100);
			else PutString2(321 + addx, 240 + addy + 15, m_cEmailAddr, 200, 100, 100);
		}
	}
	else
	{
		if (m_cCurFocus != 4) {
			if (m_Misc.bIsValidEmail(m_cEmailAddr))
				PutString2(321 + addx, 240 + addy, m_cEmailAddr, 100, 200, 100);
			else PutString2(321 + addx, 240 + addy, m_cEmailAddr, 200, 100, 100);
		}
	}

	wsprintf(cTempQuiz, "%s", cQuiz);
	m_Misc.ReplaceString(cTempQuiz, ' ', '_');
	if (c_reso->IsResolution() == C800x600)
	{

		if (m_cCurFocus != 5) {
			PutString2(321 + addx, 264 + addy + 20, cQuiz, 100, 200, 100);
		}
	}
	else
	{
		if (m_cCurFocus != 5) {
			PutString2(321 + addx, 264 + addy, cQuiz, 100, 200, 100);
		}
	}
	if (c_reso->IsResolution() == C800x600)
	{

		if (m_cCurFocus != 6) {
			PutString2(321 + addx, 288 + addy + 26, cAnswer, 100, 200, 100);
		}
	}
	else
	{
		if (m_cCurFocus != 6) {
			PutString2(321 + addx, 288 + addy, cAnswer, 100, 200, 100);
		}
	}
	if (strlen(cAnswer) == 0)							iFlag = 11;
	if (strlen(cTempQuiz) == 0)							iFlag = 10;
	if (m_Misc.bCheckValidName(cPassword) == FALSE)		iFlag = 7;
	if (m_Misc.bCheckValidName(cName) == FALSE)			iFlag = 6;
	if (m_Misc.bIsValidEmail(m_cEmailAddr) == FALSE)	iFlag = 5;
	if (strlen(cConfirm) == 0)							iFlag = 3;
	if (strlen(cPassword) == 0)							iFlag = 2;
	if ((strlen(cName) == 0))							iFlag = 1;

	if ((iFlag == 0) && (m_cCurFocus == 7))
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(189 + addx + addx3, 325 + addy + addy3, 25, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(189 + addx + addx3, 325 + addy + addy3, 24, dwTime);

	if (m_cCurFocus == 8)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(284 + addx + addx3, 325 + addy + addy3, 27, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(284 + addx + addx3, 325 + addy + addy3, 26, dwTime);

	if (m_cCurFocus == 9)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(380 + addx + addx3, 325 + addy + addy3, 17, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(380 + addx + addx3, 325 + addy + addy3, 16, dwTime);

	DrawVersion(TRUE);
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	if (m_bEnterPressed == TRUE)
	{
		PlaySound('E', 14, 5);
		switch (m_cCurFocus) {
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;

			case 7:
				if (iFlag != 0) return;
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));
	

				ZeroMemory(m_cAccountQuiz, sizeof(m_cAccountQuiz));
				ZeroMemory(m_cAccountAnswer, sizeof(m_cAccountAnswer));

				strcpy(m_cAccountName, cName);
				strcpy(m_cAccountPassword, cPassword);

				strcpy(m_cAccountQuiz, cTempQuiz);
				strcpy(m_cAccountAnswer, cAnswer);
				m_cAccountQuiz[45] = ' ';
				m_cAccountAnswer[20] = ' ';

				ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
				wsprintf(m_cAccountSSN, "%s-%s", cSSN_A, cSSN_B);

				if (memcmp(cPassword, cConfirm, 10) != 0)
				{
					ChangeGameMode(DEF_GAMEMODE_ONMSG);
					ZeroMemory(m_cMsg, sizeof(m_cMsg));
					strcpy(m_cMsg, UPDATE_SCREEN_ON_CREATE_NEW_ACCOUNT82);
					//"Cannot create account! - password not match!"
					delete pMI;
					return;
				}
				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);

				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_CREATEACC;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "00");
				delete pMI;

			case 8:
				ZeroMemory(cName, sizeof(cName));
				ZeroMemory(cPassword, sizeof(cPassword));
				ZeroMemory(cConfirm, sizeof(cConfirm));
				ZeroMemory(m_cAccountAge, sizeof(m_cAccountAge));
				ZeroMemory(m_cAccountCountry, sizeof(m_cAccountCountry));
				ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
				ZeroMemory(m_cEmailAddr, sizeof(m_cEmailAddr));
				ZeroMemory(cSSN_A, sizeof(cSSN_A));
				ZeroMemory(cSSN_B, sizeof(cSSN_B));
				ZeroMemory(cQuiz, sizeof(cQuiz));
				ZeroMemory(cTempQuiz, sizeof(cTempQuiz));
				ZeroMemory(cAnswer, sizeof(cAnswer));

				break;

			case 9:
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				delete pMI;
				return;
		}
		m_bEnterPressed = FALSE;
	}

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK) {
		PlaySound('E', 14, 5);
		
		switch (iMIbuttonNum) {
			default:
				m_cCurFocus = iMIbuttonNum;
				break;
		case 7:

				if (iFlag != 0) return;
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));

				ZeroMemory(m_cAccountQuiz, sizeof(m_cAccountQuiz));
				ZeroMemory(m_cAccountAnswer, sizeof(m_cAccountAnswer));

				strcpy(m_cAccountName, cName);
				strcpy(m_cAccountPassword, cPassword);

				strcpy(m_cAccountQuiz, cTempQuiz);
				strcpy(m_cAccountAnswer, cAnswer);

				ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
				wsprintf(m_cAccountSSN, "%s-%s", cSSN_A, cSSN_B);

				if (memcmp(cPassword, cConfirm, 10) != 0)
				{

					
					ChangeGameMode(DEF_GAMEMODE_ONMSG);
					ZeroMemory(m_cMsg, sizeof(m_cMsg));
					strcpy(m_cMsg, UPDATE_SCREEN_ON_CREATE_NEW_ACCOUNT82);
					//"Cannot create account! - password not match!"
					delete pMI;
					return;
				}

				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_CREATEACC;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				
				strcpy(m_cMsg, "00");
				delete pMI;
				return;

			case 8:
				ZeroMemory(cName, sizeof(cName));
				ZeroMemory(cPassword, sizeof(cPassword));
				ZeroMemory(cConfirm, sizeof(cConfirm));
				ZeroMemory(m_cAccountAge, sizeof(m_cAccountAge));
				ZeroMemory(m_cAccountCountry, sizeof(m_cAccountCountry));
				ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
				ZeroMemory(m_cEmailAddr, sizeof(m_cEmailAddr));
				ZeroMemory(cSSN_A, sizeof(cSSN_A));
				ZeroMemory(cSSN_B, sizeof(cSSN_B));
				ZeroMemory(cQuiz, sizeof(cQuiz));
				ZeroMemory(cTempQuiz, sizeof(cTempQuiz));
				ZeroMemory(cAnswer, sizeof(cAnswer));
				break;

			case 9:
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				delete pMI;
				return;
		}
	}
	if (c_reso->IsResolution() == C800x600)
	{
		if ((msX >= 275) && (msX <= 407) && (msY >= 408) && (msY <= 423))  m_cCurFocus = 7;  //12
		if ((msX >= 370) && (msX <= 442) && (msY >= 408) && (msY <= 423)) m_cCurFocus = 8;  //13
		if ((msX >= 466) && (msX <= 538) && (msY >= 408) && (msY <= 423)) m_cCurFocus = 9; //14
	}
	else
	{
		if ((msX >= 189) && (msX <= 262) && (msY >= 325) && (msY <= 343))  m_cCurFocus = 7;  //12
		if ((msX >= 284) && (msX <= 357) && (msY >= 325) && (msY <= 343)) m_cCurFocus = 8;  //13
		if ((msX >= 380) && (msX <= 453) && (msY >= 325) && (msY <= 343)) m_cCurFocus = 9; //14
	}

	DrawCords(msX, msY);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}*/


void CGame::UpdateScreen_OnCreateNewAccount()
{
	short msX, msY, msZ;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;
	static class CMouseInterface* pMI;
	static char cName[12], cPassword[12], cConfirm[12], cPrevFocus, cSSN_A[8], cSSN_B[8], cQuiz[44], cAnswer[20], cTempQuiz[44];
	DWORD dwTime = timeGetTime();
	int iFlag = 0;

	m_DDraw.ClearBackB4();

	int addx = 0;
	int addy = 0;
	int addx2 = 0;
	int addy2 = 0;
	int addx3 = 0;
	int addy3 = 0;
	if (c_reso->IsResolution() == C800x600)
	{
		addx2 = 44;
		addy2 = 29;
		addx = 76;
		addy = 43;
		addx3 = 10;
		addy3 = 40;
	}
	/*
		else if (c_reso->IsResolution() == C1024x768)
		{

		}*/

	ZeroMemory(m_cLogServerAddr, sizeof(m_cLogServerAddr));

	strcpy(m_cLogServerAddrBuffer, DEF_SERVER_IP);
	m_iLogServerPort = EncriptInt(DEF_SERVER_PORT);

	/*DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 0, 0, 0, TRUE);*/
	if (c_reso->IsResolution() == C640x480)
		m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, dwTime);
	else if (c_reso->IsResolution() == C800x600)
		m_pSprite[SPRID_BACKGROUND + 1]->PutSpriteFast(0, 0, 0, dwTime);
	else if (c_reso->IsResolution() == C1024x768)
		m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, dwTime);


	//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 168 + addx2, 116 + addy2, 1, TRUE);

	if (c_reso->IsResolution() == C800x600)
	{
		m_DDraw.DrawShadowBox(211, 145, 591, 444);
		PutCenterString_SpriteFont(211, 591, 155, "Create Account", 255, 200, 0);
		PutCenterString_SpriteFont(232, 370, 208, "Account", 255, 255, 255);
		PutCenterString_SpriteFont(232, 370, 239, "Password", 255, 255, 255);
		PutCenterString_SpriteFont(232, 370, 268, "RePassword", 255, 255, 255);
		PutCenterString_SpriteFont(232, 370, 298, "Mail", 255, 255, 255);
		PutCenterString_SpriteFont(232, 370, 330, "Quiz", 255, 255, 255);
		PutCenterString_SpriteFont(232, 370, 360, "Answer", 255, 255, 255);

		m_DDraw.DrawShadowBox(394, 202, 580, 228); // Account
		m_DDraw.DrawShadowBox(394, 232, 580, 258); // Pasword
		m_DDraw.DrawShadowBox(394, 263, 580, 288); // Confirm Pass

		m_DDraw.DrawShadowBox(394, 292 + 1, 580, 319 + 1); // Mail 173,234,467,225
		m_DDraw.DrawShadowBox(394, 323 + 2, 580, 348 + 2); // Quiz
		m_DDraw.DrawShadowBox(394, 354 + 1, 580, 378 + 1); // Answer
		
		m_DDraw.DrawShadowBox(394, 202, 580, 228); // Account
		m_DDraw.DrawShadowBox(394, 232, 580, 258); // Pasword
		m_DDraw.DrawShadowBox(394, 263, 580, 288); // Confirm Pass

		m_DDraw.DrawShadowBox(394, 292 + 1, 580, 319 + 1); // Mail 173,234,467,225
		m_DDraw.DrawShadowBox(394, 323 + 2, 580, 348 + 2); // Quiz
		m_DDraw.DrawShadowBox(394, 354 + 1, 580, 378 + 1); // Answer
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		m_DDraw.DrawShadowBox(166, 116, 473, 353);

		PutCenterString_SpriteFont(166, 473, 125, "Create Account", 255, 200, 0);
		PutCenterString_SpriteFont(205, 285, 166, "Account", 255, 255, 255);
		PutCenterString_SpriteFont(205, 285, 190, "Password", 255, 255, 255);
		PutCenterString_SpriteFont(205, 285, 214, "RePassword", 255, 255, 255);
		PutCenterString_SpriteFont(205, 285, 238, "Mail", 255, 255, 255);
		PutCenterString_SpriteFont(205, 285, 262, "Quiz", 255, 255, 255);
		PutCenterString_SpriteFont(205, 285, 286, "Answer", 255, 255, 255);

		m_DDraw.DrawShadowBox(316, 162, 467, 183); // Account
		m_DDraw.DrawShadowBox(316, 186, 467, 207); // Pasword
		m_DDraw.DrawShadowBox(316, 210, 467, 231); // Confirm Pass
		m_DDraw.DrawShadowBox(316, 234, 467, 255); // Mail 173,234,467,225
		m_DDraw.DrawShadowBox(316, 258, 467, 279); // Quiz
		m_DDraw.DrawShadowBox(316, 282, 467, 303); // Answer

		m_DDraw.DrawShadowBox(316, 162, 467, 183); // Account
		m_DDraw.DrawShadowBox(316, 186, 467, 207); // Pasword
		m_DDraw.DrawShadowBox(316, 210, 467, 231); // Confirm Pass
		m_DDraw.DrawShadowBox(316, 234, 467, 255); // Mail 173,234,467,225
		m_DDraw.DrawShadowBox(316, 258, 467, 279); // Quiz
		m_DDraw.DrawShadowBox(316, 282, 467, 303); // Answer
	}

	if (m_cGameModeCount == 0)
	{
		pMI = new class CMouseInterface;


		if (c_reso->IsResolution() == C800x600)
		{
			pMI->AddRect(394, 202, 580, 228); // Account
			pMI->AddRect(394, 232, 580, 258); // Pasword
			pMI->AddRect(394, 263, 580, 288); // Confirm Pass

			pMI->AddRect(394, 292 + 1, 580, 319 + 1); // Mail 173,234,467,225
			pMI->AddRect(394, 323 + 2, 580, 348 + 2); // Quiz
			pMI->AddRect(394, 354 + 1, 580, 378 + 1); // Answer

			pMI->AddRect(275, 408, 407, 423); // Create
			pMI->AddRect(370, 408, 442, 423); // Clear
			pMI->AddRect(466, 408, 539, 423); // Cancel
		}
		else
		{
			pMI->AddRect(173, 162, 467, 183); // Account
			pMI->AddRect(173, 186, 467, 207); // Pasword
			pMI->AddRect(173, 210, 467, 231); // Confirm Pass
			pMI->AddRect(173, 234, 467, 255); // Mail 173,234,467,225
			pMI->AddRect(173, 258, 467, 279); // Quiz
			pMI->AddRect(173, 282, 467, 303); // Answer

			pMI->AddRect(189, 325, 262, 343); // Create
			pMI->AddRect(284, 325, 357, 343); // Clear
			pMI->AddRect(380, 325, 453, 343); // Cancel
		}

		cPrevFocus = 1;
		m_cCurFocus = 1;
		m_cMaxFocus = 9; //12
		m_bEnterPressed = FALSE;
		m_cArrowPressed = 0;
		ZeroMemory(m_cEmailAddr, sizeof(m_cEmailAddr));
		ZeroMemory(cName, sizeof(cName));
		ZeroMemory(cPassword, sizeof(cPassword));
		ZeroMemory(cConfirm, sizeof(cConfirm));
		ZeroMemory(cSSN_A, sizeof(cSSN_A));
		ZeroMemory(cSSN_B, sizeof(cSSN_B));
		ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
		ZeroMemory(cQuiz, sizeof(cQuiz));
		ZeroMemory(cTempQuiz, sizeof(cTempQuiz));
		ZeroMemory(cAnswer, sizeof(cAnswer));
		StartInputString(321 + addx, 168 + addy - 2, 11, cName);
		ClearInputString();
	}

	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;
	if (m_cArrowPressed != 0)
	{
		switch (m_cArrowPressed) {
		case 1:
			m_cCurFocus--;
			if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
			break;
		case 3:
			m_cCurFocus++;
			if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
			break;
		}
		m_cArrowPressed = 0;
	}

	if (m_bEscPressed == TRUE)
	{
		ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	if (cPrevFocus != m_cCurFocus)
	{
		EndInputString();
		if (c_reso->IsResolution() == C800x600)
		{
			switch (m_cCurFocus) {
			case 1:
				StartInputString(321 + addx, 168 + addy - 2, 11, cName);
				break;
			case 2:
				StartInputString(321 + addx, 192 + addy + 5, 11, cPassword);
				break;
			case 3:
				StartInputString(321 + addx, 216 + addy + 10, 11, cConfirm);
				break;
			case 4:
				StartInputString(321 + addx, 240 + addy + 15, 31, m_cEmailAddr);
				break;
			case 5:
				StartInputString(321 + addx, 264 + addy + 20, 44, cQuiz);
				break;
			case 6:
				StartInputString(321 + addx, 288 + addy + 25 + 1, 19, cAnswer);
				break;
			}
		}
		else
		{
			switch (m_cCurFocus) {
			case 1:
				StartInputString(321 + addx, 168 + addy, 11, cName);
				break;
			case 2:
				StartInputString(321 + addx, 192 + addy, 11, cPassword);
				break;
			case 3:
				StartInputString(321 + addx, 216 + addy, 11, cConfirm);
				break;
			case 4:
				StartInputString(321 + addx, 240 + addy, 31, m_cEmailAddr);
				break;
			case 5:
				StartInputString(321 + addx, 264 + addy, 44, cQuiz);
				break;
			case 6:
				StartInputString(321 + addx, 288 + addy, 19, cAnswer);
				break;
			}
		}

		cPrevFocus = m_cCurFocus;
	}

	if ((m_cCurFocus == 2) || (m_cCurFocus == 3))
		ShowReceivedString(TRUE);
	else if ((m_cCurFocus == 1) || (m_cCurFocus == 4) || (m_cCurFocus == 5) || (m_cCurFocus == 6))
		ShowReceivedString();

	if (m_cCurFocus != 1) {
		if (m_Misc.bCheckValidName(cName) != FALSE)
			PutString2(321 + addx, 168 + addy - 2, cName, 100, 200, 100);
		else PutString2(321 + addx, 168 + addy, cName, 200, 100, 100);
	}

	if (c_reso->IsResolution() == C800x600)
	{
		if (m_cCurFocus != 2) {
			if (m_Misc.bCheckValidName(cPassword) != FALSE)
				PutString(321 + addx, 192 + addy + 5, cPassword, RGB(100, 200, 100), TRUE, 1);
			else PutString(321 + addx, 192 + addy + 5, cPassword, RGB(200, 100, 100), TRUE, 1);
		}
	}
	else
	{
		if (m_cCurFocus != 2) {
			if (m_Misc.bCheckValidName(cPassword) != FALSE)
				PutString(321 + addx, 192 + addy, cPassword, RGB(100, 200, 100), TRUE, 1);
			else PutString(321 + addx, 192 + addy, cPassword, RGB(200, 100, 100), TRUE, 1);
		}
	}

	if (c_reso->IsResolution() == C800x600)
	{
		if (m_cCurFocus != 3) {
			if (memcmp(cPassword, cConfirm, 10) == 0)
				PutString(321 + addx, 216 + addy + 10, cConfirm, RGB(100, 200, 100), TRUE, 1);
			else PutString(321 + addx, 216 + addy + 10, cConfirm, RGB(200, 100, 100), TRUE, 1);
		}
	}
	else
	{
		if (m_cCurFocus != 3) {
			if (memcmp(cPassword, cConfirm, 10) == 0)
				PutString(321 + addx, 216 + addy, cConfirm, RGB(100, 200, 100), TRUE, 1);
			else PutString(321 + addx, 216 + addy, cConfirm, RGB(200, 100, 100), TRUE, 1);
		}
	}
	if (memcmp(cPassword, cConfirm, 10) != 0) iFlag = 9;
	if (c_reso->IsResolution() == C800x600)
	{
		if (m_cCurFocus != 4) {
			if (m_Misc.bIsValidEmail(m_cEmailAddr))
				PutString2(321 + addx, 240 + addy + 15, m_cEmailAddr, 100, 200, 100);
			else PutString2(321 + addx, 240 + addy + 15, m_cEmailAddr, 200, 100, 100);
		}
	}
	else
	{
		if (m_cCurFocus != 4) {
			if (m_Misc.bIsValidEmail(m_cEmailAddr))
				PutString2(321 + addx, 240 + addy, m_cEmailAddr, 100, 200, 100);
			else PutString2(321 + addx, 240 + addy, m_cEmailAddr, 200, 100, 100);
		}
	}

	wsprintf(cTempQuiz, "%s", cQuiz);
	m_Misc.ReplaceString(cTempQuiz, ' ', '_');
	if (c_reso->IsResolution() == C800x600)
	{

		if (m_cCurFocus != 5) {
			PutString2(321 + addx, 264 + addy + 20, cQuiz, 100, 200, 100);
		}
	}
	else
	{
		if (m_cCurFocus != 5) {
			PutString2(321 + addx, 264 + addy, cQuiz, 100, 200, 100);
		}
	}
	if (c_reso->IsResolution() == C800x600)
	{

		if (m_cCurFocus != 6) {
			PutString2(321 + addx, 288 + addy + 26, cAnswer, 100, 200, 100);
		}
	}
	else
	{
		if (m_cCurFocus != 6) {
			PutString2(321 + addx, 288 + addy, cAnswer, 100, 200, 100);
		}
	}
	if (strlen(cAnswer) == 0)							iFlag = 11;
	if (strlen(cTempQuiz) == 0)							iFlag = 10;
	if (m_Misc.bCheckValidName(cPassword) == FALSE)		iFlag = 7;
	if (m_Misc.bCheckValidName(cName) == FALSE)			iFlag = 6;
	if (m_Misc.bIsValidEmail(m_cEmailAddr) == FALSE)	iFlag = 5;
	if (strlen(cConfirm) == 0)							iFlag = 3;
	if (strlen(cPassword) == 0)							iFlag = 2;
	if ((strlen(cName) == 0))							iFlag = 1;

	if ((iFlag == 0) && (m_cCurFocus == 7))
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(189 + addx + addx3, 325 + addy + addy3, 25, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(189 + addx + addx3, 325 + addy + addy3, 24, dwTime);

	if (m_cCurFocus == 8)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(284 + addx + addx3, 325 + addy + addy3, 27, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(284 + addx + addx3, 325 + addy + addy3, 26, dwTime);

	if (m_cCurFocus == 9)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(380 + addx + addx3, 325 + addy + addy3, 17, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(380 + addx + addx3, 325 + addy + addy3, 16, dwTime);

	//DrawVersion(TRUE);
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	if (m_bEnterPressed == TRUE)
	{
		PlaySound('E', 14, 5);
		switch (m_cCurFocus) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
			m_cCurFocus++;
			if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
			break;

		case 7:
			if (iFlag != 0) return;
			ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
			ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));


			ZeroMemory(m_cAccountQuiz, sizeof(m_cAccountQuiz));
			ZeroMemory(m_cAccountAnswer, sizeof(m_cAccountAnswer));

			strcpy(m_cAccountName, cName);
			strcpy(m_cAccountPassword, cPassword);

			strcpy(m_cAccountQuiz, cTempQuiz);
			strcpy(m_cAccountAnswer, cAnswer);
			m_cAccountQuiz[45] = ' ';
			m_cAccountAnswer[20] = ' ';

			ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
			wsprintf(m_cAccountSSN, "%s-%s", cSSN_A, cSSN_B);

			if (memcmp(cPassword, cConfirm, 10) != 0)
			{
				ChangeGameMode(DEF_GAMEMODE_ONMSG);
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, UPDATE_SCREEN_ON_CREATE_NEW_ACCOUNT82);
				//"Cannot create account! - password not match!"
				delete pMI;
				return;
			}
			m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
			GetIPByDNS();

			DecriptString(m_cLogServerAddr);
			m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort), WM_USER_LOGSOCKETEVENT);
			EncriptString(m_cLogServerAddr);

			m_pLSock->bInitBufferSize(30000);

			ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
			m_dwConnectMode = NUCLEO_REQUEST_CREATEACC;
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "00");
			delete pMI;
			return;

		case 8:
			ZeroMemory(cName, sizeof(cName));
			ZeroMemory(cPassword, sizeof(cPassword));
			ZeroMemory(cConfirm, sizeof(cConfirm));
			ZeroMemory(m_cAccountAge, sizeof(m_cAccountAge));
			ZeroMemory(m_cAccountCountry, sizeof(m_cAccountCountry));
			ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
			ZeroMemory(m_cEmailAddr, sizeof(m_cEmailAddr));
			ZeroMemory(cSSN_A, sizeof(cSSN_A));
			ZeroMemory(cSSN_B, sizeof(cSSN_B));
			ZeroMemory(cQuiz, sizeof(cQuiz));
			ZeroMemory(cTempQuiz, sizeof(cTempQuiz));
			ZeroMemory(cAnswer, sizeof(cAnswer));

			break;

		case 9:
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			delete pMI;
			return;
		}
		m_bEnterPressed = FALSE;
	}

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK) {
		PlaySound('E', 14, 5);

		switch (iMIbuttonNum) {
		default:
			m_cCurFocus = iMIbuttonNum;
			break;
		case 7:

			if (iFlag != 0) return;
			ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
			ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));


			ZeroMemory(m_cAccountQuiz, sizeof(m_cAccountQuiz));
			ZeroMemory(m_cAccountAnswer, sizeof(m_cAccountAnswer));

			strcpy(m_cAccountName, cName);
			strcpy(m_cAccountPassword, cPassword);

			strcpy(m_cAccountQuiz, cTempQuiz);
			strcpy(m_cAccountAnswer, cAnswer);
			m_cAccountQuiz[45] = ' ';
			m_cAccountAnswer[20] = ' ';

			ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
			wsprintf(m_cAccountSSN, "%s-%s", cSSN_A, cSSN_B);

			if (memcmp(cPassword, cConfirm, 10) != 0)
			{
				ChangeGameMode(DEF_GAMEMODE_ONMSG);
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, UPDATE_SCREEN_ON_CREATE_NEW_ACCOUNT82);
				//"Cannot create account! - password not match!"
				delete pMI;
				return;
			}
			m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
			GetIPByDNS();

			DecriptString(m_cLogServerAddr);
			m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort), WM_USER_LOGSOCKETEVENT);
			EncriptString(m_cLogServerAddr);

			m_pLSock->bInitBufferSize(30000);

			ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
			m_dwConnectMode = NUCLEO_REQUEST_CREATEACC;
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "00");
			delete pMI;
			return;

		case 8:
			ZeroMemory(cName, sizeof(cName));
			ZeroMemory(cPassword, sizeof(cPassword));
			ZeroMemory(cConfirm, sizeof(cConfirm));
			ZeroMemory(m_cAccountAge, sizeof(m_cAccountAge));
			ZeroMemory(m_cAccountCountry, sizeof(m_cAccountCountry));
			ZeroMemory(m_cAccountSSN, sizeof(m_cAccountSSN));
			ZeroMemory(m_cEmailAddr, sizeof(m_cEmailAddr));
			ZeroMemory(cSSN_A, sizeof(cSSN_A));
			ZeroMemory(cSSN_B, sizeof(cSSN_B));
			ZeroMemory(cQuiz, sizeof(cQuiz));
			ZeroMemory(cTempQuiz, sizeof(cTempQuiz));
			ZeroMemory(cAnswer, sizeof(cAnswer));
			break;

		case 9:
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			delete pMI;
			return;
		}
	}
	if (c_reso->IsResolution() == C800x600)
	{
		if ((msX >= 275) && (msX <= 407) && (msY >= 408) && (msY <= 423))  m_cCurFocus = 7;  //12
		if ((msX >= 370) && (msX <= 442) && (msY >= 408) && (msY <= 423)) m_cCurFocus = 8;  //13
		if ((msX >= 466) && (msX <= 538) && (msY >= 408) && (msY <= 423)) m_cCurFocus = 9; //14
	}
	else
	{
		if ((msX >= 189) && (msX <= 262) && (msY >= 325) && (msY <= 343))  m_cCurFocus = 7;  //12
		if ((msX >= 284) && (msX <= 357) && (msY >= 325) && (msY <= 343)) m_cCurFocus = 8;  //13
		if ((msX >= 380) && (msX <= 453) && (msY >= 325) && (msY <= 343)) m_cCurFocus = 9; //14
	}

	DrawCords(msX, msY);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}
//LoginDialog
void CGame::UpdateScreen_OnLogin()
{
	short msX, msY, msZ, sX, sY;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;
	static class CMouseInterface * pMI;
	static char  cPassword[12], cPrevFocus;
	static char cName[12];
	if (c_reso->IsResolution() == C1024x768) //cambiar Lalo v13
	{
		sX = 178;
		sY = 266;
		if (m_cGameModeCount == 0)
		{
			EndInputString();
			pMI = new class CMouseInterface;
			pMI->AddRect(460, 295, 695, 321);
			pMI->AddRect(460, 336, 695, 360);
			pMI->AddRect(254,480, 410, 516);
			pMI->AddRect(625, 482, 755, 512);

			cPrevFocus = 1;
			m_cCurFocus = 1;
			m_cMaxFocus = 4;
			m_bEnterPressed = FALSE;
			m_cArrowPressed = 0;
			ZeroMemory(cName, sizeof(cName));
			ZeroMemory(cPassword, sizeof(cPassword));
			StartInputString(470, 310, 11, cName);
			ClearInputString();

		}

		m_cGameModeCount++;
		if (m_cGameModeCount > 100) m_cGameModeCount = 100;

		if (m_cArrowPressed != 0)
		{
			switch (m_cArrowPressed) {
			case 1:
				m_cCurFocus--;
				if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
				break;

			case 2:
				if (m_cCurFocus == 3) m_cCurFocus = 4;
				else if (m_cCurFocus == 4) m_cCurFocus = 3;
				break;

			case 3:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;

			case 4:
				if (m_cCurFocus == 3) m_cCurFocus = 4;
				else if (m_cCurFocus == 4) m_cCurFocus = 3;
				break;
			}
			m_cArrowPressed = 0;
		}

		if (m_bEnterPressed == TRUE)
		{
			m_bEnterPressed = FALSE;
			PlaySound('E', 14, 5);

			switch (m_cCurFocus) {
			case 1:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;
			case 2:
			case 3:
				if ((strlen(cName) == 0) || (strlen(cPassword) == 0)) break;
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));

				strcpy(m_cAccountName, cName);
				EncriptString(m_cAccountName);

				strcpy(m_cAccountPassword, cPassword);
				EncriptString(m_cAccountPassword);

				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);

				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_LOGIN;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "11");
				delete pMI;
				return;
			case 4:	// Cancel
#ifdef DEF_SELECTSERVER
				ChangeGameMode(DEF_GAMEMODE_ONSELECTSERVER);
#else
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
#endif
				delete pMI;
				return;
			}
		}

		if (m_bEscPressed == TRUE)
		{
			EndInputString();
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			delete pMI;
			m_bEscPressed = FALSE;
			return;
		}

		if (cPrevFocus != m_cCurFocus)
		{
			EndInputString();
			switch (m_cCurFocus) {
			case 1:
				StartInputString(470, 310, 11, cName);
				break;
			case 2:
				StartInputString(470, 350, 11, cPassword, TRUE);
				break;
			case 3:
			case 4:
				break;
			}
			cPrevFocus = m_cCurFocus;
		}


		m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
		iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
		if (cMIresult == DEF_MIRESULT_CLICK)
		{
			PlaySound('E', 14, 5);
			switch (iMIbuttonNum) {
			case 1:
				m_cCurFocus = 1;
				break;

			case 2:
				m_cCurFocus = 2;
				break;

			case 3:
				if ((strlen(cName) == 0) || (strlen(cPassword) == 0)) break;
				EndInputString();
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));

				strcpy(m_cAccountName, cName);
				EncriptString(m_cAccountName);

				strcpy(m_cAccountPassword, cPassword);
				EncriptString(m_cAccountPassword);

				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_LOGIN;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "11");
				delete pMI;
				return;

			case 4:
#ifdef DEF_SELECTSERVER
				ChangeGameMode(DEF_GAMEMODE_ONSELECTSERVER); // ONMAINMENU
#else
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
#endif
				delete pMI;
				return;
			}
		}

		if ((msX >= 254) && (msX <= 410) && (msY >= 480) && (msY <= 516)) m_cCurFocus = 3;
		if ((msX >= 625) && (msX <= 755) && (msY >= 482) && (msY <= 512)) m_cCurFocus = 4;

		_Draw_OnLogin(cName, cPassword, msX, msY, m_cGameModeCount);
		DrawCords(msX, msY);
		if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
	}
	else if (c_reso->IsResolution() == C800x600)
	{
		sX = 178;
		sY = 266;
		if (m_cGameModeCount == 0)
		{
			EndInputString();
			pMI = new class CMouseInterface;
			pMI->AddRect(360, 230, 545, 258);
			pMI->AddRect(360, 260, 545, 281);
			pMI->AddRect(198, 373, 310, 403);
			pMI->AddRect(511, 377, 600, 402);

			cPrevFocus = 1;
			m_cCurFocus = 1;
			m_cMaxFocus = 4;
			m_bEnterPressed = FALSE;
			m_cArrowPressed = 0;
			ZeroMemory(cName, sizeof(cName));
			ZeroMemory(cPassword, sizeof(cPassword));
			StartInputString(365, 235, 11, cName);
			ClearInputString();

		}

		m_cGameModeCount++;
		if (m_cGameModeCount > 100) m_cGameModeCount = 100;

		if (m_cArrowPressed != 0)
		{
			switch (m_cArrowPressed) {
			case 1:
				m_cCurFocus--;
				if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
				break;

			case 2:
				if (m_cCurFocus == 3) m_cCurFocus = 4;
				else if (m_cCurFocus == 4) m_cCurFocus = 3;
				break;

			case 3:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;

			case 4:
				if (m_cCurFocus == 3) m_cCurFocus = 4;
				else if (m_cCurFocus == 4) m_cCurFocus = 3;
				break;
			}
			m_cArrowPressed = 0;
		}

		if (m_bEnterPressed == TRUE)
		{
			m_bEnterPressed = FALSE;
			PlaySound('E', 14, 5);

			switch (m_cCurFocus) {
			case 1:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;
			case 2:
			case 3:
				if ((strlen(cName) == 0) || (strlen(cPassword) == 0)) break;
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));

				strcpy(m_cAccountName, cName);
				EncriptString(m_cAccountName);

				strcpy(m_cAccountPassword, cPassword);
				EncriptString(m_cAccountPassword);

				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);

				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_LOGIN;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "11");
				delete pMI;
				return;
			case 4:	// Cancel
#ifdef DEF_SELECTSERVER
				ChangeGameMode(DEF_GAMEMODE_ONSELECTSERVER);
#else
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
#endif
				delete pMI;
				return;
			}
		}

		if (m_bEscPressed == TRUE)
		{
			EndInputString();
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			delete pMI;
			m_bEscPressed = FALSE;
			return;
		}

		if (cPrevFocus != m_cCurFocus)
		{
			EndInputString();
			switch (m_cCurFocus) {
			case 1:
				StartInputString(365, 235, 11, cName);
				break;
			case 2:
				StartInputString(365, 265, 11, cPassword, TRUE);
				break;
			case 3:
			case 4:
				break;
			}
			cPrevFocus = m_cCurFocus;
		}


		m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
		iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
		if (cMIresult == DEF_MIRESULT_CLICK)
		{
			PlaySound('E', 14, 5);
			switch (iMIbuttonNum) {
			case 1:
				m_cCurFocus = 1;
				break;

			case 2:
				m_cCurFocus = 2;
				break;

			case 3:
				if ((strlen(cName) == 0) || (strlen(cPassword) == 0)) break;
				EndInputString();
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));

				strcpy(m_cAccountName, cName);
				EncriptString(m_cAccountName);

				strcpy(m_cAccountPassword, cPassword);
				EncriptString(m_cAccountPassword);

				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_LOGIN;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "11");
				delete pMI;
				return;

			case 4:
#ifdef DEF_SELECTSERVER
				ChangeGameMode(DEF_GAMEMODE_ONSELECTSERVER); // ONMAINMENU
#else
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
#endif
				delete pMI;
				return;
			}
		}

		if ((msX >= 197) && (msX <= 311) && (msY >= 373) && (msY <= 404)) m_cCurFocus = 3;
		if ((msX >= 510) && (msX <= 600) && (msY >= 375) && (msY <= 404)) m_cCurFocus = 4;

		_Draw_OnLogin(cName, cPassword, msX, msY, m_cGameModeCount);
		DrawCords(msX, msY);
		if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		sX = 146;
		sY = 114;
		if (m_cGameModeCount == 0)
		{
			EndInputString();
			pMI = new class CMouseInterface;
			pMI->AddRect(287, 183, 437, 204);
			pMI->AddRect(287, 208, 437, 227);
			pMI->AddRect(156, 299, 255, 326);
			pMI->AddRect(405, 304, 483, 326);

			cPrevFocus = 1;
			m_cCurFocus = 1;
			m_cMaxFocus = 4;
			m_bEnterPressed = FALSE;
			m_cArrowPressed = 0;
			ZeroMemory(cName, sizeof(cName));
			ZeroMemory(cPassword, sizeof(cPassword));
			StartInputString(292, 188, 11, cName);
			ClearInputString();

		}

		m_cGameModeCount++;
		if (m_cGameModeCount > 100) m_cGameModeCount = 100;

		if (m_cArrowPressed != 0)
		{
			switch (m_cArrowPressed) {
			case 1:
				m_cCurFocus--;
				if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
				break;

			case 2:
				if (m_cCurFocus == 3) m_cCurFocus = 4;
				else if (m_cCurFocus == 4) m_cCurFocus = 3;
				break;

			case 3:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;

			case 4:
				if (m_cCurFocus == 3) m_cCurFocus = 4;
				else if (m_cCurFocus == 4) m_cCurFocus = 3;
				break;
			}
			m_cArrowPressed = 0;
		}

		if (m_bEnterPressed == TRUE)
		{
			m_bEnterPressed = FALSE;
			PlaySound('E', 14, 5);

			switch (m_cCurFocus) {
			case 1:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;
			case 2:
			case 3:
				if ((strlen(cName) == 0) || (strlen(cPassword) == 0)) break;
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));

				strcpy(m_cAccountName, cName);
				EncriptString(m_cAccountName);

				strcpy(m_cAccountPassword, cPassword);
				EncriptString(m_cAccountPassword);

				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);

				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_LOGIN;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "11");
				delete pMI;
				return;
			case 4:	// Cancel
#ifdef DEF_SELECTSERVER
				ChangeGameMode(DEF_GAMEMODE_ONSELECTSERVER);
#else
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
#endif
				delete pMI;
				return;
			}
		}

		if (m_bEscPressed == TRUE)
		{
			EndInputString();
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			delete pMI;
			m_bEscPressed = FALSE;
			return;
		}

		if (cPrevFocus != m_cCurFocus)
		{
			EndInputString();
			switch (m_cCurFocus) {
			case 1:
				StartInputString(292, 188, 11, cName);
				break;
			case 2:
				StartInputString(292, 213, 11, cPassword, TRUE);
				break;
			case 3:
			case 4:
				break;
			}
			cPrevFocus = m_cCurFocus;
		}


		m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
		iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
		if (cMIresult == DEF_MIRESULT_CLICK)
		{
			PlaySound('E', 14, 5);
			switch (iMIbuttonNum) {
			case 1:
				m_cCurFocus = 1;
				break;

			case 2:
				m_cCurFocus = 2;
				break;

			case 3:
				if ((strlen(cName) == 0) || (strlen(cPassword) == 0)) break;
				EndInputString();
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));

				strcpy(m_cAccountName, cName);
				EncriptString(m_cAccountName);

				strcpy(m_cAccountPassword, cPassword);
				EncriptString(m_cAccountPassword);

				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort) + (rand() % 1), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_LOGIN;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "11");
				delete pMI;
				return;

			case 4:
#ifdef DEF_SELECTSERVER
				ChangeGameMode(DEF_GAMEMODE_ONSELECTSERVER); // ONMAINMENU
#else
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
#endif
				delete pMI;
				return;
			}
		}

		if ((msX >= 156) && (msX <= 255) && (msY >= 299) && (msY <= 326)) m_cCurFocus = 3;
		if ((msX >= 405) && (msX <= 483) && (msY >= 304) && (msY <= 326)) m_cCurFocus = 4;

		_Draw_OnLogin(cName, cPassword, msX, msY, m_cGameModeCount);
		DrawCords(msX, msY);
		if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
	}
}

void CGame::UpdateScreen_OnSelectServer()
{
	short msX, msY, msZ, sX, sY;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;
	static class CMouseInterface * pMI;
	static char  cPrevFocus;
	DWORD dwTime = timeGetTime();
	BOOL bFlag = TRUE;

	if (bReadLoginConfigFile("ClientIP.cfg") == TRUE)
	{
		ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));
		strcpy(m_cWorldServerName, NAME_WORLDNAME1);
		EncriptString(m_cWorldServerName);
		ChangeGameMode(DEF_GAMEMODE_ONLOGIN);
		delete pMI;
		return;
	}

	sX = 146;
	sY = 114;
	if (m_cGameModeCount == 0) {
		EndInputString();

		pMI = new class CMouseInterface;
		pMI->AddRect(199, 205, 436, 233);
		//		pMI->AddRect(209,243,428,271);
		pMI->AddRect(201, 243, 436, 273);
		//		pMI->AddRect(203,282,435,310);
		pMI->AddRect(386, 322, 479, 354);

		cPrevFocus = 1;
		m_cCurFocus = 1;
		m_cMaxFocus = 3;

		m_bEnterPressed = FALSE;
		m_cArrowPressed = 0;
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_cArrowPressed != 0)
	{
		switch (m_cArrowPressed) {
			case 1:
				m_cCurFocus--;
				if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
				break;

			case 3:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;
		}
		m_cArrowPressed = 0;
	}

	if (m_bEnterPressed == TRUE)
	{
		m_bEnterPressed = FALSE;
		PlaySound('E', 14, 5);
		switch (m_cCurFocus) {
			case 1:
				strcpy(m_cLogServerAddrBuffer, "rivergrande.ddns.net");
				m_iLogServerPort = EncriptInt(6914);
				ConfigIP = 0;
				ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));
				strcpy(m_cWorldServerName, NAME_WORLDNAME1);
				EncriptString(m_cWorldServerName);
				ChangeGameMode(DEF_GAMEMODE_ONLOGIN);
				delete pMI;
				return;

				/*		case 2:
							strcpy(m_cLogServerAddrBuffer, "190.210.177.85");
							m_iLogServerPort = 4444;
							ConfigIP = 1;
							ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));
							strcpy(m_cWorldServerName, NAME_WORLDNAME1);
							ChangeGameMode(DEF_GAMEMODE_ONLOGIN);
							delete pMI;
							return;*/

			case 2:
				strcpy(m_cLogServerAddrBuffer, "rivergrande.ddns.net");
				m_iLogServerPort = EncriptInt(6914);
				ConfigIP = 1;
				ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));
				strcpy(m_cWorldServerName, NAME_WORLDNAME1);
				EncriptString(m_cWorldServerName);
				ChangeGameMode(DEF_GAMEMODE_ONLOGIN);
				delete pMI;
				return;

			case 3:	// Cancel case 3
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				delete pMI;
				return;
		}
	}

	if (m_bEscPressed == TRUE)
	{
		ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}
	if (cPrevFocus != m_cCurFocus)
	{
		cPrevFocus = m_cCurFocus;
	}
	m_DDraw.ClearBackB4();
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 0, 0, 0, TRUE);
	if (m_cGameModeCount > 20) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_SELECTS, 156, 152, 0, TRUE);
	else if ((m_cGameModeCount >= 15) && (m_cGameModeCount <= 20)) m_pSprite[DEF_SPRID_INTERFACE_ND_SELECTS]->PutTransSprite25(40, 121, 1, TRUE);

	if (m_cGameModeCount > 20)
	{
		if (m_cCurFocus == 1) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_SELECTS, 199, 205, 1, TRUE);
		//	if (m_cCurFocus == 2) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_SELECTS, 209, 243, 2, TRUE);
		if (m_cCurFocus == 2) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_SELECTS, 203, 245, 2, TRUE);
		//	if (m_cCurFocus == 3) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_SELECTS, 203, 282, 3, TRUE);
		if (m_cCurFocus == 3) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_SELECTS, 386, 322, 3, TRUE);

	}
	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK) {
		PlaySound('E', 14, 5);

		switch (iMIbuttonNum) {
			case 1:
				if (m_cCurFocus == 1) {
					strcpy(m_cLogServerAddrBuffer, "rivergrande.ddns.net");
					m_iLogServerPort = EncriptInt(6914);
					ConfigIP = 0;
					ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));
					strcpy(m_cWorldServerName, NAME_WORLDNAME1);
					EncriptString(m_cWorldServerName);
					ChangeGameMode(DEF_GAMEMODE_ONLOGIN);
					delete pMI;
					return;
				}
				else m_cCurFocus = 1;
				break;

				/*		case 2:
							if (m_cCurFocus == 2) {
								strcpy(m_cLogServerAddrBuffer, "190.210.177.85");
								m_iLogServerPort = 4444;
								ConfigIP = 1;
								ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));
								strcpy(m_cWorldServerName, NAME_WORLDNAME1);
								ChangeGameMode(DEF_GAMEMODE_ONLOGIN);
								delete pMI;
								return;
							}
							else m_cCurFocus = 2;
							break;^*/

			case 2:
				if (m_cCurFocus == 2) {
					strcpy(m_cLogServerAddrBuffer, "rivergrande.ddns.net");
					m_iLogServerPort = EncriptInt(6914);
					ConfigIP = 1;
					ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));
					strcpy(m_cWorldServerName, NAME_WORLDNAME1);
					EncriptString(m_cWorldServerName);
					ChangeGameMode(DEF_GAMEMODE_ONLOGIN);
					delete pMI;
					return;
				}
				else m_cCurFocus = 2;
				break;

			case 3:
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				delete pMI;
				return;
		}
	}

	if ((msX >= 199) && (msX <= 436) && (msY >= 205) && (msY <= 233)) m_cCurFocus = 1;
	//	if ((msX >= 209) && (msX <= 428) && (msY >= 243) && (msY <= 271)) m_cCurFocus = 2;
	if ((msX >= 201) && (msX <= 436) && (msY >= 243) && (msY <= 273)) m_cCurFocus = 2;
	//	if ((msX >= 203) && (msX <= 435) && (msY >= 282) && (msY <= 310)) m_cCurFocus = 2;
	if ((msX >= 386) && (msX <= 479) && (msY >= 322) && (msY <= 354)) m_cCurFocus = 3;


	//	if (m_cGameModeCount < 6) m_DDraw.DrawShadowBox(0,0,639,479);
	//	if (m_cGameModeCount < 2) m_DDraw.DrawShadowBox(0,0,639,479);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::OnSysKeyDown(WPARAM wParam)
{
	switch (wParam)
	{
		case VK_SHIFT:
			m_bShiftPressed = TRUE;
			break;
		case VK_CONTROL:
			m_bCtrlPressed = TRUE;
			break;
		case VK_RETURN:
			m_bEnterPressed = TRUE;
			break;
	}
}

void CGame::OnSysKeyUp(WPARAM wParam)
{
	switch (wParam)
	{
		case VK_SHIFT:
			m_bShiftPressed = FALSE;
			break;
		case VK_CONTROL:
			m_bCtrlPressed = FALSE;
			break;
		case VK_RETURN:
			m_bEnterPressed = FALSE;
			if (m_bToggleScreen == TRUE)
			{
				m_bIsRedrawPDBGS = TRUE;
				m_DDraw.ChangeDisplayMode(G_hWnd);
			}
			break;
		case VK_ESCAPE:
			m_bEscPressed = FALSE;
			break;
	}
}

void CGame::OnKeyUp(WPARAM wParam)
{
	int i = 0;
	DWORD dwTime = timeGetTime();
	m_sTiming = 0;

	//added resolution lalo
	/*int res_x = 0;
	int res_y = 0;
	int res_c = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 799;
		res_y = 599;
		res_c = 120;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 639;
		res_y = 479;
	}*/

	switch (wParam) {
		case VK_SHIFT:
			m_bShiftPressed = FALSE;
			break;
		case VK_CONTROL:
			m_bCtrlPressed = FALSE;
			break;
		case 65://'A'
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bForceAttack)
				{
					m_bForceAttack = FALSE;
					AddEventList(DEF_MSG_FORCEATTACK_OFF, 10);
				}
				else
				{
					m_bForceAttack = TRUE;
					AddEventList(DEF_MSG_FORCEATTACK_ON, 10);
				}
			}
			break;

		/*case 74:		
		if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
		{
			AddEventList("asd");
			if (m_bIsDialogEnabled[48])
			{
				EnableDialogBox(48, NULL, NULL, NULL, NULL);
				ShowBarTotal += 2;
				if (ShowBarTotal < 3 && ShowBarTotal != 0) ShowBarTotal = 3;
				if (ShowBarTotal > 9) ShowBarTotal = 0;
				if (ShowBarTotal == 0) DisableDialogBox(48);
			}
			else
			{
				if (ShowBarTotal == 0) ShowBarTotal = 3;
				EnableDialogBox(48, NULL, NULL, NULL, NULL);
			}
		}
		break;*/
		
		case 66://'B'  SHOWBAR lalo //Barra Chica 44 Grade 30
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				switch (BigBar)
				{
					case 0:
						BigBar = 1;
						DisableDialogBox(30);
						EnableDialogBox(44, NULL, NULL, NULL);
						break;
					case 1:
						BigBar = 2;
						DisableDialogBox(44);
						break;
					case 2:
						BigBar = 0;
						EnableDialogBox(30, NULL, NULL, NULL);
						break;
				}
				CreateSettingsCFG();
				ReadSettingsCFG();
			}
			break;

		case 71://'G' 
			if (m_bCtrlPressed == TRUE && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bIsDialogEnabled[59] == FALSE)
					EnableDialogBox(59, NULL, NULL, NULL);
				else DisableDialogBox(59);
			}
			break;


		case 80://'P'  Panel lalo
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{				
				if (m_bIsDialogEnabled[52] == FALSE)
				{
					/*m_stDialogBoxInfo[52].sSizeX = 282;
					m_stDialogBoxInfo[52].sSizeY = 82;*/
					bSendCommand(CLIENT_REQUEST_FULLDATACHAR, NULL, NULL, NULL, NULL, NULL, NULL);
					EnableDialogBox(52, NULL, NULL, NULL);
					//if (m_pMapData->bIsTeleportLoc(DecriptInt(m_sPlayerX), DecriptInt(m_sPlayerY)) == FALSE)
					//{
					bSendCommand(CLIENT_REQUEST_TOPMEMORY, NULL, NULL, NULL, NULL, NULL, NULL); //lalopanel
					//}
				}
				else DisableDialogBox(52);
			}
		//	DisableDialogBox(52);
			break;

		case 68://'D'
			if (m_bCtrlPressed == TRUE && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				m_cDetailLevel++;
				if (m_cDetailLevel > 3) m_cDetailLevel = 0;
				switch (m_cDetailLevel) {
					case 0:
						AddEventList(NOTIFY_MSG_DETAIL_LEVEL_LOW, 10);
						break;
					case 1:
						AddEventList(NOTIFY_MSG_DETAIL_LEVEL_MEDIUM, 10);
						break;
					case 2:
						AddEventList(NOTIFY_MSG_DETAIL_LEVEL_HIGH, 10);
						break;
					case 3:
						AddEventList(NOTIFY_MSG_DETAIL_LEVEL_USER, 10);
						break;
				}
				CreateSettingsCFG();
				ReadSettingsCFG();
			}
			break;

		case 67:
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				SendChat("/getcrits");
			}
			break;

		case 69: // 'E'

			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bIsDialogEnabled[72] == FALSE)
				{
					EnableDialogBox(72, NULL, NULL, NULL);

				}
				else DisableDialogBox(72);
			}

			break;

		case 70: //'F'
			if (m_bCtrlPressed == TRUE && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
			//	DecriptString(m_cPlayerName);
				if (_tmp_sOwnerType < 7 && (strlen(_tmp_cName) > 0) && (DecriptInt(m_iIlusionOwnerH) == 0)
					&& ((m_bIsCrusadeMode == FALSE) || _iGetFOE(_tmp_iStatus, _tmp_sOwnerType) >= 0)
					&& strcmp(m_cPlayerName, _tmp_cName) != 0)
					AddFriend(_tmp_cName);
				else {
					if (!m_bIsDialogEnabled[43]) {
						LoadFriendList();
						LoadMuteList();
						ClearGuildList();
						EnableDialogBox(43, NULL, NULL, NULL);
					}
					else DisableDialogBox(43);
				}
			//	EncriptString(m_cPlayerName);
			}
			break;

		case 72://"H"  
		case 90: // 'Z' // Snoopy: mimics VK_F11 Togles transparency
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bDialogTrans)
				{
					m_bDialogTrans = FALSE;
					m_sGrid--;
					if (m_sGrid < 0)
						m_sGrid = 0;
				}
				else
				{
					m_bDialogTrans = TRUE;
					m_sGrid++;
					if (m_sGrid > 9)
						m_sGrid = 9;
				}
				CreateSettingsCFG();
				ReadSettingsCFG();
			}
			break;

		case 88: // 'X' // Snoopy: mimics VK_F12 Logout Window
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bIsDialogEnabled[19] == FALSE)
					EnableDialogBox(19, NULL, NULL, NULL);
				else DisableDialogBox(19);
			}
			break;
		case 89: //Y
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bIsCrusadeMode == FALSE)
				{
					if (m_bIsDialogEnabled[55] == FALSE)
						EnableDialogBox(55, NULL, NULL, NULL);
					else DisableDialogBox(55);
				}
				else
				{
					switch (DecriptInt(m_iCrusadeDuty)) {
						case 1: // Fighter
							if (m_bIsDialogEnabled[38] == FALSE)
								EnableDialogBox(38, NULL, NULL, NULL);
							else DisableDialogBox(38);
							break;

						case 2: // Constructor
							if (m_bIsDialogEnabled[37] == FALSE)
								EnableDialogBox(37, NULL, NULL, NULL);
							else DisableDialogBox(37);
							break;

						case 3: // Commander
							if (m_bIsDialogEnabled[36] == FALSE)
								EnableDialogBox(36, NULL, NULL, NULL);
							else DisableDialogBox(36);
							break;

						default: break;
					}
				}
			}
			break;

		case 87://'w' shortcut para getreps
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				bSendCommand(CLIENT_REQUEST_ONLINE_USERS, 0, 0, 0, 0, 0, NULL, 0);
			}
			break;

		case 76: // "L"
			if (m_bCtrlPressed && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{/*
				if (m_bIsDialogEnabled[47]) DisableDialogBox(47);
				else EnableDialogBox(47, NULL, NULL, NULL, NULL);*/
			}
			break;

		case 77://'M'
			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME) {
				if (m_bCtrlPressed) {
					DecriptString(m_cCurLocation);
					if ((memcmp(m_cCurLocation, "Counter", 7) != 0) && (memcmp(m_cCurLocation, "market", 6) != 0)) {
						char cLB, cRB;
						short sX, sY, msX, msY, msZ;
						sX = m_stDialogBoxInfo[10].sX;
						sY = m_stDialogBoxInfo[10].sY;
						m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
						if (m_bIsDialogEnabled[10] == TRUE && (msX >= sX + 20) && (msX <= sX + 360) && (msY >= sY + 39) && (msY <= sY + 143)) {
							CStrTok *pStrTok;
							char   * token, cBuff[64];
							char   seps[] = ":";
							int i = (143 - msY + sY) / 13;
							if (m_sChatBox[i + m_stDialogBoxInfo[10].sView].ID == 999) return;
							if (m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg[0] == ' ') i++;
							strcpy(cBuff, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg);
							pStrTok = new class CStrTok(cBuff, seps);
							token = pStrTok->pGet();

						//	DecriptString(m_cPlayerName);
							if (memcmp(m_cPlayerName, token, 10) == 0) {
								AddEventList(BCHECK_LOCAL_CHAT_COMMAND2, 10);
								if (pStrTok != NULL) delete pStrTok;
								return;
							}
						//	EncriptString(m_cPlayerName);

							for (i = 0; i <= m_iTotalMutes; i++) {
								if (memcmp(ListMute[i].m_cMuteName, token, 10) == 0) {
									AddEventList("User in the Mute list", 10);
									return;
								}
							}

							m_iTotalMutes++;
							if (m_iTotalMutes < DEF_MAXLISTNAMES) {
								strcpy(ListMute[m_iTotalMutes].m_cMuteName, token);
								wsprintf(G_cTxt, BCHECK_LOCAL_CHAT_COMMAND3, token);
								AddEventList(G_cTxt, 10);
								SaveMuteList();
							}
							else {
								AddEventList("Mute List is Full");
								m_iTotalMutes--;
							}
							delete pStrTok;
						}
						else {
							if (m_bIsDialogEnabled[9] == TRUE) DisableDialogBox(9);
							else EnableDialogBox(9, 0, 0, 0, NULL);
							CreateSettingsCFG();
							ReadSettingsCFG();
						}
					}
					else if (memcmp(m_cCurLocation, "Counter", 7) == 0) {
						if (ShowTop) ShowTop = FALSE;
						else ShowTop = TRUE;
					}
					else if (memcmp(m_cCurLocation, "market", 6) == 0) {
						if (bCheckOpenMarket()) {
							if (m_bIsDialogEnabled[49]) {
								DisableDialogBox(49);
								DisableDialogBox(2);
							}
							else {
								EnableDialogBox(49, NULL, NULL, NULL, NULL);
								EnableDialogBox(2, NULL, NULL, NULL, NULL);
							}
						}
					}
					EncriptString(m_cCurLocation);
				}
			}
			break;

		case 78:// 'N' - ZeroEoyPnk
			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
			{
				if (m_bCtrlPressed) {
					if (m_bShowTiming == TRUE) {
						if (m_bQuestHelper || m_stQuest[QuestShow].sQuestType == NULL) {
							m_bShowTiming = FALSE;
							m_bQuestHelper = FALSE;
						}
						else m_bQuestHelper = TRUE;
					}
					else {
						m_bShowTiming = TRUE;
						m_sTiming = 0;
					}
				}
			}
			break;

		case 81: // 'Q'
		/*	if (m_bCtrlPressed == TRUE && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bIsDialogEnabled[48])
				{
					EnableDialogBox(48, NULL, NULL, NULL, NULL);
					ShowBarTotal += 2;
					if (ShowBarTotal < 3 && ShowBarTotal != 0) ShowBarTotal = 3;
					if (ShowBarTotal > 9) ShowBarTotal = 0;
					if (ShowBarTotal == 0) DisableDialogBox(48);
				}
				else
				{
					if (ShowBarTotal == 0) ShowBarTotal = 3;
					EnableDialogBox(48, NULL, NULL, NULL, NULL);
				}
			}*/
			if (m_bCtrlPressed == TRUE && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (!m_bIsDialogEnabled[78])
				{
					EnableDialogBox(78, NULL, NULL, NULL, NULL);
				}
				else
				{
					DisableDialogBox(78);
				}
			}
			break;
		case 82://'R'
			if (m_bCtrlPressed == TRUE && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bRunningMode)
				{
					m_bRunningMode = FALSE;
					AddEventList(NOTIFY_MSG_CONVERT_WALKING_MODE, 10);
				}
				else
				{
					m_bRunningMode = TRUE;
					AddEventList(NOTIFY_MSG_CONVERT_RUNNING_MODE, 10);
				}
			}
			break;

		case 83://'S'
			if (m_bCtrlPressed == TRUE && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				if (m_bMusicStat == TRUE) // Music Off
				{
					m_bMusicStat = FALSE;
					if (m_bSoundFlag)
					{
						if (m_pBGM != NULL)
						{
							m_pBGM->bStop();
							delete m_pBGM;
							m_pBGM = NULL;
						}
					}
					AddEventList(NOTIFY_MSG_MUSIC_OFF, 10);
					break;
				}
				else if (m_bSoundStat == TRUE)
				{
					m_pESound[38]->bStop();
					m_bSoundStat = FALSE;
					AddEventList(NOTIFY_MSG_SOUND_OFF, 10);
					break;
				}
				else 	// Music On
				{
					if (m_bSoundFlag)
					{
						m_bMusicStat = TRUE;
						AddEventList(NOTIFY_MSG_MUSIC_ON, 10);
					}
					if (m_bSoundFlag)
					{
						m_bSoundStat = TRUE;
						AddEventList(NOTIFY_MSG_SOUND_ON, 10);
					}
					StartBGM(false);
				}
				CreateSettingsCFG();
				ReadSettingsCFG();
			}
			break;

		case 84: //'T'
			if (m_bCtrlPressed == TRUE && m_cGameMode == DEF_GAMEMODE_ONMAINGAME && (!m_bInputStatus))
			{
				char tempid[100], cLB, cRB;
				short sX, sY, msX, msY, msZ;
				sX = m_stDialogBoxInfo[10].sX;
				sY = m_stDialogBoxInfo[10].sY;
				ZeroMemory(tempid, sizeof(tempid));
				m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
				if (m_bIsDialogEnabled[10] == TRUE && (msX >= sX + 20) && (msX <= sX + 360) && (msY >= sY + 39) && (msY <= sY + 143))
				{
					CStrTok *pStrTok;
					char   * token, cBuff[64];
					char   seps[] = ":";
					int i = (143 - msY + sY) / 13;
					if (m_sChatBox[i + m_stDialogBoxInfo[10].sView].ID == 999) return;
					if (m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg[0] == ' ') i++;
					strcpy(cBuff, m_sChatBox[i + m_stDialogBoxInfo[10].sView].Msg);
					pStrTok = new class CStrTok(cBuff, seps);
					token = pStrTok->pGet();
					wsprintf(tempid, "/to %s", token);
					bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, tempid);
					delete pStrTok;
				}
				else if (_tmp_sOwnerType < 7 && (strlen(_tmp_cName) > 0) && (DecriptInt(m_iIlusionOwnerH) == 0)
					&& ((m_bIsCrusadeMode == FALSE) || _iGetFOE(_tmp_iStatus, _tmp_sOwnerType) >= 0))
				{
					wsprintf(tempid, "/to %s", _tmp_cName);
					bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, tempid);
				}
				else
				{
					EndInputString();
					wsprintf(m_cChatMsg, "/to ");
					if (c_reso->IsResolution() == C800x600)
					{
						if (BigBar > 0)
							StartInputString(10, 584, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 534, sizeof(m_cChatMsg), m_cChatMsg);
					}
					else if (c_reso->IsResolution() == C1024x768)
					{
						if (BigBar > 0)
							StartInputString(10, 752, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 702, sizeof(m_cChatMsg), m_cChatMsg);
					}
					else if (c_reso->IsResolution() == C640x480)
					{
						if (BigBar > 0)
							StartInputString(10, 464, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 414, sizeof(m_cChatMsg), m_cChatMsg);
					}
				}
			}
			break;

		case 107: //'+'
			if (m_bInputStatus == FALSE)
			{
				m_bZoomMap = TRUE;
				CreateSettingsCFG();
				ReadSettingsCFG();
			}
			break;
		case 109: //'-'
			if (m_bInputStatus == FALSE)
			{
				m_bZoomMap = FALSE;
				CreateSettingsCFG();
				ReadSettingsCFG();
			}
			break;

		case VK_F1:
			UseShortCut(0);
			break;

		case VK_F2:
			UseShortCut(1);
			break;

		case VK_F3:
			UseShortCut(2);
			break;

		case VK_INSERT:
			if (!m_bCandyInsert) return;

			if (DecriptInt(m_iHP) <= 0) return;

			for (i = 0; i < DEF_MAXITEMS; i++)
				if ((m_pItemList[i] != NULL) && (m_bIsItemDisabled[i] != TRUE) &&
					(!strcmp(m_pItemList[i]->m_cName, "RedCandy")))
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_USEITEM, NULL, i, NULL, NULL, NULL);
					m_bIsItemDisabled[i] = TRUE;
					m_bItemUsingStatus = TRUE;
					return;
				}

			break;

		case VK_DELETE:
			if (!m_bCandyDelete) return;

			if (DecriptInt(m_iHP) <= 0) return;

			for (i = 0; i < DEF_MAXITEMS; i++)
				if ((m_pItemList[i] != NULL) && (m_bIsItemDisabled[i] != TRUE) &&
					(!strcmp(m_pItemList[i]->m_cName, "BlueCandy")))
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_USEITEM, NULL, i, NULL, NULL, NULL);
					m_bIsItemDisabled[i] = TRUE;
					m_bItemUsingStatus = TRUE;
					return;
				}

			break;

		case VK_END:
			if (((m_bIsDialogEnabled[7] == TRUE) && (m_stDialogBoxInfo[7].cMode == 1) && (iGetTopDialogBoxIndex() == 7)) ||
				((m_bIsDialogEnabled[17] == TRUE) && (m_stDialogBoxInfo[17].cMode == 1) && (iGetTopDialogBoxIndex() == 17)))
			{
			}
			else if ((!m_bInputStatus) && (m_cBackupChatMsg[0] != '!') && (m_cBackupChatMsg[0] != '~') && (m_cBackupChatMsg[0] != '^') &&
				(m_cBackupChatMsg[0] != '@'))
			{
				ZeroMemory(m_cChatMsg, sizeof(m_cChatMsg));
				strcpy(m_cChatMsg, m_cBackupChatMsg);
				if (c_reso->IsResolution() == C800x600)
				{
					if (BigBar > 0)
						StartInputString(10, 584, sizeof(m_cChatMsg), m_cChatMsg);
					else
						StartInputString(10, 534, sizeof(m_cChatMsg), m_cChatMsg);
				}
				else if (c_reso->IsResolution() == C1024x768)
				{
					if (BigBar > 0)
						StartInputString(10, 752, sizeof(m_cChatMsg), m_cChatMsg);
					else
						StartInputString(10, 702, sizeof(m_cChatMsg), m_cChatMsg);
				}
				else if (c_reso->IsResolution() == C640x480)
				{
					if (BigBar > 0)
						StartInputString(10, 464, sizeof(m_cChatMsg), m_cChatMsg);
					else
						StartInputString(10, 414, sizeof(m_cChatMsg), m_cChatMsg);
				}
			}
			break;

		case VK_F4:
			if (m_cGameMode != DEF_GAMEMODE_ONMAINGAME) return;
			UseMagic(m_sMagicShortCut);
			break;

		case VK_F5:
			if (m_bIsDialogEnabled[1] == FALSE)
				EnableDialogBox(1, NULL, NULL, NULL);
			else DisableDialogBox(1);
			break;

		case VK_F6:
			if (m_bIsDialogEnabled[2] == FALSE)
				EnableDialogBox(2, NULL, NULL, NULL);
			else DisableDialogBox(2);
			break;

		case VK_F7:
			if (m_bIsDialogEnabled[3] == FALSE)
				EnableDialogBox(3, NULL, NULL, NULL);
			else DisableDialogBox(3);
			break;

		case VK_F8:
			if (m_bIsDialogEnabled[15] == FALSE)
				EnableDialogBox(15, NULL, NULL, NULL);
			else DisableDialogBox(15);
			break;

		case VK_F9:
			if (m_bIsDialogEnabled[10] == FALSE)
				EnableDialogBox(10, NULL, NULL, NULL);
			else DisableDialogBox(10);
			break;

		case VK_F11:
			m_bDialogTrans = !m_bDialogTrans;
			break;

		case VK_F12:
			if (m_bInputStatus) return;
			if (m_bIsDialogEnabled[19] == FALSE)
				EnableDialogBox(19, NULL, NULL, NULL);
			else DisableDialogBox(19);
			break;

		case VK_F10:
			if (m_bInputStatus) return;
			if (m_bIsDialogEnabled[52] == FALSE) // 35 CLEROTH
			/*{
				DisableDialogBox(18); // Cierro NewPanel - Evita Errores

				m_stDialogBoxInfo[52].sSizeX = 300;
				m_stDialogBoxInfo[52].sSizeY = 200;
				EnableDialogBox(52, NULL, NULL, NULL);
				bSendCommand(CLIENT_REQUEST_TOPMEMORY, NULL, NULL, NULL, NULL, NULL, NULL); //lalopanel
			}
			else
			{
				DisableDialogBox(52);
				DisableDialogBox(53);
			}*/
			break;

		case VK_UP:
			m_cArrowPressed = 1;
			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
			{
				int iTotalMsg = 0;
				for (int i = DEF_MAXWHISPERMSG - 1; i >= 0; i--)
				{
					if (m_pWhisperMsg[i] != NULL)
					{
						iTotalMsg = i;
						break;
					}
				}
				m_cWhisperIndex++;
				if (m_cWhisperIndex > iTotalMsg) m_cWhisperIndex = 0;
				if (m_cWhisperIndex < 0) m_cWhisperIndex = iTotalMsg;
				if (m_pWhisperMsg[m_cWhisperIndex] != NULL) {
					EndInputString();
					wsprintf(m_cChatMsg, "/to %s", m_pWhisperMsg[m_cWhisperIndex]->m_pMsg);
					if (c_reso->IsResolution() == C800x600)
					{
						if (BigBar > 0)
							StartInputString(10, 584, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 534, sizeof(m_cChatMsg), m_cChatMsg);
					}
					else if (c_reso->IsResolution() == C1024x768)
					{
						if (BigBar > 0)
							StartInputString(10, 752, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 702, sizeof(m_cChatMsg), m_cChatMsg);
					}
					else if (c_reso->IsResolution() == C640x480)
					{
						if (BigBar > 0)
							StartInputString(10, 464, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 414, sizeof(m_cChatMsg), m_cChatMsg);
					}
				}
			}
			break;

		case VK_RIGHT:
			m_cArrowPressed = 2;
			break;

		case VK_DOWN:
			m_cArrowPressed = 3;
			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
			{
				int iTotalMsg = 0;
				for (int i = DEF_MAXWHISPERMSG - 1; i >= 0; i--)
				{
					if (m_pWhisperMsg[i] != NULL)
					{
						iTotalMsg = i;
						break;
					}
				}
				m_cWhisperIndex--;
				if (m_cWhisperIndex < 0) m_cWhisperIndex = iTotalMsg;
				if (m_cWhisperIndex > iTotalMsg) m_cWhisperIndex = 0;
				if (m_pWhisperMsg[m_cWhisperIndex] != NULL) {
					EndInputString();
					wsprintf(m_cChatMsg, "/to %s", m_pWhisperMsg[m_cWhisperIndex]->m_pMsg);
					if (c_reso->IsResolution() == C800x600)
					{
						if (BigBar > 0)
							StartInputString(10, 584, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 534, sizeof(m_cChatMsg), m_cChatMsg);
					}
					else if (c_reso->IsResolution() == C1024x768)
					{
						if (BigBar > 0)
							StartInputString(10, 752, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 702, sizeof(m_cChatMsg), m_cChatMsg);
					}
					else if (c_reso->IsResolution() == C640x480)
					{
						if (BigBar > 0)
							StartInputString(10, 464, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 414, sizeof(m_cChatMsg), m_cChatMsg);
					}
				}
			}
			break;

		case VK_LEFT:
			m_cArrowPressed = 4;
			break;

		case VK_SNAPSHOT:
			CreateScreenShot();
			break;

#ifndef DEF_USING_WIN_IME
		case VK_TAB:
			if (m_bShiftPressed)
			{
				m_cCurFocus--;
				if (m_cCurFocus < 1) m_cCurFocus = m_cMaxFocus;
			}
			else
			{
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
			}
			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
			}
			break;

		case VK_RETURN:
			m_bEnterPressed = TRUE;
			break;
#endif

		case VK_HOME:
			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME) {
				if (isInMap("dm")) break;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLESAFEATTACKMODE, NULL, NULL, NULL, NULL, NULL);
			}
			break;

		case VK_ESCAPE:
			m_bEscPressed = TRUE;
			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
			{
				if ((DecriptBool(m_bIsObserverMode) == TRUE) && (m_bShiftPressed)) { //ObserverMode Shift+Esc
				// Log Out
					if (m_cSalirDelChar == -1) m_cSalirDelChar = 1;
					DisableDialogBox(19);
					PlaySound('E', 14, 5);
				}
				else if (m_cSalirDelChar != -1) {
					if (m_bForceDisconn == FALSE) { //Esc
						m_cSalirDelChar = -1;
						AddEventList(DLGBOX_CLICK_SYSMENU2, 10);
						bSendCommand(CLIENT_REQUEST_CANCELLOGOUT, NULL, NULL, NULL, NULL, NULL, NULL);
					}
				}
				if (m_bIsGetPointingMode == TRUE) {
					m_bIsGetPointingMode = FALSE;
					AddEventList(COMMAND_PROCESSOR1, 10);
				}
				m_bIsF1HelpWindowEnabled = FALSE;
			}
			break;

		case 33:
			if (m_cGameMode != DEF_GAMEMODE_ONMAINGAME) return;
			if (m_bInputStatus) return;
			if (m_bIsSpecialAbilityEnabled == TRUE)
			{
				if (DecriptInt(m_iSpecialAbilityType) != 0) {
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_ACTIVATESPECABLTY, NULL, NULL, NULL, NULL, NULL);
					m_bIsSpecialAbilityEnabled = FALSE;
				}
				else AddEventList(ON_KEY_UP26, 10);
			}
			else {
				if (DecriptInt(m_iSpecialAbilityType) == 0) AddEventList(ON_KEY_UP26, 10);
				else {
					if ((m_sPlayerAppr4 & 0x00F0) != 0) {
						AddEventList(ON_KEY_UP28, 10);
						return;
					}

					i = (dwTime - m_dwSpecialAbilitySettingTime) / 1000;
					i = DecriptInt(m_iSpecialAbilityTimeLeftSec) - i;
					if (i < 0) i = 0;

					ZeroMemory(G_cTxt, sizeof(G_cTxt));
					if (i < 60) {
						switch (DecriptInt(m_iSpecialAbilityType)) {
							case 1: wsprintf(G_cTxt, ON_KEY_UP29, i); break;//"
							case 2: wsprintf(G_cTxt, ON_KEY_UP30, i); break;//"
							case 3: wsprintf(G_cTxt, ON_KEY_UP31, i); break;//"
							case 4: wsprintf(G_cTxt, ON_KEY_UP32, i); break;//"
							case 5: wsprintf(G_cTxt, ON_KEY_UP33, i); break;//"
							case 50:wsprintf(G_cTxt, ON_KEY_UP34, i); break;//"
							case 51:wsprintf(G_cTxt, ON_KEY_UP35, i); break;//"
							case 52:wsprintf(G_cTxt, ON_KEY_UP36, i); break;//"
						}
					}
					else {
						switch (DecriptInt(m_iSpecialAbilityType)) {
							case 1: wsprintf(G_cTxt, ON_KEY_UP37, i / 60); break;//"
							case 2: wsprintf(G_cTxt, ON_KEY_UP38, i / 60); break;//"
							case 3: wsprintf(G_cTxt, ON_KEY_UP39, i / 60); break;//"
							case 4: wsprintf(G_cTxt, ON_KEY_UP40, i / 60); break;//"
							case 5: wsprintf(G_cTxt, ON_KEY_UP41, i / 60); break;//"
							case 50:wsprintf(G_cTxt, ON_KEY_UP42, i / 60); break;//"
							case 51:wsprintf(G_cTxt, ON_KEY_UP43, i / 60); break;//"
							case 52:wsprintf(G_cTxt, ON_KEY_UP44, i / 60); break;//"
						}
					}
					AddEventList(G_cTxt, 10);
				}
			}
			break;
	}
}

void CGame::OnKeyDown(WPARAM wParam)
{
	switch (wParam) {
		case VK_CONTROL:
			m_bCtrlPressed = TRUE;
			break;
		case VK_SHIFT:
			m_bShiftPressed = TRUE;
			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
			{
				if (isInMap("dm"))
				{
					if (!m_bIsDialogEnabled[75]) {
						request_ranking(DEF_TOPDM);
						EnableDialogBox(75, NULL, NULL, NULL);
					}
				}
			}
			break;
		case VK_INSERT:
		case VK_DELETE:
		case VK_TAB:
		case VK_RETURN:
		case VK_ESCAPE:
		case VK_END:
		case VK_HOME:
		case VK_F1:
		case VK_F2:
		case VK_F3:
		case VK_F4:
		case VK_F5:
		case VK_F6:
		case VK_F7:
		case VK_F8:
		case VK_F9:
		case VK_F10:
		case VK_F11:
		case VK_F12:
		case VK_PRIOR: // Page-Up
		case VK_NEXT: // Page-Down
		case VK_LWIN:
		case VK_RWIN:
		case VK_MULTIPLY:
		case VK_ADD: //'+'
		case VK_SEPARATOR:
		case VK_SUBTRACT: //'-'
		case VK_DECIMAL:
		case VK_DIVIDE:
		case VK_NUMLOCK:
		case VK_SCROLL:
			break;

		default:

			if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
			{
				if (m_bCtrlPressed)
				{
					if (m_bIsDialogEnabled[14])
					{
						switch (wParam) {
							case 48:
								m_stDialogBoxInfo[14].cMode = 9;
								TempPage = 9;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 9, NULL, NULL, NULL);
								break; // 0
							case 49:
								m_stDialogBoxInfo[14].cMode = 0;
								TempPage = 0;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 0, NULL, NULL, NULL);
								break; // 1
							case 50:
								m_stDialogBoxInfo[14].cMode = 1;
								TempPage = 1;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 1, NULL, NULL, NULL);
								break; // 2
							case 51:
								m_stDialogBoxInfo[14].cMode = 2;
								TempPage = 2;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 2, NULL, NULL, NULL);
								break; // 3
							case 52:
								m_stDialogBoxInfo[14].cMode = 3;
								TempPage = 3;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 3, NULL, NULL, NULL);
								break; // 4
							case 53:
								m_stDialogBoxInfo[14].cMode = 4;
								TempPage = 4;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 4, NULL, NULL, NULL);
								break; // 5
							case 54:
								m_stDialogBoxInfo[14].cMode = 5;
								TempPage = 5;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 5, NULL, NULL, NULL);
								break; // 6
							case 55:
								m_stDialogBoxInfo[14].cMode = 6;
								TempPage = 6;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 6, NULL, NULL, NULL);
								break; // 7
							case 56:
								m_stDialogBoxInfo[14].cMode = 7;
								TempPage = 7;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 7, NULL, NULL, NULL);
								break; // 8
							case 57:
								m_stDialogBoxInfo[14].cMode = 8;
								TempPage = 8;
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 8, NULL, NULL, NULL);
								break; // 9
						}
					}
					else
					{
						switch (wParam) {
							case 48: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 9; break; // 0
							case 49: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 0; break; // 1
							case 50: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 1; break; // 2
							case 51: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 2; break; // 3
							case 52: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 3; break; // 4
							case 53: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 4; break; // 5
							case 54: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 5; break; // 6
							case 55: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 6; break; // 7
							case 56: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 7; break; // 8
							case 57: EnableDialogBox(3, NULL, NULL, NULL); m_stDialogBoxInfo[3].sView = 8; break; // 9
						}
					}
				}
				else if ((m_bInputStatus == FALSE) && (GetAsyncKeyState(VK_MENU) >> 15 == FALSE))
				{
					if (c_reso->IsResolution() == C800x600)
					{
						if (BigBar > 0)
							StartInputString(10, 584, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 534, sizeof(m_cChatMsg), m_cChatMsg);
					}
					else if (c_reso->IsResolution() == C1024x768)
					{
						if (BigBar > 0)
							StartInputString(10, 752, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 702, sizeof(m_cChatMsg), m_cChatMsg);
					}
					else if (c_reso->IsResolution() == C640x480)
					{
						if (BigBar > 0)
							StartInputString(10, 464, sizeof(m_cChatMsg), m_cChatMsg);
						else
							StartInputString(10, 414, sizeof(m_cChatMsg), m_cChatMsg);
					}
					ClearInputString();
				}
			}
			break;
	}
}

void CGame::UpdateScreen_OnQuit()
{
	short msX, msY, msZ;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;

	//added resolution lalo
	int res_x = 0;
	int res_y = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 800;
		res_y = 600;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1024;
		res_y = 768;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 640;
		res_y = 480;
	}

	static class CMouseInterface * pMI;

	DWORD dwTime = timeGetTime();

	if (m_cGameModeCount == 0) {
		if (G_pCalcSocket != NULL)
		{
			delete G_pCalcSocket;
			G_pCalcSocket = NULL;
		}
		if (m_pGSock != NULL)
		{
			delete m_pGSock;
			m_pGSock = NULL;
		}
		m_bEscPressed = FALSE;
		m_bEnterPressed = FALSE;
		pMI = new class CMouseInterface;

		pMI->AddRect(0, 0, res_x, res_y);
		m_bEnterPressed = FALSE;
	}

	m_cGameModeCount++;
	if (m_cGameModeCount > 120) m_cGameModeCount = 120;

	m_DDraw.ClearBackB4();

	if (m_bEscPressed == TRUE || m_bEnterPressed == TRUE) {
		m_bEscPressed = FALSE;
		m_bEnterPressed = FALSE;
		delete pMI;
		ChangeGameMode(DEF_GAMEMODE_NULL);
		SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
		return;
	}
	if (c_reso->IsResolution() == C640x480)
		m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, 0);
	else if (c_reso->IsResolution() == C800x600)
		m_pSprite[SPRID_BACKGROUND + 1]->PutSpriteFast(0, 0, 0, 0);
	else if (c_reso->IsResolution() == C1024x768)
		m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, 0);

	/*if (m_cGameModeCount > 20) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_QUIT, 255, 123, 1, TRUE);
	else if ((m_cGameModeCount >= 15) && (m_cGameModeCount <= 20)) m_pSprite[DEF_SPRID_INTERFACE_ND_QUIT]->PutTransSprite25(255, 123, 1, TRUE);
	DrawVersion(TRUE);*/
	
	if (m_cGameModeCount == 100)
	{
		ChangeGameMode(DEF_GAMEMODE_NULL);
		delete pMI;
		SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
		return;
	}
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if ((cMIresult == DEF_MIRESULT_CLICK) && (iMIbuttonNum == 1)) {
		ChangeGameMode(DEF_GAMEMODE_NULL);
		SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
		delete pMI;
		return;
	}

	//	if (m_cGameModeCount < 6) m_DDraw.DrawShadowBox(0,0,639,479);
	//	if (m_cGameModeCount < 2) m_DDraw.DrawShadowBox(0,0,639,479);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::UpdateScreen_OnQueryForceLogin()
{
	short msX, msY, msZ;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;

	//added resolution lalo
	int res_x = 0;
	int res_y = 0;
	int res_x2 = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 799;
		res_y = 599;
		res_x2 = 81;
		res_y2 = 89;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1023;
		res_y = 767;
		res_x2 = 193;
		res_y2 = 172;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 639;
		res_y = 479;
	}

	static class CMouseInterface * pMI;
	static DWORD dwCTime;
	DWORD dwTime = timeGetTime();

	if (m_cGameModeCount == 0) {
		pMI = new class CMouseInterface;
		pMI->AddRect(200 + res_x2, 244 + res_y2, 200 + res_x2 + DEF_BTNSZX, 244 + res_y2 + DEF_BTNSZY);
		pMI->AddRect(370 + res_x2, 244 + res_y2, 370 + res_x2 + DEF_BTNSZX, 244 + res_y2 + DEF_BTNSZY);
		m_bEnterPressed = FALSE;
		m_bEscPressed = FALSE;
		m_cArrowPressed = 0;

		dwCTime = timeGetTime();

		PlaySound('E', 25, 0);
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_bEscPressed == TRUE) {
		ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	UpdateScreen_OnSelectCharacter(0, 0, 0, 0);
	if ((m_cGameModeCount >= 0) && (m_cGameModeCount < 6)) {
		m_DDraw.DrawShadowBox(0, 0, res_x, res_y);
	}
	else if (m_cGameModeCount >= 6) {
		m_DDraw.DrawShadowBox(0, 0, res_x, res_y);
		m_DDraw.DrawShadowBox(0, 0, res_x, res_y);
	}

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 162 + res_x2, 130 + res_y2, 2);

	PutString_SprFont(172 + res_x2 + 86, 160 + res_y2, "Character on Use", 7, 0, 0);
	PutAlignedString(178 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_QUERY_FORCE_LOGIN1);
	PutAlignedString(178 + res_x2, 453 + res_y2, 215 + res_y2, UPDATE_SCREEN_ON_QUERY_FORCE_LOGIN2);

	if ((msX >= 200 + res_x2) && (msX <= 200 + res_x2 + DEF_BTNSZX) && (msY >= 244 + res_y2) && (msY <= 244 + res_y2 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 200 + res_x2, 244 + res_y2, 19);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 200 + res_x2, 244 + res_y2, 18);

	if ((msX >= 370 + res_x2) && (msX <= 370 + res_x2 + DEF_BTNSZX) && (msY >= 244 + res_y2) && (msY <= 244 + res_y2 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 370 + res_x2, 244 + res_y2, 3);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 370 + res_x2, 244 + res_y2, 2);

	if ((dwTime - dwCTime) > 100) {
		m_cMenuFrame++;
		dwCTime = dwTime;
	}
	if (m_cMenuFrame >= 8) {
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8) {
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK)
	{
		PlaySound('E', 14, 5);
		switch (iMIbuttonNum) {
			case 1:
				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_ENTERGAME;
				m_wEnterGameType = NUCLEO_REQUEST_NOENTER_FORCEDISCONN;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "33");
				delete pMI;
				return;

			case 2:
				ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
				delete pMI;
				break;
		}
	}
	DrawVersion();
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::UpdateScreen_OnWaitingResponse()
{
	short sX, sY, msX, msY, msZ;
	char cLB, cRB;

	DWORD dwTime = timeGetTime();
	//static class CMouseInterface * pMI;
	static DWORD dwCTime;

	//added resolution lalo
	int res_x = 0;
	int res_y = 0;
	int res_x2 = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 799;
		res_y = 599;
		res_x2 = 81;
		res_y2 = 89;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1023;
		res_y = 767;
		res_x2 = 193;
		res_y2 = 172;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 639;
		res_y = 479;
	}
	if (m_cGameModeCount == 0)
	{
		m_bEnterPressed = FALSE;
		m_bEscPressed = FALSE;
		dwCTime = timeGetTime();
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_bEscPressed == TRUE)
	{
		if ((dwTime - m_dwTime) > 7000)
		{
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			if (m_pLSock != NULL)
			{
				delete m_pLSock;
				m_pLSock = NULL;
			}
			if (m_pGSock != NULL)
			{
				delete m_pGSock;
				m_pGSock = NULL;
			}
		}
		m_bEscPressed = FALSE;
		return;
	}

	if ((dwTime - dwCTime) > 100)
	{
		m_cMenuFrame++;
		dwCTime = dwTime;
	}
	if (m_cMenuFrame >= 8)
	{
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8)
		{
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;

	m_bIsHideLocalCursor = TRUE;
	m_DDraw.ClearBackB4();
	switch (m_cMsg[0]) {
		case '0':
			_Draw_UpdateScreen_OnCreateNewAccount();
			break;
		case '1':
			sX = 146 + res_x2;
			sY = 114 + res_y2;
			DecriptString(m_cAccountName);
			DecriptString(m_cAccountPassword);
			_Draw_OnLogin(m_cAccountName, m_cAccountPassword, 0, 0);
			EncriptString(m_cAccountName);
			EncriptString(m_cAccountPassword);
			break;
		case '2':
		//	DecriptString(m_cPlayerName);
			_bDraw_OnCreateNewCharacter(m_cPlayerName, 0, 0, 0);
		//	EncriptString(m_cPlayerName);
			break;
		case '3':
			UpdateScreen_OnSelectCharacter(0, 0, 0, 0);
			break;
		case '4':// Change Password
			UpdateScreen_OnSelectCharacter(0, 0, 0, 0, TRUE);
			break;
		case '5':
			m_DDraw.ClearBackB4();
			break;
	}
	m_bIsHideLocalCursor = FALSE;

	m_DDraw.DrawShadowBox(0, 0, res_x, res_y);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 162 + res_x2, 125 + res_y2, 2);
	PutString_SprFont(172 + res_x2 + 44 - 17, 190 + res_y2, "Connected. Waiting for response...", 7, 0, 0);

	if ((dwTime - m_dwTime) > 7000)
	{
		PutAlignedString(180 + res_x2, 463 + res_y2, 195 + res_y2 + 30, UPDATE_SCREEN_ON_WATING_RESPONSE1);
		PutAlignedString(180 + res_x2, 463 + res_y2, 195 + res_y2 + 45, UPDATE_SCREEN_ON_WATING_RESPONSE2);
	}
	else PutAlignedString(180 + res_x2, 463 + res_y2, 195 + res_y2 + 30, UPDATE_SCREEN_ON_WATING_RESPONSE3);
	
	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 8, dwTime);

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::UpdateScreen_OnQueryDeleteCharacter()
{
	short msX, msY, msZ;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;

	//added resolution lalo
	int res_x = 0;
	int res_y = 0;
	int res_x2 = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 799;
		res_y = 599;
		res_x2 = 81;
		res_y2 = 89;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1023;
		res_y = 767;
		res_x2 = 193;
		res_y2 = 172;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 639;
		res_y = 479;
	}


	static class CMouseInterface * pMI;
	static DWORD dwCTime;
	DWORD dwTime = timeGetTime();

	if (m_cGameModeCount == 0)
	{
		pMI = new class CMouseInterface;
		pMI->AddRect(200 + res_x2, 244 + res_y2, 200 + res_x2 + DEF_BTNSZX, 244 + res_y2 + DEF_BTNSZY);
		pMI->AddRect(370 + res_x2, 244 + res_y2, 370 + res_x2 + DEF_BTNSZX, 244 + res_y2 + DEF_BTNSZY);
		//m_cCurFocus = 1;
		//m_cMaxFocus = 2;
		m_bEnterPressed = FALSE;
		m_cArrowPressed = 0;

		dwCTime = timeGetTime();

		PlaySound('E', 25, 0);
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_bEscPressed == TRUE)
	{
		ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	UpdateScreen_OnSelectCharacter(0, 0, 500 + res_x2, 70 + res_y2);
	if ((m_cGameModeCount >= 0) && (m_cGameModeCount < 6))
	{
		m_DDraw.DrawShadowBox(0, 0, res_x, res_y);
	}
	else if (m_cGameModeCount >= 6)
	{
		m_DDraw.DrawShadowBox(0, 0, res_x, res_y);
		m_DDraw.DrawShadowBox(0, 0, res_x, res_y);
	}

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 162 + res_x2, 125 + res_y2, 2);

	PutString_SprFont(172 + res_x2 + 86, 160 + res_y2, "Delete Character", 7, 0, 0);
	PutString(215 + res_x2, 195 + res_y2, UPDATE_SCREEN_ON_QUERY_DELETE_CHARACTER1, RGB(5, 5, 5));//"Character Name"
					   //"Character Name"
	PutString(335 + res_x2, 199 + res_y2, "__________", RGB(5, 5, 5));
	PutString(335 + res_x2, 195 + res_y2, m_pCharList[m_wEnterGameType - 1]->m_cName, RGB(25, 35, 25));
	PutAlignedString(178 + res_x2, 453 + res_y2, 220 + res_y2, UPDATE_SCREEN_ON_QUERY_DELETE_CHARACTER2);//"Do you want to delete the character above?"

	// v2.05
	if ((msX >= 200 + res_x2) && (msX <= 200 + res_x2 + DEF_BTNSZX) && (msY >= 244 + res_y2) && (msY <= 244 + res_y2 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 200 + res_x2, 244 + res_y2, 19);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 200 + res_x2, 244 + res_y2, 18);

	if ((msX >= 370 + res_x2) && (msX <= 370 + res_x2 + DEF_BTNSZX) && (msY >= 244) && (msY <= 244 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 370 + res_x2, 244 + res_y2, 3);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 370 + res_x2, 244 + res_y2, 2);

	if ((dwTime - dwCTime) > 100)
	{
		m_cMenuFrame++;
		dwCTime = dwTime;
	}
	if (m_cMenuFrame >= 8)
	{
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8)
		{
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK)
	{
		PlaySound('E', 14, 5);
		switch (iMIbuttonNum) {
			case 1:
				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();

				DecriptString(m_cLogServerAddr);
				m_pLSock->bConnect(m_cLogServerAddr, DecriptInt(m_iLogServerPort), WM_USER_LOGSOCKETEVENT);
				EncriptString(m_cLogServerAddr);

				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = NUCLEO_REQUEST_DELETECHARACTER;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "33");
				delete pMI;
				return;

			case 2:
				ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
				delete pMI;
				break;
		}
	}
	DrawVersion();
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::NotifyMsgHandler(char * pData)
{
	DWORD * dwp, dwTime, dwTemp;
	WORD  * wp, wEventType;
	char  * cp, cTemp[510], cTxt[120];
//	short * sp, sX, sY, sV1, sV2, sV3, sV4, sV5, sV6, sV7, sV8, sV9;
	short * sp, sV1, sV2, sV3, sV4, sV5, sV6, sV7, sV8, sV9;
	int   * ip, i, iV1, iV2, iV3, iV4;

	dwTime = timeGetTime();

	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	wEventType = *wp;
	auto * cp2 = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	switch (wEventType) {
		/*	case DEF_NOTIFY_SLATE_BERSERK:		// reversed by Snoopy: 0x0BED
				AddEventList( DEF_MSG_NOTIFY_SLATE_BERSERK, 10 );//"Berserk magic casted!"
				m_bUsingSlate = TRUE;
				break;

			case DEF_NOTIFY_LOTERY_LOST:		// reversed by Snoopy: 0x0BEE:
				AddEventList( DEF_MSG_NOTIFY_LOTERY_LOST, 10 );//"You draw a blank. Please try again next time.."
				break;

			case DEF_NOTIFY_0BEF:				// 0x0BEF: // Snoopy: Crash or closes the client? (Calls SE entry !)
				// I'm noot sure at all of this function's result, so let's quit game...

				break;*/

		case CLIENT_NOTIFY_CRAFTING_SUCCESS:	//reversed by Snoopy: 0x0BF0:
			m_iContribution = (m_iContribution - DecriptInt(m_iContributionPrice));
			m_iContributionPrice = EncriptInt(0);
			DisableDialogBox(25);
			AddEventList(NOTIFY_MSG_HANDLER42, 10);		// "Item manufacture success!"
			PlaySound('E', 23, 5);
			switch (m_sPlayerType) {
				case 1:
				case 2:
				case 3:
					PlaySound('C', 21, 0);
					break;
				case 4:
				case 5:
				case 6:
					PlaySound('C', 22, 0);
					break;
			}
			break;

		case CLIENT_NOTIFY_ITEMREPAIRED2:
			NotifyMsg_ItemRepaired2(pData);
			break;

		case NOTIFY_EVENT_STATUS:
			g_ev.NotifyEventStatus(cp2, 1);
			PlaySound('E', 25, 0, 0);
			break;

		case NOTIFY_EVENT_STATUS2:
			g_ev.NotifyEventStatus(cp2, 2);
			//PlaySound('E', 25, 0, 0);
			break;

		case NOTIFYMSG:
			ZeroMemory(cTemp, sizeof(cTemp));
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			strcpy(cTemp, cp);
			PlaySound('E', 22, 5);
			SetTopMsg(cTemp, 5);
			break;


		case CLIENT_NOTIFY_CRAFTING_FAIL:		//reversed by Snoopy: 0x0BF1:
			m_iContributionPrice = EncriptInt(0);
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			iV1 = *ip; // Error reason
			switch (iV1) {
				case 1:
					AddEventList(DEF_MSG_NOTIFY_CRAFTING_NO_PART, 10);		// "There is not enough material"
					PlaySound('E', 24, 5);
					break;
				case 2:
					AddEventList(DEF_MSG_NOTIFY_CRAFTING_NO_CONTRIB, 10);	// "There is not enough Contribution Point"
					PlaySound('E', 24, 5);
					break;
				default:
				case 3:
					AddEventList(DEF_MSG_NOTIFY_CRAFTING_FAILED, 10);		// "Crafting failed"
					PlaySound('E', 24, 5);
					break;
			}
			break;

		case CLIENT_NOTIFY_ANGELIC_STATS:		// reversed by Snoopy: 0x0BF2
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			m_iAngelicStr = EncriptInt(0);  // m_iAngelicStr
			m_iAngelicInt = EncriptInt(0);  // m_iAngelicInt
			m_iAngelicDex = EncriptInt(0);  // m_iAngelicDex
			m_iAngelicMag = EncriptInt(0);  // m_iAngelicMag
			break;

		case CLIENT_NOTIFY_HAPPYHOURSTAR:
			ActiveEvent = 5;
			SetTopMsg("Happy Hour Event Activado. ( Eks x 40 )", 10);//40
			//SetTopMsg("Happy Hour Event Activado. ( Eks x 100 )", 10);
			break;

		case CLIENT_NOTIFY_HAPPYHOUREND:
			ActiveEvent = 0;
			SetTopMsg("Happy Hour Event Desactivado. ( Eks x 10 )", 10);
			//SetTopMsg("Happy Hour Event Desactivado. ( Eks x 20 )", 10);
			break;

			//Nuevo HappyDay LaloRamos
		case CLIENT_NOTIFY_HAPPYDAYSTAR:
			SetTopMsg("Happy Day Event Activado. ( Eks x 100 )", 10);//100
			//SetTopMsg("Happy Day Event Activado. ( Eks x 200 )", 10);
			break;

		case CLIENT_NOTIFY_HAPPYDAYEND:
			SetTopMsg("Happy Day Event Desactivado. ( Eks x 10 )", 10);
			//SetTopMsg("Happy Day Event Desactivado. ( Eks x 20 )", 10);
			break;

		case CLIENT_NOTIFY_TOHNOW:
			SetTopMsg("Tower Of Hell - OPEN - tp in cityhall.", 10);
			break;

		case CLIENT_NOTIFY_TOHEND:
			SetTopMsg("Tower Of Hell - CLOSED.", 10);
			break;

		case CLIENT_NOTIFY_EXTRNOW:
			SetTopMsg("Extreme Fight - OPEN - tp in cityhall.", 10);
			break;

		case CLIENT_NOTIFY_EXTREND:
			SetTopMsg("Extreme Fight - CLOSED.", 10);
			break;

		case CLIENT_NOTIFY_HUNTON:
			SetTopMsg("HuntMap - OPEN - tp in cityhall.", 10);
			break;

		case CLIENT_NOTIFY_HUNTOFF:
			SetTopMsg("HuntMap - CLOSED.", 10);
			break;

		case CLIENT_NOTIFY_QUEST2:
			if (Questx2 == FALSE)
			{
				Questx2 = TRUE;
				SetTopMsg("All Quest x 2 ACTIVADO!", 10);
			}
			break;

		case CLIENT_NOTIFY_QUEST2OFF:
			SetTopMsg("All Quest x 2 DESACTIVADO!", 10);
			Questx2 = FALSE;
			break;

		case CLIENT_NOTIFY_QUEST3:
			if (Questx3 == FALSE)
			{
				Questx3 = TRUE;
				SetTopMsg("All Quest x 3 ACTIVADO!", 10);
			}
			break;

		case CLIENT_NOTIFY_QUEST3OFF:
			SetTopMsg("All Quest x 3 DESACTIVADO!", 10);
			Questx3 = FALSE;
			break;

		case CLIENT_NOTIFY_DKEVENT:
			if (DKEvent == FALSE)
			{
				DKEvent = TRUE;
				SetTopMsg("PVP Event - OPEN - tp in cityhall!", 10);
				ActiveEvent = 14;
			}
			break;

		case CLIENT_NOTIFY_DKEVENTOFF:
			SetTopMsg("PVP Event - CLOSED!", 10);
			DKEvent = FALSE;
			ActiveEvent = 0;
			break;



		case CLIENT_NOTIFY_SPELL_SKILL:		// reversed by Snoopy: 0x0BF6
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			for (i = 0; i < DEF_MAXMAGICTYPE; i++)
			{
				m_cMagicMastery[i] = *cp;
				cp++;
			}
			for (i = 0; i < DEF_MAXSKILLTYPE; i++)
			{
				m_cSkillMastery[i] = (unsigned char)*cp;
				if (m_pSkillCfgList[i] != NULL)
					m_pSkillCfgList[i]->m_iLevel = (int)*cp;
				cp++;
			}
			break;

		case CLIENT_NOTIFY_NORECALL: // Snoopy 0x0BD1
			AddEventList("You can not recall in this map.", 10);
			break;

			/*case DEF_NOTIFY_APOCGATESTARTMSG: // Snoopy 0x0BD2
				SetTopMsg("The portal to the Apocalypse is opened.", 10);
				break;

			case DEF_NOTIFY_APOCGATEENDMSG: // Snoopy 0x0BD3
				SetTopMsg("The portal to the Apocalypse is closed.", 10);
				break;
				*/
		case CLIENT_NOTIFY_ABADDONMAP:
			ActiveEvent = 7;
			SetTopMsg("The portal to the Apocalypse is open in cityhall.", 10);
			break;

		case CLIENT_NOTIFY_ABADDONMAPCLOSE:
			ActiveEvent = 0;
			SetTopMsg("The portal to the Apocalypse is closed.", 10);
			break;

		case CLIENT_NOTIFY_APOCGATEOPEN: // Snoopy ;  Case BD4 of switch 00454077
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			i = *ip;
			cp += 4;
			ip = (int *)cp;
			m_iGatePositX[i] = *ip;
			cp += 4;
			ip = (int *)cp;
			m_iGatePositY[i] = *ip;
			cp += 4;
			ZeroMemory(m_cGateMapName[i], sizeof(m_cGateMapName[i]));
			memcpy(m_cGateMapName[i], cp, 10);
			cp += 10;
			break;

		case CLIENT_NOTIFY_QUESTCOUNTER: // Snoopy;  Case BE2 of switch 00454077
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			unsigned int Total;

			sp = (short *)cp;
			QuestShow = *sp;
			cp += 2;

			ip = (int *)cp;
			Total = *ip;
			cp += 4;

			m_stQuest[QuestShow].sCurrentCount = (unsigned int)Total;
			if (m_stQuest[QuestShow].sCurrentCount == 0) AddEventList("Quest Terminada!", 15);
			break;

		case CLIENT_NOTIFY_MONSTERCOUNT: // Snoopy ;  Case BE3 ofswitch 0045407
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			wsprintf(cTxt, "Rest Monster: %d", sV1);
			AddEventList(cTxt, 10);
			break;

		case CLIENT_NOTIFY_APOCGATECLOSE: // Snoopy ;  Case BD5 of switch 00454077
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			i = *ip;
			cp += 4;
			m_iGatePositX[i] = -1;
			m_iGatePositY[i] = -1;
			ZeroMemory(m_cGateMapName[i], sizeof(m_cGateMapName[i]));
			break;

		case CLIENT_NOTIFY_ABADDONKILLED: // Snoopy ;  Case BD6 of switch 00454077
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, cp, 10);
			cp += 10;
			wsprintf(G_cTxt, "Abaddon is destroyed by %s", cTxt);
			AddEventList(G_cTxt, 10);
			break;

		case CLIENT_NOTIFY_RESURRECTPLAYER: // Case BE9 of switch 00454077
			EnableDialogBox(50, 0, NULL, NULL);
			break;

			/*case DEF_NOTIFY_0BE8: // ;  Case BE8 of switch 00454077
				SetTopMsg("Characters will be recalled by force as Heldenian begins.", 10);
				break;*/

				// Slates - Diuuude
		case CLIENT_NOTIFY_SLATE_CREATESUCCESS:	// 0x0BC1
			AddEventList(DEF_MSG_NOTIFY_SLATE_CREATESUCCESS, 10);
			break;

		case CLIENT_NOTIFY_SLATE_CREATEFAIL:		// 0x0BC2
			AddEventList(DEF_MSG_NOTIFY_SLATE_CREATEFAIL, 10);
			break;

		case CLIENT_NOTIFY_SLATE_INVINCIBLE:		// 0x0BD8
			AddEventList(DEF_MSG_NOTIFY_SLATE_INVINCIBLE, 10);
			m_bUsingSlate = TRUE;
			break;

		case CLIENT_NOTIFY_SLATE_MANA:				// 0x0BD9
			AddEventList(DEF_MSG_NOTIFY_SLATE_MANA, 10);
			m_bUsingSlate = TRUE;
			break;

		case CLIENT_NOTIFY_SLATE_EXP:				// 0x0BE0
			AddEventList(DEF_MSG_NOTIFY_SLATE_EXP, 10);
			m_bUsingSlate = TRUE;
			break;

		case CLIENT_NOTIFY_SLATE_STATUS:			// 0x0BE1
			AddEventList(DEF_MSG_NOTIFY_SLATECLEAR, 10); // "The effect of the prophecy-slate is disappeared."
			m_bUsingSlate = FALSE;
			break;

			// MJ Stats Change - Diuuude: Erreur, ici il s'agit de sorts et skills, le serveur comme la v351 sont aussi bugu�s !
		case CLIENT_NOTIFY_STATECHANGE_SUCCESS:	// 0x0BB5
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			for (i = 0; i < DEF_MAXMAGICTYPE; i++)
			{
				m_cMagicMastery[i] = *cp;
				cp++;
			}
			for (i = 0; i < DEF_MAXSKILLTYPE; i++)
			{
				m_cSkillMastery[i] = (unsigned char)*cp;
				if (m_pSkillCfgList[i] != NULL)
					m_pSkillCfgList[i]->m_iLevel = (int)*cp;
				//else m_pSkillCfgList[i]->m_iLevel = 0;
				cp++;
			}

			sV1 = (short)*cp;
			cp++;

			if (sV1 == 0)
				AddEventList("Your stat has been changed.", 10); // "Your stat has been changed."
			break;

		case CLIENT_NOTIFY_LEVELUP: // 0x0B16
			NotifyMsg_LevelUp(pData);
			break;

		case CLIENT_NOTIFY_LUPOOL:
			NotifyMsg_LuPool(pData);
			break;

		case CLIENT_NOTIFY_STATECHANGE_FAILED:		// 0x0BB6
			m_cLU_Str = EncriptInt(0);
			m_cLU_Vit = EncriptInt(0);
			m_cLU_Dex = EncriptInt(0);
			m_cLU_Int = EncriptInt(0);
			m_cLU_Mag = EncriptInt(0);
			m_cLU_Char = EncriptInt(0);
			m_iLU_Point = EncriptInt(DecriptInt(m_iLevel) * 3 - ((m_iStr + m_iVit + m_iDex + m_iInt + m_iMag + m_iCharisma) - 70) - 3);

			m_iLU_Point = m_iLU_Point + getRebirthStats();
			AddEventList("Your stat has not been changed.", 10);
			break;

		case CLIENT_NOTIFY_SETTING_FAILED: // 0x0BB4 -  Case BB4 of switch 00454077
			AddEventList("Your stat has not been changed.", 10);
			m_cLU_Str = EncriptInt(0);
			m_cLU_Vit = EncriptInt(0);
			m_cLU_Dex = EncriptInt(0);
			m_cLU_Int = EncriptInt(0);
			m_cLU_Mag = EncriptInt(0);
			m_cLU_Char = EncriptInt(0);
			m_iLU_Point = EncriptInt(DecriptInt(m_iLevel) * 3 - ((m_iStr + m_iVit + m_iDex + m_iInt + m_iMag + m_iCharisma) - 70) - 3);

			m_iLU_Point = m_iLU_Point + getRebirthStats();
			break;

		case CLIENT_NOTIFY_SETTING_STATS: // 0x0BB4 -  Case BB4 of switch 00454077
			//AddEventList("Your stat has not been changed.", 10);
			m_cLU_Str = EncriptInt(0);
			m_cLU_Vit = EncriptInt(0);
			m_cLU_Dex = EncriptInt(0);
			m_cLU_Int = EncriptInt(0);
			m_cLU_Mag = EncriptInt(0);
			m_cLU_Char = EncriptInt(0);
			m_iLU_Point = EncriptInt(DecriptInt(m_iLevel) * 3 - ((m_iStr + m_iVit + m_iDex + m_iInt + m_iMag + m_iCharisma) - 70) - 3);

			m_iLU_Point = m_iLU_Point + getRebirthStats();
			break;

			// CLEROTH - LU
		case CLIENT_NOTIFY_SETTING_SUCCESS: // 0x0BB3 - envoie le niv et les stats
			NotifyMsg_SettingSuccess(pData);
			break;

		case CLIENT_NOTIFY_AGRICULTURENOAREA:		// 0x0BB2
			AddEventList(DEF_MSG_NOTIFY_AGRICULTURENOAREA, 10);
			break;
		case CLIENT_NOTIFY_AGRICULTURESKILLLIMIT:	// 0x0BB1
			AddEventList(DEF_MSG_NOTIFY_AGRICULTURESKILLLIMIT, 10);
			break;

		case CLIENT_NOTIFY_NOMOREAGRICULTURE:		// 0x0BB0
			AddEventList(DEF_MSG_NOTIFY_NOMOREAGRICULTURE, 10);
			break;

		case CLIENT_NOTIFY_CHANGEPLAYMODE:			// 0x0BA9
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			DecriptString(m_cLocation);
			memcpy(m_cLocation, cp, 10);
			EncriptString(m_cLocation);
			cp += 10;

			DecriptString(m_cLocation);
			if (memcmp(m_cLocation, "aresden", 7) == 0) {
				m_bAresden = EncriptBool(TRUE);
				m_bCitizen = EncriptBool(TRUE);
				m_bHunter = EncriptBool(FALSE);
				m_bElvine = EncriptBool(FALSE);
			}
			else if (memcmp(m_cLocation, "arehunter", 9) == 0) {
				m_bAresden = EncriptBool(TRUE);
				m_bCitizen = EncriptBool(TRUE);
				m_bHunter = EncriptBool(TRUE);
				m_bElvine = EncriptBool(FALSE);
			}
			else if (memcmp(m_cLocation, "elvine", 6) == 0) {
				m_bAresden = EncriptBool(FALSE);
				m_bCitizen = EncriptBool(TRUE);
				m_bHunter = EncriptBool(FALSE);
				m_bElvine = EncriptBool(TRUE);
			}
			else if (memcmp(m_cLocation, "elvhunter", 9) == 0) {
				m_bAresden = EncriptBool(FALSE);
				m_bCitizen = EncriptBool(TRUE);
				m_bHunter = EncriptBool(TRUE);
				m_bElvine = EncriptBool(TRUE);
			}
			else {
				m_bAresden = EncriptBool(FALSE); // Bug V3.92 II - > AMP In Aresden
				m_bCitizen = EncriptBool(FALSE);
				m_bHunter = EncriptBool(TRUE);
				m_bElvine = EncriptBool(FALSE);
			}
			EncriptString(m_cLocation);

			AddEventList(DEF_MSG_GAMEMODE_CHANGED, 10);
			break;

			/*case DEF_NOTIFY_CHANGEASSASAIN:
				Assasain = TRUE;
				m_bAresden = FALSE;
				m_bCitizen = FALSE;
				m_bHunter = FALSE;
				m_bElvine  = FALSE;
				break;*/

		case CLIENT_NOTIFY_REQGUILDNAMEANSWER:	 //   0x0BA6
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			sp = (short *)cp;
			sV2 = *sp;
			cp += 2;
			ZeroMemory(cTemp, sizeof(cTemp));
			memcpy(cTemp, cp, 20);
			cp += 20;

			ZeroMemory(m_stGuildName[sV2].cGuildName, sizeof(m_stGuildName[sV2].cGuildName));
			strcpy(m_stGuildName[sV2].cGuildName, cTemp);
			m_stGuildName[sV2].iGuildRank = sV1;
			for (i = 0; i < 20; i++) if (m_stGuildName[sV2].cGuildName[i] == '_') m_stGuildName[sV2].cGuildName[i] = ' ';
			break;

		case CLIENT_NOTIFY_RECALLTIMELEFT: // 0x0BA7
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			if ((int)(sV1 / 20) > 0)
				wsprintf(G_cTxt, NOTIFY_MSG_FORCERECALLTIME1, (int)(sV1 / 20));
			else
				wsprintf(G_cTxt, NOTIFY_MSG_FORCERECALLTIME2);
			AddEventList(G_cTxt, 10);
			break;

		case CLIENT_NOTIFY_GIZONITEMUPGRADELEFT: // 0x0BA4// Item upgrade is possible.
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			m_iGizonItemUpgradeLeft = EncriptInt(*sp);
			cp += 2;

			AddEventList(NOTIFY_MSG_HANDLER_GIZONITEMUPGRADELEFT1, 10);
			break;
		case CLIENT_NOTIFY_UPGRADEHEROCAPE: // hero cape
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			m_pItemList[sV1]->m_cItemType = *cp;
			cp++;
			wp = (WORD *)cp;
			m_pItemList[sV1]->m_wCurLifeSpan = *wp;
			cp += 2;
			sp = (short *)cp;
			m_pItemList[sV1]->m_sSprite = *sp;
			cp += 2;
			sp = (short *)cp;
			m_pItemList[sV1]->m_sSpriteFrame = *sp;
			cp += 2;
			m_pItemList[sV1]->m_cItemColor = *cp;
			cp++;
			//m_pItemList[sV1]->m_sItemSpecEffectValue2 = *cp;
			//cp++;
			//lalomanu
			sp = (short *)cp;
			m_pItemList[sV1]->m_sItemSpecEffectValue2 = *sp;
			cp += 2;

			dwp = (DWORD *)cp;
			m_pItemList[sV1]->m_dwAttribute = *dwp;
			cp += 4;
			ZeroMemory(m_pItemList[sV1]->m_cName, sizeof(m_pItemList[sV1]->m_cName));
			memcpy(m_pItemList[sV1]->m_cName, cp, 20);
			cp += 20;
			if (m_bIsDialogEnabled[34] == TRUE)
			{
				m_stDialogBoxInfo[34].cMode = 3; // succes
			}
			PlaySound('E', 23, 5);
			switch (m_sPlayerType) {
				case 1:
				case 2:
				case 3:
					PlaySound('C', 21, 0);
					break;

				case 4:
				case 5:
				case 6:
					PlaySound('C', 22, 0);
					break;
			}
			break;


		case CLIENT_NOTIFY_GIZONITEMCANGE: // 0x0BA5
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			m_pItemList[sV1]->m_cItemType = *cp;
			cp++;
			wp = (WORD *)cp;
			m_pItemList[sV1]->m_wCurLifeSpan = *wp;
			cp += 2;
			sp = (short *)cp;
			m_pItemList[sV1]->m_sSprite = *sp;
			cp += 2;
			sp = (short *)cp;
			m_pItemList[sV1]->m_sSpriteFrame = *sp;
			cp += 2;
			m_pItemList[sV1]->m_cItemColor = *cp;
			cp++;
			//m_pItemList[sV1]->m_sItemSpecEffectValue2 = *cp;
			//cp++;
			//lalomanu
			sp = (short *)cp;
			m_pItemList[sV1]->m_sItemSpecEffectValue2 = *sp;
			cp += 2;
			dwp = (DWORD *)cp;
			m_pItemList[sV1]->m_dwAttribute = *dwp;
			cp += 4;
			ZeroMemory(m_pItemList[sV1]->m_cName, sizeof(m_pItemList[sV1]->m_cName));
			memcpy(m_pItemList[sV1]->m_cName, cp, 20);
			cp += 20;
			if (m_bIsDialogEnabled[34] == TRUE)
			{
				m_stDialogBoxInfo[34].cMode = 3; // succes
			}
			PlaySound('E', 23, 5);
			switch (m_sPlayerType) {
				case 1:
				case 2:
				case 3:
					PlaySound('C', 21, 0);
					break;

				case 4:
				case 5:
				case 6:
					PlaySound('C', 22, 0);
					break;
			}
			break;


		case CLIENT_NOTIFY_ITEMATTRIBUTECHANGE: // 0x0BA3
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;

			dwTemp = m_pItemList[sV1]->m_dwAttribute;
			dwp = (DWORD *)cp;
			m_pItemList[sV1]->m_dwAttribute = *dwp;
			cp += 4;

			dwp = (DWORD *)cp;
			if (*dwp != 0) m_pItemList[sV1]->m_wCurLifeSpan = (short)*dwp;
			cp += 4;

			dwp = (DWORD *)cp;			
			if (*dwp != 0) m_pItemList[sV1]->m_sItemSpecEffectValue2 = (short)*dwp;
			cp += 4;

			if (dwTemp == m_pItemList[sV1]->m_dwAttribute)
			{
				if (m_bIsDialogEnabled[34] == TRUE)
				{
					m_stDialogBoxInfo[34].cMode = 4;// Failed
				}
				PlaySound('E', 24, 5);
			}
			else
			{
				if (m_bIsDialogEnabled[34] == TRUE)
				{
					m_stDialogBoxInfo[34].cMode = 3; // Success
				}
				PlaySound('E', 23, 5);
				switch (m_sPlayerType) {
					case 1:
					case 2:
					case 3:
						PlaySound('C', 21, 0);
						break;
					case 4:
					case 5:
					case 6:
						PlaySound('C', 22, 0);
						break;
				}
			}
			break;

		case CLIENT_NOTIFY_ITEMATTRIBUTECHANGEANGEL:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			dwTemp = m_pItemList[sV1]->m_dwAttribute;
			dwp = (DWORD *)cp;
			m_pItemList[sV1]->m_dwAttribute = *dwp;
			cp += 4;
			sp = (short *)cp;
			m_pItemList[sV1]->m_sItemSpecEffectValue3 = *sp;
			cp += 2;

			if (m_bIsDialogEnabled[34] == TRUE)
			{
				m_stDialogBoxInfo[34].cMode = 3; // Success
			}
			PlaySound('E', 23, 5);
			switch (m_sPlayerType) {
				case 1:
				case 2:
				case 3:
					PlaySound('C', 21, 0);
					break;
				case 4:
				case 5:
				case 6:
					PlaySound('C', 22, 0);
					break;
			}
			break;


		case CLIENT_NOTIFY_ITEMUPGRADEFAIL:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			if (m_bIsDialogEnabled[34] == FALSE) return;
			PlaySound('E', 24, 5);
			switch (sV1) {
				case 1:
					m_stDialogBoxInfo[34].cMode = 8; // Failed
					break;
				case 2:
					m_stDialogBoxInfo[34].cMode = 9; // Failed
					break;
				case 3:
					m_stDialogBoxInfo[34].cMode = 10; // Failed
					break;
			}
			break;

		case CLIENT_NOTIFY_CANNOTCONSTRUCT:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;

			CannotConstruct(sV1);
			PlaySound('E', 25, 0, 0);
			break;

		case CLIENT_NOTIFY_TCLOC:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			m_iTeleportLocX = EncriptInt(*sp);
			cp += 2;

			sp = (short *)cp;
			m_iTeleportLocY = EncriptInt(*sp);
			cp += 2;

			ZeroMemory(m_cTeleportMapName, sizeof(m_cTeleportMapName));
			memcpy(m_cTeleportMapName, cp, 10);
			cp += 10;

			sp = (short *)cp;
			m_iConstructLocX = EncriptInt(*sp);
			cp += 2;

			sp = (short *)cp;
			m_iConstructLocY = EncriptInt(*sp);
			cp += 2;

			ZeroMemory(m_cConstructMapName, sizeof(m_cConstructMapName));
			memcpy(m_cConstructMapName, cp, 10);
			EncriptString(m_cConstructMapName);
			cp += 10;
			break;

		case CLIENT_NOTIFY_CONSTRUCTIONPOINT:
			unsigned short V1, V2, V3;
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			V1 = *sp;
			cp += 2;

			sp = (short *)cp;
			V2 = *sp;
			cp += 2;

			sp = (short *)cp;
			V3 = *sp;
			cp += 2;

			if (V3 == 0) {
				if ((V1 > DecriptInt(m_iConstructionPoint)) && (V2 > DecriptInt(m_iWarContribution))) {
					wsprintf(G_cTxt, "%s +%d, %s +%d", m_pGameMsgList[13]->m_pMsg, (V1 - DecriptInt(m_iConstructionPoint)), m_pGameMsgList[21]->m_pMsg, (V2 - DecriptInt(m_iWarContribution)));
					SetTopMsg(G_cTxt, 5);
					PlaySound('E', 23, 0, 0);
				}

				if ((V1 > DecriptInt(m_iConstructionPoint)) && (V2 == DecriptInt(m_iWarContribution))) {
					if (DecriptInt(m_iCrusadeDuty) == 3) {
						wsprintf(G_cTxt, "%s +%d", m_pGameMsgList[13]->m_pMsg, V1 - DecriptInt(m_iConstructionPoint));
						SetTopMsg(G_cTxt, 5);
						PlaySound('E', 23, 0, 0);
					}
				}

				if ((V1 == DecriptInt(m_iConstructionPoint)) && (V2 > DecriptInt(m_iWarContribution))) {
					wsprintf(G_cTxt, "%s +%d", m_pGameMsgList[21]->m_pMsg, V2 - DecriptInt(m_iWarContribution));
					SetTopMsg(G_cTxt, 5);
					PlaySound('E', 23, 0, 0);
				}

				if (V1 < DecriptInt(m_iConstructionPoint)) {
					if (DecriptInt(m_iCrusadeDuty) == 3) {
						wsprintf(G_cTxt, "%s -%d", m_pGameMsgList[13]->m_pMsg, DecriptInt(m_iConstructionPoint) - V1);
						SetTopMsg(G_cTxt, 5);
						PlaySound('E', 25, 0, 0);
					}
				}

				if (V2 < DecriptInt(m_iWarContribution)) {
					wsprintf(G_cTxt, "%s -%d", m_pGameMsgList[21]->m_pMsg, DecriptInt(m_iWarContribution) - V2);
					SetTopMsg(G_cTxt, 5);
					PlaySound('E', 24, 0, 0);
				}
			}

			m_iConstructionPoint = EncriptInt(V1);
			m_iWarContribution = EncriptInt(V2);
			break;

		case CLIENT_NOTIFY_NOMORECRUSADESTRUCTURE:
			SetTopMsg(m_pGameMsgList[12]->m_pMsg, 5);
			PlaySound('E', 25, 0, 0);
			break;

		case CLIENT_NOTIFY_GRANDMAGICRESULT:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			wp = (WORD *)cp;
			sV1 = *wp;
			cp += 2;

			wp = (WORD *)cp;
			sV2 = *wp;
			cp += 2;

			wp = (WORD *)cp;
			sV3 = *wp;
			cp += 2;

			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, cp, 10);
			cp += 10;

			wp = (WORD *)cp;
			sV4 = *wp;
			cp += 2;

			wp = (WORD *)cp;
			sV5 = *wp;  //
			cp += 2;

			if (sV5 > 0) {
				wp = (WORD *)cp;
				sV6 = *wp;
				cp += 2;
				sV5--;
			}
			else sV6 = 0;

			if (sV5 > 0) {
				wp = (WORD *)cp;
				sV7 = *wp;
				cp += 2;
				sV5--;
			}
			else sV7 = 0;

			if (sV5 > 0) {
				wp = (WORD *)cp;
				sV8 = *wp;
				cp += 2;
				sV5--;
			}
			else sV8 = 0;

			if (sV5 > 0) {
				wp = (WORD *)cp;
				sV9 = *wp;
				cp += 2;
				sV5--;
			}
			else sV9 = 0;

			GrandMagicResult(cTxt, sV1, sV2, sV3, sV4, sV6, sV7, sV8, sV9);
			break;

		case CLIENT_NOTIFY_METEORSTRIKECOMING:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			wp = (WORD *)cp;
			sV1 = *wp;
			cp += 2;
			MeteorStrikeComing(sV1);
			PlaySound('E', 25, 0, 0);
			break;

		case CLIENT_NOTIFY_METEORSTRIKEHIT:
			SetTopMsg(m_pGameMsgList[17]->m_pMsg, 5);
			//StartMeteorStrikeEffect

			//added resolution
			if (c_reso->IsResolution() == C800x600)
			{
				for (i = 0; i < 36; i++) bAddNewEffect(60, m_sViewPointX + (rand() % 800), m_sViewPointY + (rand() % 600), NULL, NULL, -(rand() % 80));
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				for (i = 0; i < 36; i++) bAddNewEffect(60, m_sViewPointX + (rand() % 1024), m_sViewPointY + (rand() % 768), NULL, NULL, -(rand() % 80));
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				for (i = 0; i < 36; i++) bAddNewEffect(60, m_sViewPointX + (rand() % 640), m_sViewPointY + (rand() % 480), NULL, NULL, -(rand() % 80));
			}

		//	for (i = 0; i < 36; i++) bAddNewEffect(60, m_sViewPointX + (rand() % 640), m_sViewPointY + (rand() % 480), NULL, NULL, -(rand() % 80)); //original
			break;

		case CLIENT_NOTIFY_MAPSTATUSNEXT:
			AddMapStatusInfo(pData, FALSE);
			break;

		case CLIENT_NOTIFY_MAPSTATUSLAST:
			AddMapStatusInfo(pData, TRUE);
			break;

		case CLIENT_NOTIFY_LOCKEDMAP:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;

			ZeroMemory(cTemp, sizeof(cTemp));
			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, cp, 10);
			cp += 10;

			GetOfficialMapName(cTxt, cTemp);
			wsprintf(G_cTxt, NOTIFY_MSG_HANDLER3, sV1, cTemp);
			SetTopMsg(G_cTxt, 10);
			PlaySound('E', 25, 0, 0);
			break;

		case CLIENT_NOTIFY_CRUSADE: // Crusade msg
			ActiveEvent = 6;
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			iV1 = *ip; // Crusademode
			cp += 4;
			ip = (int *)cp;
			iV2 = *ip; // crusade duty
			cp += 4;
			ip = (int *)cp;
			iV3 = *ip;
			cp += 4;
			ip = (int *)cp;
			iV4 = *ip;
			cp += 4;
			if (m_bIsCrusadeMode == FALSE)
			{
				if (iV1 != 0) // begin crusade
				{
					m_bIsCrusadeMode = TRUE;
					m_iCrusadeDuty = EncriptInt(iV2);
					if ((DecriptInt(m_iCrusadeDuty) != 3) && ((DecriptBool(m_bCitizen)) || (Assasain)))
						_RequestMapStatus("middleland", 3);
					if (DecriptInt(m_iCrusadeDuty) != 0)
						EnableDialogBox(33, 2, iV2, NULL);
					else EnableDialogBox(33, 1, NULL, NULL);
					if (!DecriptBool(m_bCitizen) && !Assasain) EnableDialogBox(18, 800, NULL, NULL);
					else if (DecriptBool(m_bAresden)) EnableDialogBox(18, 801, NULL, NULL);
					else if (!DecriptBool(m_bAresden)) EnableDialogBox(18, 802, NULL, NULL);
					if (!DecriptBool(m_bCitizen) && !Assasain) SetTopMsg(NOTIFY_MSG_CRUSADESTART_NONE, 10);
					else SetTopMsg(m_pGameMsgList[9]->m_pMsg, 10);
					PlaySound('E', 25, 0, 0);
				}
				if (iV3 != 0) // Crusade finished, show XP result screen
				{
					CrusadeContributionResult(iV3);
				}
				if (iV4 == -1) // The crusade you played in was finished.
				{
					CrusadeContributionResult(0); // You connect in this crusade, but did not connect after previous one => no XP....
				}
			}
			else
			{
				if (iV1 == 0) // crusade finished show result (1st result: winner)
				{
					m_bIsCrusadeMode = FALSE;
					m_iCrusadeDuty = EncriptInt(0);
					CrusadeWarResult(iV4);
					SetTopMsg(m_pGameMsgList[57]->m_pMsg, 8);
				}
				else
				{
					if (DecriptInt(m_iCrusadeDuty) != iV2)
					{
						m_iCrusadeDuty = EncriptInt(iV2);
						EnableDialogBox(33, 2, iV2, NULL);
						PlaySound('E', 25, 0, 0);
					}
				}
				if (iV4 == -1)
				{
					CrusadeContributionResult(0); // You connect in this crusade, but did not connect after previous one => no XP....
				}
			}
			break;

		case CLIENT_NOTIFY_STATUSCHAR:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			PAABS = *cp;
			cp++;

			MAABS = *cp;
			cp++;

			HPREC = *cp;
			cp++;

			MPREC = *cp;
			cp++;

			MR = *cp;
			cp++;

			DR = *cp;
			cp++;

			PR = *cp;
			cp++;

			SP = *cp;
			cp++;

			//LaloMerien
			sp = (short*)cp;
			DF = *sp;
			cp += 2;

			break;

		case CLIENT_NOTIFY_CHARSTATUS:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			Defense = *sp;
			cp += 2;

			sp = (short *)cp;
			Hitting = *sp;
			cp += 2;

			sp = (short *)cp;
			HitMag = *sp;
			cp += 2;			

			PhysicalDamage = (unsigned char)*cp;
			cp++;

			MagicDamage = (unsigned char)*cp;
			cp++;
			break;

		case CLIENT_NOTIFY_F5DATA:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			//Coins = *ip;
			m_iCoins = *ip;
			cp += 4;

			ip = (int *)cp;
			HourPlaying = *ip;
			cp += 4;

			ip = (int *)cp;
			MobsKilled = *ip;
			cp += 4;

			ip = (int *)cp;
			TotalDeath = *ip;
			cp += 4;

			ip = (int *)cp;
			TotalClientKilled = *ip;
			cp += 4;

			ip = (int *)cp;
			TotalQuestComplete = *ip;
			cp += 4;
			m_cCommandCount--;
			break;

		case CLIENT_NOTIFY_SPECIALABILITYSTATUS:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			sp = (short *)cp;
			sV2 = *sp;
			cp += 2;
			sp = (short *)cp;
			sV3 = *sp;
			cp += 2;
			if (sV1 == 1) // Use SA
			{
				PlaySound('E', 35, 0);
				AddEventList(NOTIFY_MSG_HANDLER4, 10); // "Use special ability!"
				switch (sV2) {
					case 1: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER5, sV3); break;//"You are untouchable for %d seconds!"
					case 2: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER6, sV3); break;//"
					case 3: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER7, sV3); break;//"
					case 4: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER8, sV3); break;//"
					case 5: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER9, sV3); break;//"
					case 50:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER10, sV3); break;//"
					case 51:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER11, sV3); break;//"
					case 52:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER12, sV3); break;//"
					case 55: // Spell effect
						if (sV3 > 90)
							wsprintf(G_cTxt, "You cast a powerfull incantation, you can't use it again before %d minutes.", sV3 / 60);
						else
							wsprintf(G_cTxt, "You cast a powerfull incantation, you can't use it again before %d seconds.", sV3);
						break;
				}
				AddEventList(G_cTxt, 10);
			}
			else if (sV1 == 2) // Finished using
			{
				if (DecriptInt(m_iSpecialAbilityType) != (int)sV2)
				{
					PlaySound('E', 34, 0);
					AddEventList(NOTIFY_MSG_HANDLER13, 10);//"Special ability has been set!"
					if (sV3 >= 60)
					{
						switch (sV2) {
							case 1: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER14, sV3 / 60); AddEventList(G_cTxt, 10); break;//"Ability that decreases enemy's HP by 50%: Can use after %dMin"
							case 2: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER15, sV3 / 60); AddEventList(G_cTxt, 10); break;//"
							case 3: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER16, sV3 / 60); AddEventList(G_cTxt, 10); break;//"
							case 4: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER17, sV3 / 60); AddEventList(G_cTxt, 10); break;//"
							case 5: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER18, sV3 / 60); AddEventList(G_cTxt, 10); break;//"
							case 50:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER19, sV3 / 60); AddEventList(G_cTxt, 10); break;//"
							case 51:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER20, sV3 / 60); AddEventList(G_cTxt, 10); break;//"
							case 52:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER21, sV3 / 60); AddEventList(G_cTxt, 10); break;//"
						}
					}
					else
					{
						switch (sV2) {
							case 1: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER22, sV3); AddEventList(G_cTxt, 10); break;//"
							case 2: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER23, sV3); AddEventList(G_cTxt, 10); break;//"
							case 3: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER24, sV3); AddEventList(G_cTxt, 10); break;//"
							case 4: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER25, sV3); AddEventList(G_cTxt, 10); break;//"
							case 5: wsprintf(G_cTxt, NOTIFY_MSG_HANDLER26, sV3); AddEventList(G_cTxt, 10); break;//"
							case 50:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER27, sV3); AddEventList(G_cTxt, 10); break;//"
							case 51:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER28, sV3); AddEventList(G_cTxt, 10); break;//"
							case 52:wsprintf(G_cTxt, NOTIFY_MSG_HANDLER29, sV3); AddEventList(G_cTxt, 10); break;//""Ability that makes character untouchable: Can use after %dSec"
						}
					}
				}
				m_iSpecialAbilityType = EncriptInt((int)sV2);
				m_dwSpecialAbilitySettingTime = dwTime;
				m_iSpecialAbilityTimeLeftSec = EncriptInt((int)sV3);
			}
			else if (sV1 == 3)  // End of using time
			{
				m_bIsSpecialAbilityEnabled = FALSE;
				m_dwSpecialAbilitySettingTime = dwTime;
				if (sV3 == 0)
				{
					m_iSpecialAbilityTimeLeftSec = EncriptInt(1200);
					AddEventList(NOTIFY_MSG_HANDLER30, 10);//"Special ability has run out! Will be available in 20 minutes."
				}
				else
				{
					m_iSpecialAbilityTimeLeftSec = EncriptInt((int)sV3);
					if (sV3 > 90)
						wsprintf(G_cTxt, "Special ability has run out! Will be available in %d minutes.", sV3 / 60);
					else wsprintf(G_cTxt, "Special ability has run out! Will be available in %d seconds.", sV3);
					AddEventList(G_cTxt, 10);
				}
			}
			else if (sV1 == 4) // Unequiped the SA item
			{
				AddEventList(NOTIFY_MSG_HANDLER31, 10);//"Special ability has been released."
				m_iSpecialAbilityType = EncriptInt(0);
			}
			else if (sV1 == 5) // Angel
			{
				PlaySound('E', 52, 0); // Angel
			}
			break;

		case CLIENT_NOTIFY_SPECIALABILITYENABLED:
			if (m_bIsSpecialAbilityEnabled == FALSE) {
				PlaySound('E', 30, 5);
				AddEventList(NOTIFY_MSG_HANDLER32, 10);//"
			}
			m_bIsSpecialAbilityEnabled = TRUE;
			break;

		case CLIENT_NOTIFY_ENERGYSPHEREGOALIN:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, cp, 10);

			if (sV1 == 1)
				wsprintf(G_cTxt, "Gol Aresden! - Lo Realizo: %s!", cTxt);
			else if (sV1 == 2)
				wsprintf(G_cTxt, "Gol Elvine! - Lo Realizo: %s!", cTxt);

			SetTopMsg(G_cTxt, 5);
			break;

		case CLIENT_NOTIFY_ENERGYSPHERECREATED:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			GolAresden = *sp;
			cp += 2;
			sp = (short *)cp;
			GolElvine = *sp;
			cp += 2;
			break;

		case CLIENT_NOTIFY_QUERY_JOINPARTY:
			EnableDialogBox(32, NULL, NULL, NULL);
			m_stDialogBoxInfo[32].cMode = 1;
			ZeroMemory(m_stDialogBoxInfo[32].cStr, sizeof(m_stDialogBoxInfo[32].cStr));
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			strcpy(m_stDialogBoxInfo[32].cStr, cp);
			break;

			/*case DEF_NOTIFY_RESPONSE_CREATENEWPARTY:
				cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
				sp = (short *)cp;

				if ((BOOL)*sp == TRUE)
				{	m_stDialogBoxInfo[32].cMode = 2;
				}else
				{	m_stDialogBoxInfo[32].cMode = 3;
				}
				break;*/

		case CLIENT_NOTIFY_DAMAGEMOVE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			m_sDamageMove = *sp;
			cp += 2;
			ip = (int *)cp;
			m_iDamageMoveAmount = EncriptInt(*ip);
			cp += 4;
			break;

		case CLIENT_NOTIFY_OBSERVERMODE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			if (*sp == 1)
			{
				AddEventList(NOTIFY_MSG_HANDLER40);//"Observer Mode On. Press 'SHIFT + ESC' to Log Out..."
				m_bIsObserverMode = EncriptBool(TRUE);
				m_dwObserverCamTime = timeGetTime();
				char cName[12];
				ZeroMemory(cName, sizeof(cName));

				memcpy(cName, m_cPlayerName, 10);

				m_pMapData->bSetOwner(m_sPlayerObjectID, -1, -1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, cName, NULL, NULL, NULL, NULL, NULL, NULL, MyAdminLevel);
			}
			else
			{
				AddEventList(NOTIFY_MSG_HANDLER41);//"Observer Mode Off"
				m_bIsObserverMode = EncriptBool(FALSE);
				m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir, m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor, m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName, DEF_OBJECTSTOP, NULL, NULL, NULL, NULL, NULL, MyAdminLevel);
			}
			break;

		case CLIENT_NOTIFY_BUILDITEMSUCCESS:
			DisableDialogBox(26);
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;

			sp = (short *)cp;
			sV2 = *sp;
			cp += 2;

			if (sV1 < 10000)
			{
				EnableDialogBox(26, 6, 1, sV1, NULL);
				m_stDialogBoxInfo[26].sV1 = sV2;
			}
			else
			{
				EnableDialogBox(26, 6, 1, -1 * (sV1 - 10000), NULL);
				m_stDialogBoxInfo[26].sV1 = sV2;
			}
			AddEventList(NOTIFY_MSG_HANDLER42, 10);
			PlaySound('E', 23, 5);
			switch (m_sPlayerType) {
				case 1:
				case 2:
				case 3:
					PlaySound('C', 21, 0);
					break;

				case 4:
				case 5:
				case 6:
					PlaySound('C', 22, 0);
					break;
			}
			break;

		case CLIENT_NOTIFY_BUILDITEMFAIL:
			DisableDialogBox(26);
			EnableDialogBox(26, 6, 0, NULL);
			AddEventList(NOTIFY_MSG_HANDLER43, 10);
			PlaySound('E', 24, 5);
			break;

		case CLIENT_NOTIFY_QUESTREWARD:
			NotifyMsg_QuestReward(pData);
			break;

		case CLIENT_NOTIFY_QUESTCOMPLETED:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;

			m_stQuest[sV1].sCurrentCount = 0;
			DisableDialogBox(28);
			EnableDialogBox(28, 1, NULL, NULL);
			switch (m_sPlayerType) {
				case 1:
				case 2:
				case 3:	PlaySound('C', 21, 0); break;
				case 4:
				case 5:
				case 6:	PlaySound('C', 22, 0); break;
			}
			PlaySound('E', 23, 0);
			AddEventList(NOTIFY_MSG_HANDLER44, 10);
			break;

		case CLIENT_NOTIFY_QUESTABORTED:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;

			m_stQuest[sV1].sWho = NULL;
			m_stQuest[sV1].sQuestType = NULL;
			m_stQuest[sV1].sContribution = NULL;
			m_stQuest[sV1].sTargetType = NULL;
			m_stQuest[sV1].sTargetCount = NULL;
			m_stQuest[sV1].sX = NULL;
			m_stQuest[sV1].sY = NULL;
			m_stQuest[sV1].sRange = NULL;
			m_stQuest[sV1].sCurrentCount = NULL;
			//m_stQuest[sV1].bIsQuestCompleted = FALSE;
			ZeroMemory(m_stQuest[sV1].cTargetName, sizeof(m_stQuest[sV1].cTargetName));
			DisableDialogBox(28);
			EnableDialogBox(28, 5, NULL, NULL);
			break;

		case CLIENT_NOTIFY_QUESTCONTENTS:
			NotifyMsg_QuestContents(pData);
			break;

		case CLIENT_NOTIFY_ITEMCOLORCHANGE:
			NotifyMsg_ItemColorChange(pData);
			break;

		case CLIENT_NOTIFY_DROPITEMFIN_COUNTCHANGED:
			NotifyMsg_DropItemFin_CountChanged(pData);
			break;

		case CLIENT_NOTIFY_CANNOTGIVEITEM:
			NotifyMsg_CannotGiveItem(pData);
			break;

		case CLIENT_NOTIFY_GIVEITEMFIN_COUNTCHANGED:
			NotifyMsg_GiveItemFin_CountChanged(pData);
			break;

		case CLIENT_NOTIFY_EXCHANGEITEMCOMPLETE:
			AddEventList(NOTIFYMSG_EXCHANGEITEM_COMPLETE1, 10);
			DisableDialogBox(27);
			//Snoopy: MultiTrade
			DisableDialogBox(41);
			PlaySound('E', 23, 5);
			ConfirmExchange = FALSE;
			MeConfirmed = FALSE;
			break;

		case CLIENT_NOTIFY_CANCELEXCHANGEITEM:
			PlaySound('E', 24, 5);
			AddEventList(NOTIFYMSG_CANCEL_EXCHANGEITEM1, 10);
			AddEventList(NOTIFYMSG_CANCEL_EXCHANGEITEM2, 10);
			//Snoopy: MultiTrade
			DisableDialogBox(41);
			DisableDialogBox(27);
			ConfirmExchange = FALSE;
			MeConfirmed = FALSE;
			break;

		case CLIENT_NOTIFY_SETEXCHANGEITEM:
			NotifyMsg_SetExchangeItem(pData);
			break;

		case CLIENT_NOTIFY_OPENEXCHANGEWINDOW:
			NotifyMsg_OpenExchageWindow(pData);
			break;

		case CLIENT_NOTIFY_NOTFLAGSPOT:
			AddEventList(NOTIFY_MSG_HANDLER45, 10);
			break;

			/*case DEF_NOTIFY_ITEMPOSLIST:
				cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

				for (i = 0; i < DEF_MAXITEMS; i++)
				{
					if (m_pItemList[i] != NULL)
					{
						sp = (short *)cp;
						sX = *sp;
						cp += 2;
						sp = (short *)cp;
						sY = *sp;
						cp += 2;

						if (sY < -10) sY = -10;
						if (sX < 0)   sX = 0;
						if (sX > 170) sX = 170;
						if (sY > 95)  sY = 95;

						m_pItemList[i]->m_sX = sX;
						m_pItemList[i]->m_sY = sY;
					}
				}
				break;*/

		case CLIENT_NOTIFY_DOWNSKILLINDEXSET:
			NotifyMsg_DownSkillIndexSet(pData);
			break;

		case CLIENT_NOTIFY_ADMINIFO:
			NotifyMsg_AdminInfo(pData);
			break;

		case CLIENT_NOTIFY_NPCTALK:
			NpcTalkHandler(pData);
			break;

		case CLIENT_NOTIFY_PORTIONSUCCESS:
			AddEventList(NOTIFY_MSG_HANDLER46, 10);
			break;

		case CLIENT_NOTIFY_PORTIONFAIL:
			AddEventList(NOTIFY_MSG_HANDLER47, 10);
			break;

		case CLIENT_NOTIFY_LOWPORTIONSKILL:
			AddEventList(NOTIFY_MSG_HANDLER48, 10);
			break;

		case CLIENT_NOTIFY_NOMATCHINGPORTION:
			AddEventList(NOTIFY_MSG_HANDLER49, 10);
			break;

		case CLIENT_NOTIFY_SUPERATTACKLEFT:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			m_iSuperAttackLeft = (int)*ip;
			break;

		case CLIENT_NOTIFY_SAFEATTACKMODE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
				case 1:
					if (!DecriptBool(m_bIsSafeAttackMode)) AddEventList(NOTIFY_MSG_HANDLER50, 10);//"
					m_bIsSafeAttackMode = EncriptBool(TRUE);
					break;
				case 0:
					if (DecriptBool(m_bIsSafeAttackMode)) AddEventList(NOTIFY_MSG_HANDLER51, 10);//"
					m_bIsSafeAttackMode = EncriptBool(FALSE);
					break;
			}
			break;

		case CLIENT_NOTIFY_STRINGMSG:
			ZeroMemory(cTemp, sizeof(cTemp));
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			strcpy(cTemp, cp);
			AddEventList(cTemp);
			break;

		case CLIENT_NOTIFY_REWARDGOLD:
			dwp = (DWORD *)(pData + DEF_INDEX2_MSGTYPE + 2);
			m_iRewardGold = EncriptInt(*dwp);
			break;

			/*case DEF_NOTIFY_SERVERSHUTDOWN:
				cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
				if (m_bIsDialogEnabled[25] == FALSE)
					 EnableDialogBox(25, *cp, NULL, NULL);
				else m_stDialogBoxInfo[25].cMode = *cp;
				PlaySound('E', 27, NULL);
				break;*/

		case CLIENT_NOTIFY_GLOBALATTACKMODE:
			NotifyMsg_GlobalAttackMode(pData);
			break;

		case CLIENT_NOTIFY_WHETHERCHANGE:
			NotifyMsg_WhetherChange(pData);
			break;

		case CLIENT_NOTIFY_FISHCANCELED:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			wp = (WORD *)cp;
			switch (*wp) {
				case NULL:
					AddEventList(NOTIFY_MSG_HANDLER52, 10);
					DisableDialogBox(24);
					break;

				case 1:
					AddEventList(NOTIFY_MSG_HANDLER53, 10);
					DisableDialogBox(24);
					break;

				case 2:
					AddEventList(NOTIFY_MSG_HANDLER54, 10);
					DisableDialogBox(24);
					break;
			}
			break;

		case CLIENT_NOTIFY_FISHSUCCESS:
			AddEventList(NOTIFY_MSG_HANDLER55, 10);
			PlaySound('E', 23, 5);
			PlaySound('E', 17, 5);
			switch (m_sPlayerType) {
				case 1:
				case 2:
				case 3:
					PlaySound('C', 21, 0);
					break;

				case 4:
				case 5:
				case 6:
					PlaySound('C', 22, 0);
					break;
			}
			break;

		case CLIENT_NOTIFY_FISHFAIL:
			AddEventList(NOTIFY_MSG_HANDLER56, 10);
			PlaySound('E', 24, 5);
			break;

		case CLIENT_NOTIFY_FISHCHANCE:
			NotifyMsg_FishChance(pData);
			break;

		case CLIENT_NOTIFY_EVENTFISHMODE:
			NotifyMsg_EventFishMode(pData);
			break;

		case CLIENT_NOTIFY_NOTICEMSG:
			NotifyMsg_NoticeMsg(pData);
			break;

		case CLIENT_NOTIFY_RATINGPLAYER:
			NotifyMsg_RatingPlayer(pData);
			break;

		case CLIENT_NOTIFY_CANNOTRATING:
			NotifyMsg_CannotRating(pData);
			break;

		case CLIENT_NOTIFY_ADMINUSERLEVELLOW:
			AddEventList(NOTIFY_MSG_HANDLER58, 10);
			break;

		case CLIENT_NOTIFY_NOGUILDMASTERLEVEL:
			AddEventList(NOTIFY_MSG_HANDLER59, 10);
			break;

		case CLIENT_NOTIFY_SUCCESSBANGUILDMAN:
			AddEventList(NOTIFY_MSG_HANDLER60, 10);
			break;

		case CLIENT_NOTIFY_CANNOTBANGUILDMAN:
			AddEventList(NOTIFY_MSG_HANDLER61, 10);
			break;

		case CLIENT_NOTIFY_PLAYERSHUTUP:
			NotifyMsg_PlayerShutUp(pData);
			break;

		case CLIENT_NOTIFY_TIMECHANGE:
			NotifyMsg_TimeChange(pData);
			break;

		case CLIENT_NOTIFY_TOBERECALLED:
			AddEventList(NOTIFY_MSG_HANDLER62, 10);
			break;

		case CLIENT_NOTIFY_HUNGER:
			NotifyMsg_Hunger(pData);
			break;

		case CLIENT_NOTIFY_PLAYERPROFILE:
			NotifyMsg_PlayerProfile(pData);
			break;

		case CLIENT_NOTIFY_WHISPERMODEON:
			NotifyMsg_WhisperMode(TRUE, pData);
			break;

		case CLIENT_NOTIFY_WHISPERMODEOFF:
			NotifyMsg_WhisperMode(FALSE, pData);
			break;

		case CLIENT_NOTIFY_PLAYERONGAME:
			NotifyMsg_PlayerStatus(TRUE, pData);
			break;

		case CLIENT_NOTIFY_PLAYERNOTONGAME:
			NotifyMsg_PlayerStatus(FALSE, pData);
			break;

			/*case DEF_NOTIFY_CHARISMA:
				NotifyMsg_Charisma(pData);
				break;*/

		case CLIENT_NOTIFY_ITEMSOLD:
			DisableDialogBox(23);
			break;

		case CLIENT_NOTIFY_ITEMREPAIRED:
			DisableDialogBox(23);
			NotifyMsg_ItemRepaired(pData);
			break;

		case CLIENT_NOTIFY_CANNOTREPAIRITEM:
			NotifyMsg_CannotRepairItem(pData);
			break;

		case CLIENT_NOTIFY_CANNOTSELLITEM:
			NotifyMsg_CannotSellItem(pData);
			break;

		case CLIENT_NOTIFY_REPAIRITEMPRICE:
			NotifyMsg_RepairItemPrice(pData);
			break;

		case CLIENT_NOTIFY_SELLITEMPRICE:
			NotifyMsg_SellItemPrice(pData);
			break;

			/*case DEF_NOTIFY_SHOWMAP:
				NotifyMsg_ShowMap(pData);
				break;*/

		case CLIENT_NOTIFY_SKILLUSINGEND:
			NotifyMsg_SkillUsingEnd(pData);
			break;

		case CLIENT_RESPONSE_TOTALUSERS:
			NotifyMsg_TotalUsers(pData);
			break;

		case CLIENT_NOTIFY_MAGICEFFECTOFF:
			NotifyMsg_MagicEffectOff(pData);
			break;

		case CLIENT_NOTIFY_MAGICEFFECTON:
			NotifyMsg_MagicEffectOn(pData);
			break;

		case CLIENT_NOTIFY_CANNOTITEMTOBANK:
			AddEventList(NOTIFY_MSG_HANDLER63, 10);
			break;

		case CLIENT_NOTIFY_SERVERCHANGE:
			NotifyMsg_ServerChange(pData);
			break;

		case CLIENT_NOTIFY_SKILL:
			NotifyMsg_Skill(pData);
			break;

		case CLIENT_NOTIFY_SETITEMCOUNT:
			NotifyMsg_SetItemCount(pData);
			break;

		case CLIENT_NOTIFY_ITEMDEPLETED_ERASEITEM:
			NotifyMsg_ItemDepleted_EraseItem(pData);
			break;

		case CLIENT_NOTIFY_DROPITEMFIN_ERASEITEM:
			NotifyMsg_DropItemFin_EraseItem(pData);
			break;

		case CLIENT_NOTIFY_GIVEITEMFIN_ERASEITEM:
			NotifyMsg_GiveItemFin_EraseItem(pData);
			break;

		case CLIENT_NOTIFY_ENEMYKILLREWARD:
			NotifyMsg_EnemyKillReward(pData);
			break;

		case CLIENT_NOTIFY_PKCAPTURED:
			NotifyMsg_PKcaptured(pData);
			break;

		case CLIENT_NOTIFY_PKPENALTY:
			NotifyMsg_PKpenalty(pData);
			break;

		case CLIENT_NOTIFY_ITEMTOBANK:
			NotifyMsg_ItemToBank(pData);
			break;

		case CLIENT_NOTIFY_TRAVELERLIMITEDLEVEL:
			AddEventList(NOTIFY_MSG_HANDLER64, 10);
			break;

			/*case DEF_NOTIFY_LIMITEDLEVEL:
				AddEventList(NOTIFYMSG_LIMITED_LEVEL1, 10);
				break;*/

		case CLIENT_NOTIFY_ITEMLIFESPANEND:
			NotifyMsg_ItemLifeSpanEnd(pData);
			break;

		case CLIENT_NOTIFY_ITEMRELEASED:
			NotifyMsg_ItemReleased(pData);
			break;

		case CLIENT_NOTIFY_ITEMOBTAINED:
			NotifyMsg_ItemObtained(pData);
			break;

		case CLIENT_NOTIFY_ITEMPURCHASED:
			NotifyMsg_ItemPurchased(pData);
			break;

		case CLIENT_RESPONSE_JOINGUILD:
			NotifyMsg_QueryJoinGuildPermission(pData);
			break;

		case CLIENT_RESPONSE_DISMISSGUILD:
			NotifyMsg_QueryDismissGuildPermission(pData);
			break;

		case CLIENT_COMMON_JOINGUILDAPPROVE:
			NotifyMsg_JoinGuildApprove(pData);
			break;

		case CLIENT_COMMON_JOINGUILDREJECT:
			NotifyMsg_JoinGuildReject(pData);
			break;

		case CLIENT_COMMON_DISMISSGUILDAPPROVE:
			NotifyMsg_DismissGuildApprove(pData);
			break;

		case CLIENT_COMMON_DISMISSGUILDREJECT:
			NotifyMsg_DismissGuildReject(pData);
			break;

		case CLIENT_NOTIFY_CANNOTCARRYMOREITEM:
			AddEventList(NOTIFY_MSG_HANDLER65, 10);//"
			AddEventList(NOTIFY_MSG_HANDLER66, 10);//"
			// Bank dialog Box
			m_stDialogBoxInfo[14].cMode = TempPage;
			break;

		case CLIENT_NOTIFY_NOTENOUGHGOLD:
			DisableDialogBox(23);
			AddEventList(NOTIFY_MSG_HANDLER67, 10);//"Gold
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			if (*cp >= 0) {
				m_bIsItemDisabled[*cp] = FALSE;
			}
			break;

		case CLIENT_NOTIFY_NOTENOUGHGOLD2:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp)
			{
				case 0: AddEventList("Not enough Enemy Kills.", 10); break;
				case 1: AddEventList("Not enough Contributions.", 10); break;
				case 2: AddEventList("Not enough Coins.", 10); break;
				case 3:	AddEventList("Not enough Pks.", 10); break;
			}
			break;

		case CLIENT_NOTIFY_HP:
			NotifyMsg_HP(pData);
			break;

		case CLIENT_NOTIFY_MP:
			NotifyMsg_MP(pData);
			break;

		case CLIENT_NOTIFY_SP:
			NotifyMsg_SP(pData);
			break;

		case CLIENT_NOTIFY_KILLED:
			NotifyMsg_Killed(pData);
			break;

		case CLIENT_NOTIFY_EXP:
			NotifyMsg_Exp(pData);
			break;

		case CLIENT_RESPONSE_GUILDDISBANDED:
			NotifyMsg_GuildDisbanded(pData);
			break;

			/*case DEF_NOTIFY_CANNOTJOINMOREGUILDSMAN:
				NotifyMsg_CannotJoinMoreGuildsMan(pData);
				break;*/

		case CLIENT_RESPONSE_NEWGUILDSMAN:
			NotifyMsg_NewGuildsMan(pData);
			break;

		case CLIENT_RESPONSE_DISMISSGUILDSMAN:
			NotifyMsg_DismissGuildsMan(pData);
			break;

		case CLIENT_NOTIFY_MAGICSTUDYSUCCESS:
			NotifyMsg_MagicStudySuccess(pData);
			break;

		case CLIENT_NOTIFY_MAGICSTUDYFAIL:
			NotifyMsg_MagicStudyFail(pData);
			break;

		case CLIENT_NOTIFY_SKILLTRAINSUCCESS:
			NotifyMsg_SkillTrainSuccess(pData);
			break;

		case CLIENT_NOTIFY_FORCEDISCONN:
			NotifyMsg_ForceDisconn(pData);
			break;

		case CLIENT_NOTIFY_FIGHTZONERESERVE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
				case -5:
					AddEventList(NOTIFY_MSG_HANDLER68, 10);
					break;
				case -4:
					AddEventList(NOTIFY_MSG_HANDLER69, 10);
					break;
				case -3:
					AddEventList(NOTIFY_MSG_HANDLER70, 10);
					break;
				case -2:
					m_iFightzoneNumber = EncriptInt(0);
					AddEventList(NOTIFY_MSG_HANDLER71, 10);
					break;
				case -1:
					m_iFightzoneNumber = EncriptInt(DecriptInt(m_iFightzoneNumber) * -1);
					AddEventList(NOTIFY_MSG_HANDLER72, 10);
					break;
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
					wsprintf(cTxt, NOTIFY_MSG_HANDLER73, *cp);//"
					AddEventList(cTxt, 10);
					break;
			}
			break;

		case CLIENT_NOTIFY_EVENTDATA:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			int p;
			p = *cp;
			cp++;

			sp = (short *)cp;
			AresdenWin[p + 1] = *sp;
			cp += 2;

			sp = (short *)cp;
			ElvineWin[p + 1] = *sp;
			cp += 2;

			sp = (short *)cp;
			Draw[p + 1] = *sp;
			cp += 2;

			LastWin[p + 1] = *cp;
			cp++;
			break;

		case CLIENT_NOTIFY_PARTY:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			sV1 = *sp;
			cp += 2;
			sp = (short *)cp;
			sV2 = *sp;
			cp += 2;
			sp = (short *)cp;
			sV3 = *sp;
			cp += 2;
			switch (sV1) {
				case 1: //
					switch (sV2) {
						case 0:
							EnableDialogBox(32, NULL, NULL, NULL);
							m_stDialogBoxInfo[32].cMode = 9;
							break;

						case 1:
							m_iPartyStatus = EncriptInt(1);
							EnableDialogBox(32, NULL, NULL, NULL);
							m_stDialogBoxInfo[32].cMode = 8;
							for (i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
								ZeroMemory(m_stPartyMemberNameList[i].cName, sizeof(m_stPartyMemberNameList[i].cName));
								DecriptString(m_cMCName);
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_JOINPARTY, NULL, 2, NULL, NULL, m_cMCName);
								EncriptString(m_cMCName);
							}
							break;
					}
					break;

				case 2: // Party Deleted or Member Removed
					m_iPartyStatus = EncriptInt(0);
					EnableDialogBox(32, NULL, NULL, NULL);
					m_stDialogBoxInfo[32].cMode = 10;
					for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
						ZeroMemory(m_stPartyMemberNameList[i].cName, sizeof(m_stPartyMemberNameList[i].cName));
					break;

				case 4:
					ZeroMemory(cTxt, sizeof(cTxt));
					memcpy(cTxt, cp, 10);
					cp += 10;

					switch (sV2) {
						case 0: //
							EnableDialogBox(32, NULL, NULL, NULL);
							m_stDialogBoxInfo[32].cMode = 9;
							break;

						case 1: //
						//	DecriptString(m_cPlayerName);
							if (strcmp(cTxt, m_cPlayerName) == 0) {
								m_iPartyStatus = EncriptInt(2);
								EnableDialogBox(32, NULL, NULL, NULL);
								m_stDialogBoxInfo[32].cMode = 8;
							}
							else {
								wsprintf(G_cTxt, NOTIFY_MSG_HANDLER1, cTxt);
								AddEventList(G_cTxt, 10);
							}
						//	EncriptString(m_cPlayerName);

							/*for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
							if (strlen(m_stPartyMemberNameList[i].cName) == 0) {
								ZeroMemory(m_stPartyMemberNameList[sV3].cName, sizeof(m_stPartyMemberNameList[sV3].cName));
								memcpy(m_stPartyMemberNameList[sV3].cName, cTxt, 10);
								goto NMH_LOOPBREAK1;
							}
			NMH_LOOPBREAK1:;*/
							break;

						case 2: //
							break;
					}
					break;

				case 5: //
					for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
						ZeroMemory(m_stPartyMemberNameList[i].cName, sizeof(m_stPartyMemberNameList[i].cName));

					for (i = 1; i <= sV3; i++) {
						ZeroMemory(m_stPartyMemberNameList[i - 1].cName, sizeof(m_stPartyMemberNameList[i - 1].cName));
						memcpy(m_stPartyMemberNameList[i - 1].cName, cp, 10);
						cp += 11;
					}
					break;

				case 6:
					ZeroMemory(cTxt, sizeof(cTxt));
					memcpy(cTxt, cp, 10);
					cp += 10;

					switch (sV2) {
						case 0: //
							EnableDialogBox(32, NULL, NULL, NULL);
							m_stDialogBoxInfo[32].cMode = 7;
							break;

						case 1: //
					//		DecriptString(m_cPlayerName);
							if (strcmp(cTxt, m_cPlayerName) == 0) {
								m_iPartyStatus = EncriptInt(0);
								EnableDialogBox(32, NULL, NULL, NULL);
								m_stDialogBoxInfo[32].cMode = 6;
							}
							else {
								wsprintf(G_cTxt, NOTIFY_MSG_HANDLER2, cTxt);
								AddEventList(G_cTxt, 10);
							}
					//		EncriptString(m_cPlayerName);
							break;
					}
					break;

				case 7: //
					EnableDialogBox(32, NULL, NULL, NULL);
					m_stDialogBoxInfo[32].cMode = 9;
					break;

				case 8: //
					for (i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
						ZeroMemory(m_stPartyMemberNameList[i].cName, sizeof(m_stPartyMemberNameList[i].cName));
						PartyStruct[i].iParty_sX = NULL;
						PartyStruct[i].iParty_sY = NULL;
						ZeroMemory(PartyStruct[i].PartyMapName, sizeof(PartyStruct[i].PartyMapName));
					}
					break;

				default:
					sp = (short *)cp;
					sV4 = *sp;
					cp += 2;
					break;

			}
			break;

			/*case DEF_NOTIFY_FURYDAY:
				SetTopMsg(NOTIFY_MSG_OPENFURYDAY, 10);
				FuryDayMode = TRUE;
				break;

			case DEF_NOTIFY_ENDFURYDAY:
				SetTopMsg(NOTIFY_MSG_CLOSEFURYDAY, 10);
				FuryDayMode = FALSE;
				break;*/

		case CLIENT_NOTIFY_OPENPORTALS:
			ActiveEvent = 1;
			SetTopMsg("Se han abierto los teleports para el evento All Vs All!", 10);
			AllVsAll = TRUE;
			break;

		case CLIENT_NOTIFY_INITALLVSALL:
			SetTopMsg("Evento all vs all, ha comenzado! - Los teleports se han cerrado!", 10);
			break;

		case CLIENT_NOTIFY_ALLEKSON:
			ActiveEvent = 15;
			SetTopMsg("All Eks Event - Start Now!- Teleport in City Hall", 10);
			AllEks = TRUE;
			break;

		case CLIENT_NOTIFY_ALLEKSOFF:
			ActiveEvent = 0;
			SetTopMsg("All Eks Event - Finished! - Teleports closed!", 10);
			AllEks = FALSE;
			break;

		case CLIENT_NOTIFY_ALLDKEKSON:
			ActiveEvent = 16;
			SetTopMsg("All DK Eks Event - Start Now!- Teleport in City Hall", 10);
			AllDkEks = TRUE;
			break;

		case CLIENT_NOTIFY_ALLDKEKSOFF:
			ActiveEvent = 0;
			SetTopMsg("All DK Eks Event - Finished! - Teleports closed!", 10);
			AllDkEks = FALSE;
			break;

		case CLIENT_NOTIFY_ENDALLVSALL:
			ActiveEvent = 0;
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, cp, 10);
			cp += 10;
			wsprintf(G_cTxt, "Evento all vs all, ha terminado! - Gano: %s", cTxt);
			SetTopMsg(G_cTxt, 10);
			AllVsAll = FALSE;
			break;

		case CLIENT_NOTIFY_PINGPLAYERS:
			break;

			//Capture The Flag
		case CLIENT_NOTIFY_CAPTURETHEFLAG:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
				case 0:
					CaptureTheFlagMode = FALSE;
					ActiveEvent = 0;
					SetTopMsg("Capture The Flag Event ended in a tie.", 10);
					break;
				case 1:
					CaptureTheFlagMode = TRUE;
					ActiveEvent = 4;
					SetTopMsg("Capture The Flag Event has started!", 10);
					break;
				case 2:
					SetTopMsg("Aresden Captured Elvine Flag!", 10);
					break;
				case 3:
					SetTopMsg("Elvine Captured Aresden Flag!", 10);
					break;
				case 4:
					SetTopMsg("Elvine Flag Back to Base!", 10);
					break;
				case 5:
					SetTopMsg("Aresden Flag Back to Base!", 10);
					break;
				case 6:
					SetTopMsg("Elvine wins this Round!", 10);
					break;
				case 7:
					SetTopMsg("Aresden wins this Round!", 10);
					break;
				case 8:
					CaptureTheFlagMode = FALSE;
					ActiveEvent = 0;
					SetTopMsg("Elvine wins Capture The Flag Event!", 10);
					break;
				case 9:
					CaptureTheFlagMode = FALSE;
					ActiveEvent = 0;
					SetTopMsg("Aresden wins Capture The Flag Event!", 10);
					break;
				default:
					break;
			}
			cp++;
			break;

			//ZeroEoyPnk - Added
		case CLIENT_NOTIFY_FLAGCOUNTER:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			short ElvineStatusFlag, AresdenStatusFlag;

			AresdenFlags = *cp;
			cp++;

			ElvineFlags = *cp;
			cp++;

			ElvineStatusFlag = *cp;
			cp++;

			AresdenStatusFlag = *cp;
			cp++;

			if (ElvineStatusFlag == 1) ElvineFlagStatus = TRUE;
			else ElvineFlagStatus = FALSE;

			if (AresdenStatusFlag == 1) AresdenFlagStatus = TRUE;
			else AresdenFlagStatus = FALSE;
			break;

		case CLIENT_NOTIFY_RUSH:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			switch (*cp)
			{
				case 1:
					ActiveEvent = 0;
					SetTopMsg(NOTIFY_MSG_RUSHNETFINISH1, 10);
					break;
				case 2:
					ActiveEvent = 0;
					SetTopMsg(NOTIFY_MSG_RUSHNETFINISH2, 10);
					break;
				case 3:
					SetTopMsg(NOTIFY_MSG_RUSHNETNOSTRUCTURE1, 10);
					break;
				case 4:
					SetTopMsg(NOTIFY_MSG_RUSHNETNOSTRUCTURE2, 10);
					break;
				case 10:
					ActiveEvent = 2;
					SetTopMsg(NOTIFY_MSG_RUSHNETINIT, 10);
					break;
				default:
					ActiveEvent = 0;
					SetTopMsg(NOTIFY_MSG_RUSHNETFINISH3, 10);
					break;

			}
			cp++;
			break;

		case CLIENT_SEND_HPRELIQUIA:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			m_iHpReliquiaAresden = EncriptInt(*ip);
			cp += 4;

			ip = (int *)cp;
			m_iHpReliquiaElvine = EncriptInt(*ip);
			cp += 4;
			break;

		case CLIENT_NOTIFY_STRUCTURES:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			m_iTowerAresden = *cp;
			cp++;

			m_iTowerElvine = *cp;
			cp++;
			break;

		case CLIENT_NOTIFY_TOWERDEFENCE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			switch (*cp)
			{
				case 1:
					ActiveEvent = 0;
					SetTopMsg(NOTIFY_MSG_TOWERDFINISH2, 10);
					break;
				case 2:
					ActiveEvent = 0;
					SetTopMsg(NOTIFY_MSG_TOWERDFINISH1, 10);
					break;
				case 3:
					SetTopMsg(NOTIFY_MSG_TOWERDNOSTRUCTURE1, 10);
					break;
				case 4:
					SetTopMsg(NOTIFY_MSG_TOWERDNOSTRUCTURE2, 10);
					break;
				case 10:
					ActiveEvent = 3;
					SetTopMsg(NOTIFY_MSG_TOWERDINIT, 10);
					break;
				default:
					ActiveEvent = 0;
					SetTopMsg(NOTIFY_MSG_TOWERDFINISH3, 10);
					break;
			}
			cp++;
			break;

		case CLIENT_NOTIFY_TD_STRUCTURES:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			m_iTowerDefenseAresden = *cp;
			cp++;

			m_iTowerDefenseElvine = *cp;
			cp++;
			break;

		case CLIENT_RESPONSE_TOPMEMORY_EK:
			ChargeTopList(pData);
			m_cCommandCount--;
			if (m_cCommandCount <= 0) m_cCommandCount = 0;
			break;

		case CLIENT_REPONSE_PLAYERREP:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			m_iReputation = EncriptInt(*sp);
			cp += 2;
			break;

			//WorldWar - LaloRamos	
		case CLIENT_NOTIFY_WWEND:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
				case 0:
					SetTopMsg("World War Finished! - Result: Draw.", 10);
					break;
				case 1:
					SetTopMsg("World War Finished! - Result: Aresden Win.", 10);
					break;
				case 2:
					SetTopMsg("World War Finished! - Result: Elvine Win.", 10);
					break;
				default:
					break;
			}
			cp++;

			ActiveEvent = 0;

			ElvineCount = EncriptInt(-1);;
			AresdenCount = EncriptInt(-1);;
			AssasainCount = EncriptInt(-1);;
			WWEvent = FALSE;
			WorldEvent = FALSE;
			break;

		case CLIENT_NOTIFY_WWNOW:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			if (WorldEvent == FALSE)
			{
				WorldEvent = TRUE;
				SetTopMsg("World War Start Now! - Teleport in City Hall - Portals in Shops", 10);
				ActiveEvent = 12;
			}

			sp = (short *)cp;
			ElvineCount = EncriptInt(*sp);
			cp += 2;

			sp = (short *)cp;
			AresdenCount = EncriptInt(*sp);
			cp += 2;

			sp = (short *)cp;
			AssasainCount = EncriptInt(*sp);
			cp += 2;

			WWEvent = TRUE;
			break;

		case CLIENT_NOTIFY_WWNOWII:
			cp = (char*)(pData + DEF_INDEX2_MSGTYPE + 2);
			if (WorldEventII == FALSE)
			{
				WorldEventII = TRUE;
				SetTopMsg("World War Extreme - Start Now! - Teleport in City Hall - Portals in Shops", 10);
				ActiveEvent = 13;
			}

			sp = (short*)cp;
			ElvineCount = EncriptInt(*sp);
			cp += 2;

			sp = (short*)cp;
			AresdenCount = EncriptInt(*sp);
			cp += 2;

			sp = (short*)cp;
			AssasainCount = EncriptInt(*sp);
			cp += 2;

			WWEventII = TRUE;
			break;

		case CLIENT_NOTIFY_WWENDII:
			cp = (char*)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
			case 0:
				SetTopMsg("World War Extreme - Finished! - Result: Draw.", 10);
				break;
			case 1:
				SetTopMsg("World War Extreme - Finished! - Result: Aresden Win.", 10);
				break;
			case 2:
				SetTopMsg("World War Extreme - Finished! - Result: Elvine Win.", 10);
				break;
			default:
				break;
			}
			cp++;

			ActiveEvent = 0;

			ElvineCount = EncriptInt(-1);;
			AresdenCount = EncriptInt(-1);;
			AssasainCount = EncriptInt(-1);;
			WWEventII = FALSE;
			WorldEventII = FALSE;
			break;

			//lalov9fake
		case CLIENT_NOTIFY_FAKE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			Disconect = TRUE;
			bSendCommand(CLIENT_REQUEST_STATUS_AFK, NULL, NULL, 1, NULL, NULL, NULL);
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_NODISCONNECT, NULL, NULL, NULL, NULL, NULL);
			ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);
			break;		

		case CLIENT_NOTIFY_CVCEND:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
				case 0:
					SetTopMsg("City Vs City Finished! - Result: Draw.", 10);
					break;
				case 1:
					SetTopMsg("City Vs City Finished! - Result: Aresden Win.", 10);
					break;
				case 2:
					SetTopMsg("City Vs City Finished! - Result: Elvine Win.", 10);
					break;
				default:
					break;
			}
			cp++;

			ActiveEvent = 0;

			ElvineCount = EncriptInt(-1);
			AresdenCount = EncriptInt(-1);
			AssasainCount = EncriptInt(-1);
			CVCEvent = FALSE;
			break;

		case CLIENT_NOTIFY_CVCNOW:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			ElvineCount = EncriptInt(*sp);
			cp += 2;

			sp = (short *)cp;
			AresdenCount = EncriptInt(*sp);
			cp += 2;

			sp = (short *)cp;
			AssasainCount = EncriptInt(*sp);
			cp += 2;

			if (CVCEvent == FALSE)
			{
				CVCEvent = TRUE;
				SetTopMsg("City Vs City Start Now! - All Maps Close!", 10);
				ActiveEvent = 8;
			}
			break;

		case CLIENT_NOTIFY_PRICECLOSE:
			SetTopMsg("Map Price close! - Time finished", 10);
			break;

		case CLIENT_NOTIFY_TPFAST:
			{
				std::thread timerThread([this]() {
					std::this_thread::sleep_for(std::chrono::milliseconds(50));//50
					this->m_bCommandAvailable = true;
					this->m_dwCommandTime = 0;
					});
				timerThread.detach();
				break;
			}
			break;

			// Data Reduced -> Final Version 3.0
		case CLIENT_NOTIFY_ENEMYKILLS1:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			m_iEnemyKillCount = (int)*cp;
			cp++;
			break;

		case CLIENT_NOTIFY_ENEMYKILLS2:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			m_iEnemyKillCount = (int)*sp;
			cp += 2;
			break;

		case CLIENT_NOTIFY_ENEMYKILLS3:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			m_iEnemyKillCount = *ip;
			cp += 4;
			break;

		case CLIENT_NOTIFY_SUPERATTACKLEFT1:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			m_iSuperAttackLeft = (int)*cp;
			cp++;
			break;

		case CLIENT_NOTIFY_SUPERATTACKLEFT2:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			m_iSuperAttackLeft = (int)*sp;
			cp += 2;
			break;

		case CLIENT_NOTIFY_SUPERATTACKLEFT3:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			m_iSuperAttackLeft = *ip;
			cp += 4;
			break;

		case CLIENT_NOTIFY_CONTRIBUTION1:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			m_iContribution = (int)*cp;
			cp++;
			break;

		case CLIENT_NOTIFY_CONTRIBUTION2:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			m_iContribution = (int)*sp;
			cp += 2;
			break;

		case CLIENT_NOTIFY_CONTRIBUTION3:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			m_iContribution = *ip;
			cp += 4;
			break;

		case CLIENT_NOTIFY_COINS:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			//Coins = *ip;
			m_iCoins = *ip;
			cp += 4;
			break;

		case CLIENT_NOTIFY_ASSASAINSPOINTS:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			AssasainPoints = EncriptInt(*ip);
			cp += 4;
			break;

		case CLIENT_NOTIFY_SUMMONEVENT:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			m_iActualRound = *cp;
			cp++;

			m_iTotalRound = *cp;
			cp++;

			DecriptString(m_cCurLocation);
			if ((memcmp(m_cCurLocation, "ESElvine", 8) != 0) && (memcmp(m_cCurLocation, "ESAresden", 9) != 0) && (memcmp(m_cCurLocation, "ESAssasain", 10) != 0)) {
				if (Assasain) SetTopMsg("Summon Event Running Now! - TP in Assassin WareHouse!", 1);
				else SetTopMsg("Summon Event Running Now! - TP in CityHall!", 1);
			}
			EncriptString(m_cCurLocation);

			ActiveEvent = 10;
			break;

		case CLIENT_NOTIFY_ACHIVEMENTS:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			char Temp;
			BOOL Show;

			Temp = *cp;
			cp++;

			Achivement[Temp].Porcent = *cp;
			cp++;

			Show = (BOOL)*cp;
			cp++;

			if (Achivement[Temp].Porcent == 100 && !Achivement[Temp].Active && Temp != 29)
			{
				if (Show) NewAchivement = TRUE;
				Achivement[Temp].Active = TRUE;
				AchivementsComplete++;
			}
			else if (Temp == 29 && Achivement[Temp].Porcent == 1) Achivement[Temp].Active = TRUE;
			break;

		case CLIENT_NOTIFY_NEXTROUND:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp)
			{
				case 1: SummonTimer = TRUE; break;
				case 2: SummonTimer = FALSE; break;
				default: break;
			}
			cp++;

			m_iRoundCount = *cp;
			cp += 2;

			if ((m_iActualRound >= m_iTotalRound) && (m_iRoundCount == 0)) {
				DecriptString(m_cCurLocation);
				if ((memcmp(m_cCurLocation, "ESElvine", 8) == 0) || (memcmp(m_cCurLocation, "ESAresden", 9) == 0) || (memcmp(m_cCurLocation, "ESAssasain", 10) == 0)) {
					SetTopMsg("Summon Event Finished - Portals Open Now!", 5);
				}
				EncriptString(m_cCurLocation);

				m_iRoundCount = -1;
				m_iActualRound = -1;
				m_iTotalRound = -1;
				SummonTimer = FALSE;
				ActiveEvent = 0;
			}
			break;

		case CLIENT_NOTIFY_HELLOFDEATH:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
				case 0:
					SetTopMsg("Hell of Death Event Finished! - Result: Draw - Teleports closed!", 10);
					m_iHPAres = -1;
					m_iHPElv = -1;
					ActiveEvent = 0;
					break;
				case 1:
					SetTopMsg("Hell of Death Event Finished! - Result: Aresden Win - Teleports closed!", 10);
					m_iHPAres = -1;
					m_iHPElv = -1;
					ActiveEvent = 0;
					break;
				case 2:
					SetTopMsg("Hell of Death Event Finished! - Result: Elvine Win - Teleports closed!", 10);
					m_iHPAres = -1;
					m_iHPElv = -1;
					ActiveEvent = 0;
					break;
				case 10:
					SetTopMsg("Hell of death open now! - Teleports in City Hall", 10);
					ActiveEvent = 9;
					break;
				default:
					break;
			}
			cp++;
			break;

		case CLIENT_NOTIFY_HPSTRUCTURE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			m_iHPAres = *sp;
			cp += 2;

			sp = (short *)cp;
			m_iHPElv = *sp;
			cp += 2;
			break;

			//New Party System - ZeroEoyPnk
		case CLIENT_RESPONSE_PARTYCOORDS:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			PartyId = EncriptInt(*cp);
			cp++;

			sp = (short *)cp;
			PartyStruct[DecriptInt(PartyId)].iParty_sX = *sp;
			cp += 2;

			sp = (short *)cp;
			PartyStruct[DecriptInt(PartyId)].iParty_sY = *sp;
			cp += 2;

			ZeroMemory(PartyStruct[DecriptInt(PartyId)].PartyMapName, sizeof(PartyStruct[DecriptInt(PartyId)].PartyMapName));
			memcpy(PartyStruct[DecriptInt(PartyId)].PartyMapName, cp, 12);
			cp += 12;
			break;

		case CLIENT_RESPONSE_PARTYHP:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			PartyId = EncriptInt(*cp);
			cp++;

			PartyStruct[DecriptInt(PartyId)].iPartyHp = *cp;
			cp++;
			break;

		case CLIENT_RESPONSE_PARTYNAME:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			PartyId = EncriptInt(*cp);
			cp++;

			ZeroMemory(m_stPartyMemberNameList[DecriptInt(PartyId)].cName, sizeof(m_stPartyMemberNameList[DecriptInt(PartyId)].cName));
			memcpy(m_stPartyMemberNameList[DecriptInt(PartyId)].cName, cp, 10);
			cp += 10;
			break;

		case CLIENT_RESPONSE_REMOVEITEMEXCHANGE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sV1 = (short)*cp;
			cp++;

			RemoveItemExchange(sV1);
			break;

		case CLIENT_RESPONSE_WEIGHTEXCHANGE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			if (*cp != 0)
			{
				ExchangeErrors = TRUE;
				ExchangeError = *cp;
			}
			else
			{
				ExchangeErrors = FALSE;
				ExchangeError = -1;
			}
			cp++;
			break;

		case CLIENT_RESPONSE_EXCHANGEITEMCONFIRM:
			ConfirmExchange = TRUE;
			break;

			/*case CLIENT_RESPONSE_INITPLAYER_OLD:
				ChangeGameMode(DEF_GAMEMODE_ONVERSIONNOTMATCH);
				break;*/

		case CLIENT_NOTIFY_STATUSFRIEND:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			sV1 = *cp;
			cp++;

			ListFriends[sV1].status = *cp;
			cp++;
			break;

		case CLIENT_NOTIFY_STATUSFRIEND2:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, cp, 10);
			cp += 10;

			for (i = 0; i <= m_iTotalFriends; i++)
				if (strcmp(ListFriends[i].m_cFriends, cTxt) == 0)
					ListFriends[i].status = true;
			break;

		case CLIENT_RESPONSE_GUILDMEMBER:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

			GuildMembersOnline[m_iTotalGMembes].Rank = *cp;
			cp++;

			memcpy(GuildMembersOnline[m_iTotalGMembes].GuildMemberName, cp, 10);
			cp += 10;

			m_iTotalGMembes++;

			if (GuildMembersOnline[0].Rank != 0)
			{
				for (i = 0; i < m_iTotalGMembes; i++)
				{
					if (GuildMembersOnline[i].Rank == 0)
					{
						Temp = i;
						char Name[10];
						memcpy(Name, GuildMembersOnline[i].GuildMemberName, 10);

						GuildMembersOnline[i].Rank = GuildMembersOnline[0].Rank;
						memcpy(GuildMembersOnline[i].GuildMemberName, GuildMembersOnline[0].GuildMemberName, 10);
						GuildMembersOnline[0].Rank = 0;
						memcpy(GuildMembersOnline[0].GuildMemberName, Name, 10);
					}
				}
			}
			break;

			//case CLIENT_RESPONSE_PROCESSBLOCKED:
		case CLIENT_RESPONSE_PELMASO:
			TeSentisSarpado(pData);
			//ReadBloquedProcess(pData);
			break;

		case CLIENT_NOTIFY_NOTICEEKMSG:
			NotifyMsg_EkAnnoucer(pData);
			break;

		case CLIENT_RESPONSE_DELETEHACK:
			SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
			break;

		case CLIENT_RESPONSE_CHECKPROCESS:
			SendProcess();
			SendModule(0);
			break;

		case CLIENT_NOTIFY_ARENAPVPEVENT_INIT:
			ActiveEvent = 11;
			SetTopMsg("Final Fight Event - Open.", 10);
			break;

		case CLIENT_NOTIFY_ARENAPVPEVENT_CLOSE:
			ActiveEvent = 0;
			SetTopMsg("Final Fight Event - Close.", 10);
			break;

		case CLIENT_NOTIFY_TOPARENAEVENT:
			ChargeTopEventList(pData);
			break;

		case CLIENT_NOTIFY_MYDATAEVENT:
			ChargeMyDataEvent(pData);
			break;

		case CLIENT_RESPONSE_ITEMLIST:
			LoadItemList(pData);
			break;

		case CLIENT_REPONSE_SELLTYPE:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			SellType = EncriptInt(*sp);
			cp += 2;
			break;

		case CLIENT_RESPONSE_DELETE_SELL_LIST:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			if (*cp != 0) ZeroMemory(OpenSellName, sizeof(OpenSellName));
			cp++;

			DisableDialogBox(54);
			DecriptString(OpenSellName);
			if (strlen(OpenSellName) != 0) EnableDialogBox(54, NULL, NULL, NULL);
			EncriptString(OpenSellName);
			break;

		case CLIENT_RESPONSE_MARKET:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			switch (*cp) {
				case 0:
					if (m_bIsDialogEnabled[49]) DisableDialogBox(49);
					MarketOpen = FALSE; //EncriptBool(FALSE);
					m_bParalyze = FALSE; // EncriptBool(FALSE);
					break;
				case 1:
					MarketOpen = TRUE; // EncriptBool(TRUE);
					m_bParalyze = TRUE; // EncriptBool(TRUE);
					break;
				default:
					break;
			}
			cp++;
			break;
	}
}

void CGame::ReserveFightzoneResponseHandler(char * pData)
{
	WORD * wpResult;
	char * cp;
	int * ip;
	wpResult = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	switch (*wpResult) {
		case DEF_MSGTYPE_CONFIRM:
			AddEventList(RESERVE_FIGHTZONE_RESPONSE_HANDLER1, 10);
			m_stDialogBoxInfo[7].cMode = 14;
			m_iFightzoneNumber = m_iFightzoneNumberTemp;
			break;

		case DEF_MSGTYPE_REJECT:
			cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			cp += 4;
			AddEventList(RESERVE_FIGHTZONE_RESPONSE_HANDLER2, 10);
			m_iFightzoneNumberTemp = EncriptInt(0);

			if (*ip == 0) {
				m_stDialogBoxInfo[7].cMode = 15;
			}
			else if (*ip == -1) {
				m_stDialogBoxInfo[7].cMode = 16;
			}
			else if (*ip == -2) {
				m_stDialogBoxInfo[7].cMode = 17;
			}
			else if (*ip == -3) {
				m_stDialogBoxInfo[7].cMode = 21;
			}
			else if (*ip == -4) {
				m_stDialogBoxInfo[7].cMode = 22;
			}
			break;
	}
}

void CGame::UpdateScreen_OnLogResMsg()
{
	short msX, msY, msZ, sX, sY;
	char  cLB, cRB;
	DWORD dwTime = timeGetTime();
	static DWORD dwCTime;
	static class CMouseInterface * pMI;
	int   iMIbuttonNum;
	char  cMIresult;

	//added resolution lalo
	int res_x = 0;
	int res_y = 0;
	int res_x2 = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 799;
		res_y = 599;
		res_x2 = 81;
		res_y2 = 89;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1023;
		res_y = 767;
		res_x2 = 193;
		res_y2 = 172;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 639;
		res_y = 479;
	}

	if (m_cGameModeCount == 0)
	{
		pMI = new class CMouseInterface;
		pMI->AddRect(370 + res_x2, 240 + res_y2, 370 + res_x2 + DEF_BTNSZX, 240 + res_y2 + DEF_BTNSZY);
		m_bEnterPressed = FALSE;
		m_bEscPressed = FALSE;
		m_cArrowPressed = 0;
		dwCTime = timeGetTime();
		if (m_bSoundFlag) m_pESound[38]->bStop();
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if (m_bEscPressed == TRUE || m_bEnterPressed) {
		switch (m_cMsg[0]) {
			case '0':
				ChangeGameMode(DEF_GAMEMODE_ONCREATENEWACCOUNT);
				break;
			case '1':
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				break;
			case '2':
				ChangeGameMode(DEF_GAMEMODE_ONCREATENEWCHARACTER);
				break;
			case '3':
				ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
				break;
			case '4':
				ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
				break;
			case '5':
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				break;
			case '6':
				switch (m_cMsg[1]) {
					case 'B':
						ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
						break;
					case 'C': ChangeGameMode(DEF_GAMEMODE_ONCHANGEPASSWORD); break;
					case 'M': ChangeGameMode(DEF_GAMEMODE_ONCHANGEPASSWORD); break;
				}
				break;
			case '7':
			case '8':
				ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
				break;
		}

		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);

	m_DDraw.ClearBackB4();

	switch (m_cMsg[0]) {
		case '0':
		case '5':
			_Draw_UpdateScreen_OnCreateNewAccount();
			break;

		case '1':
		case '7':
			sX = 146 + res_x2;
			sY = 114 + res_y2;

			DecriptString(m_cAccountName);
			DecriptString(m_cAccountPassword);
			_Draw_OnLogin(m_cAccountName, m_cAccountPassword, 0, 0);
			EncriptString(m_cAccountName);
			EncriptString(m_cAccountPassword);
			break;

		case '2':
		case '4':
		//	DecriptString(m_cPlayerName);
			_bDraw_OnCreateNewCharacter(m_cPlayerName, 0, 0, 0);
		//	EncriptString(m_cPlayerName);
			break;

		case '3':
			sX = 0;
			sY = 0;
			UpdateScreen_OnSelectCharacter(sX, sY, 0, 0);
			break;

		case '6':
			sX = 146 + res_x2;
			sY = 114 + res_y2;

			UpdateScreen_OnSelectCharacter(0, 0, 0, 0, TRUE);
			break;
		case '8':
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_MAINMENU, -1, -1, 0, TRUE);
			break;
	}

	m_DDraw.DrawShadowBox(0, 0, res_x, res_y);

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 162 + res_x2, 125 + res_y2, 2);

	if ((msX >= 370 + res_x2) && (msX <= 370 + res_x2 + DEF_BTNSZX) && (msY >= 244 + res_y2) && (msY <= 244 + res_y2 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 370 + res_x2, 244 + res_y2, 1);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, 370 + res_x2, 244 + res_y2, 0);

	switch (m_cMsg[1]) {
		case '1':
		case '2':
			//Modified by wares - admin@helbreathlux.com
			PutString_SprFont(172 + res_x2 + 70, 165 + res_y2, "Error datos", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 215 + res_y2, "Cuenta o password erronea");//"
			break;

		case '3':
			PutString_SprFont(172 + res_x2 + 10 + 34, 165 + res_y2, "Can not connect to game server!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG8);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG9);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 225 + res_y2, UPDATE_SCREEN_ON_LOG_MSG10);//"
			break;

		case '4':
			PutString_SprFont(172 + res_x2 + 58, 165 + res_y2, "New account created.", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG11);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG12);//"
			break;

		case '5':
			PutString_SprFont(172 + res_x2 + 58, 165 + res_y2, "Can not create new account!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG13);//"
			break;

		case '6':
			PutString_SprFont(172 + res_x2 + 36, 165 + res_y2, "Can not create new account!", 7, 0, 0);
			PutString_SprFont(172 + res_x2 + 24, 180 + res_y2, "Already existing account name.", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 205 + res_y2, UPDATE_SCREEN_ON_LOG_MSG14);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 220 + res_y2, UPDATE_SCREEN_ON_LOG_MSG15);//"
			break;

		case '7':
			PutString_SprFont(172 + res_x2 + 58, 150 + res_y2, "New character created.", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG16);//"
			break;

		case '8':
			PutString_SprFont(172 + res_x2 + 58, 165 + res_y2, "Can not create new character!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG17);//"
			break;

		case '9':
			PutString_SprFont(172 + res_x2 + 36, 165 + res_y2, "Can not create new character!", 7, 0, 0);
			PutString_SprFont(172 + res_x2 + 24, 180 + res_y2, "Already existing character name.", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 205 + res_y2, UPDATE_SCREEN_ON_LOG_MSG18);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 220 + res_y2, UPDATE_SCREEN_ON_LOG_MSG19);//"
			break;

		case 'A':
			PutString_SprFont(172 + res_x2 + 36 + 45, 165 + res_y2, "Character deleted.", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG20);//"

			break;
		case 'B':
			PutString_SprFont(172 + res_x2 + 36 + 45, 165 + res_y2, "Password changed.", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG21);//"
			break;
		case 'C':
			PutString_SprFont(172 + res_x2 + 36, 165 + res_y2, "Can not change password!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG22);//"
			break;

		case 'D':
			PutString_SprFont(172 + res_x2 + 10 + 34, 165 + res_y2, "Can not connect to game server!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG23);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG24);//"
			break;

		case 'E':
			PutString_SprFont(172 + res_x2 + 10 + 34, 165 + res_y2, "Can not connect to game server!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG25);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG26);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 225 + res_y2, UPDATE_SCREEN_ON_LOG_MSG27);//"
			break;

		case 'F':
			PutString_SprFont(172 + res_x2 + 10 + 34, 165 + res_y2, "Can not connect to game server!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG28);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG29);//"
			break;

		case 'G':
			PutString_SprFont(172 + res_x2 + 10 + 34, 165 + res_y2, "Can not connect to game server!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG30);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG31);//"
			break;

		case 'H':
			PutString_SprFont(172 + res_x2 + 68, 165 + res_y2, "Connection Rejected!", 7, 0, 0);
			if (DecriptInt(m_iBlockYear) == 0) {
				PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG32);//"
				PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG33);//"
			}
			else {
				PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG34);//"
				wsprintf(G_cTxt, UPDATE_SCREEN_ON_LOG_MSG35, DecriptInt(m_iBlockYear), DecriptInt(m_iBlockMonth), DecriptInt(m_iBlockDay));//"
				PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, G_cTxt);
			}
			break;

		case 'I': //
			PutString_SprFont(172 + res_x2 + 68, 165 + res_y2, "Not Enough Point!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, "asd");

			break;

		case 'J': // v2.15 2002-5-21
			PutString_SprFont(172 + res_x2 + 68, 165 + res_y2, "World Server Full", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, "Please ! Try Other World Server");
			break;

		case 'M': 	// v2.18
			PutString_SprFont(172 + res_x2 + 68, 165 + res_y2, "Your password expired", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, "Please! Change password");
			break;


		case 'U': // v2.15
			PutString_SprFont(172 + res_x2 + 68, 165 + res_y2, "Keycode input Success!", 7, 0, 0);
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, "Keycode Registration successed.");

			break;

		case 'X':
			PutAlignedString(198 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG38);//"
			PutAlignedString(198 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG39);//"
			break;

		case 'Y':
			PutAlignedString(178 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG40);//"
			PutAlignedString(178 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG41);//"
			break;

		case 'Z':
			PutAlignedString(178 + res_x2, 453 + res_y2, 195 + res_y2, UPDATE_SCREEN_ON_LOG_MSG42);//"
			PutAlignedString(178 + res_x2, 453 + res_y2, 210 + res_y2, UPDATE_SCREEN_ON_LOG_MSG41);//"
			break;
	}

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK) {
		switch (iMIbuttonNum) {
			case 1:
				switch (m_cMsg[0]) {
					case '0':
						ChangeGameMode(DEF_GAMEMODE_ONCREATENEWACCOUNT);
						break;
					case '1':
						ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
						break;
					case '2':
						ChangeGameMode(DEF_GAMEMODE_ONCREATENEWCHARACTER);
						break;
					case '3':
						ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
						break;
					case '4':
						ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
						break;
					case '5':
						ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
						break;
					case '6':
						switch (m_cMsg[1]) {
							case 'B':
								ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
								break;
							case 'C': ChangeGameMode(DEF_GAMEMODE_ONCHANGEPASSWORD); break;
							case 'M': ChangeGameMode(DEF_GAMEMODE_ONCHANGEPASSWORD); break;
						}
						break;
					case '7':
					case '8':
						ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
						break;
				}
				delete pMI;
				return;
		}
	}

	if ((dwTime - dwCTime) > 100)
	{
		m_cMenuFrame++;
		dwCTime = dwTime;
	}
	if (m_cMenuFrame >= 8)
	{
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8)
		{
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;
	DrawVersion();
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::RetrieveItemHandler(char *pData)
{
	char * cp, cItemIndex, cTxt[120];
	short cBankItemIndex;
	WORD * wp;
	short * sp;
	int j;
	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	if (*wp != DEF_MSGTYPE_REJECT)
	{
		cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
		sp = (short *)cp;
		cBankItemIndex = *sp;
		cp += 2;
		cItemIndex = *cp;
		cp++;

		if (m_pBankList[cBankItemIndex] != NULL) {
			// v1.42
			char cStr1[64], cStr2[64], cStr3[64];
			GetItemName(m_pBankList[cBankItemIndex], cStr1, cStr2, cStr3);

			ZeroMemory(cTxt, sizeof(cTxt));
			wsprintf(cTxt, RETIEVE_ITEM_HANDLER4, cStr1);//""You took out %s."
			AddEventList(cTxt, 10);

			if ((m_pBankList[cBankItemIndex]->m_cItemType == DEF_ITEMTYPE_CONSUME) ||
				(m_pBankList[cBankItemIndex]->m_cItemType == DEF_ITEMTYPE_ARROW))
			{
				if (m_pItemList[cItemIndex] == NULL) goto RIH_STEP2;
				delete m_pBankList[cBankItemIndex];
				m_pBankList[cBankItemIndex] = NULL;
				for (j = 0; j <= DEF_MAXBANKITEMS - 2; j++)
				{
					if ((m_pBankList[j + 1] != NULL) && (m_pBankList[j] == NULL))
					{
						m_pBankList[j] = m_pBankList[j + 1];
						m_pBankList[j + 1] = NULL;
					}
				}
			}
			else
			{
			RIH_STEP2:;
				if (m_pItemList[cItemIndex] != NULL) return;
				short nX, nY;
				nX = 40;
				nY = 30;
				for (j = 0; j < DEF_MAXITEMS; j++)
				{
					if ((m_pItemList[j] != NULL) && (memcmp(m_pItemList[j]->m_cName, cStr1, 20) == 0))
					{
						nX = m_pItemList[j]->m_sX + 1;
						nY = m_pItemList[j]->m_sY + 1;
						break;
					}
				}
				m_pItemList[cItemIndex] = m_pBankList[cBankItemIndex];
				m_pItemList[cItemIndex]->m_sX = nX;
				m_pItemList[cItemIndex]->m_sY = nY;
				bSendCommand(CLIENT_REQUEST_SETITEMPOS, NULL, cItemIndex, nX, nY, NULL, NULL);

				for (j = 0; j < DEF_MAXITEMS; j++)
					if (m_cItemOrder[j] == -1)
					{
						m_cItemOrder[j] = cItemIndex;
						break;
					}
				m_bIsItemEquipped[cItemIndex] = FALSE;
				m_bIsItemDisabled[cItemIndex] = FALSE;
				m_pBankList[cBankItemIndex] = NULL;
				for (j = 0; j <= DEF_MAXBANKITEMS - 2; j++)
				{
					if ((m_pBankList[j + 1] != NULL) && (m_pBankList[j] == NULL))
					{
						m_pBankList[j] = m_pBankList[j + 1];
						m_pBankList[j + 1] = NULL;
					}
				}
			}
		}
	}
	m_stDialogBoxInfo[14].cMode = TempPage;
}

void CGame::EraseItem(char cItemID)
{
	int i;
	char cStr1[64], cStr2[64], cStr3[64];
	ZeroMemory(cStr1, sizeof(cStr1));
	ZeroMemory(cStr2, sizeof(cStr2));
	ZeroMemory(cStr3, sizeof(cStr3));
	for (i = 0; i < 6; i++)
	{
		if (m_sShortCut[i] == cItemID)
		{
			GetItemName(m_pItemList[cItemID], cStr1, cStr2, cStr3);
			if (i < 3) wsprintf(G_cTxt, ERASE_ITEM, cStr1, cStr2, cStr3, i + 1);
			else wsprintf(G_cTxt, ERASE_ITEM, cStr1, cStr2, cStr3, i + 7);
			AddEventList(G_cTxt, 10);
			m_sShortCut[i] = -1;

		}
	}

	for (i = 0; i < 9; i++)
		if (NewShortcuts[i] == cItemID) NewShortcuts[i] = -1;

	if (cItemID == m_sRecentShortCut)
		m_sRecentShortCut = -1;
	// ItemOrder
	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_cItemOrder[i] == cItemID)
			m_cItemOrder[i] = -1;
	for (i = 1; i < DEF_MAXITEMS; i++)
		if ((m_cItemOrder[i - 1] == -1) && (m_cItemOrder[i] != -1))
		{
			m_cItemOrder[i - 1] = m_cItemOrder[i];
			m_cItemOrder[i] = -1;
		}
	// ItemList
	delete m_pItemList[cItemID];
	m_pItemList[cItemID] = NULL;
	m_bIsItemEquipped[cItemID] = FALSE;
	m_bIsItemDisabled[cItemID] = FALSE;
}

void CGame::DlbBoxDoubleClick_Character(short msX, short msY)
{
	char cEquipPoiStatus[DEF_MAXITEMEQUIPPOS], cItemID = -1;
	short sX, sY, sSprH, sFrame;
	int i;
	if (m_bIsDialogEnabled[17] == TRUE) return;

	if (m_bSkillUsingStatus == TRUE)
	{
		AddEventList(BITEMDROP_CHARACTER5, 10);
		return;
	}

	sX = m_stDialogBoxInfo[1].sX;
	sY = m_stDialogBoxInfo[1].sY;

	for (i = 0; i < DEF_MAXITEMEQUIPPOS; i++)
		cEquipPoiStatus[i] = -1;

	for (i = 0; i < DEF_MAXITEMS; i++) {
		if ((m_pItemList[i] != NULL) && (m_bIsItemEquipped[i] == TRUE))	cEquipPoiStatus[m_pItemList[i]->m_cEquipPos] = i;
	}
	if ((m_sPlayerType >= 1) && (m_sPlayerType <= 3))
	{
		if (cEquipPoiStatus[DEF_EQUIPPOS_BACK] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 41, sY + 137, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_BACK];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_PANTS] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_PANTS];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_ARMS] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_ARMS];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BOOTS] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_BOOTS];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BODY] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_BODY];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_LHAND] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 90, sY + 170, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_LHAND];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_RHAND] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 57, sY + 186, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_RHAND];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 57, sY + 186, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_NECK] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 35, sY + 120, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_NECK];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_RFINGER] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 32, sY + 193, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_RFINGER];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_LFINGER] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 90, sY + 175, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_LFINGER];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_HEAD] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 72, sY + 135, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_HEAD];
		}
	}
	else if ((m_sPlayerType >= 4) && (m_sPlayerType <= 6)) {
		if (cEquipPoiStatus[DEF_EQUIPPOS_BACK] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 45, sY + 143, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_BACK];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BOOTS] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_BOOTS];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_PANTS] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_PANTS];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_ARMS] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_ARMS];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BOOTS] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_BOOTS];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BODY] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_BODY];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_LHAND] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 84, sY + 175, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_LHAND];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_RHAND] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 60, sY + 191, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_RHAND];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 60, sY + 191, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_NECK] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 35, sY + 120, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_NECK];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_RFINGER] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 32, sY + 193, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_RFINGER];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_LFINGER] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 90, sY + 175, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_LFINGER];
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_HEAD] != -1) {
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSpriteFrame;
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 72, sY + 139, sFrame, msX, msY))
				cItemID = cEquipPoiStatus[DEF_EQUIPPOS_HEAD];
		}
	}

	if (cItemID == -1 || m_pItemList[cItemID] == NULL) return;
	if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EAT) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_ARROW) || (m_pItemList[cItemID]->m_dwCount > 1)) return;
	if ((m_bIsDialogEnabled[11] == TRUE) && (m_bIsDialogEnabled[23] == FALSE) && (m_stDialogBoxInfo[39].sV3 == 24))
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_REPAIRITEM, NULL, cItemID, m_stDialogBoxInfo[39].sV3, NULL, m_pItemList[cItemID]->m_cName, m_stDialogBoxInfo[39].sV4); // v1.4
	else {
		if (m_bIsItemEquipped[m_stMCursor.sSelectedObjectID] == TRUE)
		{
			char cStr1[64], cStr2[64], cStr3[64];
			GetItemName(m_pItemList[m_stMCursor.sSelectedObjectID], cStr1, cStr2, cStr3);
			ZeroMemory(G_cTxt, sizeof(G_cTxt));
			wsprintf(G_cTxt, ITEM_EQUIPMENT_RELEASED, cStr1);//"
			AddEventList(G_cTxt, 10);
			if (memcmp(m_pItemList[m_stMCursor.sSelectedObjectID]->m_cName, "AngelicPandent", 14) == 0) PlaySound('E', 53, 0);
			else PlaySound('E', 29, 0);

			// Remove Angelic Stats
			if ((m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos >= 11)
				&& (m_pItemList[m_stMCursor.sSelectedObjectID]->m_cItemType == 1))
			{
				char cItemID = m_stMCursor.sSelectedObjectID;
				if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(STR)", 19) == 0)
				{
					m_iAngelicStr = EncriptInt(0);
				}
				else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(DEX)", 19) == 0)
				{
					m_iAngelicDex = EncriptInt(0);
				}
				else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(INT)", 19) == 0)
				{
					m_iAngelicInt = EncriptInt(0);
				}
				else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(MAG)", 19) == 0)
				{
					m_iAngelicMag = EncriptInt(0);
				}
			}
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RELEASEITEM, NULL, m_stMCursor.sSelectedObjectID, NULL, NULL, NULL);
			m_bIsItemEquipped[m_stMCursor.sSelectedObjectID] = FALSE;
			m_sItemEquipmentStatus[m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos] = -1;
			m_stMCursor.cSelectedObjectType = NULL;
			m_stMCursor.sSelectedObjectID = NULL;
		}
	}
}

void CGame::DlbBoxDoubleClick_GuideMap(short msX, short msY)
{
	short si = m_stMCursor.sCursorFrame;
	if (si != 0) return;
	if (DecriptInt(m_cMapIndex) < 0) return;

	short sX, sY, shX, shY, szX, szY;

	sX = m_stDialogBoxInfo[9].sX;
	sY = m_stDialogBoxInfo[9].sY;
	szX = m_stDialogBoxInfo[9].sSizeX;
	szY = m_stDialogBoxInfo[9].sSizeY;
	if (sX < 20) sX = 0;
	if (sY < 20) sY = 0;

	//added resolution
	if (c_reso->IsResolution() == C800x600)
	{
		if (sX > 800 - 128 - 20) sX = 800 - 128;
		if (sY > 600 - 128 - 20) sY = 600 - 128;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		if (sX > 1024 - 128 - 20) sX = 1024 - 128;
		if (sY > 768 - 128 - 20) sY = 768 - 128;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		if (sX > 640 - 128 - 20) sX = 640 - 128;
		if (sY > 480 - 128 - 20) sY = 480 - 128;
	}

	if (m_bZoomMap)
	{
		shX = m_sPlayerX - 64;
		shY = m_sPlayerY - 64;
		if (shX < 0) shX = 0;
		if (shY < 0) shY = 0;
		if (shX > m_pMapData->m_sMapSizeX - 128) shX = m_pMapData->m_sMapSizeX - 128;
		if (shY > m_pMapData->m_sMapSizeY - 128) shY = m_pMapData->m_sMapSizeY - 128;
		shX = shX + msX - sX;
		shY = shY + msY - sY;
	}
	else
	{
		shX = (m_pMapData->m_sMapSizeX*(msX - sX)) / 128;
		shY = (m_pMapData->m_sMapSizeY*(msY - sY)) / 128;
	}
	if (shX < 20 || shY < 20) return;
	if (shX > m_pMapData->m_sMapSizeX - 20 || shY > m_pMapData->m_sMapSizeY - 20) return;
	m_sCommX = shX;
	m_sCommY = shY;
	if ((m_bCtrlPressed) && (MyAdminLevel > 0))
	{
		DecriptString(m_cMapName);
		wsprintf(G_cTxt, "/tp %s %u %u", m_cMapName, m_sCommX, m_sCommY);
		bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, G_cTxt);
		EncriptString(m_cMapName);
		return;
	}

	if (m_pMapData->m_tile[shX][shY].m_bIsMoveAllowed == TRUE && m_cCommand == DEF_OBJECTSTOP)
	{
		if (m_bRunningMode && DecriptInt(m_iSP) > 0)
			m_cCommand = DEF_OBJECTRUN;
		else m_cCommand = DEF_OBJECTMOVE;
		GetPlayerTurn();
	}
}

void CGame::DlbBoxDoubleClick_Inventory(short msX, short msY)
{
	register int i;
	char  cItemID, cTxt[120];
	short sX, sY, x1, x2, y1, y2;
	char cStr1[64], cStr2[64], cStr3[64];
	//if (m_iHP <= 0) return;
	//if (m_bItemUsingStatus == TRUE) //lalocandy
	/*if (m_bItemUsingStatus == TRUE && m_pItemList[cItemID]->m_cItemType != DEF_ITEMTYPE_EAT)
	{	AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY1, 10);
		return;
	}*/
	sX = m_stDialogBoxInfo[2].sX;
	sY = m_stDialogBoxInfo[2].sY;
	for (i = 0; i < DEF_MAXITEMS; i++)
	{
		if (m_cItemOrder[DEF_MAXITEMS - 1 - i] == -1) continue;
		cItemID = m_cItemOrder[DEF_MAXITEMS - 1 - i];
		if (m_pItemList[cItemID] == NULL) continue;

		m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->_GetSpriteRect(sX + 32 + m_pItemList[cItemID]->m_sX, sY + 44 + m_pItemList[cItemID]->m_sY, m_pItemList[cItemID]->m_sSpriteFrame);
		// Order
		x1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.left;
		y1 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.top;
		x2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.right;
		y2 = (short)m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->m_rcBound.bottom;

		if ((m_bIsItemDisabled[cItemID] == FALSE) && (m_bIsItemEquipped[cItemID] == FALSE) && (msX > x1) && (msX < x2) && (msY > y1) && (msY < y2))
		{	// Order
			_SetItemOrder(0, cItemID);
			GetItemName(m_pItemList[cItemID], cStr1, cStr2, cStr3);

			if (m_bIsDialogEnabled[11] && (m_bIsDialogEnabled[23] == FALSE) && (m_bIsDialogEnabled[23] == FALSE) && (m_stDialogBoxInfo[39].sV3 == 24))
			{
				if (m_pItemList[cItemID]->m_cEquipPos != DEF_EQUIPPOS_NONE)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_REPAIRITEM, NULL, cItemID, m_stDialogBoxInfo[39].sV3, NULL, m_pItemList[cItemID]->m_cName, m_stDialogBoxInfo[39].sV4); // v1.4
					return;
				}
			}

			// ZeroEoyPnk - Para la putita de lalo...
			// Haciendo mas chetito el juego :P
			if (m_bIsDialogEnabled[34] == TRUE)
			{
				bItemDrop_ItemUpgrade();
				return;
			}
			if (m_bIsDialogEnabled[31] == TRUE)
			{
				bItemDrop_SellList(msX, msY);
			}
			if (m_bIsDialogEnabled[14] == TRUE)
			{
				bItemDrop_Bank(msX, msY);
				return;
			}
			if (m_bIsDialogEnabled[72] == TRUE &&  m_stDialogBoxInfo[72].cMode == 0)
			{
				bItemDrop_enchanting();
				return;
			}

			if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE)
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_PERM)
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_ARROW)
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME && string(m_pItemList[cItemID]->m_cName) == "CoinBall")
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME && string(m_pItemList[cItemID]->m_cName) == "ContribBall")
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME && string(m_pItemList[cItemID]->m_cName) == "RepBall")
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME && string(m_pItemList[cItemID]->m_cName) == "MajBall")
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EAT))
			{
				if (bCheckItemOperationEnabled(cItemID) == FALSE) return;
				if ((timeGetTime() - m_dwDamagedTime) < 10000)
				{
					if ((m_pItemList[cItemID]->m_sSprite == 6) && (m_pItemList[cItemID]->m_sSpriteFrame == 9))
					{
						wsprintf(G_cTxt, BDLBBOX_DOUBLE_CLICK_INVENTORY3, cStr1);//"Item %s: Scrolls cannot be used until 10 seconds after taking damage."
						AddEventList(G_cTxt, 10);
						return;
					}
					if ((m_pItemList[cItemID]->m_sSprite == 6) && (m_pItemList[cItemID]->m_sSpriteFrame == 89))
					{
						wsprintf(G_cTxt, BDLBBOX_DOUBLE_CLICK_INVENTORY3, cStr1);//"Item %s: Scrolls cannot be used until 10 seconds after taking damage."
						AddEventList(G_cTxt, 10);
						return;
					}
				}
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOMOEAT, NULL, cItemID, NULL, NULL, NULL);

				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE)
					|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EAT))
				{
					m_bIsItemDisabled[cItemID] = TRUE;
					m_bItemUsingStatus = TRUE;

				}
			}

			if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_SKILL)
			{
				if (_bIsItemOnHand() == TRUE)
				{
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY4, 10);//"Your hands should be free to use this item."
					return;
				}
				if (m_bSkillUsingStatus == TRUE)
				{
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY5, 10);//"You are already using another skill."
					return;
				}
				if (m_pItemList[cItemID]->m_wCurLifeSpan == 0)
				{
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY6, 10);//"You can't use this item because it is exhausted."
				}
				else
				{
					m_bIsGetPointingMode = TRUE;
					m_iPointCommandType = EncriptInt(cItemID);
					wsprintf(cTxt, BDLBBOX_DOUBLE_CLICK_INVENTORY7, cStr1);//"Item %s: Select a position which you want to use."
					AddEventList(cTxt, 10);
				}
			}

			if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE_DEST)
			{
				if (_bIsItemOnHand() == TRUE)
				{
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY4, 10);//"Your hands should be free to use this item."
					return;
				}
				if (m_bSkillUsingStatus == TRUE)
				{
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY13, 10);//"You are already using another skill."
					return;
				}
				if (m_pItemList[cItemID]->m_wCurLifeSpan == 0)
				{
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY6, 10);//"You can't use this item because it is exhausted."
				}
				else
				{
					m_bIsGetPointingMode = TRUE;
					m_iPointCommandType = EncriptInt(cItemID);
					wsprintf(cTxt, BDLBBOX_DOUBLE_CLICK_INVENTORY8, cStr1);//"Item %s: Select an item which you want to use."
					AddEventList(cTxt, 10);
				}
			}

			if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_SKILL_ENABLEDIALOGBOX)
			{
				if (_bIsItemOnHand() == TRUE)
				{
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY4, 10);//"Your hands should be free to use this item."
					return;
				}

				if (m_bSkillUsingStatus == TRUE) {
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY5, 10);//"You are already using another skill."
					return;
				}

				if (m_pItemList[cItemID]->m_wCurLifeSpan == 0)
				{
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY6, 10);//"You can't use this item because it is exhausted."
				}
				else
				{
					switch (m_pItemList[cItemID]->m_sSpriteFrame) {
						case 55: // Alchemy pot
							if (m_cSkillMastery[12] == 0)
							{
								AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY9, 10);//"You should learn alchemy skill to use this item."
							}
							else
							{
								EnableDialogBox(26, 1, NULL, NULL, NULL);
								AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY10, 10);//"Using alchemy skill..."
							}
							break;
						case 113: // Smith's Anvil
							if (m_cSkillMastery[13] == 0)
							{
								AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY11, 10);//"You should learn manufacturing skill to use this item.."
							}
							else
							{
								EnableDialogBox(26, 3, NULL, NULL, NULL);
								AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY12, 10);//"Using a manufacturing skill..."
							}
							break;

							// Crafting
						case 0:
							//if (m_pItemList[i]->m_sSprite == 22)
						{	EnableDialogBox(26, 7, NULL, NULL, NULL);
						AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY17, 10);	//  "Initiating item Crafting..."
						}
						break;

						case 151:
						case 152:
						case 153:
						case 154:
							EnableDialogBox(40, 1, NULL, NULL, NULL);
							break;
					}
				}
			}
			// Dblclick Alchemy bowl
			if ((m_bIsDialogEnabled[26] == TRUE) && (m_stDialogBoxInfo[26].cMode == 1))
			{
				bItemDrop_SkillDialog();
				//bItemDrop_ExternalScreen(cItemID, m_stDialogBoxInfo[26].sX+50, m_stDialogBoxInfo[26].sY+50);
			}
			// Dblclick Manuf box
			if ((m_bIsDialogEnabled[26] == TRUE) && (m_stDialogBoxInfo[26].cMode == 4))
			{
				bItemDrop_SkillDialog();
				//bItemDrop_ExternalScreen(cItemID, m_stDialogBoxInfo[26].sX+50, m_stDialogBoxInfo[26].sY+50);
			}
			// Crafting
			// Dblclick Crafting box
			if ((m_bIsDialogEnabled[26] == TRUE) && (m_stDialogBoxInfo[26].cMode == 7))
			{
				bItemDrop_SkillDialog();
				//bItemDrop_ExternalScreen(cItemID, m_stDialogBoxInfo[26].sX+50, m_stDialogBoxInfo[26].sY+50);
			}
			if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EQUIP)
			{
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
				m_stMCursor.sSelectedObjectID = (short)cItemID;
				bItemDrop_Character();
				m_stMCursor.cSelectedObjectType = NULL;
				m_stMCursor.sSelectedObjectID = NULL;
			}
			return;
		}
	}
}

void CGame::NotifyMsg_ItemToBank(char *pData)
{
	char * cp;
	DWORD * dwp, dwCount, dwAttribute;
	char  cName[21], cItemType, cEquipPos, cGenderLimit, cItemColor;
	BOOL  bIsEquipped;
	short cIndex;
	short * sp, sSprite, sSpriteFrame, sLevelLimit, sItemEffectValue2, sItemSpecEffectValue2, sItemSpecEffectValue3, Page;
	WORD  * wp, wWeight, wCurLifeSpan;
	char  cTxt[120];
	BOOL Actualizar = FALSE;

	cp = (pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	cIndex = *sp;
	cp += 2;

	Actualizar = (BOOL)*cp;
	cp++;

	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;

	dwp = (DWORD *)cp;
	dwCount = *dwp;
	cp += 4;

	cItemType = *cp;
	cp++;

	cEquipPos = *cp;
	cp++;

	bIsEquipped = (BOOL)*cp;
	cp++;

	sp = (short *)cp;
	sLevelLimit = *sp;
	cp += 2;

	cGenderLimit = *cp;
	cp++;

	wp = (WORD *)cp;
	wCurLifeSpan = *wp;
	cp += 2;

	wp = (WORD *)cp;
	wWeight = *wp;
	cp += 2;

	sp = (short *)cp;
	sSprite = *sp;
	cp += 2;

	sp = (short *)cp;
	sSpriteFrame = *sp;
	cp += 2;

	cItemColor = *cp;
	cp++;

	// v1.432
	sp = (short *)cp;
	sItemEffectValue2 = *sp;
	cp += 2;

	dwp = (DWORD *)cp;
	dwAttribute = *dwp;
	cp += 4;

	//sItemSpecEffectValue2 = (short)*cp;
	//cp++;
	//Lalomanu
	sp = (short *)cp;
	sItemSpecEffectValue2 = *sp;
	cp += 2;

	sItemSpecEffectValue3 = (short)*cp;
	cp++;

	Page = (short)*cp;
	cp++;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(cName, dwAttribute, cStr1, cStr2, cStr3, sItemSpecEffectValue3);

	if ((m_pBankList[cIndex] == NULL) || (Actualizar)) {
		m_pBankList[cIndex] = new class CItem;

		memcpy(m_pBankList[cIndex]->m_cName, cName, 20);
		m_pBankList[cIndex]->m_dwCount = dwCount;

		m_pBankList[cIndex]->m_cItemType = cItemType;
		m_pBankList[cIndex]->m_cEquipPos = cEquipPos;

		m_pBankList[cIndex]->m_sLevelLimit = sLevelLimit;
		m_pBankList[cIndex]->m_cGenderLimit = cGenderLimit;
		m_pBankList[cIndex]->m_wCurLifeSpan = wCurLifeSpan;
		m_pBankList[cIndex]->m_wWeight = wWeight;
		m_pBankList[cIndex]->m_sSprite = sSprite;
		m_pBankList[cIndex]->m_sSpriteFrame = sSpriteFrame;
		m_pBankList[cIndex]->m_cItemColor = cItemColor;
		m_pBankList[cIndex]->m_sItemEffectValue2 = sItemEffectValue2;
		m_pBankList[cIndex]->m_dwAttribute = dwAttribute;
		m_pBankList[cIndex]->m_sItemSpecEffectValue2 = sItemSpecEffectValue2;
		m_pBankList[cIndex]->m_sItemSpecEffectValue3 = sItemSpecEffectValue3;
		m_pBankList[cIndex]->BankPage = Page;

		ZeroMemory(cTxt, sizeof(cTxt));
		if (dwCount == 1) wsprintf(cTxt, NOTIFYMSG_ITEMTOBANK3, cStr1);
		else wsprintf(cTxt, NOTIFYMSG_ITEMTOBANK2, dwCount, cStr1);

		if (m_bIsDialogEnabled[14] == TRUE)
		{
			m_stDialogBoxInfo[14].cMode = Page;
			m_stDialogBoxInfo[14].sView = BANK_ITEMS_PAGE - 12;
		}
		AddEventList(cTxt, 10);
	}
}
/*

void CGame::UpdateScreen_OnChangePassword()
{
	short msX, msY, msZ;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;
	static class CMouseInterface * pMI;
	static char  cName[12], cPassword[12], cNewPassword[12], cNewPassConfirm[12], cPrevFocus;
	static DWORD dwCTime;
	DWORD dwTime = timeGetTime();
	BOOL bFlag = TRUE;

	if (m_cGameModeCount == 0) {
		EndInputString();

		pMI = new class CMouseInterface;
		pMI->AddRect(300, 148, 425, 170);
		pMI->AddRect(300, 172, 425, 194);
		pMI->AddRect(300, 196, 425, 218);
		pMI->AddRect(300, 220, 425, 242);

		pMI->AddRect(197, 320, 197 + DEF_BTNSZX, 320 + DEF_BTNSZY);
		pMI->AddRect(370, 320, 370 + DEF_BTNSZX, 320 + DEF_BTNSZY);

		cPrevFocus = 2; //1
		m_cCurFocus = 2; //1
		m_cMaxFocus = 6;
		m_bEnterPressed = FALSE;
		m_cArrowPressed = 0;

		ZeroMemory(cName, sizeof(cName));
		ZeroMemory(cPassword, sizeof(cPassword));
		ZeroMemory(cNewPassword, sizeof(cNewPassword));
		ZeroMemory(cNewPassConfirm, sizeof(cNewPassConfirm));

		DecriptString(m_cAccountName);
		strcpy(cName, m_cAccountName);
		EncriptString(m_cAccountName);

		//StartInputString(314, 155, 11, cName);
		StartInputString(314, 179, 11, cPassword);
		ClearInputString();
		dwCTime = dwTime;
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if ((dwTime - dwCTime) > 100) {
		m_cMenuFrame++;
		dwCTime = dwTime;
	}
	if (m_cMenuFrame >= 8)
	{
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8)
		{
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;

	if (m_cArrowPressed != 0)
	{
		switch (m_cArrowPressed) {
			case 1:
				m_cCurFocus--;
				if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
				break;

			case 2:
				if (m_cCurFocus == 3) m_cCurFocus = 4;
				else if (m_cCurFocus == 4) m_cCurFocus = 3;
				break;

			case 3:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;

			case 4:
				if (m_cCurFocus == 3) m_cCurFocus = 4;
				else if (m_cCurFocus == 4) m_cCurFocus = 3;
				break;
		}
		m_cArrowPressed = 0;
	}

	if (m_bEnterPressed == TRUE)
	{
		PlaySound('E', 14, 5);
		switch (m_cCurFocus) {
			case 1:
			case 2:
			case 3:
			case 4:
				m_cCurFocus++;
				if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
				break;

			case 5:	// Connect
				if ((m_Misc.bCheckValidString(cPassword) == FALSE) || (strlen(cPassword) == 0) ||
					(m_Misc.bCheckValidName(cNewPassword) == FALSE) || (m_Misc.bCheckValidName(cNewPassConfirm) == FALSE) ||
					(strlen(cNewPassword) == 0) || (memcmp(cNewPassword, cNewPassConfirm, 10) != 0)) break;

				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));
				ZeroMemory(m_cNewPassword, sizeof(m_cNewPassword));
				ZeroMemory(m_cNewPassConfirm, sizeof(m_cNewPassConfirm));
				strcpy(m_cAccountName, cName);
				strcpy(m_cAccountPassword, cPassword);
				strcpy(m_cNewPassword, cNewPassword);
				strcpy(m_cNewPassConfirm, cNewPassConfirm);
				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();
				m_pLSock->bConnect(m_cLogServerAddr, m_iLogServerPort, WM_USER_LOGSOCKETEVENT);
				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = MSGID_REQUEST_CHANGEPASSWORD;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "41");
				delete pMI;
				return;

			case 6:	// Cancel
				ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
				//m_dwLoginMode = NUCLEO_REQUEST_LOGIN;
				delete pMI;
				return;
		}
		m_bEnterPressed = FALSE;
	}

	if (m_bEscPressed == TRUE)
	{
		ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	if (cPrevFocus != m_cCurFocus)
	{
		EndInputString();
		switch (m_cCurFocus) {
			case 1:
				StartInputString(314, 155, 11, cName);
				break;
			case 2:
				StartInputString(314, 179, 11, cPassword);
				break;
			case 3:
				StartInputString(314, 203, 11, cNewPassword);
				break;
			case 4:
				StartInputString(314, 227, 11, cNewPassConfirm);
				break;
		}
		cPrevFocus = m_cCurFocus;
	}

	m_DDraw.ClearBackB4();

	UpdateScreen_OnSelectCharacter(0, 0, 0, 0, TRUE);
	//m_DDraw.DrawShadowBox(0, 0, 639, 479);//SelectCharacter

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 153, 112, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, 153, 112, 13);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 153 + 157, 112 + 109, 7);//

	PutString(206, 155, UPDATE_SCREEN_ON_CHANGE_PASSWORD1, RGB(25, 35, 25));
	PutString(206, 179, UPDATE_SCREEN_ON_CHANGE_PASSWORD2, RGB(25, 35, 25));
	PutString(206, 203, UPDATE_SCREEN_ON_CHANGE_PASSWORD3, RGB(25, 35, 25));
	PutString(206, 227, UPDATE_SCREEN_ON_CHANGE_PASSWORD4, RGB(25, 35, 25));

	if (m_cCurFocus != 1) {
		if (m_Misc.bCheckValidString(cName) != FALSE)
			PutString(314, 155, cName, RGB(25, 35, 25));
		else PutString(314, 155, cName, RGB(55, 18, 13));
	}
	if ((m_Misc.bCheckValidString(cName) == FALSE) || (strlen(cName) == 0)) bFlag = FALSE;

	if (m_cCurFocus != 2) {
		if ((m_Misc.bCheckValidString(cPassword) != FALSE))
			PutString(314, 179, cPassword, RGB(25, 35, 25), TRUE, 3);
		else PutString(314, 179, cPassword, RGB(55, 18, 13), TRUE, 3);
	}

	if (m_cCurFocus != 3) {
		if ((m_Misc.bCheckValidName(cNewPassword) != FALSE))
			PutString(314, 203, cNewPassword, RGB(25, 35, 25), TRUE, 3);
		else PutString(314, 203, cNewPassword, RGB(55, 18, 13), TRUE, 3);
	}

	if (m_cCurFocus != 4) {
		if ((m_Misc.bCheckValidName(cNewPassConfirm) != FALSE))
			PutString(314, 227, cNewPassConfirm, RGB(25, 35, 25), TRUE, 3);
		else PutString(314, 227, cNewPassConfirm, RGB(55, 18, 13), TRUE, 3);
	}

	if ((m_Misc.bCheckValidString(cPassword) == FALSE) || (strlen(cPassword) == 0) || (memcmp(cNewPassword, cNewPassConfirm, 10) != 0) ||
		(memcmp(cPassword, cNewPassword, 10) == 0)) bFlag = FALSE;


	if (m_cCurFocus == 1) ShowReceivedString();
	else if ((m_cCurFocus == 2) || (m_cCurFocus == 3) || (m_cCurFocus == 4)) ShowReceivedString(TRUE);

	PutAlignedString(153, 487, 258, UPDATE_SCREEN_ON_CHANGE_PASSWORD5);//"
	PutAlignedString(153, 487, 273, UPDATE_SCREEN_ON_CHANGE_PASSWORD6);//"
	PutAlignedString(153, 487, 288, UPDATE_SCREEN_ON_CHANGE_PASSWORD7);//"

	if ((bFlag == TRUE) && (m_cCurFocus == 5))
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(197, 320, 21, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(197, 320, 20, dwTime);

	if (m_cCurFocus == 6)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(370, 320, 17, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(370, 320, 16, dwTime);

	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK)
	{
		PlaySound('E', 14, 5);

		switch (iMIbuttonNum) {
			case 1:
			case 2:
			case 3:
			case 4:
				m_cCurFocus = iMIbuttonNum;
				break;

			case 5:
				if ((m_Misc.bCheckValidString(cPassword) == FALSE) || (strlen(cPassword) == 0) ||
					(m_Misc.bCheckValidName(cNewPassword) == FALSE) || (m_Misc.bCheckValidName(cNewPassConfirm) == FALSE) ||
					(strlen(cNewPassword) == 0) || (memcmp(cNewPassword, cNewPassConfirm, 10) != 0)) break;

				EndInputString();
				ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
				ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));
				ZeroMemory(m_cNewPassword, sizeof(m_cNewPassword));
				ZeroMemory(m_cNewPassConfirm, sizeof(m_cNewPassConfirm));
				strcpy(m_cAccountName, cName);
				strcpy(m_cAccountPassword, cPassword);
				strcpy(m_cNewPassword, cNewPassword);
				strcpy(m_cNewPassConfirm, cNewPassConfirm);
				m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
				GetIPByDNS();
				m_pLSock->bConnect(m_cLogServerAddr, m_iLogServerPort, WM_USER_LOGSOCKETEVENT);
				m_pLSock->bInitBufferSize(30000);
				ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
				m_dwConnectMode = MSGID_REQUEST_CHANGEPASSWORD;
				ZeroMemory(m_cMsg, sizeof(m_cMsg));
				strcpy(m_cMsg, "41");
				delete pMI;
				return;

			case 6:
				// Cancel
				ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
				delete pMI;
				return;
		}
	}

	if ((msX >= 197) && (msX <= 197 + DEF_BTNSZX) && (msY >= 320) && (msY <= 320 + DEF_BTNSZY)) m_cCurFocus = 5;
	if ((msX >= 370) && (msX <= 370 + DEF_BTNSZX) && (msY >= 320) && (msY <= 320 + DEF_BTNSZY)) m_cCurFocus = 6;

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}*/

//heaton change password
void CGame::UpdateScreen_OnChangePassword()
{
	short msX, msY, msZ;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;
	static class CMouseInterface* pMI;
	static char  cName[12], cPassword[12], cNewPassword[12], cNewPassConfirm[12], cPrevFocus;
	static DWORD dwCTime;
	DWORD dwTime = timeGetTime();
	BOOL bFlag = TRUE;


	// Coordenadas centradas para 800x600
	int centerX = 0;  // Mitad de 800
	int centerY = 0;   // Punto inicial de los campos de texto

	if (c_reso->IsResolution() == C800x600)
	{
		centerX = 80;
		centerY = 60;
	}

	if (m_cGameModeCount == 0) {
		EndInputString();

		pMI = new class CMouseInterface;
		pMI->AddRect(300 + centerX, 148 + centerY, 425 + centerX, 170 + centerY);
		pMI->AddRect(300 + centerX, 172 + centerY, 425 + centerX, 194 + centerY);
		pMI->AddRect(300 + centerX, 196 + centerY, 425 + centerX, 218 + centerY);
		pMI->AddRect(300 + centerX, 220 + centerY, 425 + centerX, 242 + centerY);

		pMI->AddRect(300 + centerX, 220 + 24 + centerY, 425 + centerX, 242 + 24 + centerY);

		pMI->AddRect(197 + centerX, 320 + centerY, 197 + DEF_BTNSZX + centerX, 320 + DEF_BTNSZY + centerY);
		pMI->AddRect(370 + centerX, 320 + centerY, 370 + DEF_BTNSZX + centerX, 320 + DEF_BTNSZY + centerY);


		cPrevFocus = 2; //1
		m_cCurFocus = 2; //1
		m_cMaxFocus = 7;
		m_bEnterPressed = FALSE;
		m_cArrowPressed = 0;

		ZeroMemory(cName, sizeof(cName));
		ZeroMemory(cPassword, sizeof(cPassword));
		ZeroMemory(cNewPassword, sizeof(cNewPassword));
		ZeroMemory(cNewPassConfirm, sizeof(cNewPassConfirm));
		ZeroMemory(m_cEmailAddr, sizeof(m_cEmailAddr));

		DecriptString(m_cAccountName);
		strcpy(cName, m_cAccountName);
		EncriptString(m_cAccountName);

		//StartInputString(314, 155, 11, cName);
		StartInputString(314 + centerX, 179 + centerY, 11, cPassword);
		ClearInputString();
		dwCTime = dwTime;
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 100) m_cGameModeCount = 100;

	if ((dwTime - dwCTime) > 100) {
		m_cMenuFrame++;
		dwCTime = dwTime;
	}
	if (m_cMenuFrame >= 8)
	{
		m_cMenuDirCnt++;
		if (m_cMenuDirCnt > 8)
		{
			m_cMenuDir++;
			m_cMenuDirCnt = 1;
		}
		m_cMenuFrame = 0;
	}
	if (m_cMenuDir > 8) m_cMenuDir = 1;

	if (m_cArrowPressed != 0)
	{
		switch (m_cArrowPressed) {
		case 1:
			m_cCurFocus--;
			if (m_cCurFocus <= 0) m_cCurFocus = m_cMaxFocus;
			break;

		case 2:
			if (m_cCurFocus == 3) m_cCurFocus = 4;
			else if (m_cCurFocus == 4) m_cCurFocus = 3;
			break;

		case 3:
			m_cCurFocus++;
			if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
			break;

		case 4:
			if (m_cCurFocus == 3) m_cCurFocus = 4;
			else if (m_cCurFocus == 4) m_cCurFocus = 3;
			break;

		case 5:
			if (m_cCurFocus == 4) m_cCurFocus = 5;
			else if (m_cCurFocus == 5) m_cCurFocus = 4;
			break;
		}
		m_cArrowPressed = 0;
	}

	if (m_bEnterPressed == TRUE)
	{
		PlaySound('E', 14, 5);
		switch (m_cCurFocus) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			m_cCurFocus++;
			if (m_cCurFocus > m_cMaxFocus) m_cCurFocus = 1;
			break;

		case 6:	// Connect
			if ((m_Misc.bCheckValidString(cPassword) == FALSE) || (strlen(cPassword) == 0) ||
				(m_Misc.bCheckValidName(cNewPassword) == FALSE) || (m_Misc.bCheckValidName(cNewPassConfirm) == FALSE) ||
				(strlen(cNewPassword) == 0) || (memcmp(cNewPassword, cNewPassConfirm, 10) != 0)) break;

			ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
			ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));
			ZeroMemory(m_cNewPassword, sizeof(m_cNewPassword));
			ZeroMemory(m_cNewPassConfirm, sizeof(m_cNewPassConfirm));
			strcpy(m_cAccountName, cName);
			strcpy(m_cAccountPassword, cPassword);
			strcpy(m_cNewPassword, cNewPassword);
			strcpy(m_cNewPassConfirm, cNewPassConfirm);
			m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
			GetIPByDNS();
			m_pLSock->bConnect(m_cLogServerAddr, m_iLogServerPort, WM_USER_LOGSOCKETEVENT);
			m_pLSock->bInitBufferSize(30000);
			ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
			m_dwConnectMode = MSGID_REQUEST_CHANGEPASSWORD;
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "41");
			delete pMI;
			return;

		case 7:	// Cancel
			ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
			//m_dwLoginMode = NUCLEO_REQUEST_LOGIN;
			delete pMI;
			return;
		}
		m_bEnterPressed = FALSE;
	}

	if (m_bEscPressed == TRUE)
	{
		ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		delete pMI;
		m_bEscPressed = FALSE;
		return;
	}

	if (cPrevFocus != m_cCurFocus)
	{
		EndInputString();
		switch (m_cCurFocus) {
		case 1:
			StartInputString(314 + centerX, 155 + centerY, 11, cName);
			break;
		case 2:
			StartInputString(314 + centerX, 179 + centerY, 11, cPassword);
			break;
		case 3:
			StartInputString(314 + centerX, 203 + centerY, 11, cNewPassword);
			break;
		case 4:
			StartInputString(314 + centerX, 227 + centerY, 11, cNewPassConfirm);
			break;
		case 5:
			StartInputString(314 + centerX, 227 + 24 + centerY, 52, m_cEmailAddr);
			break;
		}
		cPrevFocus = m_cCurFocus;
	}

	m_DDraw.ClearBackB4();

	UpdateScreen_OnSelectCharacter(0, 0, 0, 0, TRUE);

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 153 + centerX, 112 + centerY, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, 153 + centerX, 112 + centerY, 13);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 153 + 157 + centerX, 112 + 109 + centerY, 7);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 153 + 157 + centerX, 112 + 109 + centerY, 7);//
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 153 + 157 + centerX, 112 + 109 + centerY + 24, 7);

	PutString(206 + centerX, 155 + centerY, UPDATE_SCREEN_ON_CHANGE_PASSWORD1, RGB(25, 35, 25));
	PutString(206 + centerX, 179 + centerY, UPDATE_SCREEN_ON_CHANGE_PASSWORD2, RGB(25, 35, 25));
	PutString(206 + centerX, 203 + centerY, UPDATE_SCREEN_ON_CHANGE_PASSWORD3, RGB(25, 35, 25));
	PutString(206 + centerX, 227 + centerY, UPDATE_SCREEN_ON_CHANGE_PASSWORD4, RGB(25, 35, 25));
	PutString(206 + centerX, 227 + centerY + 24, "Email", RGB(25, 35, 25));

	if (m_cCurFocus != 1) {
		if (m_Misc.bCheckValidString(cName) != FALSE)
			PutString(314 + centerX, 155 + centerY, cName, RGB(25, 35, 25));
		else PutString(314 + centerX, 155 + centerY, cName, RGB(55, 18, 13));
	}
	if ((m_Misc.bCheckValidString(cName) == FALSE) || (strlen(cName) == 0)) bFlag = FALSE;

	if (m_cCurFocus != 2) {
		if ((m_Misc.bCheckValidString(cPassword) != FALSE))
			PutString(314 + centerX, 179 + centerY, cPassword, RGB(25, 35, 25), TRUE, 3);
		else PutString(314 + centerX, 179 + centerY, cPassword, RGB(55, 18, 13), TRUE, 3);
	}

	if (m_cCurFocus != 3) {
		if ((m_Misc.bCheckValidName(cNewPassword) != FALSE))
			PutString(314 + centerX, 203 + centerY, cNewPassword, RGB(25, 35, 25), TRUE, 3);
		else PutString(314 + centerX, 203 + centerY, cNewPassword, RGB(55, 18, 13), TRUE, 3);
	}

	if (m_cCurFocus != 4) {
		if ((m_Misc.bCheckValidName(cNewPassConfirm) != FALSE))
			PutString(314 + centerX, 227 + centerY, cNewPassConfirm, RGB(25, 35, 25), TRUE, 3);
		else PutString(314 + centerX, 227 + centerY, cNewPassConfirm, RGB(55, 18, 13), TRUE, 3);
	}

	if ((m_Misc.bCheckValidString(cPassword) == FALSE) || (strlen(cPassword) == 0) ||
		(memcmp(cNewPassword, cNewPassConfirm, 10) != 0) ||
		(memcmp(cPassword, cNewPassword, 10) == 0)) bFlag = FALSE;

	if (m_cCurFocus != 5) {
		if (m_Misc.bIsValidEmail(m_cEmailAddr))
		{
			PutString(314 + centerX, 227 + 24 + centerY, m_cEmailAddr, RGB(25, 35, 25));
		}
		else
		{
			bFlag = FALSE;
			PutString(314 + centerX, 227 + 24 + centerY, m_cEmailAddr, RGB(55, 18, 13));
		}
	}

	if (m_cCurFocus == 1 || (m_cCurFocus == 5)) ShowReceivedString();
	else if ((m_cCurFocus == 2) || (m_cCurFocus == 3) || (m_cCurFocus == 4)) ShowReceivedString(TRUE);

	PutAlignedString(153 + centerX, 487 + centerX, 258 + 10 + centerY, UPDATE_SCREEN_ON_CHANGE_PASSWORD5);//"
	PutAlignedString(153 + centerX, 487 + centerX, 273 + 10 + centerY, UPDATE_SCREEN_ON_CHANGE_PASSWORD6);//"
	PutAlignedString(153 + centerX, 487 + centerX, 288 + 10 + centerY, UPDATE_SCREEN_ON_CHANGE_PASSWORD7);//"

	if (bFlag && m_cCurFocus == 6)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(197 + centerX, 320 + centerY, 21, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(197 + centerX, 320 + centerY, 20, dwTime);

	if (m_cCurFocus == 7)
		m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(370 + centerX, 320 + centerY, 17, dwTime);
	else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(370 + centerX, 320 + centerY, 16, dwTime);

	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if (cMIresult == DEF_MIRESULT_CLICK)
	{
		PlaySound('E', 14, 5);

		switch (iMIbuttonNum) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
			m_cCurFocus = iMIbuttonNum;
			break;

		case 6:
			if ((m_Misc.bCheckValidString(cPassword) == FALSE) || (strlen(cPassword) == 0) ||
				(m_Misc.bCheckValidName(cNewPassword) == FALSE) || (m_Misc.bCheckValidName(cNewPassConfirm) == FALSE) ||
				(strlen(cNewPassword) == 0) || (memcmp(cNewPassword, cNewPassConfirm, 10) != 0)) break;

			EndInputString();
			ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
			ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));
			ZeroMemory(m_cNewPassword, sizeof(m_cNewPassword));
			ZeroMemory(m_cNewPassConfirm, sizeof(m_cNewPassConfirm));
			strcpy(m_cAccountName, cName);
			strcpy(m_cAccountPassword, cPassword);
			strcpy(m_cNewPassword, cNewPassword);
			strcpy(m_cNewPassConfirm, cNewPassConfirm);
			m_pLSock = new class XSocket(m_hWnd, DEF_SOCKETBLOCKLIMIT);
			GetIPByDNS();
			m_pLSock->bConnect(m_cLogServerAddr, m_iLogServerPort, WM_USER_LOGSOCKETEVENT);
			m_pLSock->bInitBufferSize(30000);
			ChangeGameMode(DEF_GAMEMODE_ONCONNECTING);
			m_dwConnectMode = MSGID_REQUEST_CHANGEPASSWORD;
			ZeroMemory(m_cMsg, sizeof(m_cMsg));
			strcpy(m_cMsg, "41");
			delete pMI;
			return;

		case 7:
			// Cancel
			ChangeGameMode(DEF_GAMEMODE_ONSELECTCHARACTER);
			delete pMI;
			return;
		}
	}

	if ((msX >= 197 + centerX) && (msX <= 197 + DEF_BTNSZX + centerX) && (msY >= 320 + centerY) && (msY <= 320 + DEF_BTNSZY + centerY)) m_cCurFocus = 6;
	if ((msX >= 370 + centerX) && (msX <= 370 + DEF_BTNSZX + centerX) && (msY >= 320 + centerY) && (msY <= 320 + DEF_BTNSZY + centerY)) m_cCurFocus = 7;

	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}


void CGame::DlgBoxClick_SysMenu(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[19].sX;
	sY = m_stDialogBoxInfo[19].sY;

	if (m_bForceDisconn) return;


	if ((msX >= sX + 20) && (msX <= sX + 135) && (msY >= sY + 45) && (msY <= sY + 45 + 15))
	{
		bSendCommand(CLIENT_REQUEST_FULLDATACHAR, NULL, NULL, NULL, NULL, NULL, NULL);
		EnableDialogBox(52, NULL, NULL, NULL);
		bSendCommand(CLIENT_REQUEST_TOPMEMORY, NULL, NULL, NULL, NULL, NULL, NULL);
		PlaySound('E', 14, 5);
		DisableDialogBox(19);
		return;
	}
		
	if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + 75) && (msY <= sY + 75 + DEF_BTNSZY)) {
		if (m_cSalirDelChar == -1)
			m_cSalirDelChar = 11;
		else {
			m_cSalirDelChar = -1;
			AddEventList(DLGBOX_CLICK_SYSMENU2, 10);
			DisableDialogBox(19);
			bSendCommand(CLIENT_REQUEST_CANCELLOGOUT, NULL, NULL, NULL, NULL, NULL, NULL);
		}
		PlaySound('E', 14, 5);
	}

	if ((DecriptInt(m_iHP) <= 0) && (DecriptInt(m_cRestartCount) == -1))
	{
		if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 75) && (msY <= sY + 75 + DEF_BTNSZY))
		{
			m_cRestartCount = EncriptInt(5);
			m_dwRestartCountTime = timeGetTime();
			DisableDialogBox(19);
			wsprintf(G_cTxt, DLGBOX_CLICK_SYSMENU1, DecriptInt(m_cRestartCount)); // "Restarting game....%d"
			AddEventList(G_cTxt, 10);
			PlaySound('E', 14, 5);
		}
	}
}

void CGame::send_object_data(WORD object)
{
	char data[300];

	char * cp = data;
	Push(cp, (u32)NOT_OBJECTID);
	Push(cp, (u16)0);
	Push(cp, object);
	m_pGSock->iSendMsg(data, sizeof(data));
}

// dont show owner
bool CGame::DontShowOwner(short sOwnerType)
{
	return sOwnerType == 68 || sOwnerType == 69 || sOwnerType == 24 || sOwnerType == 26 || sOwnerType == 20 || sOwnerType == 90 || sOwnerType == 15 || sOwnerType == 19 || sOwnerType == 25 || sOwnerType == 67 || sOwnerType == 21 || sOwnerType == 125 || sOwnerType == 126 || sOwnerType == 127 || sOwnerType == 111 || sOwnerType == 129;
	// || sOwnerType == 71 || sOwnerType == 78;
}


void CGame::DrawNpcName(short sX, short sY, short sOwnerType, int iStatus, WORD tempobject)
{
	char cTxt[32], cTxt2[64];
	bool show = true, aby = false;
	bool dontshow = false;
	ZeroMemory(cTxt, sizeof(cTxt));
	ZeroMemory(cTxt2, sizeof(cTxt2));
	GetNpcName(sOwnerType, cTxt);

	if (DontShowOwner(sOwnerType)) show = false;
	//if (string(cTxt) == "Hell Abaddon") dontshow = true;
	if (string(cTxt) == "Abaddon" || string(cTxt) == "Hell Abaddon") { aby = true; }
	
	if ((iStatus & 0x20) != 0) strcat(cTxt, DRAW_OBJECT_NAME50);//" Berserk"
	if ((iStatus & 0x40) != 0) strcat(cTxt, DRAW_OBJECT_NAME51);//" Frozen"
	PutString2(sX, sY, cTxt, 255, 255, 255);
	if (DecriptBool(m_bIsObserverMode) == TRUE) PutString2(sX, sY + 14, cTxt, 50, 50, 255);
	else if (DecriptBool(m_bIsConfusion) || (DecriptInt(m_iIlusionOwnerH) != 0))
	{
		ZeroMemory(cTxt, sizeof(cTxt));
		strcpy(cTxt, DRAW_OBJECT_NAME87);//"(Unknown)"
		PutString2(sX, sY + 14, cTxt, 150, 150, 150); // v2.171
	}
	else
	{
		switch (_iGetFOE(iStatus, sOwnerType)) {
			case -2:
				PutString2(sX, sY + 14, DRAW_OBJECT_NAME90, 255, 0, 0); // "(Enemy)"
				break;
			case -1:
				PutString2(sX, sY + 14, DRAW_OBJECT_NAME90, 255, 0, 0); // "(Enemy)"
				break;
			case 0:
				PutString2(sX, sY + 14, DRAW_OBJECT_NAME88, 50, 50, 255); // "Neutral"
				break;
			case 1:
				PutString2(sX, sY + 14, DRAW_OBJECT_NAME89, 30, 255, 30); // "(Friendly)"
				break;
		}
	}
#ifdef _DEBUGS
	wsprintf(cTxt2, "Status: 0x%.8X ", iStatus);
	PutString2(sX, sY + 42, cTxt2, 30, 255, 30);
	ZeroMemory(cTxt2, sizeof(cTxt2));
#endif

	switch ((iStatus & 0x0F00) >> 8) {
		case 0: break;
		case 1: strcpy(cTxt2, DRAW_OBJECT_NAME52); break;//"Clairvoyant"
		case 2: strcpy(cTxt2, DRAW_OBJECT_NAME53); break;//"Destruction of Magic Protection"
		case 3: strcpy(cTxt2, DRAW_OBJECT_NAME54); break;//"Anti-Physical Damage"
		case 4: strcpy(cTxt2, DRAW_OBJECT_NAME55); break;//"Anti-Magic Damage"
		case 5: strcpy(cTxt2, DRAW_OBJECT_NAME56); break;//"Poisonous"
		case 6: strcpy(cTxt2, DRAW_OBJECT_NAME57); break;//"Critical Poisonous"
		case 7: strcpy(cTxt2, DRAW_OBJECT_NAME58); break;//"Explosive"
		case 8: strcpy(cTxt2, DRAW_OBJECT_NAME59); break;//"Critical Explosive"
	}

	if (m_Misc.bCheckIMEString(cTxt2)) PutString_SprFont3(sX, sY + 28, cTxt2, m_wR[13] * 4, m_wG[13] * 4, m_wB[13] * 4, FALSE, 2);
	else PutString2(sX, sY + 28, cTxt2, 240, 240, 70);

	if (tempobject != -1)
	{
		if (reqhp)
		{
			_tmp_wObjectIDOld = _tmp_wObjectID;
			reqhp = false;
			send_object_data(tempobject);
		}
		else
		{
			if (_tmp_wObjectIDOld != tempobject)
			{
				_tmp_wObjectIDOld = tempobject;
				showbar = false;
				send_object_data(tempobject);
			}
		}
	}

	int iadd = 0;
	if (show && showbar && m_iMobMaxHP != 0 && m_iMobHP > 0 && BarraNpc)// && !dontshow)
	{
		int iPorc = (m_iMobHP * 100) / m_iMobMaxHP;
		if (aby)
		{

			m_DDraw.DrawShadowBox(sX - 3, sY + 131 + iadd, sX + 49, sY + 139 + iadd);
			for (int i = 0; i < iPorc; i++)
			{
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 81 + 50 + iadd, 0, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 82 + 50 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 83 + 50 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 84 + 50 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 85 + 50 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 86 + 50 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 87 + 50 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 88 + 50 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 89 + 50 + iadd, 0, 0, 0);
			}
		}
		else
		{

			m_DDraw.DrawShadowBox(sX - 3, sY + 34 + iadd, sX + 49, sY + 42 + iadd);

			for (int i = 0; i < iPorc; i++)
			{
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 34 + iadd, 0, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 35 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 36 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 37 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 38 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 39 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 40 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 41 + iadd, 255, 0, 0);
				m_DDraw.PutPixel(sX - 1 + (i / 2), sY + 42 + iadd, 0, 0, 0);
			}
		}
	}



}

void CGame::DrawObjectName(short sX, short sY, char * pName, int iStatus, int ObjectID)
{
	char cTxt[64], cTxt2[64];
	short sR, sG, sB;
	int i, iGuildIndex, iFOE, iAddY = 0;
	BOOL bPK, bCitizen, bAresden, bHunter;
	iFOE = _iGetFOE(iStatus, 7);
	if (iFOE < 0)
	{
		sR = 255; sG = 0; sB = 0;
	}
	else if (iFOE == 0)
	{
		sR = 50; sG = 50; sB = 255;
	}
	else
	{
		sR = 30; sG = 200; sB = 30;
	}
	ZeroMemory(cTxt, sizeof(cTxt));
	ZeroMemory(cTxt2, sizeof(cTxt2));

	if (DecriptInt(m_iIlusionOwnerH) == 0)
	{
		if ((m_bIsCrusadeMode == FALSE) || (CVCEvent == FALSE) || (WWEvent == FALSE) || (WWEventII == FALSE) || (FuryDayMode == TRUE))  wsprintf(cTxt, "%s", pName);
		else {
			DecriptString(m_cCurLocation);
			if (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) != 0)) wsprintf(cTxt, "%s", pName);
			else {
				if (_tmp_wObjectID >= 10000) strcpy(cTxt, NPC_NAME_MERCENARY); //"Mercenary"
				else {
					if (iFOE == -1) wsprintf(cTxt, "%d", _tmp_wObjectID);
					else strcpy(cTxt, pName);
				}
			}
			EncriptString(m_cCurLocation);
		}
		if (DecriptInt(m_iPartyStatus) != NULL)
		{
			for (i = 0; i < DEF_MAXPARTYMEMBERS; i++)
			{
				if (strcmp(m_stPartyMemberNameList[i].cName, pName) == 0)
				{
					strcat(cTxt, BGET_NPC_NAME23); // ", Party Member"
					break;
				}
			}
		}
	}
	else
		strcpy(cTxt, "?????");

	if (isInMap("dm"))
	{
		if (string(pName) != m_cPlayerName)
		{
			PutString2(sX, sY + 4, cTxt, 255, 255, 255);
			ZeroMemory(cTxt, sizeof(cTxt));
			strcpy(cTxt, "Enemy Player");
			PutString2(sX, sY + 4 + 14 + iAddY, cTxt, 255, 0, 9);
			ZeroMemory(cTxt, sizeof(cTxt));
			return;
		}
		else
		{
			strcpy(cTxt, pName);
			PutString2(sX, sY + 4, cTxt, 255, 255, 255);
			ZeroMemory(cTxt, sizeof(cTxt));
			strcpy(cTxt, "Combatant");
			PutString2(sX, sY + 4 + 14 + iAddY, cTxt, 255, 0, 9);
			ZeroMemory(cTxt, sizeof(cTxt));
			return;
		}
	}

	if ((iStatus & 0x20) != 0) strcat(cTxt, DRAW_OBJECT_NAME50);//" Berserk"
	if ((iStatus & 0x00100000) != 0) strcat(cTxt, " Furious");//" Berserk"
	if ((iStatus & 0x40) != 0) strcat(cTxt, DRAW_OBJECT_NAME51);//" Frozen"

	PutString2(sX, sY, cTxt, 255, 255, 255);
	ZeroMemory(cTxt, sizeof(cTxt));

	DecriptString(m_cCurLocation);
	if (memcmp(m_cCurLocation, "avaevent", 10) != 0) {
		if (memcmp(m_cPlayerName, pName, 10) == 0) {
			//if ((memcmp(m_cCurLocation, "evento13", 8) != 0) || (memcmp(m_cCurLocation, "evento14", 8) != 0))
			if ((memcmp(m_cCurLocation, "evento13", 8) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
			{
				if (DecriptInt(m_iGuildRank) == 0) {
					wsprintf(G_cTxt, "?????", m_cGuildName);//" Guildmaster)"
					PutString2(sX, sY + 14, G_cTxt, 180, 180, 180);
					iAddY = 14;
				}
				if (DecriptInt(m_iGuildRank) > 0) {
					wsprintf(G_cTxt, "?????", m_cGuildName);//" Guildsman)"
					PutString2(sX, sY + 14, G_cTxt, 180, 180, 180);
					iAddY = 14;
				}
			}
			else
			{
				if (DecriptInt(m_iGuildRank) == 0) {
					wsprintf(G_cTxt, DEF_MSG_GUILDMASTER, m_cGuildName);//" Guildmaster)"
					PutString2(sX, sY + 14, G_cTxt, 180, 180, 180);
					iAddY = 14;
				}
				if (DecriptInt(m_iGuildRank) > 0) {
					wsprintf(G_cTxt, DEF_MSG_GUILDSMAN, m_cGuildName);//" Guildsman)"
					PutString2(sX, sY + 14, G_cTxt, 180, 180, 180);
					iAddY = 14;
				}
			}

			if ((DecriptInt(m_iPKCount) != 0) || (Assasain == TRUE)) {
				bPK = TRUE;
				sR = 255; sG = 0; sB = 0;
			}
			else {
				bPK = FALSE;
				sR = 30; sG = 200; sB = 30;
			}
			bCitizen = DecriptBool(m_bCitizen);
			bAresden = DecriptBool(m_bAresden);
			bHunter = DecriptBool(m_bHunter);
		}
		else {
			// CLEROTH - CRASH BUG ( STATUS )
			if (iStatus & 0x80000000) bPK = TRUE;
			else bPK = FALSE;
			if (iStatus & 0x40000000) bCitizen = TRUE;
			else bCitizen = FALSE;
			if (iStatus & 0x20000000) bAresden = TRUE;
			else bAresden = FALSE;
			if (iStatus & 0x10000000) bHunter = TRUE;
			else bHunter = FALSE;
			if ((m_bIsCrusadeMode == FALSE) || (FuryDayMode == FALSE) || (iFOE >= 0)) {
				if (FindGuildName(pName, &iGuildIndex) == TRUE) {
					if (m_stGuildName[iGuildIndex].cGuildName[0] != NULL) {
						if (strcmp(m_stGuildName[iGuildIndex].cGuildName, "NONE") != 0) {
							//if ((memcmp(m_cCurLocation, "evento13", 8) != 0) || (memcmp(m_cCurLocation, "evento14", 8) != 0))
							if ((memcmp(m_cCurLocation, "evento13", 8) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
							{
								if (m_stGuildName[iGuildIndex].iGuildRank == 0) {
									wsprintf(G_cTxt, "?????", m_stGuildName[iGuildIndex].cGuildName);//
									PutString2(sX, sY + 14, G_cTxt, 180, 180, 180);
									m_stGuildName[iGuildIndex].dwRefTime = m_dwCurTime;
									iAddY = 14;
								}
								else if (m_stGuildName[iGuildIndex].iGuildRank > 0) {
									wsprintf(G_cTxt, "?????", m_stGuildName[iGuildIndex].cGuildName);//"
									PutString2(sX, sY + 14, G_cTxt, 180, 180, 180);
									m_stGuildName[iGuildIndex].dwRefTime = m_dwCurTime;
									iAddY = 14;
								}
							}
							else
							{
								if (m_stGuildName[iGuildIndex].iGuildRank == 0) {
									wsprintf(G_cTxt, DEF_MSG_GUILDMASTER, m_stGuildName[iGuildIndex].cGuildName);//
									PutString2(sX, sY + 14, G_cTxt, 180, 180, 180);
									m_stGuildName[iGuildIndex].dwRefTime = m_dwCurTime;
									iAddY = 14;
								}
								else if (m_stGuildName[iGuildIndex].iGuildRank > 0) {
									wsprintf(G_cTxt, DEF_MSG_GUILDSMAN, m_stGuildName[iGuildIndex].cGuildName);//"
									PutString2(sX, sY + 14, G_cTxt, 180, 180, 180);
									m_stGuildName[iGuildIndex].dwRefTime = m_dwCurTime;
									iAddY = 14;
								}
							}

						}
						else {
							m_stGuildName[iGuildIndex].dwRefTime = 0;
						}
					}
				}
				else bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GUILDNAME, NULL, _tmp_wObjectID, iGuildIndex, NULL, NULL);
			}
		}
	//	EncriptString(m_cPlayerName);

		//if (memcmp(m_cCurLocation, "evento13", 8) != 0)
		//if ((memcmp(m_cCurLocation, "evento13", 8) != 0) || (memcmp(m_cCurLocation, "evento14", 8) != 0))
		if ((memcmp(m_cCurLocation, "evento13", 8) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
		{
			if (bCitizen == FALSE)	strcpy(cTxt, DEF_MSG_ENEMY);// "Traveller"
			else {
				if (bAresden) {
					if (bHunter == TRUE) strcpy(cTxt, DEF_MSG_ENEMY); // "Aresden Civilian"
					else strcpy(cTxt, DEF_MSG_ENEMY); // "Aresden Combatant"
				}
				else {
					if (bHunter == TRUE) strcpy(cTxt, DEF_MSG_ENEMY);// "Elvine Civilian"
					else strcpy(cTxt, DEF_MSG_ENEMY);	// "Elvine Combatant"
				}
			}
			if (bPK == TRUE) {
				if (bCitizen == FALSE) strcpy(cTxt, DEF_MSG_ENEMY);	// "Criminal"
				else {
					if (bAresden) strcpy(cTxt, DEF_MSG_ENEMY);// "Aresden Criminal"
					else strcpy(cTxt, DEF_MSG_ENEMY);  // "Elvine Criminal"
				}
			}
			PutString2(sX, sY + 14 + iAddY, cTxt, sR = 255, sG = 0, sB = 0);
		}
		else
		{
			if (bCitizen == FALSE)	strcpy(cTxt, DRAW_OBJECT_NAME60);// "Traveller"
			else {
				if (bAresden) {
					if (bHunter == TRUE) strcpy(cTxt, DEF_MSG_ARECIVIL); // "Aresden Civilian"
					else strcpy(cTxt, DEF_MSG_ARESOLDIER); // "Aresden Combatant"
				}
				else {
					if (bHunter == TRUE) strcpy(cTxt, DEF_MSG_ELVCIVIL);// "Elvine Civilian"
					else strcpy(cTxt, DEF_MSG_ELVSOLDIER);	// "Elvine Combatant"
				}
			}
			if (bPK == TRUE) {
				if (bCitizen == FALSE) strcpy(cTxt, DEF_MSG_PK);	// "Criminal"
				else {
					if (bAresden) strcpy(cTxt, DEF_MSG_AREPK);// "Aresden Criminal"
					else strcpy(cTxt, DEF_MSG_ELVPK);  // "Elvine Criminal"
				}
			}
			PutString2(sX, sY + 14 + iAddY, cTxt, sR, sG, sB);
		}
	}
	//EncriptString(m_cCurLocation);

	if (DecriptInt(m_iLevel) < m_iPlayerMaxLevel) return;

	//short rank = get_object_rank(ObjectID);
	char crank[100];
	ZeroMemory(crank, sizeof(crank));

	int rank = -1;
	if (string(pName) == m_cPlayerName) {
		rank = m_sRankLevel;
	}
	else {
		rank = get_object_rank(ObjectID);
	}



	//if (memcmp(m_cCurLocation, "evento13", 8) != 0)
	//if ((memcmp(m_cCurLocation, "evento13", 8) != 0) || (memcmp(m_cCurLocation, "evento14", 8) != 0))
	if ((memcmp(m_cCurLocation, "evento13", 8) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
	{
		switch (rank)
		{
		case 0:
			strcpy(crank, "Xsilium");
			break;
		case 1:
			strcpy(crank, "Xsilium");
			break;
		case 2:
			strcpy(crank, "Xsilium");
			break;
		case 3:
			strcpy(crank, "Xsilium");
			break;
		case 4:
			strcpy(crank, "Xsilium");
			break;
		case 5:
			strcpy(crank, "Xsilium");
			break;
		case 6:
			strcpy(crank, "Xsilium");
			break;
		case 7:
			strcpy(crank, "Xsilium");
			break;
		case 8:
			strcpy(crank, "Xsilium");
			break;
		case 9:
			strcpy(crank, "Xsilium");
			break;
		case 10:
			strcpy(crank, "Xsilium");
			break;
		case 11:
			strcpy(crank, "Xsilium");
			break;
		case 12:
			strcpy(crank, "Xsilium");
			break;
		case 13:
			strcpy(crank, "Xsilium");
			break;
		case 14:
			strcpy(crank, "Xsilium");
			break;
		case 15:
			strcpy(crank, "Xsilium");
			break;
		case 16:
			strcpy(crank, "Xsilium");
			break;
		case 17:
			strcpy(crank, "Xsilium");
			break;
		case 18:
			strcpy(crank, "Xsilium");
			break;
		case 19:
			strcpy(crank, "Xsilium");
			break;
		case 20:
			strcpy(crank, "Xsilium");
			break;
		case 21:
			strcpy(crank, "Xsilium");
			break;
		case 22:
			strcpy(crank, "Xsilium");
			break;
		case 23:
			strcpy(crank, "Xsilium");
			break;
		case 24:
			strcpy(crank, "Xsilium");
			break;
		case 25:
			strcpy(crank, "Xsilium");
			break;
		case 26:
			strcpy(crank, "Xsilium");
			break;
		case 27:
			strcpy(crank, "Xsilium");
			break;
		case 28:
			strcpy(crank, "Xsilium");
			break;
		case 29:
			strcpy(crank, "Xsilium");
			break;
		case 30:
			strcpy(crank, "Xsilium");
			break;

		default: break;
		}
	}
	else
	{
		switch (rank)
		{
		case 0:
			strcpy(crank, "Novice - Lvl 0");
			break;
		case 1:
			strcpy(crank, "Initiate - Lvl 1");
			break;
		case 2:
			strcpy(crank, "Apprentice - Lvl 2");
			break;
		case 3:
			strcpy(crank, "Fighter - Lvl 3");
			break;
		case 4:
			strcpy(crank, "Novice Combatant - Lvl 4");
			break;
		case 5:
			strcpy(crank, "Aspirant - Lvl 5");
			break;
		case 6:
			strcpy(crank, "Combatant - Lvl 6");
			break;
		case 7:
			strcpy(crank, "Apprentice Combatant - Lvl 7");
			break;
		case 8:
			strcpy(crank, "Hero - Lvl 8");
			break;
		case 9:
			strcpy(crank, "Veteran - Lvl 9");
			break;
		case 10:
			strcpy(crank, "Competent Combatant - Lvl 10");
			break;
		case 11:
			strcpy(crank, "Champion - Lvl 11");
			break;
		case 12:
			strcpy(crank, "Master - Lvl 12");
			break;
		case 13:
			strcpy(crank, "Master Combatant - Lvl 13");
			break;
		case 14:
			strcpy(crank, "Legend - Lvl 14");
			break;
		case 15:
			strcpy(crank, "Illustrious Fighter - Lvl 15");
			break;
		case 16:
			strcpy(crank, "Warlord Supreme - Lvl 16");
			break;
		case 17:
			strcpy(crank, "Conqueror - Lvl 17");
			break;
		case 18:
			strcpy(crank, "Legendary Fighter - Lvl 18");
			break;
		case 19:
			strcpy(crank, "Battlelord Eminent - Lvl 19");
			break;
		case 20:
			strcpy(crank, "Commander - Lvl 20");
			break;
		case 21:
			strcpy(crank, "Ascended Fighter - Lvl 21");
			break;
		case 22:
			strcpy(crank, "General - Lvl 22");
			break;
		case 23:
			strcpy(crank, "Virtuoso Combatant - Lvl 23");
			break;
		case 24:
			strcpy(crank, "War Master Outstanding - Lvl 24");
			break;
		case 25:
			strcpy(crank, "Strategist - Lvl 25");
			break;
		case 26:
			strcpy(crank, "Distinguished Fighter - Lvl 26");
			break;
		case 27:
			strcpy(crank, "Strategist Lord Magnificent - Lvl 27");
			break;
		case 28:
			strcpy(crank, "Leader - Lvl 28");
			break;
		case 29:
			strcpy(crank, "Legendary Champion - Lvl 29");
			break;
		case 30:
			strcpy(crank, "Master of the Universe - Lvl Max");
			break;
		default: break;
		}
	}

	EncriptString(m_cCurLocation);

	if (string(pName) == m_cPlayerName)//20
	{
		char ctemplevel[100];
		if (m_iRebirthLevel != 0)
		{
			wsprintf(ctemplevel, "Level %d (+%d)", m_iLevel, m_iRebirthLevel);
			PutString2(sX, sY + 14 + 14 + iAddY, ctemplevel, sR = 255, sG = 255, sB = 0);
		}
		else
		{			
			wsprintf(ctemplevel, "Level %d", m_iLevel);
			PutString2(sX, sY + 14 + 14 + iAddY, ctemplevel, sR = 255, sG = 255, sB = 0);			
		}
	}
	else
	{
		int tempLevel = -1;
		int tempRebirthLevel = -1;
		
		get_object_levels(ObjectID, tempLevel, tempRebirthLevel);

		if (tempLevel != -1 && tempRebirthLevel != -1)
		{
			if (tempRebirthLevel != 0)
			{
				char ctemplevel[100];
				wsprintf(ctemplevel, "Level %d (+%d)", tempLevel, tempRebirthLevel);
				PutString2(sX, sY + 4 + 14 + 14 + iAddY, ctemplevel, sR = 255, sG = 255, sB = 0);
			}
			else
			{
				char ctemplevel[100];
				wsprintf(ctemplevel, "Level %d", tempLevel);
				PutString2(sX, sY + 4 + 14 + 14 + iAddY, ctemplevel, sR = 255, sG = 255, sB = 0);
			}
		}
	}


	//if (rank != -1) PutString2(sX, sY + 4 + 14 + 14 + iAddY, crank, 179, 158, 21);
	//if (rank != -1) PutString2(sX, sY + 14 + 14 + iAddY, crank, 179, 158, 21);
	/*
	if (string(pName) == m_cPlayerName && m_sRankLevel != 30)//20
	{
		PutAlignedString(sX, sX + 101, sY + 4 + 14 + 14 + 14 + iAddY, "Rank Exp", 180, 180, 180);

		if (m_iMaxRankExp <= 0) m_iMaxRankExp = 1;
		if (m_iRankExp <= 0) m_iRankExp = 1;


		int iPorc = (m_iRankExp * 200) / m_iMaxRankExp;

		m_DDraw.DrawShadowBox(sX, sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4, sX + 101, sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 15);

		for (int i = 0; i < iPorc; i++)
		{
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4, 0, 0, 0);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 1, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 2, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 3, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 4, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 5, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 6, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 7, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 8, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 9, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 10, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 11, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 12, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 13, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 14, 131, 125, 46);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 15, 0, 0, 0);
		}

		string sporc = "Next Rank: ";
		sporc.append(to_string(m_iRankExp));
		sporc.append("/");
		sporc.append(to_string(m_iMaxRankExp));

		PutAlignedString(sX, sX + 101, sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4, (char*)sporc.c_str(), 255, 255, 255);
		//PutString2(sX + 2, sY + 4 + 14 + 14 + 14 + iAddY + 4, (char*)sporc.c_str(), 255, 255, 255);
			}
	else if (string(pName) == m_cPlayerName && m_sRankLevel == 30)//20
	{
		PutAlignedString(sX, sX + 101, sY + 4 + 14 + 14 + 14 + iAddY, "Rank Exp", 180, 180, 180);
		int iPorc = (m_iRankExp * 200) / m_iMaxRankExp;

		m_DDraw.DrawShadowBox(sX, sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4, sX + 101, sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 15);

		for (int i = 0; i < 200; i++)
		{
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4, 0, 0, 0);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 1, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 2, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 3, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 4, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 5, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 6, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 7, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 8, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 9, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 10, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 11, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 12, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 13, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 14, 47, 139, 29);
			m_DDraw.PutPixel(sX + 1 + (i / 2), sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4 + 15, 0, 0, 0);
		}

		string sporc = "Next Rank: ";
		sporc.append(to_string(m_iRankExp));
		sporc.append("/");
		sporc.append(to_string(m_iMaxRankExp));

		PutAlignedString(sX, sX + 101, sY + 4 + 14 + 14 + 14 + 12 + iAddY + 4, (char*)sporc.c_str(), 255, 255, 255);
		//PutString2(sX + 2, sY + 4 + 14 + 14 + 14 + iAddY + 4, (char*)sporc.c_str(), 255, 255, 255);
	}


	*/

#ifdef _DEBUGS
	wsprintf(cTxt2, "Status: 0x%.8X ", iStatus);
	PutString2(sX, sY + 42, cTxt2, 30, 255, 30);
	ZeroMemory(cTxt2, sizeof(cTxt2));
#endif

}
BOOL CGame::FindGuildName(char* pName, int* ipIndex)
{
	int i, iRet = 0;
	DWORD dwTmpTime;
	for (i = 0; i < DEF_MAXGUILDNAMES; i++)
	{
		if (memcmp(m_stGuildName[i].cCharName, pName, 10) == 0)
		{
			m_stGuildName[i].dwRefTime = m_dwCurTime;
			*ipIndex = i;
			return TRUE;
		}
	}
	dwTmpTime = m_stGuildName[0].dwRefTime;
	for (i = 0; i < DEF_MAXGUILDNAMES; i++)
	{
		if (m_stGuildName[i].dwRefTime < dwTmpTime)
		{
			iRet = i;
			dwTmpTime = m_stGuildName[i].dwRefTime;
		}
	}
	ZeroMemory(m_stGuildName[iRet].cGuildName, sizeof(m_stGuildName[iRet].cGuildName));
	memcpy(m_stGuildName[iRet].cCharName, pName, 10);
	m_stGuildName[iRet].dwRefTime = m_dwCurTime;
	m_stGuildName[iRet].iGuildRank = -1;
	*ipIndex = iRet;
	return FALSE;
}

void CGame::UpdateScreen_OnVersionNotMatch()
{
	short msX, msY, msZ;
	char cLB, cRB;
	char cMIresult;
	int  iMIbuttonNum;
	static class CMouseInterface * pMI;
	DWORD dwTime = timeGetTime();
	int res_x, res_y;
	int res_x2 = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 800;
		res_y = 600;
		res_x2 = 80;
		res_y2 = 90;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 1024;
		res_y = 768;
		res_x2 = 193;
		res_y2 = 172;
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		res_x = 640;
		res_y = 480;
	}

	if (m_cGameModeCount == 0)
	{
		if (G_pCalcSocket != NULL)
		{
			delete G_pCalcSocket;
			G_pCalcSocket = NULL;
		}
		if (m_pGSock != NULL)
		{
			delete m_pGSock;
			m_pGSock = NULL;
		}
		pMI = new class CMouseInterface;
		
		pMI->AddRect(0, 0, res_x, res_y);
		m_bEnterPressed = FALSE;
	}
	m_cGameModeCount++;
	if (m_cGameModeCount > 120) m_cGameModeCount = 120;
	m_DDraw.ClearBackB4();
	if (m_bEscPressed == TRUE || m_bEnterPressed == TRUE)
	{
		m_bEscPressed = FALSE;
		m_bEnterPressed = FALSE;
		delete pMI;
		ChangeGameMode(DEF_GAMEMODE_NULL);
		SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
		return;
	}
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_QUIT, 0, 0, 0, TRUE);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, 162 + res_x2, 125 + res_y2, 2);
	PutAlignedString(168 + res_x2, 474 + res_y2, 160 + res_y2, UPDATE_SCREEN_ON_VERSION_NO_MATCH1);
	PutAlignedString(168 + res_x2, 474 + res_y2, 180 + res_y2, UPDATE_SCREEN_ON_VERSION_NO_MATCH2);
	PutAlignedString(168 + res_x2, 474 + res_y2, 250 + res_y2, MSG_HOMEPAGE);
	DrawVersion();
	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);

	iMIbuttonNum = pMI->iGetStatus(msX, msY, cLB, &cMIresult);
	if ((cMIresult == DEF_MIRESULT_CLICK) && (iMIbuttonNum == 1))
	{
		ChangeGameMode(DEF_GAMEMODE_NULL);
		delete pMI;
		SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
		return;
	}
	if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
}

void CGame::DrawVersion(BOOL bAuthor)
{
	return;
	DWORD dwTime = timeGetTime();
	WORD  wR, wG, wB;

	int iadd_y = 0;
	if (c_reso->IsResolution() == C800x600)
	{
		iadd_y = 120;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		iadd_y = 288;
	}

	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(140, 140, 140), &wR, &wG, &wB);
	// Ver
	m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutTransSpriteRGB(14, 463 + iadd_y, 19, wR, wG, wB, dwTime);
	// Upper Version
	wsprintf(G_cTxt, "%d", DEF_UPPERVERSION_FANTASMA);
	PutString_SprNum(36, 463 + iadd_y, G_cTxt, 140, 140, 140);
	m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutTransSpriteRGB(42, 463 + iadd_y, 18, wR, wG, wB, dwTime);
	// Lower Version
	if (DEF_LOWERVERSION_FANTASMA2 != 0)
		wsprintf(G_cTxt, "%d . %d", DEF_LOWERVERSION_FANTASMA, DEF_LOWERVERSION_FANTASMA2);
	else wsprintf(G_cTxt, "%d", DEF_LOWERVERSION_FANTASMA);
	PutString_SprNum(48, 463 + iadd_y, G_cTxt, 140, 140, 140);
	//LaloVersion
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGO2, 1, -13, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGO, 5, 15, 0);
	if (bAuthor == FALSE) return;
}

char CGame::GetOfficialMapName(char * pMapName, char * pName)
{	// MapIndex
	if (strcmp(pMapName, "middleland") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME28);	// Middleland
		return 4;
	}
	else if (strcmp(pMapName, "huntzone3") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME31);	// 
		return 0;
	}
	else if (strcmp(pMapName, "huntzone1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME29);	// Rocky Highland
		return 1;
	}
	else if (strcmp(pMapName, "elvuni") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME57);	// Eldiniel Garden
		return 2;
	}
	else if (strcmp(pMapName, "elvine") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME24);	// Elvine City
		return 3;
	}
	else if (strcmp(pMapName, "elvfarm") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME2);	// Elvine Farm
		return 5;
	}
	else if (strcmp(pMapName, "arefarm") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME1);	// Aresden Farm
		return 6;
	}
	else if (strcmp(pMapName, "default") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME3);	// Beginner Zone
		return 7;
	}
	else if (strcmp(pMapName, "huntzone4") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME32);	// Silent Wood
		return 8;
	}
	else if (strcmp(pMapName, "huntzone2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME30);	// Eternal Field
		return 9;
	}
	else if (strcmp(pMapName, "areuni") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME56);	// Aresien Garden
		return 10;
	}
	else if (strcmp(pMapName, "aresden") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME22);	// Aresden City
		return 11;
	}
	else if (strcmp(pMapName, "dglv2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME25);	// Dungeon L2
		return 12;
	}
	else if (strcmp(pMapName, "dglv3") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME26);	// Dungeon L3
		return 13;
	}
	else if (strcmp(pMapName, "dglv4") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME53);	// Dungeon L4
		return 14;
	}
	else if (strcmp(pMapName, "elvined1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME23);	// Elvine Dungeon
		return 15;
	}
	else if (strcmp(pMapName, "aresdend1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME21);	// Aresden Dungeon
		return 16;
	}
	else if (strcmp(pMapName, "bisle") == 0) {
		strcpy(pName, GET_OFFICIAL_MAP_NAME27);	// Bleeding Island
		return 17;
	}
	else if (strcmp(pMapName, "toh1") == 0) {
		strcpy(pName, GET_OFFICIAL_MAP_NAME60);	//Tower of Hell 1
		return 18;
	}
	else if (strcmp(pMapName, "toh2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME61);	//Tower of Hell 2
		return 19;
	}
	else if (strcmp(pMapName, "toh3") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME62);	// Tower of Hell 3
		return 20;
	}
	else if (strcmp(pMapName, "middled1x") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME58);	// Middleland Mine
		return 21;
	}
	else if (strcmp(pMapName, "middled1n") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME59);	// Middleland Dungeon
		return 22;
	}
	else if (strcmp(pMapName, "2ndmiddle") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME65);	// Promiseland
		return 23;
	}
	else if (strcmp(pMapName, "icebound") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME66);	// Ice Map
		return 24;
		// Snoopy:
	}
	else if (strcmp(pMapName, "druncncity") == 0) // Snoopy: Apocalypse maps
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME70);
		return 25;
	}
	else if (strcmp(pMapName, "inferniaA") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME71);
		return 26;
	}
	else if (strcmp(pMapName, "inferniaB") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME72);
		return 27;
	}
	else if (strcmp(pMapName, "maze") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME73);
		return 28;
	}
	else if (strcmp(pMapName, "procella") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME74);
		return 29;
	}
	else if (strcmp(pMapName, "abaddon") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME75);
		return 30;
	}
	else if (strcmp(pMapName, "BtField") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME76);
		return 35;//35 //40
	}
	else if (strcmp(pMapName, "GodH") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME77);
		return 36;
	}
	else if (strcmp(pMapName, "HRampart") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME78);
		return 37;
	}
	else if (strcmp(pMapName, "dm") == 0)
	{
		strcpy(pName, "Deathmatch");	// Aresden Cityhall
		return -1;
	}
	else if (strcmp(pMapName, "cityhall_1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME35);	// Aresden Cityhall
		return -1;
	}
	else if (strcmp(pMapName, "cityhall_2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME36);	// Elvine Cityhall
		return -1;
	}
	else if (strcmp(pMapName, "gldhall_1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME37);	// Aresden Guildhall
		return -1;
	}
	else if (strcmp(pMapName, "gldhall_2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME38);	// Elvine Guildhall
		return -1;
	}
	else if (memcmp(pMapName, "bsmith_1", 8) == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME33);	// Aresden Blacksmith
		return -1;
	}
	else if (memcmp(pMapName, "bsmith_2", 8) == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME34);	// Elvine Blacksmith
		return -1;
	}
	else if (memcmp(pMapName, "gshop_1", 7) == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME39);	// Aresden Shop
		return -1;
	}
	else if (memcmp(pMapName, "gshop_2", 7) == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME40);	// Elvine Shop
		return -1;
	}
	else if (memcmp(pMapName, "wrhus_1", 7) == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME43);	// Aresden Warehouse
		return -1;
	}
	else if (memcmp(pMapName, "wrhus_2", 7) == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME44);	// Elvine Warehouse
		return -1;
	}
	else if (strcmp(pMapName, "arewrhus") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME45);	// Aresden Warehouse
		return -1;
	}
	else if (strcmp(pMapName, "elvwrhus") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME46);	// Elvine Warehouse
		return -1;
	}
	else if (strcmp(pMapName, "wzdtwr_1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME41);	// Magic Tower
		return -1;
	}
	else if (strcmp(pMapName, "wzdtwr_2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME42);	// Magic Tower
		return -1;
	}
	else if (strcmp(pMapName, "cath_1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME47);	// Aresien Church
		return -1;
	}
	else if (strcmp(pMapName, "cath_2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME48);	// Eldiniel Church
		return -1;
	}
	else if (strcmp(pMapName, "resurr1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME54);	// Revival Zone
		return -1;
	}
	else if (strcmp(pMapName, "resurr2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME55);	// Revival Zone
		return -1;
	}
	else if (strcmp(pMapName, "arebrk11") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME4);	// Aresden Barrack 1
		return -1;
	}
	else if (strcmp(pMapName, "arebrk12") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME5);	// Aresden Barrack 1
		return -1;
	}
	else if (strcmp(pMapName, "arebrk21") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME6);	// Aresden Barrack 2
		return -1;
	}
	else if (strcmp(pMapName, "arebrk22") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME7);	// Aresden Barrack 2
		return -1;
	}
	else if (strcmp(pMapName, "elvbrk11") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME8);	// Elvine Barrack 1
		return -1;
	}
	else if (strcmp(pMapName, "elvbrk12") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME9);	// Elvine Barrack 1
		return -1;
	}
	else if (strcmp(pMapName, "elvbrk21") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME10);	// Elvine Barrack 2
		return -1;
	}
	else if (strcmp(pMapName, "elvbrk22") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME11);	// Elvine Barrack 2
		return -1;
	}
	else if (strcmp(pMapName, "fightzone1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME12);	// Arena 1
		return -1;
	}
	else if (strcmp(pMapName, "fightzone2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME13);	// Arena 2
		return -1;
	}
	else if (strcmp(pMapName, "fightzone3") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME14);	// Arena 3
		return -1;
	}
	else if (strcmp(pMapName, "fightzone4") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME15);	// Arena 4
		return -1;
	}
	else if (strcmp(pMapName, "fightzone5") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME16);	// Arena 5
		return -1;
	}
	else if (strcmp(pMapName, "fightzone6") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME17);	// Arena 6
		return -1;
	}
	else if (strcmp(pMapName, "fightzone7") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME18);	// Arena 7
		return -1;
	}
	else if (strcmp(pMapName, "fightzone8") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME19);	// Arena 8
		return -1;
	}
	else if (strcmp(pMapName, "fightzone9") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME20);	// Arena 9
		return -1;
	}
	else if (strcmp(pMapName, "arejail") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME63);	// Aresden Jail
		return -1;
	}
	else if (strcmp(pMapName, "elvjail") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME64);	// Elvine Jail
		return -1;
	}
	else if (strcmp(pMapName, "Extreme") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME82);	// Combate Extremo  //Lalo Mapas
		return -1;
	}
	else if (strcmp(pMapName, "Whouse") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME84);	// Neutral Warehouse
		return -1;
	}
	else if (strcmp(pMapName, "MBarracks") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME85);	// Neutral Barracks
		return -1;
	}
	else if (strcmp(pMapName, "NewEvent") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME86); //Hell Of Death
		return -1;
	}
	else if (strcmp(pMapName, "EventMap") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME87); //EventMap
		return -1;
	}
	else if (strcmp(pMapName, "ESAresden") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME88); //ESAresden
		return -1;
	}
	else if (strcmp(pMapName, "ESElvine") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME89); //ESElvine
		return -1;
	}
	else if (strcmp(pMapName, "ESAssasain") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME88); //ESAssasain
		return -1;
	}
	else if (strcmp(pMapName, "CmdHall_1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME79); // Commander Halls
		return -1;
	}
	else if (strcmp(pMapName, "CmdHall_2") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME79); // Commander Halls
		return -1;
	}
	else if (strcmp(pMapName, "avaevent") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME91);	// Arena 4
		return -1;
	}
	else if (strcmp(pMapName, "MultiEvent") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME92);	// MultiEvent
		return 41;
	}
	else if (strcmp(pMapName, "MapaVip") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME93);	// MapaVip
		return 46;
	}
	else if (strcmp(pMapName, "TowerMap") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME94);	// TowerMap
		return 42;
	}
	else if (strcmp(pMapName, "ArGEvent") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME95);	// Argentina Events
		return -1;
	}
	else if (strcmp(pMapName, "masacre") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME96);	// Extreme Fight
		return -1;
	}
	else if (strcmp(pMapName, "VipMap1") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME97);	// VIP
		return 43;
	}
	else if (strcmp(pMapName, "Counter") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME98);	// Final Fight
		return -1;
	}
	else if (strcmp(pMapName, "EventDk") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME99);	// Final Fight
		return -1;
	}
	else if (strcmp(pMapName, "market") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME100);	// Market Place
		return -1;
	}
	else if (strcmp(pMapName, "towerofh") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME101);	// Tower Of Hell
		return 44;
	}
	else if (strcmp(pMapName, "AresQuest") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME102);	// Ares quest
		return -1;
	}
	else if (strcmp(pMapName, "ElvQuest") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME103);	// Elv Quest
		return -1;
	}
	else if (strcmp(pMapName, "FightMap") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME104);	// WorldWarMap
		return 45;
	}

	else if (strcmp(pMapName, "ABarracks") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME105);	// Ares Barracks
		return -1;
	}
	else if (strcmp(pMapName, "EBarracks") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME106);	// Elv Barracks
		return -1;
	}
	else if (strcmp(pMapName, "WorldMap") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME107);	// WorldWarII
		return -1;
	}
	else if (strcmp(pMapName, "evento13") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME108);	// All Eks
		return -1;
	}
	else if (strcmp(pMapName, "evento14") == 0)
	{
		strcpy(pName, GET_OFFICIAL_MAP_NAME109);	// All Eks
		return -1;
		}
	else
	{
		strcpy(pName, pMapName);
		return -1;
	}
}

BOOL CGame::bCheckLocalChatCommand(char * pMsg)
{
	class  CStrTok * pStrTok = NULL;
	char   * token, cBuff[256], cTxt[120], cName[12];//cBuff[256] FPS desbug Lalo
	char   seps[] = " \t\n";
	ZeroMemory(cBuff, sizeof(cBuff));
	ZeroMemory(cName, sizeof(cName));
	strcpy(cBuff, pMsg);

	//lalov9fake
	/*if (memcmp(cBuff, "/Pinochet6987", 13) == 0)
	{
		Disconect = TRUE;
		bSendCommand(CLIENT_REQUEST_STATUS_AFK, NULL, NULL, 1, NULL, NULL, NULL);
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_NODISCONNECT, NULL, NULL, NULL, NULL, NULL);
		ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);
		return TRUE;
	}*/
	if (memcmp(cBuff, "/enabletogglescreen", 19) == 0)
	{
		m_bToggleScreen = TRUE;
		return TRUE;
	}
	if (strcmp(cBuff, "/mouse") == 0)
	{
		m_DInput.m_bModernMouse = !m_DInput.m_bModernMouse;
		AddEventList(m_DInput.m_bModernMouse ? "Optimized Mouse Enabled" : "Optimized Mouse Disabled", 10);
		return TRUE;
	}

	if (strcmp(cBuff, "/bind") == 0)
	{
		if (m_bIsDialogEnabled[48])
		{
			EnableDialogBox(48, NULL, NULL, NULL, NULL);
			ShowBarTotal += 2;
			if (ShowBarTotal < 3 && ShowBarTotal != 0) ShowBarTotal = 3;
			if (ShowBarTotal > 9) ShowBarTotal = 0;
			if (ShowBarTotal == 0) DisableDialogBox(48);
		}
		else
		{
			if (ShowBarTotal == 0) ShowBarTotal = 3;
			EnableDialogBox(48, NULL, NULL, NULL, NULL);
		}
		return TRUE;
	}
	if (memcmp(cBuff, "/whon", 5) == 0)
	{
		m_bWhisper = TRUE;
		AddEventList(BCHECK_LOCAL_CHAT_COMMAND6, 10);// Enable to listen to whispers."
		return TRUE;
	}
	else if (memcmp(cBuff, "/whoff", 6) == 0)
	{
		m_bWhisper = FALSE;
		AddEventList(BCHECK_LOCAL_CHAT_COMMAND7, 10);//
		return TRUE;
	}

	else if (memcmp(cBuff, "/shon", 5) == 0)
	{
		m_bShout = TRUE;
		AddEventList(BCHECK_LOCAL_CHAT_COMMAND8, 10); //Enalbe to chat in public."
		return TRUE;
	}

	/*else if (memcmp(cBuff, "/rank", 5) == 0) //fijate dsp que no falte nada aca, si falta uno , dsp lo pongo
	{
		m_sTempRankPoints = m_iRankPoints;
		m_sTmpRankAddStr = m_sRankAddStr;
		m_sTmpRankAddInt = m_sRankAddInt;
		m_sTmpRankAddDex = m_sRankAddDex;
		m_sTmpRankAddMag = m_sRankAddMag;
		
		EnableDialogBox(61, NULL, NULL, NULL, NULL);
		return TRUE;
	}*/
	else if (memcmp(cBuff, "/shoff", 6) == 0)
	{
		m_bShout = FALSE;
		AddEventList(BCHECK_LOCAL_CHAT_COMMAND9, 10); //Unable to chat in public."
		return TRUE;
	}

	if ((memcmp(cBuff, "/tooff", 6) == 0) || (memcmp(cBuff, "/mute", 5) == 0))
	{
		pStrTok = new class CStrTok(cBuff, seps);
		token = pStrTok->pGet();
		token = pStrTok->pGet();
		if (token != NULL)
		{
			if (strlen(token) <= 10)
			{
				strcpy(cName, token);

			//	DecriptString(m_cPlayerName);
				if (memcmp(m_cPlayerName, cName, 10) == 0) {
					AddEventList(BCHECK_LOCAL_CHAT_COMMAND2, 10);
					if (pStrTok != NULL) delete pStrTok;
			//		DecriptString(m_cPlayerName);
					return TRUE;
				}
			//	EncriptString(m_cPlayerName);

				for (int i = 0; i <= m_iTotalMutes; i++)
				{
					if (memcmp(ListMute[i].m_cMuteName, cName, 10) == 0)
					{
						AddEventList("User in the Mute list", 10);
						return TRUE;
					}
				}

				m_iTotalMutes++;
				if (m_iTotalMutes < DEF_MAXLISTNAMES)
				{
					strcpy(ListMute[m_iTotalMutes].m_cMuteName, cName);
					wsprintf(cTxt, BCHECK_LOCAL_CHAT_COMMAND3, token);
					AddEventList(cTxt, 10);
					SaveMuteList();
					LoadMuteList();//Agregado lalo
				}
				else
				{
					AddEventList("Mute List is Full");
					m_iTotalMutes--;
				}
				if (pStrTok != NULL) delete pStrTok;
				return TRUE;
			}
			else AddEventList(BCHECK_LOCAL_CHAT_COMMAND5, 10);
		}
		if (pStrTok != NULL) delete pStrTok;
		return TRUE;
	}
	else if ((memcmp(cBuff, "/toon", 5) == 0) || (memcmp(cBuff, "/unmute", 7) == 0))
	{
		pStrTok = new class CStrTok(cBuff, seps);
		token = pStrTok->pGet();
		token = pStrTok->pGet();
		if (token != NULL)
		{
			if (strlen(token) <= 10)
			{
				strcpy(cName, token);
				for (short i = 0; i <= m_iTotalMutes; i++)
					if (strcmp(ListMute[i].m_cMuteName, cName) == 0)
					{
						DeleteMute(i);
						wsprintf(cTxt, BCHECK_LOCAL_CHAT_COMMAND1, token);
						AddEventList(cTxt, 10);
						if (pStrTok != NULL) delete pStrTok;
						return TRUE;
					}
			}
			else AddEventList(BCHECK_LOCAL_CHAT_COMMAND5, 10);
		}
		if (pStrTok != NULL) delete pStrTok;
		return TRUE;
	}
	if (pStrTok != NULL) delete pStrTok;
	return FALSE;
}

BOOL CGame::bCheckItemOperationEnabled(char cItemID)
{
	if (m_pItemList[cItemID] == NULL) return FALSE;
	if (m_cCommand < 0) return FALSE;
	if (m_bIsTeleportRequested == TRUE) return FALSE;
	if (m_bIsItemDisabled[cItemID] == TRUE) return FALSE;

	if ((m_pItemList[cItemID]->m_sSpriteFrame == 155) && (m_bUsingSlate == TRUE))
	{
		if ((DecriptInt(m_cMapIndex) == 35) || (DecriptInt(m_cMapIndex) == 36) || (DecriptInt(m_cMapIndex) == 37))
		{
			AddEventList(DEF_MSG_NOTIFY_SLATE_WRONG_MAP, 10); // "You cannot use it right here."
			return FALSE;
		}
		AddEventList(DEF_MSG_NOTIFY_SLATE_ALREADYUSING, 10); // Already Using Another Slate
		return FALSE;
	}

	if (m_bIsDialogEnabled[17] == TRUE)
	{
		AddEventList(BCHECK_ITEM_OPERATION_ENABLE1, 10);
		return FALSE;
	}

	if (m_bIsDialogEnabled[20] == TRUE)
	{
		AddEventList(BCHECK_ITEM_OPERATION_ENABLE1, 10);
		return FALSE;
	}

	if (m_bIsDialogEnabled[23] == TRUE)
	{
		AddEventList(BCHECK_ITEM_OPERATION_ENABLE1, 10);
		return FALSE;
	}

	if (m_bIsDialogEnabled[26] == TRUE)
	{
		AddEventList(BCHECK_ITEM_OPERATION_ENABLE1, 10);
		return FALSE;
	}

	if (m_bIsDialogEnabled[27] == TRUE)
	{
		AddEventList(BCHECK_ITEM_OPERATION_ENABLE1, 10);
		return FALSE;
	}

	if (m_bIsDialogEnabled[31] == TRUE)
	{
		AddEventList(BCHECK_ITEM_OPERATION_ENABLE1, 10);
		return FALSE;
	}

	if (m_bIsDialogEnabled[4] == TRUE)
	{
		AddEventList(BCHECK_ITEM_OPERATION_ENABLE1, 10);
		return FALSE;
	}

	return TRUE;
}

void CGame::ClearSkillUsingStatus()
{
	if (m_bSkillUsingStatus == TRUE)
	{
		AddEventList(CLEAR_SKILL_USING_STATUS1, 10);//"
		DisableDialogBox(24);
		DisableDialogBox(26);
		if ((m_sPlayerType >= 1) && (m_sPlayerType <= 6)/* && ((m_sPlayerAppr2 & 0xF000) == 0)*/) {
			m_cCommand = DEF_OBJECTSTOP;
			m_sCommX = m_sPlayerX;
			m_sCommY = m_sPlayerY;
		}
	}
	m_bSkillUsingStatus = FALSE;
}


void CGame::NpcTalkHandler(char *pData)
{
	char  * cp, cRewardName[21], cTargetName[21], cTemp[21], cTxt[250];
	short * sp, sType, sResponse;
	int     * ip, iAmount, iIndex, iContribution, iX, iY, iRange;
	int     iTargetType, iQuestionType;
	unsigned int iTargetCount;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *)cp;
	sType = *sp;
	cp += 2;
	sp = (short *)cp;
	sResponse = *sp;
	cp += 2;
	sp = (short *)cp;
	iAmount = *sp;
	cp += 2;
	sp = (short *)cp;
	iContribution = *sp;
	cp += 2;
	sp = (short *)cp;
	iTargetType = *sp;
	cp += 2;
	ip = (int *)cp;
	iTargetCount = *ip;
	cp += 4;
	sp = (short *)cp;
	iX = *sp;
	cp += 2;
	sp = (short *)cp;
	iY = *sp;
	cp += 2;
	sp = (short *)cp;
	iRange = *sp;
	cp += 2;
	ZeroMemory(cRewardName, sizeof(cRewardName));
	memcpy(cRewardName, cp, 20);
	cp += 20;
	ZeroMemory(cTargetName, sizeof(cTargetName));
	memcpy(cTargetName, cp, 20);
	cp += 20;
	// ZeroEoyPnk - Changed
	if (sType == 100)
	{
		m_stDialogBoxInfo[21].cMode = 1;
		m_stDialogBoxInfo[21].sView = 0;
		m_stDialogBoxInfo[21].sV1 = _iLoadTextDlgContents2(21);
		m_stDialogBoxInfo[21].sV2 = 21;
		EnableDialogBox(21, 1, 1, 100);
		sType = 1;
	}
	else EnableDialogBox(21, sResponse, sType, iAmount);

	if ((sResponse >= 1) && (sResponse <= 100))
	{
		iIndex = m_stDialogBoxInfo[21].sV1;
		m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
		iIndex++;
		iQuestionType = NULL;
		switch (sType) {
			case 1: //Monster Hunt
				ZeroMemory(cTemp, sizeof(cTemp));
				GetNpcName(iTargetType, cTemp);
				ZeroMemory(cTxt, sizeof(cTxt));
				wsprintf(cTxt, NPC_TALK_HANDLER16, iTargetCount, cTemp);
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				if (memcmp(cTargetName, "NONE", 4) == 0) {
					strcpy(cTxt, NPC_TALK_HANDLER17);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				else {
					ZeroMemory(cTemp, sizeof(cTemp));
					GetOfficialMapName(cTargetName, cTemp);
					wsprintf(cTxt, NPC_TALK_HANDLER18, cTemp);//"Map : %s"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;

					if (iX != 0) {
						ZeroMemory(cTxt, sizeof(cTxt));
						wsprintf(cTxt, NPC_TALK_HANDLER19, iX, iY, iRange);//"Position: %d,%d within %d blocks"
						m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
						iIndex++;
					}

					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, NPC_TALK_HANDLER20, iContribution);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				iQuestionType = 1;
				break;

			case 7: //
				ZeroMemory(cTxt, sizeof(cTxt));
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER21, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				if (memcmp(cTargetName, "NONE", 4) == 0) {
					strcpy(cTxt, NPC_TALK_HANDLER22);
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				else {
					ZeroMemory(cTemp, sizeof(cTemp));
					GetOfficialMapName(cTargetName, cTemp);
					wsprintf(cTxt, NPC_TALK_HANDLER23, cTemp);
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;

					if (iX != 0) {
						ZeroMemory(cTxt, sizeof(cTxt));
						wsprintf(cTxt, NPC_TALK_HANDLER24, iX, iY, iRange);
						m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
						iIndex++;
					}

					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, NPC_TALK_HANDLER25, iContribution);
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				iQuestionType = 1;
				break;

			case 10: // Crusade
				ZeroMemory(cTxt, sizeof(cTxt));
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER26, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, NPC_TALK_HANDLER27);//"
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, NPC_TALK_HANDLER28);//"
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, NPC_TALK_HANDLER29);//"
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, NPC_TALK_HANDLER30);//"
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, " ");
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				if (memcmp(cTargetName, "NONE", 4) == 0) {
					strcpy(cTxt, NPC_TALK_HANDLER31);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				else {
					ZeroMemory(cTemp, sizeof(cTemp));
					GetOfficialMapName(cTargetName, cTemp);
					wsprintf(cTxt, NPC_TALK_HANDLER32, cTemp);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				iQuestionType = 2;
				break;
		}

		switch (iQuestionType) {
			case 1:
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER33, NULL);//"
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER34, NULL);//"
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
				iIndex++;
				break;

			case 2:
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER35, NULL);//"
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
				iIndex++;
				break;

			default: break;
		}
	}
	else if ((sResponse >= 100) && (sResponse <= 500))
	{
		iIndex = m_stDialogBoxInfo[21].sV1;
		m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
		iIndex++;
		iQuestionType = NULL;
		switch (sType) {
			case 1: //Monster Hunt
				ZeroMemory(cTemp, sizeof(cTemp));
				GetNpcName(iTargetType, cTemp);
				ZeroMemory(cTxt, sizeof(cTxt));
				wsprintf(cTxt, NPC_TALK_HANDLER16, iTargetCount, cTemp);
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				if (memcmp(cTargetName, "NONE", 4) == 0) {
					strcpy(cTxt, NPC_TALK_HANDLER17);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				else {
					ZeroMemory(cTemp, sizeof(cTemp));
					GetOfficialMapName(cTargetName, cTemp);
					wsprintf(cTxt, NPC_TALK_HANDLER18, cTemp);//"Map : %s"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;

					if (iX != 0) {
						ZeroMemory(cTxt, sizeof(cTxt));
						wsprintf(cTxt, NPC_TALK_HANDLER19, iX, iY, iRange);//"Position: %d,%d within %d blocks"
						m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
						iIndex++;
					}

					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, NPC_TALK_HANDLER36, m_sQuest[sResponse].ItemPrice);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				iQuestionType = 1;
				break;

			case 7: //
				ZeroMemory(cTxt, sizeof(cTxt));
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER21, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				if (memcmp(cTargetName, "NONE", 4) == 0) {
					strcpy(cTxt, NPC_TALK_HANDLER22);
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				else {
					ZeroMemory(cTemp, sizeof(cTemp));
					GetOfficialMapName(cTargetName, cTemp);
					wsprintf(cTxt, NPC_TALK_HANDLER23, cTemp);
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;

					if (iX != 0) {
						ZeroMemory(cTxt, sizeof(cTxt));
						wsprintf(cTxt, NPC_TALK_HANDLER24, iX, iY, iRange);
						m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
						iIndex++;
					}

					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, NPC_TALK_HANDLER36, m_sQuest[sResponse].ItemPrice);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				iQuestionType = 1;
				break;

			case 10: // Crusade
				ZeroMemory(cTxt, sizeof(cTxt));
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER26, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, NPC_TALK_HANDLER27);//"
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, NPC_TALK_HANDLER28);//"
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, NPC_TALK_HANDLER29);//"
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, NPC_TALK_HANDLER30);//"
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				strcpy(cTxt, " ");
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
				iIndex++;

				ZeroMemory(cTxt, sizeof(cTxt));
				if (memcmp(cTargetName, "NONE", 4) == 0) {
					strcpy(cTxt, NPC_TALK_HANDLER31);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				else {
					ZeroMemory(cTemp, sizeof(cTemp));
					GetOfficialMapName(cTargetName, cTemp);
					wsprintf(cTxt, NPC_TALK_HANDLER32, cTemp);//"
					m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
					iIndex++;
				}
				iQuestionType = 2;
				break;
		}

		switch (iQuestionType) {
			case 1:
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER33, NULL);//"
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER34, NULL);//"
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
				iIndex++;
				break;

			case 2:
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, NPC_TALK_HANDLER35, NULL);//"
				iIndex++;
				m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
				iIndex++;
				break;

			default: break;
		}
	}
}

void CGame::GetNpcName(short sType, char *pName)
{
	switch (sType)
	{
		case 10: strcpy(pName, NPC_NAME_SLIME); break;
		case 11: strcpy(pName, NPC_NAME_SKELETON); break;
		case 12: strcpy(pName, NPC_NAME_STONEGOLEM); break;
		case 13: strcpy(pName, NPC_NAME_CYCLOPS); break;
		case 14: strcpy(pName, NPC_NAME_ORC); break;
		case 15: strcpy(pName, NPC_NAME_SHOP_KEEPER); break;
		case 16: strcpy(pName, NPC_NAME_GIANTANT); break;
		case 17: strcpy(pName, NPC_NAME_GIANTSCORPION); break;
		case 18: strcpy(pName, NPC_NAME_ZOMBIE); break;
		case 19: strcpy(pName, NPC_NAME_MAGICIAN); break;
		case 20: strcpy(pName, NPC_NAME_WAREHOUSE_KEEPER); break;
		case 21: strcpy(pName, NPC_NAME_GUARD); break;
		case 22: strcpy(pName, NPC_NAME_SNAKE); break;
		case 23: strcpy(pName, NPC_NAME_CLAYGOLEM); break;
		case 24: strcpy(pName, NPC_NAME_BLACKSMITH_KEEPER); break;
		case 25: strcpy(pName, NPC_NAME_CITYHALL_OFFICER); break;
		case 26: strcpy(pName, NPC_NAME_GUILDHALL_OFFICER); break;
		case 27: strcpy(pName, NPC_NAME_HELHOUND); break;
		case 28: strcpy(pName, NPC_NAME_TROLL); break;
		case 29: strcpy(pName, NPC_NAME_OGRE); break;
		case 30: strcpy(pName, NPC_NAME_LICHE); break;
		case 31: strcpy(pName, NPC_NAME_DEMON); break;
		case 32: strcpy(pName, NPC_NAME_UNICORN); break;
		case 33: strcpy(pName, NPC_NAME_WEREWOLF); break;
		case 34: strcpy(pName, NPC_NAME_DUMMY); break;
		case 35: strcpy(pName, NPC_NAME_ENERGYSPHERE); break;
		case 36:
			if (_tmp_sAppr2 != 0) strcpy(pName, NPC_NAME_ARROWGUARDTOWER_CK);
			else strcpy(pName, NPC_NAME_ARROWGUARDTOWER);
			break;
		case 37:
			if (_tmp_sAppr2 != 0) strcpy(pName, NPC_NAME_CANNONGUARDTOWER_CK);
			else strcpy(pName, NPC_NAME_CANNONGUARDTOWER);
			break;
		case 38:
			if (_tmp_sAppr2 != 0) strcpy(pName, NPC_NAME_MANACOLLECTOR_CK);
			else strcpy(pName, NPC_NAME_MANACOLLECTOR);
			break;
		case 39:
			if (_tmp_sAppr2 != 0) strcpy(pName, NPC_NAME_DETECTOR_CK);
			else strcpy(pName, NPC_NAME_DETECTOR);
			break;
		case 40: strcpy(pName, NPC_NAME_ENERGYSHIELD); break;
		case 41: strcpy(pName, NPC_NAME_GRANDMAGICGENERATOR); break;
		case 42: strcpy(pName, NPC_NAME_MANASTONE); break;
		case 43: strcpy(pName, NPC_NAME_LIGHTWARBEETLE); break;
		case 44: strcpy(pName, NPC_NAME_GODSHANDKNIGHT); break;
		case 45: strcpy(pName, NPC_NAME_GODSHANDKNIGHT_CK); break;
		case 46: strcpy(pName, NPC_NAME_TEMPLEKNIGHT); break;
		case 47: strcpy(pName, NPC_NAME_BATTLEGOLEM); break;
		case 48: strcpy(pName, NPC_NAME_STALKER); break;
		case 49: strcpy(pName, NPC_NAME_HELLCLAW); break;
		case 50: strcpy(pName, NPC_NAME_TIGERWORM); break;
		case 51: strcpy(pName, NPC_NAME_CATAPULT); break;
		case 52: strcpy(pName, NPC_NAME_GARGOYLE); break;
		case 53: strcpy(pName, NPC_NAME_BEHOLDER); break;
		case 54: strcpy(pName, NPC_NAME_DARKELF); break;
		case 55: strcpy(pName, NPC_NAME_RABBIT); break;
		case 56: strcpy(pName, NPC_NAME_CAT); break;
		case 57: strcpy(pName, NPC_NAME_FROG); break;
		case 58: strcpy(pName, NPC_NAME_MOUNTAIN_GIANT); break;
		case 59: strcpy(pName, NPC_NAME_ETTIN); break;
		case 60: strcpy(pName, NPC_NAME_CANNIBAL); break;
		case 61: strcpy(pName, NPC_NAME_RUDOLPH); break;
		case 62: strcpy(pName, NPC_NAME_DIREBOAR); break;
		case 63: strcpy(pName, NPC_NAME_FROST); break;
		case 64:
		{	switch ((_tmp_sAppr2 & 0xFF00) >> 8) {
			case 1:	strcpy(pName, NPC_NAME_WATERMELON);	break;
			case 2: strcpy(pName, NPC_NAME_PUMPKIN); break;
			case 3: strcpy(pName, NPC_NAME_GARLIC); break;
			case 4: strcpy(pName, NPC_NAME_BARLEY); break;
			case 5:	strcpy(pName, NPC_NAME_CARROT); break;
			case 6: strcpy(pName, NPC_NAME_RADISH); break;
			case 7: strcpy(pName, NPC_NAME_CORN); break;
			case 8: strcpy(pName, NPC_NAME_BFLOWER); break;
			case 9: strcpy(pName, NPC_NAME_MELON); break;
			case 10: strcpy(pName, NPC_NAME_TOMATO); break;
			case 11: strcpy(pName, NPC_NAME_GRAPPE); break;
			case 12: strcpy(pName, NPC_NAME_BLUEGRAPPE); break;
			case 13: strcpy(pName, NPC_NAME_MUSHROM); break;
			case 14: strcpy(pName, NPC_NAME_GINSENG); break;
			default: strcpy(pName, NPC_NAME_CROP); break;
		}
		}
		break;
		case 65: strcpy(pName, NPC_NAME_ICEGOLEM); break;
		case 66: strcpy(pName, NPC_NAME_WYVERN); break;
		case 67: strcpy(pName, NPC_NAME_MCGAFFIN); break;
		case 68: strcpy(pName, NPC_NAME_PERRY); break;
		case 69: strcpy(pName, NPC_NAME_DEVLIN); break;

		case 70: strcpy(pName, NPC_NAME_BARLOG); break;
		case 71: strcpy(pName, NPC_NAME_CENTAUR); break;
		case 72: strcpy(pName, NPC_NAME_CLAWTUR); break;
		case 73: strcpy(pName, NPC_NAME_FIREWYV); break;
		case 74: strcpy(pName, NPC_NAME_GICRAYF); break;
		case 75: strcpy(pName, NPC_NAME_GILIZAR); break;
		case 76: strcpy(pName, NPC_NAME_GITREE); break;
		case 77: strcpy(pName, NPC_NAME_MASTORC); break;
		case 78: strcpy(pName, NPC_NAME_MINAUS); break;
		case 79: strcpy(pName, NPC_NAME_NIZIE); break;

		case 80: strcpy(pName, NPC_NAME_TENTOCL); break;
		case 81: strcpy(pName, NPC_NAME_ABADDON); break;
		case 82: strcpy(pName, NPC_NAME_SORCERS); break;
		case 83: strcpy(pName, NPC_NAME_ATK); break;
		case 84: strcpy(pName, NPC_NAME_MASTELF); break;
		case 85: strcpy(pName, NPC_NAME_DSK); break;
		case 86: strcpy(pName, NPC_NAME_HBT); break;
		case 87: strcpy(pName, NPC_NAME_CT); break;
		case 88: strcpy(pName, NPC_NAME_BARBAR); break;
		case 89: strcpy(pName, NPC_NAME_AGC); break;
		case 90: strcpy(pName, NPC_NAME_GAIL); break;
		case 91: strcpy(pName, NPC_NAME_GATE); break;
		case 92: strcpy(pName, NPC_NAME_RELI); break;
			// CLEROTH - NEW MONSTERS
		case 110: strcpy(pName, NPC_NAME_AIRLEMENTAL); break;
			//lalo new npc
		case 93: strcpy(pName, NPC_NAME_ICELWORM); break;
		case 94: strcpy(pName, NPC_NAME_FIRELWORM); break;
		case 95: strcpy(pName, NPC_NAME_BLUELDEMON); break;
		case 96: strcpy(pName, NPC_NAME_REDLDEMON); break;
		case 97: strcpy(pName, NPC_NAME_WOODLGOLEM); break;
		case 98: strcpy(pName, NPC_NAME_ICELLIZARD); break;
		case 99: strcpy(pName, NPC_NAME_BUTCHERL); break;
		case 100: strcpy(pName, NPC_NAME_SNOOBL); break;
		case 101: strcpy(pName, NPC_NAME_FIRELSNOOB); break;
		case 102: strcpy(pName, NPC_NAME_SATANL); break;
		case 103: strcpy(pName, NPC_NAME_GIANTLSPIDER); break;
		case 104: strcpy(pName, NPC_NAME_DIABLOL); break;
		case 105: strcpy(pName, NPC_NAME_PHAMTONL); break;
		case 106: strcpy(pName, NPC_NAME_YETIL); break;
		case 107: strcpy(pName, NPC_NAME_GRANDLETTIN); break;
		case 108: strcpy(pName, NPC_NAME_HELLDEATH); break;
		case 109: strcpy(pName, NPC_NAME_LIGHTWORM); break;
		case 111: strcpy(pName, NPC_NAME_ASSASAIN); break;

		case 112: strcpy(pName, NPC_NAME_HOUNDEATH); break;
		case 113: strcpy(pName, NPC_NAME_HELLICHE); break;
		case 114: strcpy(pName, NPC_NAME_DEATHWYVERN); break;
		case 115: strcpy(pName, NPC_NAME_HELLBUTCHER); break;
		case 116: strcpy(pName, NPC_NAME_HELLTROLL); break;
		case 117: strcpy(pName, NPC_NAME_MOUNTDEATH); break;
		case 118: strcpy(pName, NPC_NAME_HELLGOYLE); break;
		case 119: strcpy(pName, NPC_NAME_HELLDEMON); break;
		case 120: strcpy(pName, NPC_NAME_HELLABBY); break;
		//Nuevo
		case 121: strcpy(pName, NPC_NAME_GHOSTABA); break;
		case 122: strcpy(pName, NPC_NAME_GOBLIN); break;
		case 123: strcpy(pName, NPC_NAME_GMGOBLIN); break;
		case 124: strcpy(pName, NPC_NAME_DANNY); break;
		case 125: strcpy(pName, NPC_NAME_GuardS); break;
		case 126: strcpy(pName, NPC_NAME_GuardA); break;
		case 127: strcpy(pName, NPC_NAME_GuardR); break;
		case 128: strcpy(pName, NPC_NAME_BLACKWYVERN); break;
		case 129: strcpy(pName, NPC_NAME_MARKETMOB); break;
	}
}

void CGame::GetMarketItemName(CItem* pItem, char* pStr1, char* pStr2, char* pStr3, char* pStr4)
{
	int i;
	char cTxt[256], cTxt2[256], cName[51];
	DWORD dwType1, dwType2, dwValue1, dwValue2, dwValue3;

	m_bIsSpecial = FALSE;
	ZeroMemory(cName, sizeof(cName));
	ZeroMemory(pStr1, sizeof(pStr1));
	ZeroMemory(pStr2, sizeof(pStr2));
	ZeroMemory(pStr3, sizeof(pStr3));
	ZeroMemory(pStr4, sizeof(pStr4));

	strcpy(cName, pItem->m_cName);
	for (i = 0; i < DEF_MAXITEMNAMES; i++)
		if ((m_pItemNameList[i] != NULL) && (strcmp(m_pItemNameList[i]->m_cOriginName, pItem->m_cName) == 0))
		{
			strcpy(cName, m_pItemNameList[i]->m_cName);
			break;
		}

	if (0 == memcmp(pItem->m_cName, "AcientTablet", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "NecklaceOf", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "DarkElfBow", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "DarkExecutor", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "The_Devastator", 14)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "DemonSlayer", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "LightingBlade", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "5thAnniversary", 13)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "RubyRing", 8)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "SapphireRing", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Ringof", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "MagicNecklace", 13)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "MagicWand(M.Shield)", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "MagicWand(MS30-LLF)", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Merien", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "BerserkWand", 11)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "ResurWand", 9)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Blood", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Swordof", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "StoneOf", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "ZemstoneofSacrifice", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "StormBringer", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Aresden", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Elvine", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "EmeraldRing", 11)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Excaliber", 9)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Xelima", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Kloness", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "aHero", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "eHero", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Power", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Neck", 4)) m_bIsSpecial = TRUE;
	if ((pItem->m_dwAttribute & 0x00000001) != 0)
	{
		m_bIsSpecial = TRUE;
		strcpy(pStr1, cName);
		if (pItem->m_cItemType == DEF_ITEMTYPE_MATERIAL)
			wsprintf(pStr2, GET_ITEM_NAME1, pItem->m_sItemSpecEffectValue2);		//"Purity: %d%%"
		else
		{	// Crafting Magins completion fix
			if (pItem->m_cEquipPos == DEF_EQUIPPOS_LFINGER)
			{
				wsprintf(pStr4, GET_ITEM_NAME2, pItem->m_sItemSpecEffectValue2);	//"Completion: es del magic saphire o emerald o esas cosas
			}
			else
			{
				wsprintf(pStr4, GET_ITEM_NAME2, pItem->m_sItemSpecEffectValue2 + 100);
			}
		}
	}
	else
	{
		if (pItem->m_dwCount == 1)
			wsprintf(G_cTxt, "%s", cName);
		else wsprintf(G_cTxt, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM1, pItem->m_dwCount, cName);//"%d %s"
		strcpy(pStr1, G_cTxt);
	}

	if ((pItem->m_dwAttribute & 0x00F0F000) != 0)
	{
		m_bIsSpecial = TRUE;
		dwType1 = (pItem->m_dwAttribute & 0x00F00000) >> 20;
		dwValue1 = (pItem->m_dwAttribute & 0x000F0000) >> 16;
		dwType2 = (pItem->m_dwAttribute & 0x0000F000) >> 12;
		dwValue2 = (pItem->m_dwAttribute & 0x00000F00) >> 8;
		if (dwType1 != 0)
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType1) {
			case 1: strcpy(cTxt, GET_ITEM_NAME3);   break; // "Critical "
			case 2: strcpy(cTxt, GET_ITEM_NAME4);   break; // "Poisoning "
			case 3: strcpy(cTxt, GET_ITEM_NAME5);   break; // "Righteous "
			case 4: break;
			case 5: strcpy(cTxt, GET_ITEM_NAME6);   break; // "Agile "
			case 6: strcpy(cTxt, GET_ITEM_NAME7);   break; // "Light "
			case 7: strcpy(cTxt, GET_ITEM_NAME8);   break; // "Sharp "
			case 8: strcpy(cTxt, GET_ITEM_NAME9);   break; // "Strong "
			case 9: strcpy(cTxt, GET_ITEM_NAME10);  break; // "Ancient "
			case 10: strcpy(cTxt, GET_ITEM_NAME11); break; // "Special "
			case 11: strcpy(cTxt, GET_ITEM_NAME12); break; // "Mana Converting "
			case 12: strcpy(cTxt, GET_ITEM_NAME13); break; // "Critical "
			}
			strcat(cTxt, pStr1);
			ZeroMemory(pStr1, sizeof(pStr1));
			strcpy(pStr1, cTxt);

			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType1) {
			case 1: wsprintf(cTxt, GET_ITEM_NAME14, dwValue1); break; // "Critical Hit Damage+%d"
			case 2: wsprintf(cTxt, GET_ITEM_NAME15, dwValue1 * 5); break; // "Poison Damage+%d"
			case 3: break;
			case 4: break;
			case 5: strcpy(cTxt, GET_ITEM_NAME16); break; // "Attack Speed -1"
			case 6: wsprintf(cTxt, GET_ITEM_NAME17, dwValue1 * 4); break; // "%d%% light"
			case 7: strcpy(cTxt, GET_ITEM_NAME18); break; // "Damage added"
			case 8: wsprintf(cTxt, GET_ITEM_NAME19, dwValue1 * 7); break; // "Endurance +%d%%"
			case 9: strcpy(cTxt, GET_ITEM_NAME20); break; // "Extra Damage added"
			case 10: wsprintf(cTxt, GET_ITEM_NAME21, dwValue1 * 3); break; // "Magic Casting Probability+%d%%"
			case 11: wsprintf(cTxt, GET_ITEM_NAME22, dwValue1); break; // Replace %d%% damage to mana"
			case 12: wsprintf(cTxt, GET_ITEM_NAME23, dwValue1); break; // "Crit Increase Chance %d%%"
			}
			strcat(pStr2, cTxt);

			if (dwType2 != 0) {
				ZeroMemory(cTxt, sizeof(cTxt));
				switch (dwType2) {
				case 1:  wsprintf(cTxt, GET_ITEM_NAME24, dwValue2 * 7); break; // "Poison Resistance+%d%%"
				case 2:  wsprintf(cTxt, GET_ITEM_NAME25, dwValue2 * 7); break; // "Hitting Probability+%d"
				case 3:  wsprintf(cTxt, GET_ITEM_NAME26, dwValue2 * 7); break; // "Defense Ratio+%d"
				case 4:  wsprintf(cTxt, GET_ITEM_NAME27, dwValue2 * 7); break; // "HP recovery %d%%"
				case 5:  wsprintf(cTxt, GET_ITEM_NAME28, dwValue2 * 7); break; // "SP recovery %d%%"
				case 6:  wsprintf(cTxt, GET_ITEM_NAME29, dwValue2 * 7); break; // "MP recovery %d%%"
				case 7:  wsprintf(cTxt, GET_ITEM_NAME30, dwValue2 * 7); break; // "Magic Resistance+%d%%"
				case 8:  wsprintf(cTxt, GET_ITEM_NAME31, dwValue2 * 3); break; // "Physical Absorption+%d%%"
				case 9:  wsprintf(cTxt, GET_ITEM_NAME32, dwValue2 * 3); break; // "Magic Absorption+%d%%"
				case 10: wsprintf(cTxt, GET_ITEM_NAME33, dwValue2);   break; // "Consecutive Attack Damage+%d"
				case 11: wsprintf(cTxt, GET_ITEM_NAME34, dwValue2 * 10); break; // "Experience+%d%%"
				case 12: wsprintf(cTxt, GET_ITEM_NAME35, dwValue2 * 10); break; // "Gold +%
				}
				strcpy(pStr3, cTxt);
			}
		}
		else if (dwType2 != 0)
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType2) {
			case 1:  wsprintf(cTxt, GET_ITEM_NAME24, dwValue2 * 7); break; // "Poison Resistance+%d%%"
			case 2:  wsprintf(cTxt, GET_ITEM_NAME25, dwValue2 * 7); break; // "Hitting Probability+%d"
			case 3:  wsprintf(cTxt, GET_ITEM_NAME26, dwValue2 * 7); break; // "Defense Ratio+%d"
			case 4:  wsprintf(cTxt, GET_ITEM_NAME27, dwValue2 * 7); break; // "HP recovery %d%%"
			case 5:  wsprintf(cTxt, GET_ITEM_NAME28, dwValue2 * 7); break; // "SP recovery %d%%"
			case 6:  wsprintf(cTxt, GET_ITEM_NAME29, dwValue2 * 7); break; // "MP recovery %d%%"
			case 7:  wsprintf(cTxt, GET_ITEM_NAME30, dwValue2 * 7); break; // "Magic Resistance+%d%%"
			case 8:  wsprintf(cTxt, GET_ITEM_NAME31, dwValue2 * 3); break; // "Physical Absorption+%d%%"
			case 9:  wsprintf(cTxt, GET_ITEM_NAME32, dwValue2 * 3); break; // "Magic Absorption+%d%%"
			case 10: wsprintf(cTxt, GET_ITEM_NAME33, dwValue2);   break; // "Consecutive Attack Damage+%d"
			case 11: wsprintf(cTxt, GET_ITEM_NAME34, dwValue2 * 10); break; // "Experience+%d%%"
			case 12: wsprintf(cTxt, GET_ITEM_NAME35, dwValue2 * 10); break; // "Gold +%
			}
			strcat(pStr2, cTxt);
		}
	}
	if (memcmp(pItem->m_cName, "AngelicPandent", 14) == 0)
		dwValue3 = ((pItem->m_dwAttribute & 0xF0000000) >> 28) + pItem->m_sItemSpecEffectValue3;
	else dwValue3 = (pItem->m_dwAttribute & 0xF0000000) >> 28;
	if (dwValue3 > 0)
	{
		if (pStr1[strlen(pStr1) - 2] == '+')
		{
			dwValue3 = atoi((char*)(pStr1 + strlen(pStr1) - 1)) + dwValue3;
			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, pStr1, strlen(pStr1) - 2);
			ZeroMemory(cTxt2, sizeof(cTxt2));
			wsprintf(cTxt2, "%s+%d", cTxt, dwValue3);
			ZeroMemory(pStr1, sizeof(pStr1));
			strcpy(pStr1, cTxt2);
		}
		else
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			wsprintf(cTxt, "+%d", dwValue3);
			strcat(pStr1, cTxt);
		}
	}
}
void CGame::GetItemName(CItem *pItem, char *pStr1, char *pStr2, char *pStr3)
{
	int i;
	char cTxt[256], cTxt2[256], cName[51];
	DWORD dwType1, dwType2, dwValue1, dwValue2, dwValue3;

	m_bIsSpecial = FALSE;
	ZeroMemory(cName, sizeof(cName));
	ZeroMemory(pStr1, sizeof(pStr1));
	ZeroMemory(pStr2, sizeof(pStr2));
	ZeroMemory(pStr3, sizeof(pStr3));

	strcpy(cName, pItem->m_cName);
	for (i = 0; i < DEF_MAXITEMNAMES; i++)
		if ((m_pItemNameList[i] != NULL) && (strcmp(m_pItemNameList[i]->m_cOriginName, pItem->m_cName) == 0))
		{
			strcpy(cName, m_pItemNameList[i]->m_cName);
			break;
		}

	if (0 == memcmp(pItem->m_cName, "AcientTablet", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "NecklaceOf", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "DarkElfBow", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "DarkExecutor", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "The_Devastator", 14)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "DemonSlayer", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "LightingBlade", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "5thAnniversary", 13)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "RubyRing", 8)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "SapphireRing", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Ringof", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "MagicNecklace", 13)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "MagicWand(M.Shield)", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "MagicWand(MS30-LLF)", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Merien", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "BerserkWand", 11)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "ResurWand", 9)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Blood", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Swordof", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "StoneOf", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "ZemstoneofSacrifice", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "StormBringer", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Aresden", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Elvine", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "EmeraldRing", 11)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Excaliber", 9)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Xelima", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Kloness", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "aHero", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "eHero", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Power", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(pItem->m_cName, "Neck", 4)) m_bIsSpecial = TRUE;
	if ((pItem->m_dwAttribute & 0x00000001) != 0)
	{
		m_bIsSpecial = TRUE;
		strcpy(pStr1, cName);
		if (pItem->m_cItemType == DEF_ITEMTYPE_MATERIAL)
			wsprintf(pStr2, GET_ITEM_NAME1, pItem->m_sItemSpecEffectValue2);		//"Purity: %d%%"
		else
		{	// Crafting Magins completion fix
			if (pItem->m_cEquipPos == DEF_EQUIPPOS_LFINGER)
			{
				wsprintf(pStr2, GET_ITEM_NAME2, pItem->m_sItemSpecEffectValue2);	//"Completion: es del magic saphire o emerald o esas cosas
			}
			else
			{
				DWORD tdwType1 = (pItem->m_dwAttribute & 0x00F00000) >> 20;
				DWORD tdwValue1 = (pItem->m_dwAttribute & 0x000F0000) >> 16;
				DWORD tdwType2 = (pItem->m_dwAttribute & 0x0000F000) >> 12;
				DWORD tdwValue2 = (pItem->m_dwAttribute & 0x00000F00) >> 8;

				if (tdwValue2 == 0 && tdwValue1 == 0) wsprintf(pStr2, GET_ITEM_NAME2, pItem->m_sItemSpecEffectValue2 + 100);
			}
		}
	}
	else
	{
		if (pItem->m_dwCount == 1)
			wsprintf(G_cTxt, "%s", cName);
		else wsprintf(G_cTxt, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM1, pItem->m_dwCount, cName);//"%d %s"
		strcpy(pStr1, G_cTxt);
	}

	if ((pItem->m_dwAttribute & 0x00F0F000) != 0)
	{
		m_bIsSpecial = TRUE;
		dwType1 = (pItem->m_dwAttribute & 0x00F00000) >> 20;
		dwValue1 = (pItem->m_dwAttribute & 0x000F0000) >> 16;
		dwType2 = (pItem->m_dwAttribute & 0x0000F000) >> 12;
		dwValue2 = (pItem->m_dwAttribute & 0x00000F00) >> 8;
		if (dwType1 != 0)
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType1) {
				case 1: strcpy(cTxt, GET_ITEM_NAME3);   break; // "Critical "
				case 2: strcpy(cTxt, GET_ITEM_NAME4);   break; // "Poisoning "
				case 3: strcpy(cTxt, GET_ITEM_NAME5);   break; // "Righteous "
				case 4: break;
				case 5: strcpy(cTxt, GET_ITEM_NAME6);   break; // "Agile "
				case 6: strcpy(cTxt, GET_ITEM_NAME7);   break; // "Light "
				case 7: strcpy(cTxt, GET_ITEM_NAME8);   break; // "Sharp "
				case 8: strcpy(cTxt, GET_ITEM_NAME9);   break; // "Strong "
				case 9: strcpy(cTxt, GET_ITEM_NAME10);  break; // "Ancient "
				case 10: strcpy(cTxt, GET_ITEM_NAME11); break; // "Special "
				case 11: strcpy(cTxt, GET_ITEM_NAME12); break; // "Mana Converting "
				case 12: strcpy(cTxt, GET_ITEM_NAME13); break; // "Critical "
			}
			strcat(cTxt, pStr1);
			ZeroMemory(pStr1, sizeof(pStr1));
			strcpy(pStr1, cTxt);

			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType1) {
				case 1: wsprintf(cTxt, GET_ITEM_NAME14, dwValue1); break; // "Critical Hit Damage+%d"
				case 2: wsprintf(cTxt, GET_ITEM_NAME15, dwValue1 * 5); break; // "Poison Damage+%d"
				case 3: break;
				case 4: break;
				case 5: strcpy(cTxt, GET_ITEM_NAME16); break; // "Attack Speed -1"
				case 6: wsprintf(cTxt, GET_ITEM_NAME17, dwValue1 * 4); break; // "%d%% light"
				case 7: strcpy(cTxt, GET_ITEM_NAME18); break; // "Damage added"
				case 8: wsprintf(cTxt, GET_ITEM_NAME19, dwValue1 * 7); break; // "Endurance +%d%%"
				case 9: strcpy(cTxt, GET_ITEM_NAME20); break; // "Extra Damage added"
				case 10: wsprintf(cTxt, GET_ITEM_NAME21, dwValue1 * 3); break; // "Magic Casting Probability+%d%%"
				case 11: wsprintf(cTxt, GET_ITEM_NAME22, dwValue1); break; // Replace %d%% damage to mana"
				case 12: wsprintf(cTxt, GET_ITEM_NAME23, dwValue1); break; // "Crit Increase Chance %d%%"
			}
			strcat(pStr2, cTxt);

			if (dwType2 != 0) {
				ZeroMemory(cTxt, sizeof(cTxt));
				switch (dwType2) {
					case 1:  wsprintf(cTxt, GET_ITEM_NAME24, dwValue2 * 7); break; // "Poison Resistance+%d%%"
					case 2:  wsprintf(cTxt, GET_ITEM_NAME25, dwValue2 * 7); break; // "Hitting Probability+%d"
					case 3:  wsprintf(cTxt, GET_ITEM_NAME26, dwValue2 * 7); break; // "Defense Ratio+%d"
					case 4:  wsprintf(cTxt, GET_ITEM_NAME27, dwValue2 * 7); break; // "HP recovery %d%%"
					case 5:  wsprintf(cTxt, GET_ITEM_NAME28, dwValue2 * 7); break; // "SP recovery %d%%"
					case 6:  wsprintf(cTxt, GET_ITEM_NAME29, dwValue2 * 7); break; // "MP recovery %d%%"
					case 7:  wsprintf(cTxt, GET_ITEM_NAME30, dwValue2 * 7); break; // "Magic Resistance+%d%%"
					case 8:  wsprintf(cTxt, GET_ITEM_NAME31, dwValue2 * 3); break; // "Physical Absorption+%d%%"
					case 9:  wsprintf(cTxt, GET_ITEM_NAME32, dwValue2 * 3); break; // "Magic Absorption+%d%%"
					case 10: wsprintf(cTxt, GET_ITEM_NAME33, dwValue2);   break; // "Consecutive Attack Damage+%d"
					case 11: wsprintf(cTxt, GET_ITEM_NAME34, dwValue2 * 10); break; // "Experience+%d%%"
					case 12: wsprintf(cTxt, GET_ITEM_NAME35, dwValue2 * 10); break; // "Gold +%
				}
				strcpy(pStr3, cTxt);
			}
		}
		else if (dwType2 != 0)
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType2) {
				case 1:  wsprintf(cTxt, GET_ITEM_NAME24, dwValue2 * 7); break; // "Poison Resistance+%d%%"
				case 2:  wsprintf(cTxt, GET_ITEM_NAME25, dwValue2 * 7); break; // "Hitting Probability+%d"
				case 3:  wsprintf(cTxt, GET_ITEM_NAME26, dwValue2 * 7); break; // "Defense Ratio+%d"
				case 4:  wsprintf(cTxt, GET_ITEM_NAME27, dwValue2 * 7); break; // "HP recovery %d%%"
				case 5:  wsprintf(cTxt, GET_ITEM_NAME28, dwValue2 * 7); break; // "SP recovery %d%%"
				case 6:  wsprintf(cTxt, GET_ITEM_NAME29, dwValue2 * 7); break; // "MP recovery %d%%"
				case 7:  wsprintf(cTxt, GET_ITEM_NAME30, dwValue2 * 7); break; // "Magic Resistance+%d%%"
				case 8:  wsprintf(cTxt, GET_ITEM_NAME31, dwValue2 * 3); break; // "Physical Absorption+%d%%"
				case 9:  wsprintf(cTxt, GET_ITEM_NAME32, dwValue2 * 3); break; // "Magic Absorption+%d%%"
				case 10: wsprintf(cTxt, GET_ITEM_NAME33, dwValue2);   break; // "Consecutive Attack Damage+%d"
				case 11: wsprintf(cTxt, GET_ITEM_NAME34, dwValue2 * 10); break; // "Experience+%d%%"
				case 12: wsprintf(cTxt, GET_ITEM_NAME35, dwValue2 * 10); break; // "Gold +%
			}
			strcat(pStr2, cTxt);
		}
	}
	if (memcmp(pItem->m_cName, "AngelicPandent", 14) == 0)
		dwValue3 = ((pItem->m_dwAttribute & 0xF0000000) >> 28) + pItem->m_sItemSpecEffectValue3;
	else dwValue3 = (pItem->m_dwAttribute & 0xF0000000) >> 28;
	if (dwValue3 > 0)
	{
		if (pStr1[strlen(pStr1) - 2] == '+')
		{
			dwValue3 = atoi((char *)(pStr1 + strlen(pStr1) - 1)) + dwValue3;
			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, pStr1, strlen(pStr1) - 2);
			ZeroMemory(cTxt2, sizeof(cTxt2));
			wsprintf(cTxt2, "%s+%d", cTxt, dwValue3);
			ZeroMemory(pStr1, sizeof(pStr1));
			strcpy(pStr1, cTxt2);
		}
		else
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			wsprintf(cTxt, "+%d", dwValue3);
			strcat(pStr1, cTxt);
		}
	}
}

void CGame::GetItemName(char * cItemName, DWORD dwAttribute, char *pStr1, char *pStr2, char *pStr3, int iValue2)
{
	int i;
	char cTxt[256], cTxt2[256], cName[51];
	DWORD dwType1, dwType2, dwValue1, dwValue2, dwValue3;

	m_bIsSpecial = FALSE;
	ZeroMemory(cName, sizeof(cName));
	ZeroMemory(pStr1, sizeof(pStr1));
	ZeroMemory(pStr2, sizeof(pStr2));
	ZeroMemory(pStr3, sizeof(pStr3));

	strcpy(cName, cItemName);
	for (i = 0; i < DEF_MAXITEMNAMES; i++)
		if ((m_pItemNameList[i] != NULL) && (strcmp(m_pItemNameList[i]->m_cOriginName, cItemName) == 0)) {
			strcpy(cName, m_pItemNameList[i]->m_cName);
			break;
		}

	if (0 == memcmp(cItemName, "AcientTablet", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "NecklaceOf", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "DarkElfBow", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "DarkExecutor", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "The_Devastator", 14)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "DemonSlayer", 10)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "LightingBlade", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "5thAnniversary", 13)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "RubyRing", 8)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "SapphireRing", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Ringof", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "MagicNecklace", 13)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "MagicWand(M.Shield)", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "MagicWand(MS30-LLF)", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Merien", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "BerserkWand", 11)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "ResurWand", 9)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Blood", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Swordof", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "StoneOf", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "ZemstoneofSacrifice", 19)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "StormBringer", 12)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Aresden", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Elvine", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "EmeraldRing", 11)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Excaliber", 9)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Xelima", 6)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "Kloness", 7)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "aHero", 5)) m_bIsSpecial = TRUE;
	else if (0 == memcmp(cItemName, "eHero", 5)) m_bIsSpecial = TRUE;
	strcpy(pStr1, cName);

	if ((dwAttribute & 0x00F0F000) != 0)
	{
		m_bIsSpecial = TRUE;
		dwType1 = (dwAttribute & 0x00F00000) >> 20;
		dwValue1 = (dwAttribute & 0x000F0000) >> 16;
		dwType2 = (dwAttribute & 0x0000F000) >> 12;
		dwValue2 = (dwAttribute & 0x00000F00) >> 8;
		if (dwType1 != 0)
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType1) {
				case 1: strcpy(cTxt, GET_ITEM_NAME3); break;
				case 2: strcpy(cTxt, GET_ITEM_NAME4); break;
				case 3: strcpy(cTxt, GET_ITEM_NAME5); break;
				case 4: break;
				case 5: strcpy(cTxt, GET_ITEM_NAME6); break;
				case 6: strcpy(cTxt, GET_ITEM_NAME7); break;
				case 7: strcpy(cTxt, GET_ITEM_NAME8); break;
				case 8: strcpy(cTxt, GET_ITEM_NAME9); break;
				case 9: strcpy(cTxt, GET_ITEM_NAME10); break;
				case 10: strcpy(cTxt, GET_ITEM_NAME11); break;
				case 11: strcpy(cTxt, GET_ITEM_NAME12); break;
				case 12: strcpy(cTxt, GET_ITEM_NAME13); break;
			}
			strcat(cTxt, pStr1);
			ZeroMemory(pStr1, sizeof(pStr1));
			strcpy(pStr1, cTxt);

			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType1) {
				case 1: wsprintf(cTxt, GET_ITEM_NAME14, dwValue1); break;
				case 2: wsprintf(cTxt, GET_ITEM_NAME15, dwValue1 * 5); break;
				case 3: break;
				case 4: break;
				case 5: strcpy(cTxt, GET_ITEM_NAME16); break;
				case 6: wsprintf(cTxt, GET_ITEM_NAME17, dwValue1 * 4); break;
				case 7: strcpy(cTxt, GET_ITEM_NAME18); break;
				case 8: wsprintf(cTxt, GET_ITEM_NAME19, dwValue1 * 7); break;
				case 9: strcpy(cTxt, GET_ITEM_NAME20); break;
				case 10: wsprintf(cTxt, GET_ITEM_NAME21, dwValue1 * 3); break;
				case 11: wsprintf(cTxt, GET_ITEM_NAME22, dwValue1); break;
				case 12: wsprintf(cTxt, GET_ITEM_NAME23, dwValue1); break;
			}
			strcat(pStr2, cTxt);

			if (dwType2 != 0)
			{
				ZeroMemory(cTxt, sizeof(cTxt));
				switch (dwType2) {
					case 1:  wsprintf(cTxt, GET_ITEM_NAME24, dwValue2 * 7);  break;
					case 2:  wsprintf(cTxt, GET_ITEM_NAME25, dwValue2 * 7);  break;
					case 3:  wsprintf(cTxt, GET_ITEM_NAME26, dwValue2 * 7);  break;
					case 4:  wsprintf(cTxt, GET_ITEM_NAME27, dwValue2 * 7);  break;
					case 5:  wsprintf(cTxt, GET_ITEM_NAME28, dwValue2 * 7);  break;
					case 6:  wsprintf(cTxt, GET_ITEM_NAME29, dwValue2 * 7);  break;
					case 7:  wsprintf(cTxt, GET_ITEM_NAME30, dwValue2 * 7);  break;
					case 8:  wsprintf(cTxt, GET_ITEM_NAME31, dwValue2 * 3);  break;
					case 9:  wsprintf(cTxt, GET_ITEM_NAME32, dwValue2 * 3);  break;
					case 10: wsprintf(cTxt, GET_ITEM_NAME33, dwValue2);    break;
					case 11: wsprintf(cTxt, GET_ITEM_NAME34, dwValue2 * 10); break;
					case 12: wsprintf(cTxt, GET_ITEM_NAME35, dwValue2 * 10); break;
				}
				strcpy(pStr3, cTxt);
			}
		}
		else if (dwType2 != 0)
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			switch (dwType2) {
				case 1:  wsprintf(cTxt, GET_ITEM_NAME24, dwValue2 * 7); break;
				case 2:  wsprintf(cTxt, GET_ITEM_NAME25, dwValue2 * 7); break;
				case 3:  wsprintf(cTxt, GET_ITEM_NAME26, dwValue2 * 7); break;
				case 4:  wsprintf(cTxt, GET_ITEM_NAME27, dwValue2 * 7); break;
				case 5:  wsprintf(cTxt, GET_ITEM_NAME28, dwValue2 * 7); break;//"SPrec
				case 6:  wsprintf(cTxt, GET_ITEM_NAME29, dwValue2 * 7); break;//"MPrec
				case 7:  wsprintf(cTxt, GET_ITEM_NAME30, dwValue2 * 7); break;
				case 8:  wsprintf(cTxt, GET_ITEM_NAME31, dwValue2 * 3); break;
				case 9:  wsprintf(cTxt, GET_ITEM_NAME32, dwValue2 * 3); break;
				case 10: wsprintf(cTxt, GET_ITEM_NAME33, dwValue2);   break;
				case 11: wsprintf(cTxt, GET_ITEM_NAME34, dwValue2 * 10); break;
				case 12: wsprintf(cTxt, GET_ITEM_NAME35, dwValue2 * 10); break;//"Gold +%
			}
			strcat(pStr2, cTxt);
		}
	}

	if (memcmp(cItemName, "AngelicPandent", 14) == 0)
		dwValue3 = ((dwAttribute & 0xF0000000) >> 28) + iValue2;
	else dwValue3 = (dwAttribute & 0xF0000000) >> 28;
	if (dwValue3 > 0)
	{
		if (pStr1[strlen(pStr1) - 2] == '+')
		{
			dwValue3 = atoi((char *)(pStr1 + strlen(pStr1) - 1)) + dwValue3;
			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, pStr1, strlen(pStr1) - 2);
			ZeroMemory(cTxt2, sizeof(cTxt2));
			wsprintf(cTxt2, "%s+%d", cTxt, dwValue3);
			ZeroMemory(pStr1, sizeof(pStr1));
			strcpy(pStr1, cTxt2);
		}
		else
		{
			ZeroMemory(cTxt, sizeof(cTxt));
			wsprintf(cTxt, "+%d", dwValue3);
			strcat(pStr1, cTxt);
		}
	}
}

void CGame::_CalcSocketClosed()
{
	if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
	{
		delete m_pGSock;
		m_pGSock = NULL;
		m_bEscPressed = FALSE;
		PlaySound('E', 14, 5);
		if (m_bSoundFlag) m_pESound[38]->bStop();
		if ((m_bSoundFlag) && (m_bMusicStat == TRUE))
		{
			if (m_pBGM != NULL) m_pBGM->bStop();
		}
		ChangeGameMode(DEF_GAMEMODE_ONQUIT);
	}
}

void CGame::PointCommandHandler(int indexX, int indexY, char cItemID)
{
	char cTemp[31];
	if ((DecriptInt(m_iPointCommandType) >= 100) && (DecriptInt(m_iPointCommandType) < 200))
	{
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_COMMON_MAGIC, NULL, indexX, indexY, DecriptInt(m_iPointCommandType), NULL, NULL);
	}
	else if ((DecriptInt(m_iPointCommandType) >= 0) && (DecriptInt(m_iPointCommandType) < 50))
	{
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOMOEAT, NULL, DecriptInt(m_iPointCommandType), indexX, indexY, cTemp, cItemID); // v1.4

		if (m_pItemList[DecriptInt(m_iPointCommandType)]->m_cItemType == DEF_ITEMTYPE_USE_SKILL)
			m_bSkillUsingStatus = TRUE;
	}
	else if (DecriptInt(m_iPointCommandType) == 200) // Normal Hand
	{
	//	DecriptString(m_cPlayerName);
		DecriptString(m_cMCName);
		if ((strlen(m_cMCName) == 0) || (strcmp(m_cMCName, m_cPlayerName) == 0) || (m_cMCName[0] == '_')) {
			m_stDialogBoxInfo[32].cMode = 0;
			PlaySound('E', 14, 5);
			AddEventList(POINT_COMMAND_HANDLER1, 10);
		}
		else {
			m_stDialogBoxInfo[32].cMode = 3;
			PlaySound('E', 14, 5);
			ZeroMemory(m_stDialogBoxInfo[32].cStr, sizeof(m_stDialogBoxInfo[32].cStr));
			strcpy(m_stDialogBoxInfo[32].cStr, m_cMCName);
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_JOINPARTY, NULL, 1, NULL, NULL, m_cMCName);
		//	EncriptString(m_cPlayerName);
			EncriptString(m_cMCName);
			return;
		}
	//	EncriptString(m_cPlayerName);
		EncriptString(m_cMCName);
	}
	else if (DecriptInt(m_iPointCommandType) == 250) {
	//	DecriptString(m_cPlayerName);
		DecriptString(m_cMCName);
		if ((strlen(m_cMCName) == 0) || (strcmp(m_cMCName, m_cPlayerName) == 0) || (m_cMCName[0] == '_')) {
			PlaySound('E', 14, 5);
		}
		else {
			/*PlaySound('E', 14, 5);
			memcpy(m_cFriends[m_iTotalFriends],m_cMCName,10);
			m_iTotalFriends++;
			m_stDialogBoxInfo[43].sV1=0;
			SaveFriendList();*/
	//		EncriptString(m_cPlayerName);
			EncriptString(m_cMCName);
			return;
		}
		EncriptString(m_cMCName);
	//	EncriptString(m_cPlayerName);
	}
}

void CGame::UpdateScreen_OnGame()
{
	short sVal, sDivX, sModX, sDivY, sModY, sPivotX, sPivotY, sVPXsave, sVPYsave;
	static int  iUpdateRet = -1;
	short msX, msY, msZ, absX, absY, tX, tY;
	char cLB, cRB;
	char cItemColor;
	int  i, iAmount, uiPrice = 0;
	DWORD dwTime = timeGetTime();
	static DWORD dwPrevChatTime = 0;
	static int   imX = 0, imY = 0;
	// ZeroEoyPnk
	short FlagFrameCounter;
	DWORD FlagFrameTime;
	int res_y = 0;

	if (m_cGameModeCount == 0)
	{
		m_DDraw.ClearBackB4();
		FlagFrameTime = m_dwFPStime = m_dwAuraTime = m_dwTimingCountTime = m_dwCheckConnTime = m_dwCheckSprTime = m_dwCheckChatTime = reqmobhptime = m_dwTimeScreen = m_dwFreeCommandTime = dwTime;
		m_iFrameCount = FlagFrameCounter = 0;
		if (m_bMusicStat) StartBGM(false);
		//if(m_iLevel < 40) AddEventList( , 10);
	}

	m_cGameModeCount++;
	if (m_cGameModeCount > 20) m_cGameModeCount = 20;
	// ----------------------------------------------------

	if (!isInMap("dm") && m_bIsDialogEnabled[75]) DisableDialogBox(75);
	if (!m_bShiftPressed && m_bIsDialogEnabled[75]) DisableDialogBox(75);

	// Inicializar el socket cliente
	/*SendMessageToServer();
	ReceiveFromServer();*/

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);
	m_dwCurTime = timeGetTime();

	if (m_bEnterPressed == TRUE)
	{
		m_bEnterPressed = FALSE;

		if ((m_bIsDialogEnabled[7] == TRUE) && (m_stDialogBoxInfo[7].cMode == 1) && (iGetTopDialogBoxIndex() == 7)) {

			EndInputString();

			m_bEnterPressed = FALSE;
		//	DecriptString(m_cGuildName);
			if (strlen(m_cGuildName) == 0) return;
			if (strcmp(m_cGuildName, "NONE") != 0) {
				bSendCommand(CLIENT_REQUEST_CREATENEWGUILD, DEF_MSGTYPE_CONFIRM, NULL, NULL, NULL, NULL, NULL);
				m_stDialogBoxInfo[7].cMode = 2;
				//
			}
		//	EncriptString(m_cGuildName);
		}
		else if ((m_bIsDialogEnabled[17] == TRUE) && (m_stDialogBoxInfo[17].cMode == 1 || m_stDialogBoxInfo[17].cMode == 30) && (iGetTopDialogBoxIndex() == 17)) {
			// Drop Item Query

			EndInputString();

			if (m_bSkillUsingStatus == TRUE)
			{
				AddEventList(UPDATE_SCREEN_ONGAME1, 10);
				return;
			}

			if ((m_bIsDialogEnabled[20] == TRUE)
				&& ((m_stDialogBoxInfo[20].cMode == 1) || (m_stDialogBoxInfo[20].cMode == 2)))
			{
				AddEventList(UPDATE_SCREEN_ONGAME1, 10);//"You can not give or drop before the actual Item transaction."
				return;
			}

			if ((m_bIsDialogEnabled[4] == TRUE) || (m_bIsDialogEnabled[23] == TRUE) || (m_bIsDialogEnabled[26] == TRUE))
			{
				AddEventList(UPDATE_SCREEN_ONGAME1, 10);
				return;
			}

			if (strlen(m_cAmountString) == 0) return;
			iAmount = atoi(m_cAmountString);


			if (m_stDialogBoxInfo[17].IsMarketInput())
			{
				if (iAmount <= 0)
					return;

				if (iAmount > 500000)
					return;

				market_coins = iAmount;
				DisableDialogBox(17);
				m_stDialogBoxInfo[17].ClearMarketInput();
				return;
			}

			if (m_stDialogBoxInfo[17].cMode == 30 && m_bIsDialogEnabled[49])
			{
				uiPrice = (int)iAmount;
				if (uiPrice < 0) uiPrice = 1;
				//uiPrice = iAmount;
				iAmount = 1;
			}
			else {
				if ((int)(m_pItemList[m_stDialogBoxInfo[17].sView]->m_dwCount) < iAmount) {
					iAmount = m_pItemList[m_stDialogBoxInfo[17].sView]->m_dwCount;
				}
			}

			if (iAmount != 0) {
				if ((int)(m_pItemList[m_stDialogBoxInfo[17].sView]->m_dwCount) >= iAmount) {
					if (m_stDialogBoxInfo[17].sV1 != NULL) {
						absX = abs(m_stDialogBoxInfo[17].sV1 - m_sPlayerX);
						absY = abs(m_stDialogBoxInfo[17].sV2 - m_sPlayerY);

						if ((absX == 0) && (absY == 0))
							AddEventList(UPDATE_SCREEN_ONGAME5, 10);
						else if ((absX <= 8) && (absY <= 8)) {
							switch (m_stDialogBoxInfo[17].sV3) {
								case 1:
								case 2:
								case 3:
								case 4:
								case 5:
								case 6:
									if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
									EnableDialogBox(20, 1, m_stDialogBoxInfo[17].sView, m_stDialogBoxInfo[17].sV3);
									m_stDialogBoxInfo[20].sV3 = iAmount;
									m_stDialogBoxInfo[20].sV4 = m_wCommObjectID;	// v1.4
									m_stDialogBoxInfo[20].sV5 = m_stDialogBoxInfo[17].sV1;
									m_stDialogBoxInfo[20].sV6 = m_stDialogBoxInfo[17].sV2;

									/*tX = msX - 117;
									tY = msY - 50;
									if (tX < 0) tX = 0;
									if ((tX + 235) > 639) tX = 639 - 235;
									if (tY < 0) tY = 0;
									if ((tY + 100) > 479) tY = 479 - 100;*/

									//added resolution
									if (c_reso->IsResolution() == C800x600)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 799) tX = 799 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 599) tY = 599 - 100;
									}
									else if (c_reso->IsResolution() == C1024x768)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 1023) tX = 1023 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 767) tY = 767 - 100;
									}
									else if (c_reso->IsResolution() == C640x480)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 639) tX = 639 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 479) tY = 479 - 100;
									}

									m_stDialogBoxInfo[20].sX = tX;
									m_stDialogBoxInfo[20].sY = tY;

									ZeroMemory(m_stDialogBoxInfo[20].cStr, sizeof(m_stDialogBoxInfo[20].cStr));
									strcpy(m_stDialogBoxInfo[20].cStr, m_stDialogBoxInfo[17].cStr);
									break;

								case 20:
									if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
									EnableDialogBox(20, 3, m_stDialogBoxInfo[17].sView, m_stDialogBoxInfo[17].sV3);
									m_stDialogBoxInfo[20].sV3 = iAmount;
									m_stDialogBoxInfo[20].sV4 = m_wCommObjectID;
									m_stDialogBoxInfo[20].sV5 = m_stDialogBoxInfo[17].sV1;
									m_stDialogBoxInfo[20].sV6 = m_stDialogBoxInfo[17].sV2;

									/*tX = msX - 117;
									tY = msY - 50;
									if (tX < 0) tX = 0;
									if ((tX + 235) > 639) tX = 639 - 235;
									if (tY < 0) tY = 0;
									if ((tY + 100) > 479) tY = 479 - 100;*/
									//added resolution
									if (c_reso->IsResolution() == C800x600)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 799) tX = 799 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 599) tY = 599 - 100;
									}
									else if (c_reso->IsResolution() == C1024x768)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 1023) tX = 1023 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 767) tY = 767 - 100;
									}
									else if (c_reso->IsResolution() == C640x480)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 639) tX = 639 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 479) tY = 479 - 100;
									}
									
									m_stDialogBoxInfo[20].sX = tX;
									m_stDialogBoxInfo[20].sY = tY;

									ZeroMemory(m_stDialogBoxInfo[20].cStr, sizeof(m_stDialogBoxInfo[20].cStr));
									GetNpcName(m_stDialogBoxInfo[17].sV3, m_stDialogBoxInfo[20].cStr);
									break;

								case 15:
								case 24:
									if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
									EnableDialogBox(20, 2, m_stDialogBoxInfo[17].sView, m_stDialogBoxInfo[17].sV3);
									m_stDialogBoxInfo[20].sV3 = iAmount;
									m_stDialogBoxInfo[20].sV4 = m_wCommObjectID;

								/*	tX = msX - 117;
									tY = msY - 50;
									if (tX < 0) tX = 0;
									if ((tX + 235) > 639) tX = 639 - 235;
									if (tY < 0) tY = 0;
									if ((tY + 100) > 479) tY = 479 - 100;*/
									//added resolution
									if (c_reso->IsResolution() == C800x600)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 799) tX = 799 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 599) tY = 599 - 100;
									}
									else if (c_reso->IsResolution() == C1024x768)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 1023) tX = 1023 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 767) tY = 767 - 100;
									}
									else if (c_reso->IsResolution() == C640x480)
									{
										tX = msX - 117;
										tY = msY - 50;
										if (tX < 0) tX = 0;
										if ((tX + 235) > 639) tX = 639 - 235;
										if (tY < 0) tY = 0;
										if ((tY + 100) > 479) tY = 479 - 100;
									}

									m_stDialogBoxInfo[20].sX = tX;
									m_stDialogBoxInfo[20].sY = tY;

									ZeroMemory(m_stDialogBoxInfo[20].cStr, sizeof(m_stDialogBoxInfo[20].cStr));
									GetNpcName(m_stDialogBoxInfo[17].sV3, m_stDialogBoxInfo[20].cStr);
									break;

								case 1000: // Trade stackable items
									if (DecriptInt(ItemsInExchange) + 1 > 19) return;
									m_stDialogBoxExchangeInfo[DecriptInt(ItemsInExchange) + 1].sItemID = m_stDialogBoxInfo[17].sV4;
									bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SETEXCHANGEITEM, NULL, m_stDialogBoxInfo[17].sV4, iAmount, NULL, NULL);
									break;

								case 1001:
									// Sell List
									for (i = 0; i < DEF_MAXSELLLIST; i++)
										if (m_stSellItemList[i].iIndex == -1) {
											m_stSellItemList[i].iIndex = m_stDialogBoxInfo[17].sV4;
											m_stSellItemList[i].iAmount = iAmount;
											m_bIsItemDisabled[m_stDialogBoxInfo[17].sV4] = TRUE;
											break;
										}
									if (i == DEF_MAXSELLLIST) AddEventList(UPDATE_SCREEN_ONGAME6, 10);
									break;

								case 1002:
									if (_iGetBankItemCount() >= (BANK_ITEMS_PAGE - 1)) AddEventList(DLGBOX_CLICK_NPCACTION_QUERY9, 10);
									else
									{
										bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, TempPage, NULL, NULL, NULL);
										bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GIVEITEMTOCHAR, m_stDialogBoxInfo[39].sV1, iAmount, m_stDialogBoxInfo[39].sV5, m_stDialogBoxInfo[39].sV6, m_pItemList[m_stDialogBoxInfo[39].sV1]->m_cName, m_stDialogBoxInfo[39].sV4); //v1.4
									}
									break;

								case 1003:
									// New System -> Market Place -> HB Arg v4.4
									//if (!DecriptBool(MarketOpen))
									if (!MarketOpen)
									{
										if (uiPrice <= 0) return;
										for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
										{
											if (m_stItemListToSell[i].iIndex == -1) {
												m_stItemListToSell[i].iIndex = m_stDialogBoxInfo[17].sV4;
												m_stItemListToSell[i].iAmount = 1;
												m_stItemListToSell[i].uiPrice = uiPrice;
												m_bIsItemDisabled[m_stDialogBoxInfo[17].sV4] = TRUE;
												GetItemName(m_pItemList[m_stDialogBoxInfo[17].sV4], m_stItemListToSell[i].cStr1, m_stItemListToSell[i].cStr2, m_stItemListToSell[i].cStr3);
												break;
											}
											if (i == DEF_MAXSELLITEMSLIST) AddEventList(UPDATE_SCREEN_ONGAME6, 10);
										}
									}
									else AddEventList("Market is open now!", 10);
									break;

								default:
									bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GIVEITEMTOCHAR, (char)(m_stDialogBoxInfo[17].sView), iAmount, m_stDialogBoxInfo[17].sV1, m_stDialogBoxInfo[17].sV2, m_pItemList[m_stDialogBoxInfo[17].sView]->m_cName);
									break;
							}
							m_bIsItemDisabled[m_stDialogBoxInfo[17].sView] = TRUE;
						}
						else AddEventList(UPDATE_SCREEN_ONGAME7, 10);
					}
					else {
						if (iAmount <= 0)
						{
							AddEventList(UPDATE_SCREEN_ONGAME8, 10);
						}
						else
						{
							bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_COMMON_ITEMDROP, NULL, m_stDialogBoxInfo[17].sView, iAmount, NULL, m_pItemList[m_stDialogBoxInfo[17].sView]->m_cName);
							m_bIsItemDisabled[m_stDialogBoxInfo[17].sView] = TRUE;
						}
					}
				}
				else
				{
					AddEventList(UPDATE_SCREEN_ONGAME9, 10);//"You entered more quantity that you can carry."
				}
			}
			DisableDialogBox(17);
		}
		else
		{
			if (!m_bInputStatus)
			{
				if (c_reso->IsResolution() == C800x600)
				{
					res_y = 120;
				}
				else if (c_reso->IsResolution() == C1024x768)
				{
					res_y = 288;
				}
				//switch (m_cBackupChatMsg[0]) {
				switch (m_cBackupChatMsg[0]) {
				case '!':
				case '@':
				case '#':
				case '$':
				case '^':

					ZeroMemory(m_cChatMsg, sizeof(m_cChatMsg));
					m_cChatMsg[0] = m_cBackupChatMsg[0];
					if (BigBar > 0)
						StartInputString(10, 464 + res_y, sizeof(m_cChatMsg), m_cChatMsg);//584
					else
						StartInputString(10, 414 + res_y, sizeof(m_cChatMsg), m_cChatMsg);//534
					break;
				default:
					if (BigBar > 0)//veraca
						StartInputString(10, 464 + res_y, sizeof(m_cChatMsg), m_cChatMsg);
					else
						StartInputString(10, 414 + res_y, sizeof(m_cChatMsg), m_cChatMsg);
					ClearInputString();
					break;
					}
				}
			else
			{
				EndInputString();
				if (!m_bIsDialogEnabled[80])
				{
					ZeroMemory(G_cTxt, sizeof(G_cTxt));
					ReceiveString((char *)G_cTxt);
					ZeroMemory(m_cBackupChatMsg, sizeof(m_cBackupChatMsg));
					strcpy(m_cBackupChatMsg, G_cTxt);
					if ((m_dwCurTime - dwPrevChatTime) < 20)//700  //timechat
					{
					}
					else
					{
						dwPrevChatTime = m_dwCurTime;
						m_curse.ConvertString(G_cTxt, strlen(G_cTxt));
						if (strlen(G_cTxt) > 0)
						{
							if ((G_cTxt[0] == '!') || (G_cTxt[0] == '~'))
							{
								if (m_Misc.bCheckIMEString(G_cTxt) == FALSE) return;
								//lalochat
								if (m_Misc.bCheckMSGString(G_cTxt) == FALSE) return;
							}
							bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, G_cTxt);
						}
					}
				}
			}
		}
	}
	//HeatoN cerrar dialogs cuando no estas en el mapa (para que lo busques algun dia) xD
	if (m_bIsDialogEnabled[76] && !isInMarketMap(m_cMapName)) DisableDialogBox(76);
	//if (m_bIsDialogEnabled[46] && !isInMarketMap(m_cMapName)) DisableDialogBox(46); //Quest.
	
	sVPXsave = m_sViewPointX;
	sVPYsave = m_sViewPointY;

	if ((m_iCameraShakingDegree > 0) && (iUpdateRet != 0))
	{
		m_sViewPointX += m_iCameraShakingDegree - (rand() % m_iCameraShakingDegree * 2);
		m_sViewPointY += m_iCameraShakingDegree - (rand() % m_iCameraShakingDegree * 2);
		m_iCameraShakingDegree--;
		if (m_iCameraShakingDegree <= 0) m_iCameraShakingDegree = 0;
	}
	sPivotX = m_pMapData->m_sPivotX;
	sPivotY = m_pMapData->m_sPivotY;
	sVal = m_sViewPointX - (sPivotX * 32);
	sDivX = sVal / 32;
	sModX = sVal % 32;
	sVal = m_sViewPointY - (sPivotY * 32);
	sDivY = sVal / 32;
	sModY = sVal % 32;
	if (iUpdateRet != 0)
	{
		DrawBackground(sDivX, sModX, sDivY, sModY);
	}

	if (iUpdateRet != 0)
		DrawEffectLights();
	if (iUpdateRet != 0)
		DrawObjects(sPivotX, sPivotY, sDivX, sDivY, sModX, sModY, msX, msY);

	if (iUpdateRet != 0)
	{
		DrawEffects();
		DrawWhetherEffects();

		int res_xx = 0;
		int res_yy = 0;

		if (c_reso->IsResolution() == C640x480)
		{
			res_xx = 640;
			res_yy = 480;
		}
		else if (c_reso->IsResolution() == C800x600)
		{
			res_xx = 800;
			res_yy = 600;
		}
		else if (c_reso->IsResolution() == C1024x768)
		{
			res_xx = 1024;
			res_yy = 768;
		}

		//auto spr_omit = m_pMapData->m_pData[dX][dY].m_bSpriteOmit;
		DrawChatMsgs(-100, 0, res_xx, res_yy);

		WhetherObjectFrameCounter();
	}
	if ((DecriptInt(m_cMapIndex) == 30) && (m_bThunder == TRUE))
	{
		ThunderEffectAbaddonMap(20, 440);
		ThunderEffectAbaddonMap(40, 445);
		ThunderEffectAbaddonMap(60, 450);
		ThunderEffectAbaddonMap(80, 438);
		ThunderEffectAbaddonMap(100, 442);
		ThunderEffectAbaddonMap(120, 450);
		ThunderEffectAbaddonMap(140, 450);
		ThunderEffectAbaddonMap(160, 440);
		ThunderEffectAbaddonMap(180, 432);
		ThunderEffectAbaddonMap(200, 450);
		ThunderEffectAbaddonMap(220, 443);
		ThunderEffectAbaddonMap(240, 450);
		ThunderEffectAbaddonMap(260, 432);
		ThunderEffectAbaddonMap(280, 430);
		ThunderEffectAbaddonMap(300, 438);
		ThunderEffectAbaddonMap(320, 435);
		ThunderEffectAbaddonMap(340, 441);
		ThunderEffectAbaddonMap(360, 446);
		ThunderEffectAbaddonMap(380, 438);
		ThunderEffectAbaddonMap(400, 436);
		ThunderEffectAbaddonMap(420, 450);
		ThunderEffectAbaddonMap(440, 439);
		ThunderEffectAbaddonMap(460, 443);
		ThunderEffectAbaddonMap(480, 447);
		ThunderEffectAbaddonMap(500, 449);
		ThunderEffectAbaddonMap(520, 442);
		ThunderEffectAbaddonMap(540, 444);
		ThunderEffectAbaddonMap(560, 443);
		ThunderEffectAbaddonMap(580, 438);
		ThunderEffectAbaddonMap(600, 434);
		ThunderEffectAbaddonMap(620, 436);
		ThunderEffectAbaddonMap(640, 438);
	}
	if (DecriptInt(m_cMapIndex) == 26)	//Snoopy: Add Apocalypse map effect (fires in inferniaA)
	{
		m_pEffectSpr[89]->PutTransSprite(1296 - m_sViewPointX, 1283 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
		m_pEffectSpr[89]->PutTransSprite(1520 - m_sViewPointX, 1123 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
		m_pEffectSpr[89]->PutTransSprite(1488 - m_sViewPointX, 3971 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
		m_pEffectSpr[93]->PutTransSprite(2574 - m_sViewPointX, 3677 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
		m_pEffectSpr[93]->PutTransSprite(3018 - m_sViewPointX, 3973 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
	}
	else if (DecriptInt(m_cMapIndex) == 27)	//Add Apocalypse map effect (fires in inferniaB)
	{
		m_pEffectSpr[89]->PutTransSprite(1293 - m_sViewPointX, 3657 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
		m_pEffectSpr[89]->PutTransSprite(944 - m_sViewPointX, 3881 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
		m_pEffectSpr[89]->PutTransSprite(1325 - m_sViewPointX, 4137 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
		m_pEffectSpr[89]->PutTransSprite(1648 - m_sViewPointX, 3913 - m_sViewPointY, _tmp_iEffectFrame % 12, 0);
	}
	//Snoopy: Add Apocalypse Gate and apocalypse map effects (if no Gate, m_iGatePositX will be -1...
	for (i = 0; i <= DEF_MAXPORTALS; i++)
	{
		if (m_iGatePositX[i] != -1)
		{
			DecriptString(m_cMapName);
			if (strcmp(m_cGateMapName[i], m_cMapName) == 0) {
				if ((m_iGatePositX[i] >= m_sViewPointX / 32) && (m_iGatePositX[i] <= m_sViewPointX / 32 + 20)
					&& (m_iGatePositY[i] >= m_sViewPointY / 32) && (m_iGatePositY[i] <= m_sViewPointY / 32 + 15))
				{
					m_pEffectSpr[101]->PutTransSprite(m_iGatePositX[i] * 32 - m_sViewPointX - 96, m_iGatePositY[i] * 32 - m_sViewPointY - 69, _tmp_iEffectFrame % 30, dwTime);
				}
			}
			EncriptString(m_cMapName);
		}
	}
	if (iUpdateRet != 0)
		DrawDialogBoxs(msX, msY, msZ, cLB);

	if ((iUpdateRet != 0) && m_bInputStatus)
	{
		if (((m_bIsDialogEnabled[7] == TRUE) && (m_stDialogBoxInfo[7].cMode == 1)) ||
			((m_bIsDialogEnabled[17] == TRUE) && (m_stDialogBoxInfo[17].cMode == 1 || m_stDialogBoxInfo[17].cMode == 30)))
		{
		}
		else
		{
			if (!m_bIsDialogEnabled[80])
			{
				if (c_reso->IsResolution() == C800x600)
				{
					if (BigBar > 0)
						m_DDraw.DrawShadowBox(0, 583, 799, 599);//LaloRamos dialog recuadro 
					else
						m_DDraw.DrawShadowBox(0, 533, 799, 549);
				}
				else if (c_reso->IsResolution() == C1024x768)
				{
					if (BigBar > 0)
						m_DDraw.DrawShadowBox(0, 751, 1023, 767);//LaloRamos dialog recuadro 
					else
						m_DDraw.DrawShadowBox(0, 701, 1023, 717);
				}
				else if (c_reso->IsResolution() == C640x480)
				{
					if (BigBar > 0)
						m_DDraw.DrawShadowBox(0, 463, 639, 479);//LaloRamos dialog recuadro 
					else
						m_DDraw.DrawShadowBox(0, 413, 639, 429);
				}
			}
		}
		ShowReceivedString();
	}

	if (iUpdateRet != 0)
		ShowEventList(m_dwCurTime);

	char cTxt[50]; 
	if ((iUpdateRet != 0) && TimeMagicSelected != -1 && (m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_MAGIC) &&
		(m_cMagicMastery[(m_stMCursor.sSelectedObjectID - 100)] != NULL) &&
		(m_pMagicCfgList[(m_stMCursor.sSelectedObjectID - 100)] != NULL) && ((dwTime - TimeMagicSelected) > 200))
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONOS]->PutSpriteFast(msX - m_stMCursor.sDistX, msY - m_stMCursor.sDistY, (m_stMCursor.sSelectedObjectID) - 100, dwTime);
		wsprintf(cTxt, "%s", m_pMagicCfgList[(m_stMCursor.sSelectedObjectID) - 100]->m_cName);
		PutString_SprFont3(msX - 20, msY + 25, cTxt, 100, 100, 0, FALSE, 2);
	}


	if ((iUpdateRet != 0) && (m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_ITEM) &&
		(m_pItemList[m_stMCursor.sSelectedObjectID] != NULL))
	{
		cItemColor = m_pItemList[m_stMCursor.sSelectedObjectID]->m_cItemColor;
		if (cItemColor != 0) {
			if ((m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos == DEF_EQUIPPOS_LHAND) ||
				(m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos == DEF_EQUIPPOS_RHAND) ||
				(m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
			{
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stMCursor.sSelectedObjectID]->m_sSprite]->PutSpriteRGB(msX - m_stMCursor.sDistX, msY - m_stMCursor.sDistY,
					m_pItemList[m_stMCursor.sSelectedObjectID]->m_sSpriteFrame,
					m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0],
					dwTime);
			}
			else
			{
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stMCursor.sSelectedObjectID]->m_sSprite]->PutSpriteRGB(msX - m_stMCursor.sDistX, msY - m_stMCursor.sDistY,
					m_pItemList[m_stMCursor.sSelectedObjectID]->m_sSpriteFrame,
					m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0],
					dwTime);
			}
		}
		else m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stMCursor.sSelectedObjectID]->m_sSprite]->PutSpriteFast(msX - m_stMCursor.sDistX, msY - m_stMCursor.sDistY,
			m_pItemList[m_stMCursor.sSelectedObjectID]->m_sSpriteFrame, dwTime);

		//ZeroEoyPnk - Recuadros negros para descripcion de items
		char cStr1[64], cStr2[64], cStr3[64], cStr4[64], cStr5[64], cStr6[64], cItemsTotal[64];
		int  iLoc, iLocStr2 = 0, iLocStr3 = 0, iLocStr4 = 0, iLocStr5 = 0, iLocStr6 = 0, ItemsTotal = 0;// y si aca se agrega uno mas y q quede el completion solo aparte en la estructura dame un toque q vi algo 
		int  iStrLen1 = 0, iStrLen2 = 0, iStrLen3 = 0, iStrLen4 = 0, iStrLen5 = 0, iStrLen6 = 0;
		short msY1 = 0, msX1 = 0, msK = 0;
		GetItemName(m_pItemList[m_stMCursor.sSelectedObjectID], cStr1, cStr2, cStr3);
		//GetItemName(m_pItemList[m_stMCursor.sSelectedObjectID]->m_cName,cStr1, cStr2, cStr3);

		iLoc = 0;
		if (strlen(cStr1) != 0)
		{
			if (m_bIsSpecial)
			{
				if ((m_cDetailLevel != 2 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && !ShadowsBox))
					PutString(msX, msY + 25, cStr1, RGB(0, 255, 50), FALSE, 1);
			}
			else {
				if ((m_cDetailLevel != 2 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && !ShadowsBox))
					PutString(msX, msY + 25, cStr1, RGB(255, 255, 255), FALSE, 1);
			}
			iLoc += 15;
		}
		if (strlen(cStr2) != 0)
		{
			if ((m_cDetailLevel != 2 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && !ShadowsBox))
				PutString(msX, msY + 25 + iLoc, cStr2, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr2 += 15;
		}
		if (strlen(cStr3) != 0)
		{
			if ((m_cDetailLevel != 2 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && !ShadowsBox))
				PutString(msX, msY + 25 + iLoc, cStr3, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr3 += 15;
		}
		if ((m_pItemList[m_stMCursor.sSelectedObjectID]->m_sLevelLimit != 0) && ((m_pItemList[m_stMCursor.sSelectedObjectID]->m_dwAttribute & 0x00000001) == 0))
		{
			wsprintf(cStr4, "%s: %d", DRAW_DIALOGBOX_SHOP24, m_pItemList[m_stMCursor.sSelectedObjectID]->m_sLevelLimit);//"���� ����: %d"
			if ((m_cDetailLevel != 2 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && !ShadowsBox))
				PutString(msX, msY + 25 + iLoc, cStr4, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr4 += 15;
		}
		if ((m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos != DEF_EQUIPPOS_NONE) && (m_pItemList[m_stMCursor.sSelectedObjectID]->m_wWeight >= 1100))
		{
			int	_wWeight = 0;
			if (m_pItemList[m_stMCursor.sSelectedObjectID]->m_wWeight % 100) _wWeight = 1;
			wsprintf(cStr5, DRAW_DIALOGBOX_SHOP15, m_pItemList[m_stMCursor.sSelectedObjectID]->m_wWeight / 100 + _wWeight);
			if ((m_cDetailLevel != 2 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && !ShadowsBox))
				PutString(msX, msY + 25 + iLoc, cStr5, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr5 += 15;
		}
		if (m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos != DEF_EQUIPPOS_NONE || !strcmp(m_pItemList[m_stMCursor.sSelectedObjectID]->m_cName, "ZemstoneofSacrifice"))
		{
			wsprintf(cStr6, UPDATE_SCREEN_ONGAME10, m_pItemList[m_stMCursor.sSelectedObjectID]->m_wCurLifeSpan);
			if ((m_cDetailLevel != 2 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && !ShadowsBox))
				PutString(msX, msY + 25 + iLoc, cStr6, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr6 += 15;
		}

		if (iLoc == 15)
		{
			iLoc = 0;
			for (int iTmp = 0; iTmp < DEF_MAXITEMS; iTmp++)
			{
				if (m_pItemList[iTmp] != NULL)
				{
					if (strcmp(m_pItemList[iTmp]->m_cName, m_pItemList[m_stMCursor.sSelectedObjectID]->m_cName) == 0) iLoc++;
					ItemsTotal = 1;
				}
			}
			if (iLoc > 1)
			{
				wsprintf(cItemsTotal, DEF_MSG_TOTAL_NUMBER, iLoc);
				ItemsTotal += iLoc;
				if ((m_cDetailLevel != 2 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && !ShadowsBox))
					PutString(msX, msY + 40, cItemsTotal, RGB(150, 150, 150), FALSE, 1);
			}
		}
		//Coloco el recuadro - ZeroEoyPnk
		if ((m_cDetailLevel == 2) || (m_cDetailLevel == 3 && ShadowsBox))
		{
			if (ItemsTotal > 1)
				iLoc = 30;
			else if (ItemsTotal == 1)
				iLoc = 13;

			//msY1 = msY;
			if (c_reso->IsResolution() == C800x600)
			{
				if ((msY + iLoc + 28) > 599)
					msY1 = 599;
				else msY1 = msY + iLoc + 28;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				if ((msY + iLoc + 28) > 767)
					msY1 = 767;
				else msY1 = msY + iLoc + 28;
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				if ((msY + iLoc + 28) > 479)
					msY1 = 479;
				else msY1 = msY + iLoc + 28;
			}

			msK = SpaceChar(cStr1);
			if (msK < SpaceChar(cStr2)) msK = SpaceChar(cStr2);
			if (msK < SpaceChar(cStr3)) msK = SpaceChar(cStr3);
			if (msK < SpaceChar(cStr4)) msK = SpaceChar(cStr4);
			if (msK < SpaceChar(cStr5)) msK = SpaceChar(cStr5);
			if (msK < SpaceChar(cStr6)) msK = SpaceChar(cStr6);

			msX1 = msX + msK;

			if (c_reso->IsResolution() == C800x600)
			{
				if (msX1 > 799)
					msX1 = 799;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				if (msX1 > 1023)
					msX1 = 1023;
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				if (msX1 > 639)
					msX1 = 639;
			}
			
			m_DDraw.DrawShadowBox(msX, msY + 25, msX1, msY1);
			PutAlignedString(msX, msX + msK, msY + 25, cStr1, 234, 176, 51);

			if (ItemsTotal > 1)
				PutAlignedString(msX, msX + msK, msY + 25 + 15, cItemsTotal, 255, 255, 255);
			if (iLocStr2 > 0)
			{	//Purity
				if (memcmp(GET_ITEM_NAME1, cStr2, 6) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 255, 255); // Blanco				
				//Critical
				else if (memcmp(GET_ITEM_NAME3, cStr2, 8) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 221, 203, 49); // Amarillo
				// Poisoning
				else if (memcmp(GET_ITEM_NAME4, cStr2, 9) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 209, 61); // Verde
				// Righteous
				else if (memcmp(GET_ITEM_NAME5, cStr2, 9) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 119, 119, 119); // 
				// Agile
				else if (memcmp(GET_ITEM_NAME6, cStr2, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 137, 185, 195); // 
				// Light
				else if (memcmp(GET_ITEM_NAME7, cStr2, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 235, 104); // 
				// Sharp
				else if (memcmp(GET_ITEM_NAME8, cStr2, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 41, 70, 218); // 
				// Strong
				else if (memcmp(GET_ITEM_NAME9, cStr2, 6) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 113, 113, 113); //
				// Ancient
				else if (memcmp(GET_ITEM_NAME10, cStr2, 7) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 195, 77, 147); //
				// Special
				else if (memcmp(GET_ITEM_NAME11, cStr2, 7) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 223, 148, 3); //
				// Mana Converting
				else if (memcmp(GET_ITEM_NAME12, cStr2, 15) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 113, 169, 226); //
				// Critical
				else if (memcmp(GET_ITEM_NAME13, cStr2, 8) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 221, 203, 49); //
				// Critical Hit Damage
				else if (memcmp(GET_ITEM_NAME14, cStr2, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 221, 203, 49); //
				// Poison Damage
				else if (memcmp(GET_ITEM_NAME15, cStr2, 13) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 209, 61); // Verde
				// Attack Speed -1
				else if (memcmp(GET_ITEM_NAME16, cStr2, 15) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 137, 185, 195); //
				// light
				else if (memcmp(GET_ITEM_NAME17, cStr2, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 235, 104); //
				// Damage added
				else if (memcmp(GET_ITEM_NAME18, cStr2, 12) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 206, 18, 115); //
				// Endurance
				else if (memcmp(GET_ITEM_NAME19, cStr2, 9) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 139, 139, 139); //
					// Extra Damage added
				else if (memcmp(GET_ITEM_NAME20, cStr2, 18) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 228, 184, 67); //
				// Magic Casting Probability
				else if (memcmp(GET_ITEM_NAME21, cStr2, 25) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 214, 72, 72); //
				// Replace %d%% damage to mana
				else if (memcmp(GET_ITEM_NAME22, cStr2, 7) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 113, 169, 226); //
				// Crit Increase Chance
				else if (memcmp(GET_ITEM_NAME23, cStr2, 20) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 221, 203, 49); //
				// Poison Resistance
				else if (memcmp(GET_ITEM_NAME24, cStr2, 17) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 209, 61); // Verde
				// Hitting Probability
				else if (memcmp(GET_ITEM_NAME25, cStr2, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 200, 165, 3); //
				// Defense Ratio
				else if (memcmp(GET_ITEM_NAME26, cStr2, 13) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 170, 127, 174); //
					// HP recovery
				else if (memcmp(GET_ITEM_NAME27, cStr2, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 216, 38, 38); // Rojo
				// SP recovery
				else if (memcmp(GET_ITEM_NAME28, cStr2, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 209, 61); // Verde
				// MP recovery
				else if (memcmp(GET_ITEM_NAME29, cStr2, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 113, 169, 226); // Azul
				// Magic Resistance
				else if (memcmp(GET_ITEM_NAME30, cStr2, 16) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 187, 87); // 
				// Physical Absorption
				else if (memcmp(GET_ITEM_NAME31, cStr2, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 38, 122, 118); // 
				// Magic Absorption
				else if (memcmp(GET_ITEM_NAME32, cStr2, 16) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 175, 26, 100); //
				// Consecutive Attack Damage
				else if (memcmp(GET_ITEM_NAME33, cStr2, 25) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 228, 184, 67); //
				// Experience
				else if (memcmp(GET_ITEM_NAME34, cStr2, 10) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 168, 74, 140); //
				// Gold
				else if (memcmp(GET_ITEM_NAME35, cStr2, 4) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 223, 148, 3); //
					//Completion
				else if (memcmp(GET_ITEM_NAME2, cStr2, 10) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 255, 255); // Blanco	
				else
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 255, 255);
				if (iLocStr3 > 0)
					iLocStr3 += iLocStr2;
				else if (iLocStr4 > 0)
					iLocStr4 += iLocStr2;
				else if (iLocStr5 > 0)
					iLocStr5 += iLocStr2;
				else if (iLocStr6 > 0)
					iLocStr6 += iLocStr2;
			}
			if (iLocStr3 > 0)
			{
				//Purity
				if (memcmp(GET_ITEM_NAME1, cStr3, 6) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 255, 255, 255); // Blanco
				// Critical Hit Damage
				else if (memcmp(GET_ITEM_NAME14, cStr3, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 221, 203, 49); //
				// Poison Damage
				else if (memcmp(GET_ITEM_NAME15, cStr3, 13) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 145, 209, 61); // Verde
				// Attack Speed -1
				else if (memcmp(GET_ITEM_NAME16, cStr3, 15) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 137, 185, 195); //
				// light
				else if (memcmp(GET_ITEM_NAME17, cStr3, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 255, 235, 104); //
				// Damage added
				else if (memcmp(GET_ITEM_NAME18, cStr3, 12) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 206, 18, 115); //
				// Endurance
				else if (memcmp(GET_ITEM_NAME19, cStr3, 9) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 139, 139, 139); //
				// Extra Damage added
				else if (memcmp(GET_ITEM_NAME20, cStr3, 18) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 228, 184, 67); //
				// Magic Casting Probability
				else if (memcmp(GET_ITEM_NAME21, cStr3, 25) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 214, 72, 72); //
				// Replace %d%% damage to mana
				else if (memcmp(GET_ITEM_NAME22, cStr3, 7) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 113, 169, 226); //
				// Crit Increase Chance
				else if (memcmp(GET_ITEM_NAME23, cStr3, 20) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 221, 203, 49); //
				// Poison Resistance
				else if (memcmp(GET_ITEM_NAME24, cStr3, 17) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 145, 209, 61); // Verde
				// Hitting Probability
				else if (memcmp(GET_ITEM_NAME25, cStr3, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 200, 165, 3); //
				// Defense Ratio
				else if (memcmp(GET_ITEM_NAME26, cStr3, 13) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 170, 127, 174); //
				// HP recovery
				else if (memcmp(GET_ITEM_NAME27, cStr3, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 216, 38, 38); // Rojo
				// SP recovery
				else if (memcmp(GET_ITEM_NAME28, cStr3, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 145, 209, 61); // Verde
				// MP recovery
				else if (memcmp(GET_ITEM_NAME29, cStr3, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 113, 169, 226); // Azul
				// Magic Resistance
				else if (memcmp(GET_ITEM_NAME30, cStr3, 16) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 145, 187, 87); // 
				// Physical Absorption
				else if (memcmp(GET_ITEM_NAME31, cStr3, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 38, 122, 118); // 
				// Magic Absorption
				else if (memcmp(GET_ITEM_NAME32, cStr3, 16) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 175, 26, 100); //
				// Consecutive Attack Damage
				else if (memcmp(GET_ITEM_NAME33, cStr3, 25) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 228, 184, 67); //
				// Experience
				else if (memcmp(GET_ITEM_NAME34, cStr3, 10) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 168, 74, 140); //
				// Gold
				else if (memcmp(GET_ITEM_NAME35, cStr3, 4) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 223, 148, 3); //
				//Completion
				else if (memcmp(GET_ITEM_NAME2, cStr3, 10) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 255, 255, 255); // Blanco
				else
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 250, 250, 250);
				if (iLocStr4 > 0)
					iLocStr4 += iLocStr3;
				else if (iLocStr5 > 0)
					iLocStr5 += iLocStr3;
				else if (iLocStr6 > 0)
					iLocStr6 += iLocStr3;
			}
			if (iLocStr4 > 0)
			{
				PutAlignedString(msX, msX + msK, msY + 25 + iLocStr4, cStr4, 255, 255, 255);
				if (iLocStr5 > 0)
					iLocStr5 += iLocStr4;
				else if (iLocStr6 > 0)
					iLocStr6 += iLocStr4;
			}
			if (iLocStr5 > 0)
			{
				PutAlignedString(msX, msX + msK, msY + 25 + iLocStr5, cStr5, 255, 255, 255);
				if (iLocStr6 > 0)
					iLocStr6 += iLocStr5;
			}
			if (iLocStr6 > 0)
				PutAlignedString(msX, msX + msK, msY + 25 + iLocStr6, cStr6, 255, 255, 255);
		}
	}
	else
	{
		struct Coord
		{
			Coord(){}
			Coord(short _x, short _y) : x(_x), y(_y){}
			short x, y;
		};

		Coord piv;
		piv.x = m_pMapData->m_sPivotX;
		piv.y = m_pMapData->m_sPivotY;

		short val = m_sViewPointX - (piv.x * 32);

		Coord div;
		div.x = val / 32;

		Coord mod;
		mod.x = val % 32;
		val = m_sViewPointY - (piv.y * 32);
		div.y = val / 32;
		mod.y = val % 32;

		auto mouse_tpos = Coord(((div.x + piv.x) * 32 + mod.x + msX - 17) / 32 + 1, ((div.y + piv.y) * 32 + mod.y + msY - 17) / 32 + 1);

		int dX = mouse_tpos.x - piv.x;
		int dY = mouse_tpos.y - piv.y;

		if (m_bShiftPressed && (m_stMCursor.sCursorFrame == 1 || m_stMCursor.sCursorFrame == 2) && m_pMapData->m_pData[dX][dY].m_sItemSprite != 0)
		{
			auto & fi = f_item;
			if (m_bShiftPressed)
			{
				static Coord last_pos = { 0, 0 };
				Coord cur_pos = { mouse_tpos.x, mouse_tpos.y };
				auto spr = m_pMapData->m_pData[dX][dY].m_sItemSprite;
				auto frame = m_pMapData->m_pData[dX][dY].m_sItemSpriteFrame;
				if (fi.ptr) //porq pija no entra aca					
				{
					if ((fi.ptr->m_sSprite == spr) && (fi.ptr->m_sSpriteFrame == frame) && (last_pos.x == cur_pos.x) && (last_pos.y == cur_pos.y))//;
					{
						Drawflooritem(fi.ptr, msX + 10, msY + 20);
					}
				}

				if (last_pos.x != cur_pos.x || last_pos.y != cur_pos.y || fi.spr != spr || fi.frame != frame)
				{
					fi.tm = 0;
				}

				if (timeGetTime() - fi.tm > 300)
				{
					fi.spr = spr;
					fi.frame = frame;
					last_pos.x = cur_pos.x;
					last_pos.y = cur_pos.y;
					fi.tm = timeGetTime();

					char pdata[112];//112
					char * cp = pdata;

					Push(cp, (u32)NOT_ITEMDATA);
					Push(cp, (u16)0);
					Push(cp, last_pos.x);
					Push(cp, last_pos.y);
					m_pGSock->iSendMsg(pdata, sizeof(pdata));
				}
			}
		}
	}
	//Snoopy: Add Apocalypse map effect (druncncity bubbles)
	if (DecriptInt(m_cMapIndex) == 25)
	{
		if (c_reso->IsResolution() == C800x600)
		{
			bAddNewEffect(13, m_sViewPointX + rand() % 799 + 1, m_sViewPointY + rand() % 599 + 1, 0, 0, -1 * (rand() % 80), 1);
		}
		else if (c_reso->IsResolution() == C1024x768)
		{
			bAddNewEffect(13, m_sViewPointX + rand() % 1023 + 1, m_sViewPointY + rand() % 767 + 1, 0, 0, -1 * (rand() % 80), 1);
		}
		else if (c_reso->IsResolution() == C640x480)
		{
			bAddNewEffect(13, m_sViewPointX + rand() % 639 + 1, m_sViewPointY + rand() % 479 + 1, 0, 0, -1 * (rand() % 80), 1);
		}
		DrawDruncncity();
	}

	if (m_iIlusionOwnerH == NULL)
	{
		if (isInMap("dm")) _SetIlusionEffect(m_sPlayerObjectID); else _SetIlusionEffect(NULL);
	}

	int res_x = 0;
	int res_x2 = 0;
	int res_x3 = 0;
	int res_y3 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_x = 160;
		res_x2 = 60;
		res_x3 = 165;
		res_y3 = 120;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		res_x = 384;
		res_x2 = 202;
		res_x3 = 389;
		res_y3 = 280;
	}
	// Capture The Flag
	if ((CaptureTheFlagMode) && (iUpdateRet != 0))
	{
		if ((dwTime - FlagFrameTime) > 100)
		{
			FlagFrameCounter++;
			if (FlagFrameCounter >= 4)
				FlagFrameCounter = 0;

			FlagFrameTime = dwTime;
		}

		//Aresden Flag's
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(560 + res_x, 125, 19, dwTime);
		wsprintf(G_cTxt, "%d", AresdenFlags);
		PutString(600 + res_x, 125, G_cTxt, RGB(255, 255, 255));

		//Elvine Flag's
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(560 + res_x, 145, 20, dwTime);
		wsprintf(G_cTxt, "%d", ElvineFlags);
		PutString(600 + res_x, 145, G_cTxt, RGB(255, 255, 255));

		//Lalo Revisar banderas...

		//Elvine Flag
		if (ElvineFlagStatus == FALSE) {
			DecriptString(m_cCurLocation);
			if (memcmp(m_cCurLocation, "elvine", 6) == 0) {
				m_pMapData->bSetDynamicObject(151, 132, NULL, DEF_DYNAMICOBJECT_ELVINEFLAG1, FALSE);
			}
			EncriptString(m_cCurLocation);
		}
		else m_pMapData->bSetDynamicObject(151, 132, NULL, NULL, FALSE);

		//Aresden Flag
		if (AresdenFlagStatus == FALSE) {
			DecriptString(m_cCurLocation);
			if (memcmp(m_cCurLocation, "aresden", 7) == 0) {
				m_pMapData->bSetDynamicObject(151, 128, NULL, DEF_DYNAMICOBJECT_ARESDENFLAG1, FALSE);
			}
			EncriptString(m_cCurLocation);
		}
		else m_pMapData->bSetDynamicObject(151, 128, NULL, NULL, FALSE);
	}

	int ares_defense, elvine_defense;
	if ((iUpdateRet != 0) && (m_iTowerAresden != -1))
	{
		if (m_iTowerAresden > 0)
			ares_defense = (m_iTowerAresden * 100 / 21);
		else
			ares_defense = 0;
		if (m_iTowerElvine > 0)
			elvine_defense = (m_iTowerElvine * 100 / 21);
		else
			elvine_defense = 0;

		if (m_iTowerAresden == 0)
		{
			wsprintf(G_cTxt, "Hp Reliquia Aresden: %d%%", DecriptInt(m_iHpReliquiaAresden));
			PutString(10, 220, G_cTxt, RGB(255, 255, 255));
		}
		else
		{
			wsprintf(G_cTxt, "Defensa de Aresden : %d%%", ares_defense);
			PutString(10, 220, G_cTxt, RGB(255, 255, 255));
		}

		if (m_iTowerElvine == 0)
		{
			wsprintf(G_cTxt, "Hp Reliquia Elvine: %d%%", DecriptInt(m_iHpReliquiaElvine));
			PutString(10, 240, G_cTxt, RGB(255, 255, 255));
		}
		else
		{
			wsprintf(G_cTxt, "Defensa de Elvine: %d%%", elvine_defense);
			PutString(10, 240, G_cTxt, RGB(255, 255, 255));
		}
	}

	DecriptString(m_cCurLocation);
	if ((iUpdateRet != 0) && (memcmp(m_cCurLocation, "Counter", 7) == 0)) {

		wsprintf(G_cTxt, "Nivel: %d - Kills: %d - Death: %d", MyNivel, MyKills, MyDeaths);
		PutString(5, 5, G_cTxt, RGB(255, 200, 0));

		if (ShowTop) {
			PutString(450 + res_x, 140 + res_x2, "Character", RGB(0, 255, 0));

			PutString(520 + res_x, 140 + res_x2, "Nivel", RGB(0, 255, 0));

			PutString(560 + res_x, 140 + res_x2, "Kills", RGB(0, 255, 0));

			PutString(600 + res_x, 140 + res_x2, "Deaths", RGB(0, 255, 0));

			for (i = 0; i < 10; i++) {
				if ((TopEvent[i].Kills != -1) && (strlen(TopEvent[i].CharName) > 0)) {
					wsprintf(G_cTxt, "%s", TopEvent[i].CharName);
					if (i == 0) PutString(450 + res_x, 155 + res_x2 + (i * 15), G_cTxt, RGB(255, 200, 0));
					else PutString(450 + res_x, 155 + res_x2 + (i * 15), G_cTxt, RGB(255, 255, 255));

					wsprintf(G_cTxt, "%d", TopEvent[i].Nivel);
					if (i == 0) PutString(520 + res_x, 155 + res_x2 + (i * 15), G_cTxt, RGB(255, 200, 0));
					else PutString(520 + res_x, 155 + res_x2 + (i * 15), G_cTxt, RGB(255, 255, 255));

					wsprintf(G_cTxt, "%d", TopEvent[i].Kills);
					if (i == 0) PutString(560 + res_x, 155 + res_x2 + (i * 15), G_cTxt, RGB(255, 200, 0));
					else PutString(560 + res_x, 155 + res_x2 + (i * 15), G_cTxt, RGB(255, 255, 255));

					wsprintf(G_cTxt, "%d", TopEvent[i].Death);
					if (i == 0) PutString(600 + res_x, 155 + res_x2 + (i * 15), G_cTxt, RGB(255, 200, 0));
					else PutString(600 + res_x, 155 + res_x2 + (i * 15), G_cTxt, RGB(255, 255, 255));

				}
			}
		}
	}
	EncriptString(m_cCurLocation);

	if ((iUpdateRet != 0) && (m_iHPElv != -1))
	{
		wsprintf(G_cTxt, "Hp Aresden: %d%%", m_iHPAres);
		PutString(10, 220, G_cTxt, RGB(255, 255, 255));
		wsprintf(G_cTxt, "Hp Elvine: %d%%", m_iHPElv);
		PutString(10, 240, G_cTxt, RGB(255, 255, 255));
	}

	DecriptString(m_cCurLocation);
	if ((iUpdateRet != 0) && (m_iTowerDefenseAresden != -1) && (memcmp(m_cCurLocation, "TowerMap", 8) == 0)) {
		wsprintf(G_cTxt, "Torres Aresden: %d", m_iTowerDefenseAresden);
		PutString(10, 220, G_cTxt, RGB(255, 255, 255));

		wsprintf(G_cTxt, "Torres Elvine : %d", m_iTowerDefenseElvine);
		PutString(10, 240, G_cTxt, RGB(255, 255, 255));
	}
	EncriptString(m_cCurLocation);

	DecriptString(m_cCurLocation);
	if ((iUpdateRet != 0) && (DecriptInt(AresdenCount) != -1) && ((WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) ||
		(WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0)) || CVCEvent)) {
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(230 + res_x2, 5, 23, dwTime);
		wsprintf(G_cTxt, "%d", DecriptInt(AssasainCount));
		PutString_SprFont2(271 + res_x2, 10, G_cTxt, 0, 0, 0);

		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(310 + res_x2, 5, 19, dwTime);
		wsprintf(G_cTxt, "%d", DecriptInt(AresdenCount));
		PutString_SprFont2(350 + res_x2, 10, G_cTxt, 0, 0, 0);
		PutString_SprFont2(352 + res_x2, 10, G_cTxt, 0, 0, 0);
		PutString_SprFont2(351 + res_x2, 10, G_cTxt, 255, 0, 0);

		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(390 + res_x2, 5, 20, dwTime);
		wsprintf(G_cTxt, "%d", DecriptInt(ElvineCount));
		PutString_SprFont2(430 + res_x2, 10, G_cTxt, 0, 0, 0);
		PutString_SprFont2(432 + res_x2, 10, G_cTxt, 0, 0, 0);
		PutString_SprFont2(431 + res_x2, 10, G_cTxt, 0, 0, 255);
	}
	EncriptString(m_cCurLocation);

	// summon Event
	if ((iUpdateRet != 0) && (m_iActualRound != -1)) {
		DecriptString(m_cCurLocation);
		if ((memcmp(m_cCurLocation, "ESElvine", 8) == 0) || (memcmp(m_cCurLocation, "ESAresden", 9) == 0) || (memcmp(m_cCurLocation, "ESAssasain", 10) == 0)) {
			wsprintf(G_cTxt, "Round: %d / %d", m_iActualRound, m_iTotalRound);
			PutString_SprFont2(500 + res_x, 10, G_cTxt, 0, 0, 0);
			PutString_SprFont2(502 + res_x, 10, G_cTxt, 0, 0, 0);
			PutString_SprFont2(501 + res_x, 10, G_cTxt, 255, 255, 255);
			if (SummonTimer) {
				wsprintf(G_cTxt, "Next round in: %d", m_iRoundCount);
				PutString_SprFont2(480 + res_x, 30, G_cTxt, 0, 0, 0);
				PutString_SprFont2(482 + res_x, 30, G_cTxt, 0, 0, 0);
				PutString_SprFont2(481 + res_x, 30, G_cTxt, 255, 255, 255);
			}
			else {
				wsprintf(G_cTxt, "Rest Mobs: %d", m_iRoundCount);
				PutString_SprFont2(500 + res_x, 30, G_cTxt, 0, 0, 0);
				PutString_SprFont2(502 + res_x, 30, G_cTxt, 0, 0, 0);
				PutString_SprFont2(501 + res_x, 30, G_cTxt, 255, 255, 255);
			}
		}
		EncriptString(m_cCurLocation);
	}

	if (g_ev.Is(EventID::Deathmatch) && isInMap("dm"))
	{
		PutString(10, 140, "Deathmatch", RGB(255, 200, 0));
		wsprintf(G_cTxt, "Kills %d/%d", m_iDMKills, m_iMaxDMKills);
		PutString(10, 170, G_cTxt, RGB(255, 255, 255));
		wsprintf(G_cTxt, "Deaths %d", m_iDMDeaths);
		PutString(10, 200, G_cTxt, RGB(255, 255, 255));

		if (!m_bShiftPressed)
		{
			wsprintf(G_cTxt, "Press shift key to see ranking.");
			PutString(10, 240, G_cTxt, RGB(255, 255, 255));
		}
	}

	//Soccer Event
	DecriptString(m_cCurLocation);
	if ((iUpdateRet != 0) && (GolAresden != -1) && (memcmp(m_cCurLocation, "fightzone6", 10) == 0)) {
		wsprintf(G_cTxt, "Aresden: %d", GolAresden);
		PutString(10, 220, G_cTxt, RGB(255, 255, 255));

		wsprintf(G_cTxt, "Elvine: %d", GolElvine);
		PutString(10, 240, G_cTxt, RGB(255, 255, 255));
	}
	EncriptString(m_cCurLocation);

	DrawTopMsg();

#ifdef _DEBUGS
	wsprintf(G_cTxt, "M(%d,%d) T(%d,%d)", msX, msY, (m_sViewPointX + msX) / 32, (m_sViewPointY + msY) / 32);
	PutString(msX, msY + 30, G_cTxt, RGB(255, 255, 255));
#endif
	
	// Restart Process
	if (DecriptInt(m_cRestartCount) > 0)
	{
		if ((dwTime - m_dwRestartCountTime) > 1000)
		{
			m_cRestartCount = EncriptInt(DecriptInt(m_cRestartCount) - 1);
			m_dwRestartCountTime = dwTime;
			wsprintf(G_cTxt, UPDATE_SCREEN_ONGAME14, DecriptInt(m_cRestartCount)); // "Restarting game...%d"
			AddEventList(G_cTxt, 10);
		}
	}
	// Restart
	if (DecriptInt(m_cRestartCount) == 0)
	{
		m_cRestartCount = EncriptInt(-1);
		bSendCommand(CLIENT_REQUEST_RESTART, NULL, NULL, NULL, NULL, NULL, NULL);
		return;
	}

	// LogOut process
	if (m_cSalirDelChar > 0)
	{
		//encriptando logout Lalito
		//if ((dwTime - m_dwLogOutCountTime) > 1000)
		if ((dwTime - m_dwEncriptCtO) > 1024)
		{
			//Nueva
			if ((dwTime - m_dwEncriptCtO) > 1021)
			{
				//chekeo
				if ((dwTime - m_dwEncriptCtO) > 1018)
				{
					//Doble Chekeo
					if ((dwTime - m_dwEncriptCtO) > 1010)
					{
						m_cSalirDelChar--;
						//m_dwLogOutCountTime = dwTime;
						m_dwEncriptCtO = dwTime;
						//wsprintf(G_cTxt, UPDATE_SCREEN_ONGAME13, m_cLogOutCount);
						wsprintf(G_cTxt, DOWNCHARPT, m_cSalirDelChar);
						//wsprintf(G_cTxt, "%d", m_cLogOutCount);
						if (m_cSalirDelChar <= 3)
						{
						//	bSendCommand(CLIENT_REQUEST_LOGOUT, NULL, NULL, NULL, NULL, NULL, NULL);
							bSendCommand(CLIENT_REQUEST_NOWLOGOUT, NULL, NULL, NULL, NULL, NULL, NULL);
						}
						AddEventList(G_cTxt, 10);
					}
				}
			}
		}
	}
	// Logout
	if (m_cSalirDelChar == 0)
	{
		delete m_pGSock;
		m_pGSock = NULL;
		m_bEscPressed = FALSE;
		//	if (m_bIllusionMVT == TRUE) m_bIllusionMVT = FALSE;
		PlaySound('E', 14, 5);
		if (m_bSoundFlag) m_pESound[38]->bStop();
		if ((m_bSoundFlag) && (m_bMusicStat == TRUE))
		{
			if (m_pBGM != NULL) m_pBGM->bStop();
		}

		//Cambiado por log out normal LALOv10
		//if (strlen(G_cCmdLineTokenA) != 0)
		if (strlen(G_cCmdLineTokenA) == -1)
			ChangeGameMode(DEF_GAMEMODE_ONQUIT);
		else ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		return;
	}	

	if (AutoSSEK)
	{
		if (m_bCreateScreen == TRUE)
		{
			if (dwTime - m_dwTimeScreen > 500)
			{
				CreateScreenShot();
				m_bCreateScreen = FALSE;
			}
		}
	}
	
	if ((DecriptInt(m_iLU_Point) > 0) && (!m_bIsDialogEnabled[12]) && (!m_bIsDialogEnabled[42]))
	{/*
		if (BigBar == 0)
		PutString_SprFont2(550 + res_x3 - 15, 390 + res_y3, "Level up!", 255, 255, 0); 
		else PutString_SprFont2(550 + res_x3 - 15, 390 + res_y3 + 53, "Level up!", 255, 255, 0);*/

		// En el bucle principal o función de renderizado
		if (BigBar == 0)
			PutString_SprFont2(550 + res_x3 - 15, 390 + res_y3, "Level up!", ar, ag, ab);
		else
			PutString_SprFont2(550 + res_x3 - 15, 390 + res_y3 + 53, "Level up!", ar, ag, ab);

		// Alternar colores según el valor de frameCounter
		if (frameCounter < 7500) {
			ar = 255; ag = 255; ab = 255; // Blanco
		}
		else {
			ar = 255; ag = 255; ab = 0;   // Amarillo
		}

		// Incrementar y reiniciar frameCounter
		frameCounter++;
		if (frameCounter >= 5000) {
			frameCounter = 0; // Reinicia el contador
		}
	}
	else if ((DecriptInt(m_iLU_Point) == 0) && (m_iRankPoints > 0))
	{
		if (BigBar == 0)
			PutString_SprFont2(550 + res_x3 - 15, 390 + res_y3, "Rank Up", 255, 255, 0);
		else
			PutString_SprFont2(550 + res_x3 - 15, 390 + res_y3 + 53, "Rank Up", 255, 255, 0);

	}
	else if (NewAchivement)
	{
		if (BigBar == 0){

			PutString_SprFont(510 + res_x - 15, 360 + res_y3, "New Achivement", 255, 255, 0);
			if ((dwTime % 500) > 250) PutString_SprFont2(510 + res_x - 15, 360 + res_y3, "New Achivement", 255, 255, 0);
		}
		else
		{
			PutString_SprFont(510 + res_x - 15, 360 + res_y3 + 53, "New Achivement", 255, 255, 0);
			if ((dwTime % 500) > 250) PutString_SprFont2(510 + res_x - 15, 360 + res_y3 + 53, "New Achivement", 255, 255, 0);
		}
	}

	if (c_reso->IsResolution() == C800x600)
	{
		if (m_cGameModeCount < 6) m_DDraw.DrawShadowBox(0, 0, 799, 599);
		if (m_cGameModeCount < 2) m_DDraw.DrawShadowBox(0, 0, 799, 599);
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		if (m_cGameModeCount < 6) m_DDraw.DrawShadowBox(0, 0, 1023, 767);
		if (m_cGameModeCount < 2) m_DDraw.DrawShadowBox(0, 0, 1023, 767);
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		if (m_cGameModeCount < 6) m_DDraw.DrawShadowBox(0, 0, 639, 479);
		if (m_cGameModeCount < 2) m_DDraw.DrawShadowBox(0, 0, 639, 479);
	}
	
	//Original
	if (DecriptBool(m_bIsObserverMode) == TRUE)
	{
		m_DDraw.PutPixel(msX, msY, 255, 255, 255);
		m_DDraw.PutPixel(msX + 1, msY, 255, 255, 255);
		m_DDraw.PutPixel(msX - 1, msY, 255, 255, 255);
		m_DDraw.PutPixel(msX, msY + 1, 255, 255, 255);
		m_DDraw.PutPixel(msX, msY - 1, 255, 255, 255);
	}
	else m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, m_stMCursor.sCursorFrame, dwTime);

	if (iUpdateRet == 0) m_iFrameCount++;
	else m_iFrameCount += 256;//lalo desbug fps (256 / 512)

	if (dwTime - m_dwFPStime > 500) //lalo 500 o 1000
	{
		m_dwFPStime = dwTime;
		m_sFPS = m_iFrameCount >> 7;
		if (m_sFPS < 10) m_sFPS += 6;
		m_iFrameCount = 0;
	}

	//time ChangeCity
	if (ConteoChangeCity > 0)
	{
		if (dwTime - m_dwChangeCity > 1000)
		{
			ConteoChangeCity--;
			m_dwChangeCity = dwTime;
			wsprintf(G_cTxt, CHANGECIT, ConteoChangeCity);
			if (ConteoChangeCity <= 1)
			{
				bSendCommand(CLIENT_NOTIFY_CHANGECITY, NULL, NULL, NULL, NULL, NULL, NULL);
				/*ZeroMemory(m_cChatMsg, sizeof(m_cChatMsg));
				strcpy(m_cChatMsg, "/EslobAkear");
				bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, m_cChatMsg);*/

			}
			AddEventList(G_cTxt, 14);
		}
	}

	//New Addon - ZeroEoyPnk
	if (dwTime - m_dwAuraTime > 1000)
	{
		//if (m_bShowTiming) bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_PING, NULL, (int)dwTime, NULL, NULL, NULL, NULL);
		if (m_sZerk == 0)
			m_sZerk = 0;
		else m_sZerk--;
		if (m_sInv == 0)
			bInvi = false;
		else m_sInv--;
		if (m_sPfm == 0)
			m_sPfm = 0;
		else m_sPfm--;
		if (m_sPfa == 0)
			m_sPfa = 0;
		else m_sPfa--;
		if (m_sShield == 0)
			m_sShield = 0;
		else m_sShield--;

		// Summon Event
		if (SummonTimer)
			if (m_iRoundCount != 0)
				m_iRoundCount--;

		m_dwAuraTime = dwTime;
	}

	//	ShowTiming by ZeroEoyPnk
	if (dwTime - m_dwTimingCountTime > 1000)
	{
		if (m_sTiming == 60) {
			m_sTiming = 0;
			m_sTiming++;
			m_dwTimingCountTime = dwTime;
		}
		else {
			m_sTiming++;
			m_dwTimingCountTime = dwTime;
		}
	}
	DWORD dwTimeThisPOn = timeGetTime();

	if (iUpdateRet != 0)
	{

		if (m_bShowTiming)
		{
			const int CHAR_WIDTH = 5; // Ajusta según el tamaño real de tu fuente

			char pingLabel[10] = "Ping:";
			char pingValue[50];

			if (m_dPing > 180.0) {
				m_dPing -= 60.0;  
			}

			if (m_dPing > 0.0)
				sprintf(pingValue, " %.2f ms", m_dPing);
			else
				sprintf(pingValue, " request...");

			/*PutString2(fix_x, fix_y, pingLabel, 255, 200, 0);
			int labelWidth = strlen(pingLabel) * CHAR_WIDTH;
			PutString2(fix_x + labelWidth, fix_y, pingValue, 255, 255, 255);*/

			SYSTEMTIME SysTime;
			GetLocalTime(&SysTime);
			if (c_reso->IsResolution() == C800x600)
			{
				wsprintf(G_cTxt, "HB Xsilium");
				PutString_SprFont2(680 - 1 + 1, 1 - 1, G_cTxt, 0, 0, 0);
				PutString_SprFont2(680 + 1, 1, G_cTxt, 255, 200, 0);

				wsprintf(G_cTxt, "Fps: %d", m_sFPS + 713);
				PutString(685 - 1, 22 - 1, G_cTxt, RGB(0, 0, 0));
				PutString(685, 22, G_cTxt, RGB(250, 250, 250));

				wsprintf(G_cTxt, "Time: %d", SysTime.wSecond);
				PutString(740 - 1, 22 - 1, G_cTxt, RGB(0, 0, 0));
				PutString(740, 22, G_cTxt, RGB(250, 250, 250));

				wsprintf(G_cTxt, "Ping: %s", pingValue);
				PutString(685 - 1, 22 - 1 + 15, G_cTxt, RGB(0, 0, 0));
				PutString(685, 22 + 15, G_cTxt, RGB(250, 250, 250));

				/*if (m_bQuestHelper) {
					if (m_stQuest[QuestShow].sQuestType != NULL)
					{
						switch (QuestShow)
						{
						case 0: wsprintf(G_cTxt, "Contribution Quest"); break;
						case 1: wsprintf(G_cTxt, "Item Rare Quest"); break;
						case 2: wsprintf(G_cTxt, "Item Stated Quest"); break;
						}

						PutString(685 - 1, 37 - 1, G_cTxt, RGB(0, 0, 0));
						PutString(685, 37, G_cTxt, RGB(0, 255, 0));

						wsprintf(G_cTxt, "Rest Monster: %d", m_stQuest[QuestShow].sCurrentCount);
						PutString(685 - 1, 52 - 1, G_cTxt, RGB(0, 0, 0));
						PutString(685, 52, G_cTxt, RGB(0, 255, 0));

						if ((Questx2 == TRUE) && (Questx3 == FALSE))
						{
							wsprintf(G_cTxt, "Quest x 2");
							PutString(685 - 1, 67 - 1, G_cTxt, RGB(0, 0, 0));
							PutString(685, 67, G_cTxt, RGB(200, 0, 0));
						}
						else if ((Questx3 == TRUE) && (Questx2 == FALSE))
						{
							wsprintf(G_cTxt, "Quest x 3");
							PutString(685 - 1, 67 - 1, G_cTxt, RGB(0, 0, 0));
							PutString(685, 67, G_cTxt, RGB(200, 0, 0));
						}
						else if ((Questx2 == FALSE) && (Questx3 == FALSE))
						{
							/ *wsprintf(G_cTxt, "No Activado");
							PutString(685 - 1, 67 - 1, G_cTxt, RGB(0, 0, 0));
							PutString(685, 67, G_cTxt, RGB(200, 0, 0));* /
						}
					}
				}*/
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				wsprintf(G_cTxt, "HB Xsilium");
				PutString_SprFont2(904 - 1 + 1, 1 - 1, G_cTxt, 0, 0, 0);
				PutString_SprFont2(904 + 1, 1, G_cTxt, 255, 200, 0);
				wsprintf(G_cTxt, "Fps: %d", m_sFPS + 713);
				PutString(909 - 1, 22 - 1, G_cTxt, RGB(0, 0, 0));
				PutString(909, 22, G_cTxt, RGB(250, 250, 250));
				wsprintf(G_cTxt, "Time: %d", SysTime.wSecond);
				PutString(964 - 1, 22 - 1, G_cTxt, RGB(0, 0, 0));
				PutString(964, 22, G_cTxt, RGB(250, 250, 250));

				wsprintf(G_cTxt, "Ping: %s", pingValue);
				PutString(909 - 1, 22 - 1 + 15, G_cTxt, RGB(0, 0, 0));
				PutString(909, 22 + 15, G_cTxt, RGB(250, 250, 250));

				/*if (m_bQuestHelper) {
					if (m_stQuest[QuestShow].sQuestType != NULL)
					{
						switch (QuestShow)
						{
						case 0: wsprintf(G_cTxt, "Contribution Quest"); break;
						case 1: wsprintf(G_cTxt, "Item Rare Quest"); break;
						case 2: wsprintf(G_cTxt, "Item Stated Quest"); break;
						}

						PutString(909 - 1, 37 - 1, G_cTxt, RGB(0, 0, 0));
						PutString(909, 37, G_cTxt, RGB(0, 255, 0));

						wsprintf(G_cTxt, "Rest Monster: %d", m_stQuest[QuestShow].sCurrentCount);
						PutString(909 - 1, 52 - 1, G_cTxt, RGB(0, 0, 0));
						PutString(909, 52, G_cTxt, RGB(0, 255, 0));

						if ((Questx2 == TRUE) && (Questx3 == FALSE))
						{
							wsprintf(G_cTxt, "Quest x 2");
							PutString(909 - 1, 67 - 1, G_cTxt, RGB(0, 0, 0));
							PutString(909, 67, G_cTxt, RGB(200, 0, 0));
						}
						else if ((Questx3 == TRUE) && (Questx2 == FALSE))
						{
							wsprintf(G_cTxt, "Quest x 3");
							PutString(909 - 1, 67 - 1, G_cTxt, RGB(0, 0, 0));
							PutString(909, 67, G_cTxt, RGB(200, 0, 0));
						}
						else if ((Questx2 == FALSE) && (Questx3 == FALSE))
						{
							/ *wsprintf(G_cTxt, "No Activado");
							PutString(909 - 1, 67 - 1, G_cTxt, RGB(0, 0, 0));
							PutString(909, 67, G_cTxt, RGB(200, 0, 0));* /
						}
					}
				}*/
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				wsprintf(G_cTxt, "HB Xsilium");
				PutString_SprFont2(520 - 1 + 1, 1 - 1, G_cTxt, 0, 0, 0);
				PutString_SprFont2(520 + 1, 1, G_cTxt, 255, 200, 0);
				wsprintf(G_cTxt, "Fps: %d", m_sFPS + 713);
				PutString(525 - 1, 22 - 1, G_cTxt, RGB(0, 0, 0));
				PutString(525, 22, G_cTxt, RGB(250, 250, 250));
				wsprintf(G_cTxt, "Time: %d", SysTime.wSecond);
				PutString(580 - 1, 22 - 1, G_cTxt, RGB(0, 0, 0));
				PutString(580, 22, G_cTxt, RGB(250, 250, 250));

				wsprintf(G_cTxt, "Ping: %s", pingValue);
				PutString(580 - 1, 22 - 1 + 15, G_cTxt, RGB(0, 0, 0));
				PutString(580, 22 + 15, G_cTxt, RGB(250, 250, 250));

				/*if (m_bQuestHelper) {
					if (m_stQuest[QuestShow].sQuestType != NULL)
					{
						switch (QuestShow)
						{
						case 0: wsprintf(G_cTxt, "Contribution Quest"); break;
						case 1: wsprintf(G_cTxt, "Item Rare Quest"); break;
						case 2: wsprintf(G_cTxt, "Item Stated Quest"); break;
						}

						PutString(525 - 1, 37 - 1, G_cTxt, RGB(0, 0, 0));
						PutString(525, 37, G_cTxt, RGB(0, 255, 0));

						wsprintf(G_cTxt, "Rest Monster: %d", m_stQuest[QuestShow].sCurrentCount);
						PutString(525 - 1, 52 - 1, G_cTxt, RGB(0, 0, 0));
						PutString(525, 52, G_cTxt, RGB(0, 255, 0));

						if ((Questx2 == TRUE) && (Questx3 == FALSE))
						{
							wsprintf(G_cTxt, "Quest x 2");
							PutString(525 - 1, 67 - 1, G_cTxt, RGB(0, 0, 0));
							PutString(525, 67, G_cTxt, RGB(200, 0, 0));
						}
						else if ((Questx3 == TRUE) && (Questx2 == FALSE))
						{
							wsprintf(G_cTxt, "Quest x 3");
							PutString(525 - 1, 67 - 1, G_cTxt, RGB(0, 0, 0));
							PutString(525, 67, G_cTxt, RGB(200, 0, 0));
						}
						else if ((Questx2 == FALSE) && (Questx3 == FALSE))
						{
							//return;
						}
					}
				}*/
			}
			/*		wsprintf( G_cTxt, "Ping: %d", m_iPing);
			PutString( 580-1, 52-1, G_cTxt, RGB(0, 0, 0) );
			PutString(580, 52, G_cTxt, RGB(255, 255, 255));*/

		}

		//if (m_bShowTiming)	Draw_NetGraph();
		if (m_bQuestHelper) DrawQuest();		
		DrawActiveEvents();
		if (m_DDraw.iFlip() == DDERR_SURFACELOST) RestoreSprites();
	}

	iUpdateRet = m_pMapData->iObjectFrameCounter(m_cPlayerName, m_sViewPointX, m_sViewPointY);

	if ((bEffectFrameCounter() == TRUE) && (iUpdateRet == 0)) iUpdateRet = -1;
	if (iUpdateRet == 2)
	{
		m_bCommandAvailable = TRUE;
		m_dwCommandTime = 0;
	}

	CommandProcessor(msX, msY, ((sDivX + sPivotX) * 32 + sModX + msX - 17) / 32 + 1, ((sDivY + sPivotY) * 32 + sModY + msY - 17) / 32 + 1, cLB, cRB);

	m_sViewPointX = sVPXsave;
	m_sViewPointY = sVPYsave;

	if (iUpdateRet > 0) CalcViewPoint();

	if (DecriptBool(m_bIsObserverMode))
	{
		if ((dwTime - m_dwObserverCamTime) > 25)
		{
			m_dwObserverCamTime = dwTime;
			CalcViewPoint();
			iUpdateRet = -1;
		}
	}

	//Cambio para new glare edition - ZeroEoyPnk
	if (iUpdateRet > 0)
	{
		if (m_bDrawFlagDir == FALSE)
		{
			m_iDrawFlag++;
			if (m_iDrawFlag >= 25)
			{
				m_iDrawFlag = 25;
				m_bDrawFlagDir = TRUE;
			}
		}
		else
		{
			m_iDrawFlag--;
			if (m_iDrawFlag < 0)
			{
				m_iDrawFlag = 0;
				m_bDrawFlagDir = FALSE;
			}
		}
		if (m_bDrawFlagDir2 == FALSE)
		{
			m_sDrawFlag++;
			if (m_sDrawFlag >= 25) //100
			{
				m_sDrawFlag = 25; //100
				m_bDrawFlagDir2 = TRUE;
			}
		}
		else
		{
			m_sDrawFlag--;
			if (m_sDrawFlag < 0)
			{
				m_sDrawFlag = 0;
				m_bDrawFlagDir2 = FALSE;
			}
		}

		if (m_bDrawFlagDir3 == FALSE)
		{
			m_sDrawFlag3--;
			if (m_sDrawFlag3 <= -50)//-50
			{
				m_sDrawFlag3 = -50;
				m_bDrawFlagDir3 = TRUE;
			}
		}
		else
		{
			m_sDrawFlag3++;
			if (m_sDrawFlag3 >= 0)
			{
				m_sDrawFlag3 = 0;
				m_bDrawFlagDir3 = FALSE;
			}
		}
	}
}

void CGame::StartBGM(bool bLogin)
{
	if (m_bSoundFlag == FALSE)
	{
		if (m_pBGM != NULL)
		{
			m_pBGM->bStop();
			delete m_pBGM;
			m_pBGM = NULL;
		}
		return;
	}
	char cWavFileName[32];
	ZeroMemory(cWavFileName, sizeof(cWavFileName));
	if (bLogin == false) {
		if ((m_bIsXmas == TRUE) && (m_cWhetherEffectType >= 4)) strcpy(cWavFileName, "music\\Carol.wav");
		else {
			DecriptString(m_cCurLocation);
			if (memcmp(m_cCurLocation, "aresden", 7) == 0) strcpy(cWavFileName, "music\\aresden.wav");//aresden.wav
			else if (memcmp(m_cCurLocation, "elvine", 6) == 0) strcpy(cWavFileName, "music\\elvine.wav");
			else if (memcmp(m_cCurLocation, "dglv", 4) == 0) strcpy(cWavFileName, "music\\dungeon.wav");
			else if (memcmp(m_cCurLocation, "middled1", 8) == 0) strcpy(cWavFileName, "music\\dungeon.wav");
			else if (memcmp(m_cCurLocation, "middleland", 10) == 0) strcpy(cWavFileName, "music\\middleland.wav");
			// Snoopy: new musics
			else if (memcmp(m_cCurLocation, "druncncity", 10) == 0) strcpy(cWavFileName, "music\\druncncity.wav");
			else if (memcmp(m_cCurLocation, "inferniaA", 9) == 0) strcpy(cWavFileName, "music\\middleland.wav");
			else if (memcmp(m_cCurLocation, "inferniaB", 9) == 0) strcpy(cWavFileName, "music\\middleland.wav");
			else if (memcmp(m_cCurLocation, "maze", 4) == 0) strcpy(cWavFileName, "music\\dungeon.wav");
			else if (memcmp(m_cCurLocation, "abaddon", 7) == 0) strcpy(cWavFileName, "music\\abaddon.wav");
			else strcpy(cWavFileName, "music\\MainTm.wav");
			EncriptString(m_cCurLocation);
		}
	}
	else {
		strcpy(cWavFileName, "music\\middleland.wav"); // MORLA2.1 - Musica de Middleland
	}
	if (m_pBGM != NULL)
	{
		if (strcmp(m_pBGM->m_cWavFileName, cWavFileName) == 0) return;
		m_pBGM->bStop();
		delete m_pBGM;
		m_pBGM = NULL;
	}
	int iVolume = (m_cMusicVolume - 100) * 20;
	if (iVolume > 0) iVolume = 0;
	if (iVolume < -10000) iVolume = -10000; //iVolume == Volume
	m_pBGM = new class CSoundBuffer(m_DSound.m_lpDS, m_DSound.m_DSCaps, cWavFileName, TRUE);
	m_pBGM->Play(TRUE, 0, iVolume);
}

void CGame::MotionResponseHandler(char * pData)
{
	WORD  * wp, wResponse;
	short * sp, sX, sY;
	char  * cp, cDir;
	int   * ip;
	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE);
	wResponse = *wp;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	switch (wResponse) {
		case DEF_OBJECTMOTION_CONFIRM:
			m_cCommandCount--;
			break;

		case DEF_OBJECTMOTION_ATTACK_CONFIRM:
			m_cCommandCount--;
			break;

		case DEF_OBJECTMOTION_REJECT:

			if (DecriptInt(m_iHP) <= 0) return;

			sp = (short *)cp;
			m_sPlayerX = *sp;
			cp += 2;

			sp = (short *)cp;
			m_sPlayerY = *sp;
			cp += 2;

			m_cCommand = DEF_OBJECTSTOP;
			m_sCommX = m_sPlayerX;
			m_sCommY = m_sPlayerY;

			m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
				m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor,
				m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
				DEF_OBJECTSTOP, NULL, NULL, NULL, NULL, NULL, MyAdminLevel);

			m_cCommandCount = 0;
			m_bIsGetPointingMode = FALSE;

			//added resolution 
			if (c_reso->IsResolution() == C800x600)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 12) * 32 - 16;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 9) * 32 - 16;
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 10) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 7) * 32;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 16) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 11) * 32;//11
			}

			m_bIsRedrawPDBGS = TRUE;
			break;

		case DEF_OBJECTMOVE_CONFIRM:
			sp = (short *)cp;
			sX = *sp;
			cp += 2;
			sp = (short *)cp;
			sY = *sp;
			cp += 2;
			cDir = *cp;
			cp++;
			m_iSP = EncriptInt(DecriptInt(m_iSP) - *cp);
			cp++;
			if (DecriptInt(m_iSP) < 0) m_iSP = EncriptInt(0);
			cp++;

			m_pMapData->ShiftMapData(cDir);
			_ReadMapData(sX, sY, cp);
			m_bIsRedrawPDBGS = TRUE;
			m_cCommandCount--;
			break;

		case DEF_OBJECTMOVE_PARALIZE:
			if (DecriptInt(m_iHP) <= 0) return;
			wp = (WORD *)cp;
			if (m_sPlayerObjectID != *wp) return;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerX = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerY = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerType = *sp;
			cp += 2;
			m_cPlayerDir = *cp;
			cp++;
			//memcpy(cName, cp, 10);
			cp += 10;
			sp = (short *)cp;
			m_sPlayerAppr1 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr2 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr3 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr4 = *sp;
			cp += 2;
			ip = (int *)cp;
			m_iPlayerApprColor = *ip;
			cp += 4;

			// New Colors -> ZeroEoyPnk
			ip = (int *)cp;
			m_iPlayerApprColor2 = *ip;
			cp += 4;

			ip = (int *)cp;
			m_iPlayerStatus = *ip;
			cp += 4;
			MyAdminLevel = (char)*cp;
			cp++;
			m_cCommand = DEF_OBJECTSTOP;
			m_sCommX = m_sPlayerX;
			m_sCommY = m_sPlayerY;

			m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
				m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor, // v1.4
				m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
				DEF_OBJECTSTOP, NULL, NULL, NULL,
				0, 7, MyAdminLevel);

			m_cCommandCount = 0;
			m_bIsGetPointingMode = FALSE;

			//added resolution
			if (c_reso->IsResolution() == C800x600)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 12) * 32 - 16;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 9) * 32 - 16;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 16) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 11) * 32;//11
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 10) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 7) * 32;
			}

			m_bIsPrevMoveBlocked = TRUE;
			switch (m_sPlayerType) {
				case 1:
				case 2:
				case 3:
					PlaySound('C', 12, 0);
					break;
				case 4:
				case 5:
				case 6:
					PlaySound('C', 13, 0);
					break;
			}
			//m_bCommandAvailable = TRUE;
			break;

		case DEF_OBJECTMOVE_REJECT:
			if (DecriptInt(m_iHP) <= 0) return;
			wp = (WORD *)cp;
			if (m_sPlayerObjectID != *wp) return;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerX = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerY = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerType = *sp;
			cp += 2;
			m_cPlayerDir = *cp;
			cp++;
			//memcpy(cName, cp, 10);
			cp += 10;
			sp = (short *)cp;
			m_sPlayerAppr1 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr2 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr3 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr4 = *sp;
			cp += 2;
			ip = (int *)cp;
			m_iPlayerApprColor = *ip;
			cp += 4;

			// New Colors -> ZeroEoyPnk
			ip = (int *)cp;
			m_iPlayerApprColor2 = *ip;
			cp += 4;

			ip = (int *)cp;
			m_iPlayerStatus = *ip;
			cp += 4;
			MyAdminLevel = (char)*cp;
			cp++;
			m_cCommand = DEF_OBJECTSTOP;
			m_sCommX = m_sPlayerX;
			m_sCommY = m_sPlayerY;

			m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
				m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor, // v1.4
				m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
				DEF_OBJECTSTOP, NULL, NULL, NULL,
				0, 7, MyAdminLevel);

			m_cCommandCount = 0;
			m_bIsGetPointingMode = FALSE;

			//added resolution
			if (c_reso->IsResolution() == C800x600)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 12) * 32 - 16;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 9) * 32 - 16;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 16) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 11) * 32;//11
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 10) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 7) * 32;
			}

			m_bIsPrevMoveBlocked = TRUE;
			/*switch (m_sPlayerType) {
			case 1:
			case 2:
			case 3:
				PlaySound('C', 12, 0);
				break;
			case 4:
			case 5:
			case 6:
				PlaySound('C', 13, 0);
				break;
			}*/
			//m_bCommandAvailable = TRUE;
			break;


	/*	case DEF_OBJECTMOVE_REJECT:
			/ *if (DecriptInt(m_iHP) <= 0) return;
			wp = (WORD *)cp;
			if (m_sPlayerObjectID != *wp) return;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerX = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerY = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerType = *sp;
			cp += 2;
			m_cPlayerDir = *cp;
			cp++;
			//memcpy(cName, cp, 10);
			cp += 10;
			sp = (short *)cp;
			m_sPlayerAppr1 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr2 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr3 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr4 = *sp;
			cp += 2;
			ip = (int *)cp;
			m_iPlayerApprColor = *ip;
			cp += 4;

			// New Colors -> ZeroEoyPnk
			ip = (int *)cp;
			m_iPlayerApprColor2 = *ip;
			cp += 4;

			ip = (int *)cp;
			m_iPlayerStatus = *ip;
			cp += 4;
			MyAdminLevel = (char)*cp;
			cp++;
			/ *m_cCommand = DEF_OBJECTSTOP;
			m_sCommX = m_sPlayerX;
			m_sCommY = m_sPlayerY;

			m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
				m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor, // v1.4
				m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
				DEF_OBJECTSTOP, NULL, NULL, NULL,
				0, 7, MyAdminLevel);* / * /

			if (DecriptInt(m_iHP) <= 0) return;
			wp = (WORD *)cp;
			if (m_sPlayerObjectID != *wp) return;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerX = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerY = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerType = *sp;
			cp += 2;
			m_cPlayerDir = *cp;
			cp++;
			//memcpy(cName, cp, 10);
			cp += 10;
			sp = (short *)cp;
			m_sPlayerAppr1 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr2 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr3 = *sp;
			cp += 2;
			sp = (short *)cp;
			m_sPlayerAppr4 = *sp;
			cp += 2;
			ip = (int *)cp;
			m_iPlayerApprColor = *ip;
			cp += 4;

			// New Colors -> ZeroEoyPnk
			ip = (int *)cp;
			m_iPlayerApprColor2 = *ip;
			cp += 4;

			ip = (int *)cp;
			m_iPlayerStatus = *ip;
			cp += 4;
			MyAdminLevel = (char)*cp;
			cp++;
			/ *m_cCommand = DEF_OBJECTSTOP;
			m_sCommX = m_sPlayerX;
			m_sCommY = m_sPlayerY;

			m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
				m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor, // v1.4
				m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
				DEF_OBJECTSTOP, NULL, NULL, NULL,
				0, 7, MyAdminLevel);

			m_cCommandCount = 0;
			m_bIsGetPointingMode = FALSE;* /

			//added resolution
			if (c_reso->IsResolution() == C800x600)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 12) * 32 - 16;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 9) * 32 - 16;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 16) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 11) * 32;//11
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 10) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 7) * 32;
			}

		/ *	m_bIsPrevMoveBlocked = TRUE;
			switch (m_sPlayerType) {
			case 1:
			case 2:
			case 3:
				PlaySound('C', 12, 0);
				break;
			case 4:
			case 5:
			case 6:
				PlaySound('C', 13, 0);
				break;
			}* /

			m_bIsRedrawPDBGS = TRUE;
			m_cCommandCount = 0;



			if ((DecriptBool(m_bIllusionMVT) == TRUE) && (m_cCommand != DEF_OBJECTDAMAGEMOVE)) {
				cDir = cGetNextMoveDirMVT(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);

			}
			cDir = m_Misc.cGetNextMoveDir(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);

			break;*/
			/*m_cCommandCount = 0;
			m_bIsGetPointingMode = FALSE;

			//added resolution
			if (c_reso->IsResolution() == C800x600)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 12) * 32 - 16;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 9) * 32 - 16;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 16) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 11) * 32;//11
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				m_sViewDstX = m_sViewPointX = (m_sPlayerX - 10) * 32;
				m_sViewDstY = m_sViewPointY = (m_sPlayerY - 7) * 32;
			}

			m_bIsPrevMoveBlocked = TRUE;
			switch (m_sPlayerType) {
			case 1:
			case 2:
			case 3:
				PlaySound('C', 12, 0);
				break;
			case 4:
			case 5:
			case 6:
				PlaySound('C', 13, 0);
				break;
			}
			//m_bCommandAvailable = TRUE;
			break;*/
	}
}


void CGame::OnTimer()
{

	if (m_cGameMode < 0) return;
	DWORD dwTime = timeGetTime();

	if (m_cGameMode != DEF_GAMEMODE_ONLOADING) {
		if ((dwTime - m_dwCheckSprTime) > 8000)
		{
			m_dwCheckSprTime = dwTime;
			if (m_bIsProgramActive) {
				ReleaseUnusedSprites();
			}
			if ((m_pGSock != NULL) && (m_pGSock->m_bIsAvailable == TRUE))
				bSendCommand(CLIENT_REQUEST_COMMAND_CHECKCONNECTION, DEF_MSGTYPE_CONFIRM, NULL, NULL, NULL, NULL, NULL);
			if (m_bThunder == TRUE) {
				m_bThunder = FALSE;
			}
		}
	}

	if (m_cGameMode == DEF_GAMEMODE_ONMAINGAME)
	{
		if ((dwTime - m_dwCheckConnTime) > 5000)
		{
			m_dwCheckConnTime = dwTime;
			if ((m_bIsCrusadeMode) && (DecriptInt(m_iCrusadeDuty) == NULL)) EnableDialogBox(33, 1, NULL, NULL);
		}


		if ((dwTime - reqmobhptime) > 2 _s)
		{
			//sendMessageToServer(SOCKMSG_PING);

			//startTime = std::chrono::high_resolution_clock::now();
			//request_ping();

			std::thread timerThread([this]() {
				//std::this_thread::sleep_for(std::chrono::milliseconds(180));
				this->m_dPing = test_request_ping();
			});
			timerThread.detach();

			if (!reqhp)	reqhp = true;
			reqmobhptime = dwTime;
		}

		if ((dwTime - m_dwFreeCommandTime) > 150 _ms)
		{
			if (reqfree)
			{
				reqfree = false;
				//AddEventList("free command", 10);
				m_bCommandAvailable = true;
				m_dwCommandTime = 0;
			}

			m_dwFreeCommandTime = dwTime;
		}

		if ((dwTime - m_dwCheckChatTime) > 2000)
		{
			if ((m_pGSock != NULL) && (m_pGSock->m_bIsAvailable == TRUE))
				if ((m_bAfk == FALSE) && (m_bIsProgramActive == FALSE)) {
					bSendCommand(CLIENT_REQUEST_STATUS_AFK, NULL, NULL, 1, NULL, NULL, NULL);
					m_bAfk = TRUE;
				}
				else if ((m_bAfk == TRUE) && (m_bIsProgramActive == TRUE)) {
					bSendCommand(CLIENT_REQUEST_STATUS_AFK, NULL, NULL, 2, NULL, NULL, NULL);
					m_bAfk = FALSE;
				}

				m_dwCheckChatTime = m_dwTime;
				ReleaseTimeoverChatMsg();
				if (m_cCommandCount >= 6)
				{
					m_iNetLagCount++;
					if (m_iNetLagCount >= 7)
					{
						ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);
						delete m_pGSock;
						m_pGSock = NULL;
						return;
					}
				}
				else m_iNetLagCount = NULL;
		}

		if ((G_bIsCalcSocketConnected == FALSE) && ((dwTime - G_dwCalcSocketTime) > 5000))
		{
			delete m_pGSock;
			m_pGSock = NULL;
			ChangeGameMode(DEF_GAMEMODE_ONQUIT);
			m_bEscPressed = FALSE;
			PlaySound('E', 14, 5);
			if (m_bSoundFlag) m_pESound[38]->bStop();
			if ((m_bSoundFlag) && (m_bMusicStat == TRUE))
			{
				if (m_pBGM != NULL) m_pBGM->bStop();
			}
			return;
		}

		if ((G_pCalcSocket != NULL) && (G_bIsCalcSocketConnected == TRUE)) {
			if ((dwTime - G_dwCalcSocketSendTime) > 1000 * 5) {
				if (memcmp(G_cCmdLineTokenA_Lowercase, "wisetop", 7) == 0)//verlalo
				{
				}
				else
				{
					char cPacket[120];
					int  iSended;
					WORD * wp;
					ZeroMemory(cPacket, sizeof(cPacket));
					cPacket[0] = 0;					// Key
					wp = (WORD *)(cPacket + 1);
					*wp = 5;
					iSended = G_pCalcSocket->iSendMsgBlockingMode(cPacket, 5);
				}
				G_dwCalcSocketSendTime = dwTime;
			}
		}
	}
}

void CGame::CommandProcessor(short msX, short msY, short indexX, short indexY, char cLB, char cRB)
{
	
	char   cDir, absX, absY, cName[12];
	short  sX, sY, sObjectType, tX, tY;
	int iObjectStatus;
	int    iRet;
	DWORD  dwTime = timeGetTime();
	WORD   wType = 0;
	int i;//, iFOE;
	char   cTxt[120];
	int rx, ry, rx2, ry2;
	int rx3, ry3, rx4, ry4;
	int resX, resY;

	char  pDstName[21];
	short sDstOwnerType;
	int iDstOwnerStatus;

	BOOL  bGORet;
	// Fixed by Snoopy
	if ((DecriptBool(m_bIsObserverCommanded) == FALSE) && (DecriptBool(m_bIsObserverMode) == TRUE))
	{
		//added resolutionACALALO
		if (c_reso->IsResolution() == C800x600)
		{
			if ((msX == 0) && (msY == 0) && (m_sViewDstX > 32 * 26) && (m_sViewDstY > 32 * 20)) //cambio 20 x 21
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 8, NULL, NULL, NULL, NULL);
			else if ((msX == 799) && (msY == 0) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 26) && (m_sViewDstY > 32 * 20)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 2, NULL, NULL, NULL, NULL);
			else if ((msX == 799) && (msY == 599) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 26) && (m_sViewDstY < 32 * m_pMapData->m_sMapSizeY - 32 * 20))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 4, NULL, NULL, NULL, NULL);
			else if ((msX == 0) && (msY == 599)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 6, NULL, NULL, NULL, NULL);
			else if ((msX == 0) && (m_sViewDstX > 32 * 26))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 7, NULL, NULL, NULL, NULL);
			else if ((msX == 799) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 26))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 3, NULL, NULL, NULL, NULL);
			else if ((msY == 0) && (m_sViewDstY > 32 * 20))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 1, NULL, NULL, NULL, NULL);
			else if ((msY == 599) && (m_sViewDstY < 32 * m_pMapData->m_sMapSizeY - 32 * 20)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 5, NULL, NULL, NULL, NULL);
			else return;
		}
		else if (c_reso->IsResolution() == C1024x768)
		{
			if ((msX == 0) && (msY == 0) && (m_sViewDstX > 32 * 33) && (m_sViewDstY > 32 * 25)) //cambiado 25 x 27
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 8, NULL, NULL, NULL, NULL);
			else if ((msX == 1023) && (msY == 0) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 33) && (m_sViewDstY > 32 * 25))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 2, NULL, NULL, NULL, NULL);
			else if ((msX == 1023) && (msY == 767) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 33) && (m_sViewDstY < 32 * m_pMapData->m_sMapSizeY - 32 * 25))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 4, NULL, NULL, NULL, NULL);
			else if ((msX == 0) && (msY == 767)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 6, NULL, NULL, NULL, NULL);
			else if ((msX == 0) && (m_sViewDstX > 32 * 33)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 7, NULL, NULL, NULL, NULL);
			else if ((msX == 1023) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 33)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 3, NULL, NULL, NULL, NULL);
			else if ((msY == 0) && (m_sViewDstY > 32 * 25))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 1, NULL, NULL, NULL, NULL);
			else if ((msY == 767) && (m_sViewDstY < 32 * m_pMapData->m_sMapSizeY - 32 * 25))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 5, NULL, NULL, NULL, NULL);
			else return;
		}
		else if (c_reso->IsResolution() == C640x480)
		{
			if ((msX == 0) && (msY == 0) && (m_sViewDstX > 32 * 21) && (m_sViewDstY > 32 * 16)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 8, NULL, NULL, NULL, NULL);
			else if ((msX == 639) && (msY == 0) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 21) && (m_sViewDstY > 32 * 16)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 2, NULL, NULL, NULL, NULL);
			else if ((msX == 639) && (msY == 479) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 21) && (m_sViewDstY < 32 * m_pMapData->m_sMapSizeY - 32 * 16)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 4, NULL, NULL, NULL, NULL);
			else if ((msX == 0) && (msY == 479)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 6, NULL, NULL, NULL, NULL);
			else if ((msX == 0) && (m_sViewDstX > 32 * 21)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 7, NULL, NULL, NULL, NULL);
			else if ((msX == 639) && (m_sViewDstX < 32 * m_pMapData->m_sMapSizeX - 32 * 21)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 3, NULL, NULL, NULL, NULL);
			else if ((msY == 0) && (m_sViewDstY > 32 * 16))
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 1, NULL, NULL, NULL, NULL);
			else if ((msY == 479) && (m_sViewDstY < 32 * m_pMapData->m_sMapSizeY - 32 * 16)) 
				bSendCommand(CLIENT_REQUEST_PANNING, NULL, 5, NULL, NULL, NULL, NULL);
			else return;
		}
		m_bIsObserverCommanded = EncriptBool(TRUE);
		m_cArrowPressed = 0;
		return;
	}

	if (DecriptBool(m_bIsObserverMode) == TRUE) return;

	if (GetAsyncKeyState(VK_MENU) >> 15) // [ALT]
		m_bSuperAttackMode = TRUE;
	else m_bSuperAttackMode = FALSE;

	switch (m_stMCursor.cPrevStatus) {
		case DEF_CURSORSTATUS_NULL:
			if (cLB != 0)
			{
				iRet = _iCheckDlgBoxFocus(msX, msY, 1);
				if (iRet == 1)
				{
					m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_SELECTED;
					return;
				}
				else if (iRet == 0)
				{
					m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_PRESSED;
					if (c_reso->IsResolution() == C800x600) //dsp
					{
						rx = 720;
						ry = 510;
						rx2 = 780;
						ry2 = 525;
						rx3 = 668;
						ry3 = 793;
						rx4 = 482;
						ry4 = 495;
					}
					else if (c_reso->IsResolution() == C1024x768) //dsp
					{
						rx = 940;// 944;
						ry = 670;// 678;
						rx2 = 1010;//1004;
						ry2 = 692;// 693;
						rx3 = 892;
						ry3 = 1017;
						rx4 = 650;
						ry4 = 663;
					}
					else if (c_reso->IsResolution() == C640x480)
					{
						rx = 551;
						ry = 392;
						rx2 = 639;
						ry2 = 411;
						rx3 = 508;
						ry3 = 633;
						rx4 = 362;
						ry4 = 375;
					}

					rx -= 15;
					rx2 -= 15;
					
					if (BigBar != 0)
					{
						ry += 53;
						ry2 += 53;
					}

					if ((msX > rx) && (msX < rx2) && (msY > ry) && (msY < ry2) && (DecriptInt(m_iLU_Point) > 0))
					{
						if (m_bIsDialogEnabled[12] != TRUE)
						{
							EnableDialogBox(12, NULL, NULL, NULL);
							PlaySound('E', 14, 5);
						}
						m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL; 
						return;
					}
					//Rank Up
					else if ((msX > rx) && (msX < rx2) && (msY > ry) && (msY < ry2) && (DecriptInt(m_iLU_Point) == 0) && (m_iRankPoints > 0))
					{
						if (!m_bIsDialogEnabled[61])
						{
							m_sTempRankPoints = m_iRankPoints;
							m_sTmpRankAddStr = m_sRankAddStr;
							m_sTmpRankAddInt = m_sRankAddInt;
							m_sTmpRankAddDex = m_sRankAddDex;
							m_sTmpRankAddMag = m_sRankAddMag;

							EnableDialogBox(61, NULL, NULL, NULL);
							PlaySound('E', 14, 5);
						}
						m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
						return;
					}
					else if (NewAchivement)
					{
					//	if ((msX > 508) && (msX < 633) && (msY > 362) && (msY < 375))
						if ((msX > rx3) && (msX < ry3) && (msY > rx4) && (msY < ry4))
						{
							EnableDialogBox(47, NULL, NULL, NULL);
							PlaySound('E', 14, 5);
							m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
							NewAchivement = FALSE;
							return;
						}
					}
				}
				else if (iRet == -1)
				{
					return;
				}
			}
			else if (cRB != 0)
			{
				iRet = _iCheckDlgBoxFocus(msX, msY, 2);
				if (iRet == 1) return;
			}
			break;
		case DEF_CURSORSTATUS_PRESSED:
			if (cLB == 0) // Normal Click
			{
				m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
			}
			break;
		case DEF_CURSORSTATUS_SELECTED:
			if (cLB == 0)
			{
				//ZeroEoyPnk - Bye delay...
				if (((m_bIsDialogEnabled[12] != TRUE) || (m_stMCursor.sSelectedObjectID != 12))
					&& ((m_bIsDialogEnabled[42] != TRUE) || (m_stMCursor.sSelectedObjectID != 42)))
				{
					if (((dwTime - m_stMCursor.dwSelectClickTime) < DEF_DOUBLECLICKTIME) 	// Double Click
						&& (msX == m_stMCursor.sClickX) && (msY == m_stMCursor.sClickY))
					{
						m_stMCursor.dwSelectClickTime = m_stMCursor.dwSelectClickTime;
						_bCheckDlgBoxDoubleClick(msX, msY);
					}
					else // Click
					{
						_bCheckDlgBoxClick(msX, msY);
						m_stMCursor.sClickX = msX;
						m_stMCursor.sClickY = msY;
					}
				}
				else
				{
					_bCheckDlgBoxClick(msX, msY);
					m_stMCursor.sClickX = msX;
					m_stMCursor.sClickY = msY;
				}
				m_stMCursor.dwSelectClickTime = dwTime;
				m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
				if (m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_ITEM)
				{
					_bCheckDraggingItemRelease(msX, msY);
					m_stMCursor.cSelectedObjectType = NULL;
					m_stMCursor.sSelectedObjectID = NULL;
				}
				return;
			}
			if (cLB != 0) 			// v2.05 01-11-30
			{
				if ((m_pMapData->bIsTeleportLoc(m_sPlayerX, m_sPlayerY) == TRUE) && (m_cCommandCount == 0)) goto CP_SKIPMOUSEBUTTONSTATUS;

				if ((m_stMCursor.sPrevX != msX) || (m_stMCursor.sPrevY != msY))
				{
					m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_DRAGGING;
					m_stMCursor.sPrevX = msX;
					m_stMCursor.sPrevY = msY;
					if ((m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_DLGBOX) &&
						(m_stMCursor.sSelectedObjectID == 30))
					{
						m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
					}

					if ((m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_DLGBOX) &&
						(m_stMCursor.sSelectedObjectID == 7) && (m_stDialogBoxInfo[7].cMode == 1))
					{
						EndInputString();
						m_stDialogBoxInfo[7].cMode = 20;
					}
					// Query Drop Item Amount
					if ((m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_DLGBOX) &&
						(m_stMCursor.sSelectedObjectID == 17) && (m_stDialogBoxInfo[17].cMode == 1))
						// Guild Menu
					{
						EndInputString();
						m_stDialogBoxInfo[17].cMode = 20;
					}
					return;
				}
				if ((m_cCommand == DEF_OBJECTMOVE) || (m_cCommand == DEF_OBJECTRUN)) goto MOTION_COMMAND_PROCESS;
				return;
			}
			break;
		case DEF_CURSORSTATUS_DRAGGING:
			if (cLB != 0)
			{
				if ((m_pMapData->bIsTeleportLoc(m_sPlayerX, m_sPlayerY) == TRUE) && (m_cCommandCount == 0)) goto CP_SKIPMOUSEBUTTONSTATUS;
				if (m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_DLGBOX)
				{
					m_stDialogBoxInfo[m_stMCursor.sSelectedObjectID].sX = msX - m_stMCursor.sDistX;
					m_stDialogBoxInfo[m_stMCursor.sSelectedObjectID].sY = msY - m_stMCursor.sDistY;
				}
				m_stMCursor.sPrevX = msX;
				m_stMCursor.sPrevY = msY;

				if ((m_cCommand == DEF_OBJECTMOVE) || (m_cCommand == DEF_OBJECTRUN)) goto MOTION_COMMAND_PROCESS;
				return;
			}
			if (cLB == 0) {
				switch (m_stMCursor.cSelectedObjectType) {
					case DEF_SELECTEDOBJTYPE_DLGBOX:
						if ((m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_DLGBOX) &&
							(m_stMCursor.sSelectedObjectID == 7) && (m_stDialogBoxInfo[7].cMode == 20))
						{
							sX = m_stDialogBoxInfo[7].sX;
							sY = m_stDialogBoxInfo[7].sY;

							StartInputString(sX + 75, sY + 140, 21, m_cGuildName);
							m_stDialogBoxInfo[7].cMode = 1;
						}

						if ((m_stMCursor.cSelectedObjectType == DEF_SELECTEDOBJTYPE_DLGBOX) &&
							(m_stMCursor.sSelectedObjectID == 17) && (m_stDialogBoxInfo[17].cMode == 20 || m_stDialogBoxInfo[17].cMode == 30))
						{	// Query Drop Item Amount
							sX = m_stDialogBoxInfo[17].sX;
							sY = m_stDialogBoxInfo[17].sY;
							StartInputString(sX + 40, sY + 57, 11, m_cAmountString);
							m_stDialogBoxInfo[17].cMode = 1;
						}

						if (m_stMCursor.sSelectedObjectID == 9)
						{
							if (c_reso->IsResolution() == C800x600)
							{
								if (msX < 400) m_stDialogBoxInfo[9].sX = 0;
								else m_stDialogBoxInfo[9].sX = 800 - m_stDialogBoxInfo[9].sSizeX;
								if (msY < 273) m_stDialogBoxInfo[9].sY = 0;
								else m_stDialogBoxInfo[9].sY = 547 - m_stDialogBoxInfo[9].sSizeY;
							}
							else if(c_reso->IsResolution() == C1024x768)
							{
								if (msX < 512) m_stDialogBoxInfo[9].sX = 0;
								else m_stDialogBoxInfo[9].sX = 1024 - m_stDialogBoxInfo[9].sSizeX;
								if (msY < 357) m_stDialogBoxInfo[9].sY = 0;
								else m_stDialogBoxInfo[9].sY = 715 - m_stDialogBoxInfo[9].sSizeY;
							}
							else if (c_reso->IsResolution() == C640x480)
							{
								if (msX < 320) m_stDialogBoxInfo[9].sX = 0;
								else m_stDialogBoxInfo[9].sX = 640 - m_stDialogBoxInfo[9].sSizeX;
								if (msY < 213) m_stDialogBoxInfo[9].sY = 0;
								else m_stDialogBoxInfo[9].sY = 427 - m_stDialogBoxInfo[9].sSizeY;
							}

						}

						m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
						m_stMCursor.cSelectedObjectType = NULL;
						m_stMCursor.sSelectedObjectID = NULL;
						break;

					case DEF_SELECTEDOBJTYPE_ITEM:
						_bCheckDraggingItemRelease(msX, msY);
						m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
						m_stMCursor.cSelectedObjectType = NULL;
						m_stMCursor.sSelectedObjectID = NULL;
						break;

					case DEF_SELECTEDOBJTYPE_MAGIC:
						_bCheckDraggingMagicRelease(msX, msY);
						m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;//Guide Map Dialog
						m_stMCursor.cSelectedObjectType = NULL;
						m_stMCursor.sSelectedObjectID = NULL;
						break;

					default:
						m_stMCursor.cPrevStatus = DEF_CURSORSTATUS_NULL;
						m_stMCursor.cSelectedObjectType = NULL;
						m_stMCursor.sSelectedObjectID = NULL;
						break;
				}
				return;
			}
			break;
	}

CP_SKIPMOUSEBUTTONSTATUS:;
	if (m_bCommandAvailable == FALSE) return;
	if ((dwTime - m_dwCommandTime) < 1)
	{
		delete m_pGSock;
		m_pGSock = NULL;
		m_bEscPressed = FALSE;
		PlaySound('E', 14, 5);
		if (m_bSoundFlag) m_pESound[38]->bStop();
		if ((m_bSoundFlag) && (m_bMusicStat == TRUE))
		{
			if (m_pBGM != NULL) m_pBGM->bStop();
		}
		//Cambiado por log out normal LALOv10
		//if (strlen(G_cCmdLineTokenA) != 0)
		if (strlen(G_cCmdLineTokenA) == -1)
			ChangeGameMode(DEF_GAMEMODE_ONQUIT);
		else ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
		return;
	}
	if (DecriptInt(m_iHP) <= 0) return;

	if (m_sDamageMove != 0)
	{
		m_cCommand = DEF_OBJECTDAMAGEMOVE;
		goto MOTION_COMMAND_PROCESS;
	}

	/*if ((m_pMapData->bIsTeleportLoc(m_sPlayerX, m_sPlayerY) == TRUE) && (m_cCommandCount == 0))
		RequestTeleportAndWaitData();*/

	// indexX, indexY
	if (cLB != 0) // Mouse Left button
	{
		if (m_bIsGetPointingMode == TRUE)
		{
			if ((m_sMCX != 0) || (m_sMCY != 0))
				PointCommandHandler(m_sMCX, m_sMCY);
			else PointCommandHandler(indexX, indexY);

			m_bCommandAvailable = FALSE;
			m_dwCommandTime = timeGetTime();
			m_bIsGetPointingMode = FALSE;
			return;
		}

		if (m_sMCX == 0 && m_sMCY == 0 && m_sPlayerX == indexX && m_sPlayerY == indexY && m_bSkillUsingStatus) {
			ClearSkillUsingStatus();
			bSendCommand(CLIENT_REQUEST_COMMAND_MOTION, DEF_OBJECTSTOP, 5, NULL, NULL, NULL, NULL);

			m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, 5,
				m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor,
				m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
				m_cCommand, NULL, NULL, NULL, 0,
				10, MyAdminLevel);

			m_bCommandAvailable = FALSE;
			m_dwCommandTime = timeGetTime();
			return;
		}

		m_pMapData->bGetOwner(m_sMCX, m_sMCY - 1, cName, &sObjectType, &iObjectStatus, &m_wCommObjectID); // v1.4

		DecriptString(m_cMCName);
		if (memcmp(m_cMCName, m_cPlayerName, 10) == 0 && (sObjectType <= 6 || m_pMapData->m_pData[m_sPlayerX - m_pMapData->m_sPivotX][m_sPlayerY - m_pMapData->m_sPivotY].m_sItemSprite != 0))
		{
			if ((m_sPlayerType >= 1) && (m_sPlayerType <= 6)) {
				m_cCommand = DEF_OBJECTGETITEM;
				m_sCommX = m_sPlayerX;
				m_sCommY = m_sPlayerY;
			}
		}
		else {
			if (memcmp(m_cMCName, m_cPlayerName, 10) == 0) m_sMCY -= 1;

			if ((m_sMCX != 0) && (m_sMCY != 0)) { // m_sMCX, m_sMCY
				if (m_bCtrlPressed == TRUE) {
					m_pMapData->bGetOwner(m_sMCX, m_sMCY, cName, &sObjectType, &iObjectStatus, &m_wCommObjectID);
					if ((iObjectStatus & 0x10) != 0) return;
					if ((sObjectType == 15) || (sObjectType == 19) || (sObjectType == 20) || (sObjectType == 24) || (sObjectType == 25) || (sObjectType == 26) || (sObjectType == 67) || (sObjectType == 68) || (sObjectType == 69) || (sObjectType == 90) || (sObjectType == 111)) return;
					m_stMCursor.sCursorFrame = 3;
					absX = abs(m_sPlayerX - m_sMCX);
					absY = abs(m_sPlayerY - m_sMCY);
					if ((absX <= 1) && (absY <= 1)) {
						wType = _iGetAttackType();
						m_cCommand = DEF_OBJECTATTACK;
						m_sCommX = m_sMCX;
						m_sCommY = m_sMCY;
					}
					else if ((absX <= 2) && (absY <= 2) && ((sObjectType == 66) || (sObjectType == 73) || (sObjectType == 81) || (sObjectType == 91) || sObjectType == 114 || sObjectType == 128 || _tmp_sOwnerType == 120))// strike on Big mobs & gate from a range
					{
						wType = _iGetAttackType();
						m_cCommand = DEF_OBJECTATTACK;
						m_sCommX = m_sMCX;
						m_sCommY = m_sMCY;
					}
					else { // Pas au corp � corp
						switch (_iGetWeaponSkillType()) {
							case 6: // Bow
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
								wType = _iGetAttackType();
								break;

							case 5: // OpenHand
							case 7: // SS
								if (((absX == 2) && (absY == 2)) || ((absX == 0) && (absY == 2)) || ((absX == 2) && (absY == 0))) {
									if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0)) {
										if (m_cSkillMastery[_iGetWeaponSkillType()] == 100) {
											m_cCommand = DEF_OBJECTATTACKMOVE;
											wType = _iGetAttackType();
										}
										else {
											m_cCommand = DEF_OBJECTRUN;
											GetPlayerTurn();
										}
										m_sCommX = m_sMCX;
										m_sCommY = m_sMCY;
									}
									else {
										m_cCommand = DEF_OBJECTMOVE;
										m_sCommX = m_sMCX;
										m_sCommY = m_sMCY;
										GetPlayerTurn();
									}
								}
								else {
									if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) && (m_sPlayerType >= 1) && (m_sPlayerType <= 6))
										m_cCommand = DEF_OBJECTRUN;	// Staminar
									else m_cCommand = DEF_OBJECTMOVE;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
									GetPlayerTurn();
								}
								break;

							case 8: // LS
								if ((absX <= 3) && (absY <= 3) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE)
									&& (_iGetAttackType() != 30) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) // Crit without StormBlade
								{
									wType = _iGetAttackType();
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
								}
								else if ((absX <= 5) && (absY <= 5) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (_iGetAttackType() == 30))  // Crit with StormBlade (by Snoopy)
								{
									wType = _iGetAttackType();
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
								}
								else if ((absX <= 3) && (absY <= 3) && (_iGetAttackType() == 5))  // Normal hit with StormBlade (by Snoopy)
								{
									wType = _iGetAttackType();
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
								}
								else // Swing
								{
									if (((absX == 2) && (absY == 2)) || ((absX == 0) && (absY == 2)) || ((absX == 2) && (absY == 0))
										&& (_iGetAttackType() != 5)) { // no Dash possible with StormBlade
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0)) {
											if (m_cSkillMastery[_iGetWeaponSkillType()] == 100) {
												m_cCommand = DEF_OBJECTATTACKMOVE;
												wType = _iGetAttackType();
											}
											else {
												m_cCommand = DEF_OBJECTRUN;
												GetPlayerTurn();
											}
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
										}
										else {
											m_cCommand = DEF_OBJECTMOVE;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											GetPlayerTurn();
										}
									}
									else {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) && (m_sPlayerType >= 1) && (m_sPlayerType <= 6))
											m_cCommand = DEF_OBJECTRUN;
										else m_cCommand = DEF_OBJECTMOVE;
										m_sCommX = m_sMCX;
										m_sCommY = m_sMCY;
										GetPlayerTurn();
									}
								}
								break;

							case 9: // Fencing
								if ((absX <= 4) && (absY <= 4) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100))
								{
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
									wType = _iGetAttackType();
								}
								else {
									if (((absX == 2) && (absY == 2)) || ((absX == 0) && (absY == 2)) || ((absX == 2) && (absY == 0))) {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0)) {
											if (m_cSkillMastery[_iGetWeaponSkillType()] == 100) {
												m_cCommand = DEF_OBJECTATTACKMOVE;
												wType = _iGetAttackType();
											}
											else {
												m_cCommand = DEF_OBJECTRUN;
												GetPlayerTurn();
											}
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
										}
										else {
											m_cCommand = DEF_OBJECTMOVE;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											GetPlayerTurn();
										}
									}
									else {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
											(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
											m_cCommand = DEF_OBJECTRUN;
										else m_cCommand = DEF_OBJECTMOVE;
										m_sCommX = m_sMCX;
										m_sCommY = m_sMCY;
										GetPlayerTurn();
									}
								}
								break;

							case 10: // Axe
								if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100))
								{
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
									wType = _iGetAttackType();
								}
								else {
									if (((absX == 2) && (absY == 2)) || ((absX == 0) && (absY == 2)) || ((absX == 2) && (absY == 0))) {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0)) {
											if (m_cSkillMastery[_iGetWeaponSkillType()] == 100) {
												m_cCommand = DEF_OBJECTATTACKMOVE;
												wType = _iGetAttackType();
											}
											else {
												m_cCommand = DEF_OBJECTRUN;
												GetPlayerTurn();
											}
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
										}
										else {
											m_cCommand = DEF_OBJECTMOVE;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											GetPlayerTurn();
										}
									}
									else {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) && (m_sPlayerType >= 1) && (m_sPlayerType <= 6))
											m_cCommand = DEF_OBJECTRUN;
										else m_cCommand = DEF_OBJECTMOVE;
										m_sCommX = m_sMCX;
										m_sCommY = m_sMCY;
										GetPlayerTurn();
									}
								}
								break;

							case 14: // Hammer
								if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
									wType = _iGetAttackType();
								}
								else {
									if (((absX == 2) && (absY == 2)) || ((absX == 0) && (absY == 2)) || ((absX == 2) && (absY == 0))) {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0)) {
											if (m_cSkillMastery[_iGetWeaponSkillType()] == 100) {
												m_cCommand = DEF_OBJECTATTACKMOVE;
												wType = _iGetAttackType();
											}
											else {
												m_cCommand = DEF_OBJECTRUN;
												GetPlayerTurn();
											}
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
										}
										else {
											m_cCommand = DEF_OBJECTMOVE;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											GetPlayerTurn();
										}
									}
									else {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
											(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
											m_cCommand = DEF_OBJECTRUN;
										else m_cCommand = DEF_OBJECTMOVE;
										m_sCommX = m_sMCX;
										m_sCommY = m_sMCY;
										GetPlayerTurn();
									}
								}
								break;
							case 21: // Wand
								if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
									wType = _iGetAttackType();
								}
								else {
									if (((absX == 2) && (absY == 2)) || ((absX == 0) && (absY == 2)) || ((absX == 2) && (absY == 0))) {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0)) {
											if (m_cSkillMastery[_iGetWeaponSkillType()] == 100) {
												m_cCommand = DEF_OBJECTATTACKMOVE;
												wType = _iGetAttackType();
											}
											else {
												m_cCommand = DEF_OBJECTRUN;
												GetPlayerTurn();
											}
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
										}
										else {
											m_cCommand = DEF_OBJECTMOVE;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											GetPlayerTurn();
										}
									}
									else {
										if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
											(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
											m_cCommand = DEF_OBJECTRUN;
										else m_cCommand = DEF_OBJECTMOVE;
										m_sCommX = m_sMCX;
										m_sCommY = m_sMCY;
										GetPlayerTurn();
									}
								}
								break;
						}
					}
				}
				else // CTRL not pressed
				{
					m_pMapData->bGetOwner(m_sMCX, m_sMCY, cName, &sObjectType, &iObjectStatus, &m_wCommObjectID);
					if (sObjectType >= 10 || ((sObjectType >= 1) && (sObjectType <= 6))) {
						DecriptString(m_cCurLocation);
						if ((sObjectType >= 1) && (sObjectType <= 6) && (memcmp(m_cCurLocation, "market", 6) == 0)) {
							if (_tmp_AdminLevel == 99) {
								DecriptString(OpenSellName);
								if (strcmp(OpenSellName, cName) != 0 && m_bIsDialogEnabled[54]) DisableDialogBox(54);
								EncriptString(OpenSellName);

								ZeroMemory(OpenSellName, sizeof(OpenSellName));
								memcpy(OpenSellName, cName, 12);
								EncriptString(OpenSellName);

								//DisableDialogBox(54);
								DecriptString(OpenSellName);
								if (!m_bIsDialogEnabled[54]) bSendCommand(CLIENT_REQUEST_MARKET_ITEMLIST, NULL, NULL, m_sMCX, m_sMCY, NULL, OpenSellName);
								EncriptString(OpenSellName);

								EnableDialogBox(54, NULL, NULL, NULL);
								return;
							}
						}
						EncriptString(m_cCurLocation);

						if (c_reso->IsResolution() == C800x600)
						{
							resX = 799;
							resY = 599;
						}
						else if (c_reso->IsResolution() == C1024x768)
						{
							resX = 1023;
							resY = 767;
						}
						else if (c_reso->IsResolution() == C640x480)
						{
							resX = 639;
							resY = 479;
						}

						switch (sObjectType) { 	// CLEROTH - NPC TALK
							case 15: // ShopKeeper-W
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 5, 11, 1);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = 15;
								break;

							case 19: // Gandlf
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 0, 16, NULL);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = 19;
								break;

							case 20: // Howard
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 0, 14, NULL);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = 20;
								m_stDialogBoxInfo[39].sV3 = 20;
								m_stDialogBoxInfo[39].sV4 = m_wCommObjectID;
								m_stDialogBoxInfo[39].sV5 = m_sMCX;
								m_stDialogBoxInfo[39].sV6 = m_sMCY;
								break;

							case 24: // Tom
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 7, 11, 2);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = 24;
								m_stDialogBoxInfo[39].sV3 = 24;
								m_stDialogBoxInfo[39].sV4 = m_wCommObjectID;
								m_stDialogBoxInfo[39].sV5 = m_sMCX;
								m_stDialogBoxInfo[39].sV6 = m_sMCY;
								break;

							case 25: // William
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 0, 13, NULL);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = 25;
								break;

							case 26: // Kennedy
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 0, 7, NULL);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = 26;
								break;

							case 21: // Guard
								if ((_iGetFOE(iObjectStatus, 7) >= 0) && (!DecriptBool(m_bIsCombatMode)))
								{
									if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
									EnableDialogBox(20, 4, NULL, NULL);
									tX = msX - 117;
									tY = msY - 50;
									if (tX < 0) tX = 0;
									if ((tX + 235) > resX) tX = resX - 235;
									if (tY < 0) tY = 0;
									if ((tY + 100) > resY) tY = resY - 100;
									m_stDialogBoxInfo[20].sX = tX;
									m_stDialogBoxInfo[20].sY = tY;
									m_stDialogBoxInfo[20].sV3 = 21;
								}
								break;
							case 67: // McGaffin
							case 68: // Perry
							case 69: // Devlin
							//case 129: //MarketMob
								if (!DecriptBool(m_bIsCombatMode))
								{
									if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
									EnableDialogBox(20, 4, NULL, NULL);
									tX = msX - 117;
									tY = msY - 50;
									if (tX < 0) tX = 0;
									if ((tX + 235) > resX) tX = resX - 235;
									if (tY < 0) tY = 0;
									if ((tY + 100) > resY) tY = resY - 100;
									m_stDialogBoxInfo[20].sX = tX;
									m_stDialogBoxInfo[20].sY = tY;
									m_stDialogBoxInfo[20].sV3 = sObjectType;
								}
								break;
							case 129: //MarketMob
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 4, NULL, NULL);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = sObjectType;
							break;

							case 32: // Unicorn
								if (!DecriptBool(m_bIsCombatMode))
								{
									if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
									EnableDialogBox(20, 4, NULL, NULL);
									tX = msX - 117;
									tY = msY - 50;
									if (tX < 0) tX = 0;
									if ((tX + 235) > resX) tX = resX - 235;
									if (tY < 0) tY = 0;
									if ((tY + 100) > resY) tY = resY - 100;
									m_stDialogBoxInfo[20].sX = tX;
									m_stDialogBoxInfo[20].sY = tY;
									m_stDialogBoxInfo[20].sV3 = 32;
								}
								break;

							case 90: // Snoopy: Gail
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 6, 0, NULL);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = 90;
								break;

							case 111: // 
								if (m_bIsDialogEnabled[20]) DisableDialogBox(20);
								EnableDialogBox(20, 8, 0, NULL);
								tX = msX - 117;
								tY = msY - 50;
								if (tX < 0) tX = 0;
								if ((tX + 235) > resX) tX = resX - 235;
								if (tY < 0) tY = 0;
								if ((tY + 100) > resY) tY = resY - 100;
								m_stDialogBoxInfo[20].sX = tX;
								m_stDialogBoxInfo[20].sY = tY;
								m_stDialogBoxInfo[20].sV3 = 90;
								break;

							default: // Other mobs
								if (_iGetFOE(iObjectStatus, 7) >= 0) break;
								if ((sObjectType >= 1) && (sObjectType <= 6) && (m_bForceAttack == FALSE)) break; //  
								absX = abs(m_sPlayerX - m_sMCX);
								absY = abs(m_sPlayerY - m_sMCY);
								if ((absX <= 1) && (absY <= 1))
								{
									wType = _iGetAttackType();
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
								}
								else if ((absX <= 2) && (absY <= 2) // strike on Big mobs & gate from a range
									&& ((sObjectType == 66) || (sObjectType == 73) || (sObjectType == 81) || (sObjectType == 91) || (sObjectType == 114) || (sObjectType == 128) || _tmp_sOwnerType == 120))
								{
									wType = _iGetAttackType();
									m_cCommand = DEF_OBJECTATTACK;
									m_sCommX = m_sMCX;
									m_sCommY = m_sMCY;
								}
								else // Normal hit from a range.
								{
									switch (_iGetWeaponSkillType()) {
										case 6: // Bow
											m_cCommand = DEF_OBJECTATTACK;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											wType = _iGetAttackType();
											break;

										case 5: // Boxe
										case 7: // SS
											if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0)
												&& (m_sPlayerType >= 1) && (m_sPlayerType <= 6))
												m_cCommand = DEF_OBJECTRUN;
											else m_cCommand = DEF_OBJECTMOVE;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											GetPlayerTurn();
											break;

										case 8: // LS
											if ((absX <= 3) && (absY <= 3) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE)
												&& (_iGetAttackType() != 30) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) // Crit without StormBlade by Snoopy
											{
												if ((absX <= 1) && (absY <= 1) && (m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0))
													m_cCommand = DEF_OBJECTATTACKMOVE;
												else m_cCommand = DEF_OBJECTATTACK;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												wType = _iGetAttackType();
											}
											else if ((absX <= 5) && (absY <= 5) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE)
												&& (_iGetAttackType() == 30)) // Crit with StormBlade by Snoopy
											{
												if ((absX <= 1) && (absY <= 1) && (m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0))
													m_cCommand = DEF_OBJECTATTACKMOVE;
												else m_cCommand = DEF_OBJECTATTACK;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												wType = _iGetAttackType();
											}
											else if ((absX <= 3) && (absY <= 3)
												&& (_iGetAttackType() == 5)) // Normal hit with StormBlade by Snoopy
											{
												m_cCommand = DEF_OBJECTATTACK;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												wType = _iGetAttackType();
											}
											else
											{
												if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
													(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
													m_cCommand = DEF_OBJECTRUN;
												else m_cCommand = DEF_OBJECTMOVE;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												GetPlayerTurn();
											}
											break;

										case 9: // Fencing
											if ((absX <= 4) && (absY <= 4) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100))
											{
												if ((absX <= 1) && (absY <= 1) && (m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0))
													m_cCommand = DEF_OBJECTATTACKMOVE;
												else m_cCommand = DEF_OBJECTATTACK;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												wType = _iGetAttackType();
											}
											else
											{
												if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
													(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
													m_cCommand = DEF_OBJECTRUN;
												else m_cCommand = DEF_OBJECTMOVE;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												GetPlayerTurn();
											}
											break;

										case 10: //
											if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
												if ((absX <= 1) && (absY <= 1) && (m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0))
													m_cCommand = DEF_OBJECTATTACKMOVE;
												else m_cCommand = DEF_OBJECTATTACK;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												wType = _iGetAttackType();
											}
											else {
												if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
													(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
													m_cCommand = DEF_OBJECTRUN;
												else m_cCommand = DEF_OBJECTMOVE;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												GetPlayerTurn();
											}
											break;
										case 14: //
											if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
												if ((absX <= 1) && (absY <= 1) && (m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0))
													m_cCommand = DEF_OBJECTATTACKMOVE;
												else m_cCommand = DEF_OBJECTATTACK;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												wType = _iGetAttackType();
											}
											else {
												if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
													(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
													m_cCommand = DEF_OBJECTRUN;
												else m_cCommand = DEF_OBJECTMOVE;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												GetPlayerTurn();
											}
											break;
										case 21: //
											if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
												if ((absX <= 1) && (absY <= 1) && (m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0))
													m_cCommand = DEF_OBJECTATTACKMOVE;
												else m_cCommand = DEF_OBJECTATTACK;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												wType = _iGetAttackType();
											}
											else {
												if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
													(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
													m_cCommand = DEF_OBJECTRUN;
												else m_cCommand = DEF_OBJECTMOVE;
												m_sCommX = m_sMCX;
												m_sCommY = m_sMCY;
												GetPlayerTurn();
											}
											break;
									}
								}
								break;
						}
					}
					else {
						if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
							(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
							m_cCommand = DEF_OBJECTRUN;
						else m_cCommand = DEF_OBJECTMOVE;
						m_sCommX = m_sMCX;
						m_sCommY = m_sMCY;
						GetPlayerTurn();
					}
				}
			}
			else
			{
				if ((m_bShiftPressed || m_bRunningMode) && (DecriptInt(m_iSP) > 0) &&
					(m_sPlayerType >= 1) && (m_sPlayerType <= 6))
					m_cCommand = DEF_OBJECTRUN;
				else m_cCommand = DEF_OBJECTMOVE;
				m_sCommX = indexX;
				m_sCommY = indexY;
				GetPlayerTurn();
			}
		}
		EncriptString(m_cMCName);
		//EncriptString(m_cPlayerName);
	}
	else if (cRB != 0) // Mouse Right button
	{
		m_cCommand = DEF_OBJECTSTOP;
		if (m_bIsGetPointingMode == TRUE)
		{
			m_bIsGetPointingMode = FALSE;
			AddEventList(COMMAND_PROCESSOR1, 10);
		}
		if (m_bCommandAvailable == FALSE) return;
		if (m_cCommandCount >= 6) return;

		if ((m_sMCX != 0) && (m_sMCY != 0))
		{
			absX = abs(m_sPlayerX - m_sMCX);
			absY = abs(m_sPlayerY - m_sMCY);
			if (absX == 0 && absY == 0) return;

			if (m_bCtrlPressed == TRUE)
			{
				m_pMapData->bGetOwner(m_sMCX, m_sMCY, cName, &sObjectType, &iObjectStatus, &m_wCommObjectID);
				if ((iObjectStatus & 0x10) != 0) return;
				if ((sObjectType == 15) || (sObjectType == 19) || (sObjectType == 20) || (sObjectType == 24) || (sObjectType == 25) || (sObjectType == 26) || (sObjectType == 67) || (sObjectType == 68) || (sObjectType == 69) || (sObjectType == 90) || (sObjectType == 111)) return;

				if ((absX <= 1) && (absY <= 1))
				{
					wType = _iGetAttackType();
					m_cCommand = DEF_OBJECTATTACK;
					m_sCommX = m_sMCX;
					m_sCommY = m_sMCY;
				}
				else if ((absX <= 2) && (absY <= 2) // strike on Big mobs & gate from a range
					&& ((sObjectType == 66) || (sObjectType == 73) || (sObjectType == 81) || (sObjectType == 91) || (sObjectType == 114) || (sObjectType == 128) || _tmp_sOwnerType == 120))
				{
					wType = _iGetAttackType();
					m_cCommand = DEF_OBJECTATTACK;
					m_sCommX = m_sMCX;
					m_sCommY = m_sMCY;
				}
				else
				{
					switch (_iGetWeaponSkillType()) {
						case 6: // Bow
							m_cCommand = DEF_OBJECTATTACK;
							m_sCommX = m_sMCX;
							m_sCommY = m_sMCY;
							wType = _iGetAttackType();
							break;

						case 5: // Boxe
						case 7: // SS
							break;

						case 8: // LS
							if ((absX <= 3) && (absY <= 3) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE)
								&& (_iGetAttackType() != 30) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) // without StormBlade by Snoopy
							{
								wType = _iGetAttackType();
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
							}
							else if ((absX <= 5) && (absY <= 5) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE)
								&& (_iGetAttackType() == 30)) // with stormBlade crit by Snoopy
							{
								wType = _iGetAttackType();
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
							}
							else if ((absX <= 3) && (absY <= 3)
								&& (_iGetAttackType() == 5)) // with stormBlade no crit by Snoopy
							{
								wType = _iGetAttackType();
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
							}
							break;

						case 9: // Fencing
							if ((absX <= 4) && (absY <= 4) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
								wType = _iGetAttackType();
							}
							break;

						case 10: //
							if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
								wType = _iGetAttackType();
							}
							break;

						case 14: //
							if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
								wType = _iGetAttackType();
							}
							break;
						case 21: //
							if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
								wType = _iGetAttackType();
							}
							break;
					}
				}
			}
			else // CTRL not pressed
			{
				absX = abs(m_sPlayerX - m_sMCX);
				absY = abs(m_sPlayerY - m_sMCY);
				m_pMapData->bGetOwner(m_sMCX, m_sMCY, cName, &sObjectType, &iObjectStatus, &m_wCommObjectID);
				if (sObjectType >= 10 || ((sObjectType >= 1) && (sObjectType <= 6))) {
					switch (sObjectType) {
						case 15:
						case 19:
						case 20:
						case 24:
						case 25:
						case 26: // npcs
						case 90:
						case 111:
							break;

						default: // All "normal mobs"
							if (_iGetFOE(iObjectStatus, 7) >= 0) break;
							if ((sObjectType >= 1) && (sObjectType <= 6) && (m_bForceAttack == FALSE)) break; // 
							if ((absX <= 1) && (absY <= 1))
							{
								wType = _iGetAttackType();
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
							}
							else if ((absX <= 2) && (absY <= 2) // strike on Big mobs & gate from a range
								&& ((sObjectType == 66) || (sObjectType == 73) || (sObjectType == 81) || (sObjectType == 91) || (sObjectType == 114) || (sObjectType == 128) || _tmp_sOwnerType == 120))
							{
								wType = _iGetAttackType();
								m_cCommand = DEF_OBJECTATTACK;
								m_sCommX = m_sMCX;
								m_sCommY = m_sMCY;
							}
							else //
							{
								switch (_iGetWeaponSkillType()) {
									case 6: // Bow
										m_cCommand = DEF_OBJECTATTACK;
										m_sCommX = m_sMCX;
										m_sCommY = m_sMCY;
										wType = _iGetAttackType();
										break;

									case 5: // Boxe
									case 7: // SS
										break;

									case 8: // LS
										if ((absX <= 3) && (absY <= 3) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE)
											&& (_iGetAttackType() != 30) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) // crit without StormBlade by Snoopy
										{
											wType = _iGetAttackType();
											m_cCommand = DEF_OBJECTATTACK;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
										}
										else if ((absX <= 5) && (absY <= 5) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE)
											&& (_iGetAttackType() == 30)) // with stormBlade crit by Snoopy
										{
											wType = _iGetAttackType();
											m_cCommand = DEF_OBJECTATTACK;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
										}
										else if ((absX <= 3) && (absY <= 3)
											&& (_iGetAttackType() == 5)) // with stormBlade no crit by Snoopy
										{
											wType = _iGetAttackType();
											m_cCommand = DEF_OBJECTATTACK;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
										}
										break;

									case 9: // fencing
										if ((absX <= 4) && (absY <= 4) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
											m_cCommand = DEF_OBJECTATTACK;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											wType = _iGetAttackType();
										}
										break;

									case 10: //
										if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
											m_cCommand = DEF_OBJECTATTACK;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											wType = _iGetAttackType();
										}
										break;
									case 14: // hammer
										if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
											m_cCommand = DEF_OBJECTATTACK;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											wType = _iGetAttackType();
										}
										break;
									case 21: // wand
										if ((absX <= 2) && (absY <= 2) && (m_iSuperAttackLeft > 0) && (m_bSuperAttackMode == TRUE) && (m_cSkillMastery[_iGetWeaponSkillType()] == 100)) {
											m_cCommand = DEF_OBJECTATTACK;
											m_sCommX = m_sMCX;
											m_sCommY = m_sMCY;
											wType = _iGetAttackType();
										}
										break;
								}
							}
							break;
					}
				}
			}
		}
		else
		{
			if ((DecriptBool(m_bIllusionMVT) == TRUE) && (m_cCommand != DEF_OBJECTDAMAGEMOVE)) {
				cDir = cGetNextMoveDirMVT(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);

			}
			cDir = m_Misc.cGetNextMoveDir(m_sPlayerX, m_sPlayerY, indexX, indexY);
			if (DecriptInt(m_iHP) <= 0) return;
			if (cDir == 0) return;
			if (m_cPlayerDir == cDir) return;
			ClearSkillUsingStatus();
			m_cPlayerDir = cDir;
			bSendCommand(CLIENT_REQUEST_COMMAND_MOTION, DEF_OBJECTSTOP, m_cPlayerDir, NULL, NULL, NULL, NULL);

			m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
				m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor,
				m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
				m_cCommand, NULL, NULL, NULL, 0,
				10, MyAdminLevel);

			m_bCommandAvailable = FALSE;
			m_dwCommandTime = timeGetTime();
			return;
		}
	}

MOTION_COMMAND_PROCESS:;

	if (m_cCommand != DEF_OBJECTSTOP)
	{
		if (DecriptInt(m_iHP) <= 0) return;
		if (m_cCommandCount == 5) AddEventList(COMMAND_PROCESSOR2, 10, FALSE);
		if (m_bCommandAvailable == FALSE) return;
		if (m_cCommandCount >= 6) return;

		if ((m_sPlayerType >= 0) && (m_sPlayerType > 6))
		{
			switch (m_cCommand) {
				case DEF_OBJECTRUN:
				case DEF_OBJECTMAGIC:
				case DEF_OBJECTGETITEM:
					m_cCommand = DEF_OBJECTSTOP;
					break;
			}
		}

		ClearSkillUsingStatus();

		if (m_sDamageMove != 0)
		{
			m_cCommand = DEF_OBJECTDAMAGEMOVE;
			m_sCommX = m_sPlayerX;
			m_sCommY = m_sPlayerY;
			//con solo saber ingenieria inversa se hacen estas cosas...
			if (DecriptBool(m_bIllusionMVT) == TRUE) {
				cDir = cGetNextMoveDirMVT(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);
				switch (m_sDamageMove) {
					case 1: m_sCommY++; break;
					case 2: m_sCommX--; m_sCommY++; break;
					case 3: m_sCommX--; break;
					case 4: m_sCommX--; m_sCommY--; break;
					case 5: m_sCommY--; break;
					case 6: m_sCommX++; m_sCommY--; break;
					case 7: m_sCommX++; break;
					case 8: m_sCommX++; m_sCommY++; break;
				}

			}
			else {

				switch (m_sDamageMove) {
					case 1: m_sCommY--; break;
					case 2: m_sCommX++; m_sCommY--; break;
					case 3: m_sCommX++; break;
					case 4: m_sCommX++; m_sCommY++; break;
					case 5: m_sCommY++; break;
					case 6: m_sCommX--; m_sCommY++; break;
					case 7: m_sCommX--; break;
					case 8: m_sCommX--; m_sCommY--; break;
				}
			}

			if (StaggerDmg)
			{
				for (i = 1; i < DEF_MAXCHATMSGS; i++)
					if (m_pChatMsgList[i] == NULL)
					{
						for (int x = 1; x < DEF_MAXCHATMSGS; x++)
						{
							if (m_pChatMsgList[x] != NULL)
							{
								if (m_sPlayerObjectID == m_pChatMsgList[x]->m_iObjectID)
								{
									if ((m_pChatMsgList[x]->m_cType == 21) ||
										(m_pChatMsgList[x]->m_cType == 22) ||
										(m_pChatMsgList[x]->m_cType == 23))
									{
										m_pChatMsgList[x]->iDispLines++;
									}
								}
							}
						}

						ZeroMemory(cTxt, sizeof(cTxt));
						if (DecriptInt(m_iDamageMoveAmount) > 0)
							wsprintf(cTxt, "-%dPts", DecriptInt(m_iDamageMoveAmount));
						else strcpy(cTxt, "Critical!");

						int iFontType;
						if ((DecriptInt(m_iDamageMoveAmount) >= 0) && (DecriptInt(m_iDamageMoveAmount) < 12))		iFontType = 21;
						else if ((DecriptInt(m_iDamageMoveAmount) >= 12) && (DecriptInt(m_iDamageMoveAmount) < 40)) iFontType = 22;
						else if ((DecriptInt(m_iDamageMoveAmount) >= 40) || (DecriptInt(m_iDamageMoveAmount) < 0))	iFontType = 23;

						m_pChatMsgList[i] = new class CMsg(iFontType, cTxt, m_dwCurTime);
						m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;
						m_pChatMsgList[i]->iDispLines = 1;

						if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE) {
							delete m_pChatMsgList[i];
							m_pChatMsgList[i] = NULL;
						}
						break;
					}
			}
			else
			{
				_RemoveChatMsgListByObjectID(m_sPlayerObjectID);
				for (i = 1; i < DEF_MAXCHATMSGS; i++)
					if (m_pChatMsgList[i] == NULL)
					{

						ZeroMemory(cTxt, sizeof(cTxt));
						wsprintf(cTxt, "-%dPts", DecriptInt(m_iDamageMoveAmount));

						int iFontType;
						if ((DecriptInt(m_iDamageMoveAmount) >= 0) && (DecriptInt(m_iDamageMoveAmount) < 12)) iFontType = 21;
						else if ((DecriptInt(m_iDamageMoveAmount) >= 12) && (DecriptInt(m_iDamageMoveAmount) < 40)) iFontType = 22;
						else if ((DecriptInt(m_iDamageMoveAmount) >= 40) || (DecriptInt(m_iDamageMoveAmount) < 0)) iFontType = 23;

						m_pChatMsgList[i] = new class CMsg(iFontType, cTxt, m_dwCurTime);
						m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;

						if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE)
						{
							delete m_pChatMsgList[i];
							m_pChatMsgList[i] = NULL;
						}
						break;
					}
			}
			
			m_sDamageMove = 0;
		}

		switch (m_cCommand) {
			case DEF_OBJECTRUN:
			case DEF_OBJECTMOVE:
			case DEF_OBJECTDAMAGEMOVE: // v1.43
				if (DecriptBool(m_bParalyze)) return;
				//if (DecriptBool(m_bHackMoveBlocked)) return;
				if (DecriptBool(m_bPackSarpadBlock)) return;
				bGORet = m_pMapData->bGetOwner(m_sCommX, m_sCommY, pDstName, &sDstOwnerType, &iDstOwnerStatus, &m_wCommObjectID); // v1.4

				if ((m_sPlayerX == m_sCommX) && (m_sPlayerY == m_sCommY))
					m_cCommand = DEF_OBJECTSTOP;
				else if ((abs(m_sPlayerX - m_sCommX) <= 1) && (abs(m_sPlayerY - m_sCommY) <= 1) && (bGORet == TRUE) && (sDstOwnerType != NULL))
					m_cCommand = DEF_OBJECTSTOP;
				else if ((abs(m_sPlayerX - m_sCommX) <= 2) && (abs(m_sPlayerY - m_sCommY) <= 2) && (m_pMapData->m_tile[m_sCommX][m_sCommY].m_bIsMoveAllowed == FALSE))
					m_cCommand = DEF_OBJECTSTOP;
				else
				{
					if (m_cCommand == DEF_OBJECTMOVE)
						if (m_bRunningMode || m_bShiftPressed) m_cCommand = DEF_OBJECTRUN;
					if (m_cCommand == DEF_OBJECTRUN)
					{
						if ((m_bRunningMode == FALSE) && (m_bShiftPressed == FALSE)) m_cCommand = DEF_OBJECTMOVE;
						if (DecriptInt(m_iSP) < 1) m_cCommand = DEF_OBJECTMOVE;
					}
					cDir = cGetNextMoveDir(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY, TRUE);

					if ((DecriptBool(m_bIllusionMVT) == TRUE) && (m_cCommand != DEF_OBJECTDAMAGEMOVE))
						cDir = cGetNextMoveDirMVT(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);

					if (cDir != 0)
					{
						m_cPlayerDir = cDir;
						bSendCommand(CLIENT_REQUEST_COMMAND_MOTION, m_cCommand, cDir, NULL, NULL, NULL, NULL);
						switch (cDir) {
						case 1:	m_sPlayerY--; break;
						case 2:	m_sPlayerY--; m_sPlayerX++;	break;
						case 3:	m_sPlayerX++; break;
						case 4:	m_sPlayerX++; m_sPlayerY++;	break;
						case 5:	m_sPlayerY++; break;
						case 6:	m_sPlayerX--; m_sPlayerY++;	break;
						case 7:	m_sPlayerX--; break;
						case 8:	m_sPlayerX--; m_sPlayerY--;	break;
						}

						m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
							m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor, // v1.4
							m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
							m_cCommand, NULL, NULL, NULL, NULL, NULL, MyAdminLevel);

						//No LogOut en movimiento
						if ((m_cSalirDelChar > 0) && (m_bForceDisconn == FALSE))
						{
							m_cSalirDelChar = -1;
							AddEventList(NOTIFYMSG_DC2, 10);
						}
						//No Change City en movimiento
						if (ConteoChangeCity > 0)
						{
							ConteoChangeCity = -1;
							AddEventList(NOTIFYMSG_ChangeC, 14);
						}
						m_bCommandAvailable = FALSE;
						m_dwCommandTime = timeGetTime();
						m_iPrevMoveX = m_sPlayerX;
						m_iPrevMoveY = m_sPlayerY;
					}
				}

				if (m_cCommand == DEF_OBJECTDAMAGEMOVE)
				{
					m_bIsGetPointingMode = FALSE;
					m_iPointCommandType = EncriptInt(-1);
					m_stMCursor.sCursorFrame = 0;
					ClearSkillUsingStatus();
					m_cCommand = DEF_OBJECTSTOP;
				}
				break;

			case DEF_OBJECTATTACK:
				cDir = m_Misc.cGetNextMoveDir(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);
				// Snoopy: Illusion movement
				if (DecriptBool(m_bIllusionMVT) == TRUE)
				{
					cDir = cGetNextMoveDirMVT(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY);
				}
				if (cDir != 0)
				{
					if ((wType == 2) || (wType == 25))
					{
						if (_bCheckItemByType(DEF_ITEMTYPE_ARROW) == FALSE)
							wType = 0;
					}
					if (wType >= 20)
					{
						m_iSuperAttackLeft--;
						if (m_iSuperAttackLeft < 0) m_iSuperAttackLeft = 0;
					}
					m_cPlayerDir = cDir;

					bSendCommand(CLIENT_REQUEST_COMMAND_MOTION, DEF_OBJECTATTACK, cDir, m_sCommX, m_sCommY, wType, NULL, m_wCommObjectID);
					m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
						m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor,
						m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
						DEF_OBJECTATTACK,
						m_sCommX - m_sPlayerX, m_sCommY - m_sPlayerY, wType, NULL, NULL, MyAdminLevel);

					m_bCommandAvailable = FALSE;
					m_dwCommandTime = timeGetTime();
				}
				m_cCommand = DEF_OBJECTSTOP;
				break;

			case DEF_OBJECTATTACKMOVE:
				if (DecriptBool(m_bParalyze)) return;
			//	if (DecriptBool(m_bHackMoveBlocked)) return;
				if (DecriptBool(m_bPackSarpadBlock)) return;
				bGORet = m_pMapData->bGetOwner(m_sCommX, m_sCommY, pDstName, &sDstOwnerType, &iDstOwnerStatus, &m_wCommObjectID);
				if ((m_sPlayerX == m_sCommX) && (m_sPlayerY == m_sCommY))
					m_cCommand = DEF_OBJECTSTOP;
				else if ((abs(m_sPlayerX - m_sCommX) <= 1) && (abs(m_sPlayerY - m_sCommY) <= 1) &&
					(bGORet == TRUE) && (sDstOwnerType != NULL))
					m_cCommand = DEF_OBJECTSTOP;
				else
				{
					cDir = cGetNextMoveDir(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY, TRUE);
					// Snoopy: Illusion mvt
					if (DecriptBool(m_bIllusionMVT) == TRUE)
					{
						cDir = cGetNextMoveDirMVT(m_sPlayerX, m_sPlayerY, m_sCommX, m_sCommY/*, TRUE, TRUE*/);
					}
					if (cDir != 0)
					{
						m_cPlayerDir = cDir;
						bSendCommand(CLIENT_REQUEST_COMMAND_MOTION, DEF_OBJECTATTACKMOVE, cDir, m_sCommX, m_sCommY, wType, NULL, m_wCommObjectID);
						switch (cDir) {
						case 1:	m_sPlayerY--; break;
						case 2:	m_sPlayerY--; m_sPlayerX++;	break;
						case 3:	m_sPlayerX++; break;
						case 4:	m_sPlayerX++; m_sPlayerY++;	break;
						case 5:	m_sPlayerY++; break;
						case 6:	m_sPlayerX--; m_sPlayerY++;	break;
						case 7:	m_sPlayerX--; break;
						case 8:	m_sPlayerX--; m_sPlayerY--;	break;
						}

						m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
							m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor,
							m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
							m_cCommand, m_sCommX - m_sPlayerX, m_sCommY - m_sPlayerY, wType, NULL, NULL, MyAdminLevel);

						m_bCommandAvailable = FALSE;
						m_dwCommandTime = timeGetTime();
						m_iPrevMoveX = m_sPlayerX;
						m_iPrevMoveY = m_sPlayerY;
					}
				}
				m_cCommand = DEF_OBJECTSTOP;
				break;

			case DEF_OBJECTGETITEM:
				bSendCommand(CLIENT_REQUEST_COMMAND_MOTION, DEF_OBJECTGETITEM, m_cPlayerDir, NULL, NULL, NULL, NULL);

				m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
					m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor,
					m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
					DEF_OBJECTGETITEM, NULL, NULL, NULL, NULL, NULL, MyAdminLevel);

				m_bCommandAvailable = FALSE;
				m_cCommand = DEF_OBJECTSTOP;
				break;

			case DEF_OBJECTMAGIC:				
				bSendCommand(CLIENT_REQUEST_COMMAND_MOTION, DEF_OBJECTMAGIC, m_cPlayerDir, m_iCastingMagicType, NULL, NULL, NULL);

				m_pMapData->bSetOwner(m_sPlayerObjectID, m_sPlayerX, m_sPlayerY, m_sPlayerType, m_cPlayerDir,
					m_sPlayerAppr1, m_sPlayerAppr2, m_sPlayerAppr3, m_sPlayerAppr4, m_iPlayerApprColor,
					m_iPlayerApprColor2, m_iPlayerStatus, m_cPlayerName,
					DEF_OBJECTMAGIC, m_iCastingMagicType, NULL, NULL, NULL, NULL, MyAdminLevel);

				m_bCommandAvailable = FALSE;
				m_dwCommandTime = timeGetTime();
				m_bIsGetPointingMode = TRUE;
				m_cCommand = DEF_OBJECTSTOP;

				if (StaggerDmg)
				{
					for (i = 1; i < DEF_MAXCHATMSGS; i++)
						if (m_pChatMsgList[i] == NULL)
						{

							for (int x = 1; x < DEF_MAXCHATMSGS; x++)
							{
								if (m_pChatMsgList[x] != NULL)
								{
									if (m_sPlayerObjectID == m_pChatMsgList[x]->m_iObjectID)
									{
										if (m_pChatMsgList[x]->m_cType == 41)
										{
											m_pChatMsgList[x]->iDispLines++;
										}
									}
								}
							}

							ZeroMemory(cTxt, sizeof(cTxt));
							wsprintf(cTxt, "%s!", m_pMagicCfgList[m_iCastingMagicType]->m_cName);
							m_pChatMsgList[i] = new class CMsg(41, cTxt, timeGetTime());
							m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;
							m_pChatMsgList[i]->iDispLines = 1;

							m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i);
							return;
						}
				}
				else
				{
					_RemoveChatMsgListByObjectID(m_sPlayerObjectID);
					for (i = 1; i < DEF_MAXCHATMSGS; i++)
						if (m_pChatMsgList[i] == NULL)
						{
							ZeroMemory(cTxt, sizeof(cTxt));
							if (m_pMagicCfgList[m_iCastingMagicType] != NULL)
							{
								//magialalo MI CLIENTE (mi personaje)
								wsprintf(cTxt, "%s!", m_pMagicCfgList[m_iCastingMagicType]->m_cName);
								m_pChatMsgList[i] = new class CMsg(41, cTxt, timeGetTime());
								m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;
								m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i);
							}
							return;
						}
				}
				
				break;

			default:
				break;
		}
	}
}

void CGame::DrawDialogBox_Bank(short msX, short msY, short msZ, char cLB)
{
	short sX, sY, szX;
	int  i, iTotalLines, iPointerLoc, iLoc, x;
	int z[BANK_ITEMS_PAGE];
	double d1, d2, d3;
	char cItemColor, cStr1[64], cStr2[64], cStr3[64];
	BOOL bFlag = FALSE;
	DWORD dwTime = m_dwCurTime;
	int TempTotalItems;

	sX = m_stDialogBoxInfo[14].sX;
	sY = m_stDialogBoxInfo[14].sY;
	szX = m_stDialogBoxInfo[14].sSizeX - 5;
	short sizeX = m_stDialogBoxInfo[14].sSizeX;

	DrawShadowDialog2(sX, sY, 14);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "WareHouse", 255, 255, 255);

	ZeroMemory(cStr1, sizeof(cStr1));
	ZeroMemory(cStr2, sizeof(cStr2));
	ZeroMemory(cStr3, sizeof(cStr3));
	iLoc = 47;

	m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 30, sY + 295, 19, dwTime);

	if (m_stDialogBoxInfo[14].cMode != -1)
	{
		TempTotalItems = _iGetBankItemCount();
		PutString(sX + 90, sY + 33, "Total Item in Page: ", RGB(255, 255, 255));
		if (TempTotalItems < 20)
		{
			wsprintf(G_cTxt, "%d", TempTotalItems);
			PutString(sX + 190, sY + 33, G_cTxt, RGB(0, 255, 50));
			PutString(sX + 203, sY + 33, " / 20", RGB(0, 255, 50));
		}
		else
		{
			wsprintf(G_cTxt, "%d", TempTotalItems);
			PutString(sX + 190, sY + 33, G_cTxt, RGB(255, 0, 0));
			PutString(sX + 203, sY + 33, " / 20", RGB(255, 0, 0));
		}


		for (i = 0; i < BANK_ITEMS_PAGE; i++)
			z[i] = -1;

		i = 0;
		for (x = 0; x < DEF_MAXBANKITEMS; x++)
		{
			if (m_pBankList[x] != NULL)
			{
				if (m_pBankList[x]->BankPage == m_stDialogBoxInfo[14].cMode)
				{
					z[i] = x;
					i++;
				}
			}
		}

		for (i = 0; i < m_stDialogBoxInfo[14].sV1; i++)
			if ((m_pBankList[z[i + m_stDialogBoxInfo[14].sView]] != NULL) && (z[i + m_stDialogBoxInfo[14].sView] != -1))
			{
				GetItemName(m_pBankList[z[i + m_stDialogBoxInfo[14].sView]], cStr1, cStr2, cStr3);
				if ((msX > sX + 30) && (msX < sX + 210) && (msY >= sY + 110 + i * 15) && (msY <= sY + 124 + i * 15))
				{
					bFlag = TRUE;

					PutAlignedString(sX, sX + szX, sY + 110 + i * 15, cStr1, 255, 255, 255);
					if (m_bIsSpecial)
						PutAlignedString(sX + 70, sX + szX, sY + iLoc, cStr1, 0, 255, 50);
					else
						PutAlignedString(sX + 70, sX + szX, sY + iLoc, cStr1, 255, 255, 255);

					if (strlen(cStr2) > 0)
					{
						iLoc += 15;
						PutAlignedString(sX + 70, sX + szX, sY + iLoc, cStr2, 150, 150, 150);
					}
					if (strlen(cStr3) > 0)
					{
						iLoc += 15;
						PutAlignedString(sX + 70, sX + szX, sY + iLoc, cStr3, 150, 150, 150);
					}
					if (m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_sLevelLimit != 0 && m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_dwAttribute & 0x00000001)
					{
						iLoc += 15;
						wsprintf(G_cTxt, "%s: %d", DRAW_DIALOGBOX_SHOP24, m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_sLevelLimit);
						PutAlignedString(sX + 70, sX + szX, sY + iLoc, G_cTxt, 150, 150, 150);
					}

					if ((m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_cEquipPos != DEF_EQUIPPOS_NONE) && (m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_wWeight >= 1100))
					{
						iLoc += 15;
						int		_wWeight = 0;
						if (m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_wWeight % 100)				_wWeight = 1;
						wsprintf(G_cTxt, DRAW_DIALOGBOX_SHOP15, m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_wWeight / 100 + _wWeight);

						PutAlignedString(sX + 70, sX + szX, sY + iLoc, G_cTxt, 150, 150, 150);
					}

					cItemColor = m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_cItemColor;
					if (cItemColor == 0)
					{
						m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_sSprite]->PutSpriteFast(sX + 60, sY + 68, m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_sSpriteFrame, m_dwCurTime);
					}
					else
					{
						if ((m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
							|| (m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
							|| (m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
						{
							m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_sSprite]->PutSpriteRGB(sX + 60, sY + 68, m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_sSpriteFrame,
								m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
						}
						else m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_sSprite]->PutSpriteRGB(sX + 60, sY + 68, m_pBankList[z[i + m_stDialogBoxInfo[14].sView]]->m_sSpriteFrame,
							m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
					}
				}
				else
				{
					if (m_bIsSpecial)
						PutAlignedString(sX, sX + szX, sY + 110 + i * 15, cStr1, 0, 255, 50);
					else
						PutAlignedString(sX, sX + szX, sY + 110 + i * 15, cStr1, 255, 255, 255);
				}
			}

		iTotalLines = 0;
		for (x = 0; x < DEF_MAXBANKITEMS; x++)
			if (m_pBankList[x] != NULL)
				if (m_pBankList[x]->BankPage == m_stDialogBoxInfo[14].cMode)
					iTotalLines++;

		if (iTotalLines > m_stDialogBoxInfo[14].sV1)
		{
			d1 = (double)m_stDialogBoxInfo[14].sView;
			d2 = (double)(iTotalLines - m_stDialogBoxInfo[14].sV1);
			d3 = (274.0f * d1) / d2;
			iPointerLoc = (int)d3;
		//	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 3);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 242, sY + iPointerLoc + 35, 7);
		}
		else iPointerLoc = 0;
		if (cLB != 0 && (iGetTopDialogBoxIndex() == 14) && iTotalLines > m_stDialogBoxInfo[14].sV1) {
			if ((msX >= sX + 230) && (msX <= sX + 260) && (msY >= sY + 40) && (msY <= sY + 320)) {
				d1 = (double)(msY - (sY + 35));
				d2 = (double)(iTotalLines - m_stDialogBoxInfo[14].sV1);
				d3 = (d1 * d2) / 274.0f;
				m_stDialogBoxInfo[14].sView = (int)(d3 + 0.5);
			}
			else if ((msX >= sX + 230) && (msX <= sX + 260) && (msY > sY + 10) && (msY < sY + 40)) m_stDialogBoxInfo[14].sView = 0;
		}
		else m_stDialogBoxInfo[14].bIsScrollSelected = FALSE;
		if (iGetTopDialogBoxIndex() == 14 && msZ != 0)
		{
			if (iTotalLines > BANK_ITEMS_PAGE) m_stDialogBoxInfo[14].sView = m_stDialogBoxInfo[14].sView - msZ / 30;
			else {//
				if (msZ > 0) m_stDialogBoxInfo[14].sView--;
				if (msZ < 0) m_stDialogBoxInfo[14].sView++;
			}
			m_DInput.m_sZ = 0;
		}
		if (iTotalLines > m_stDialogBoxInfo[14].sV1 && m_stDialogBoxInfo[14].sView > iTotalLines - m_stDialogBoxInfo[14].sV1) m_stDialogBoxInfo[14].sView = iTotalLines - m_stDialogBoxInfo[14].sV1;
		if (iTotalLines <= m_stDialogBoxInfo[14].sV1) m_stDialogBoxInfo[14].sView = 0;
		if (m_stDialogBoxInfo[14].sView < 0) m_stDialogBoxInfo[14].sView = 0;
		if (bFlag == FALSE)
		{
			PutAlignedString(sX, sX + szX, sY + 45, DRAW_DIALOGBOX_BANK3,255,255,255);
			PutAlignedString(sX, sX + szX, sY + 60, DRAW_DIALOGBOX_BANK4, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 75, DRAW_DIALOGBOX_BANK5, 255, 255, 255);
		}
	}
	switch (m_stDialogBoxInfo[14].cMode)
	{
		case -1:
			PutString(sX + 30 + 15, sY + 70, DRAW_DIALOGBOX_BANK1, RGB(255,255,255));//"
			PutString(sX + 30 + 15, sY + 85, DRAW_DIALOGBOX_BANK2, RGB(255, 255, 255));//"
			break;

		case 0:
			//Wh Hoja "1" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 30, sY + 295, 20, dwTime);
			break;
		case 1:
			//Wh Hoja "2" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 43, sY + 295, 21, dwTime);
			break;
		case 2:
			//Wh Hoja "3" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 61, sY + 295, 22, dwTime);
			break;
		case 3:
			//Wh Hoja "4" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 86, sY + 295, 23, dwTime);
			break;
		case 4:
			//Wh Hoja "5" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 106, sY + 295, 24, dwTime);
			break;
		case 5:
			//Wh Hoja "6" - ZeroEoyPnk			
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 121, sY + 295, 25, dwTime);
			break;
		case 6:
			//Wh Hoja "7" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 142, sY + 295, 26, dwTime);
			break;
		case 7:
			//Wh Hoja "8" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 169, sY + 295, 27, dwTime);
			break;
		case 8:
			//Wh Hoja "9" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 202, sY + 295, 28, dwTime);
			break;
		case 9:
			//Wh Hoja "10" - ZeroEoyPnk
			m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 222, sY + 295, 29, dwTime);
			break;
	}
}

void CGame::DrawDialogBox_FeedBackCard(short msX, short msY)
{}

void CGame::DrawDialogBox_Character(short msX, short msY)
{
	short sX, sY, sSprH, sFrame;
	int i, iR, iG, iB, iSkirtDraw = 0;
	char cTxt2[120], cEquipPoiStatus[DEF_MAXITEMEQUIPPOS];
	char  cItemColor, cCollison;

	sX = m_stDialogBoxInfo[1].sX;
	sY = m_stDialogBoxInfo[1].sY;
	short sizex = m_stDialogBoxInfo[1].sSizeX;
	DrawShadowDialog2(sX, sY, 1);
	PutCenterString_SpriteFont(sX, sX + sizex, sY + 3, "Character", 255, 255, 255);

	m_DDraw.DrawDialogShadowBox(sX + 20 + 5, sY + 90 + 20, sX + 50 - 5, sY + 145 - 15); //neck ok
	m_DDraw.DrawDialogShadowBox(sX + 22, sY + 183, sX + 42, sY + 203); //ring ok
	m_DDraw.DrawDialogShadowBox(sX + 92 - 5, sY + 170, sX + 110, sY + 192 + 2); //angel ok

	ZeroMemory(G_cTxt, sizeof(G_cTxt));
	//DecriptString(m_cPlayerName);
	strcpy(G_cTxt, m_cPlayerName);
	//EncriptString(m_cPlayerName);

	if (DecriptInt(m_iPKCount) > 0) {
		strcat(G_cTxt, " : ");
		ZeroMemory(cTxt2, sizeof(cTxt2));
		wsprintf(cTxt2, DRAW_DIALOGBOX_CHARACTER1, DecriptInt(m_iPKCount));
		strcat(G_cTxt, cTxt2);
	}

	PutAlignedString(sX + 16, sX + 254, sY + 38, G_cTxt, 255, 255, 255); //  45,20,20  175 P utAlignedString(sX +16, sX +254, sY+38, G_cTxt, 175,175,175)
	ZeroMemory(G_cTxt, sizeof(G_cTxt));

	if ((msX >= sX + 103) && (msX <= sX + 103 + 11) && (msY >= sY + 108) && (msY <= sY + 108 + 11))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 109, sY + 113, 17, FALSE, m_bDialogTrans);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 109, sY + 113, 19, FALSE, m_bDialogTrans);

	if ((DecriptBool(m_bCitizen) == FALSE) && (!Assasain))
	{
		strcpy(G_cTxt, DRAW_DIALOGBOX_CHARACTER7); // "Traveller"
	}
	else
	{
		if (!Assasain)
		{
			if (DecriptBool(m_bHunter))
			{
				if (DecriptBool(m_bAresden))
					strcat(G_cTxt, DEF_MSG_ARECIVIL); //
				else strcat(G_cTxt, DEF_MSG_ELVCIVIL); // "Elvine Civilian"
			}
			else
			{
				if (DecriptBool(m_bAresden))
					strcat(G_cTxt, DEF_MSG_ARESOLDIER); //
				else strcat(G_cTxt, DEF_MSG_ELVSOLDIER); //
			}
		}
		else
			strcat(G_cTxt, DEF_MSG_PK); //

		PutAlignedString(sX, sX + 275, sY + 50, G_cTxt, 255, 255, 255);//  45,25,25  175
		ZeroMemory(G_cTxt, sizeof(G_cTxt));

		if (DecriptInt(m_iGuildRank) >= 0)
		{
		//	DecriptString(m_cGuildName);
			strcat(G_cTxt, m_cGuildName);
		//	EncriptString(m_cGuildName);
			if (DecriptInt(m_iGuildRank) == 0) strcat(G_cTxt, DEF_MSG_GUILDMASTER1);
			else strcat(G_cTxt, DEF_MSG_GUILDSMAN1); // " Guildsman)"
		}
		PutAlignedString(sX, sX + 275, sY + 62, G_cTxt, 255, 255, 255); //  45,25,25
		ZeroMemory(G_cTxt, sizeof(G_cTxt));
	}

	int iTemp;
	// Level
	//wsprintf(G_cTxt, "%d", DecriptInt(m_iLevel));
	wsprintf(G_cTxt, "%d (+%d)", m_iLevel, m_iRebirthLevel);
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 107, "Level", 250, 250, 250);
	PutAlignedString(sX + 180, sX + 250, sY + 107, G_cTxt, 255, 200, 0);
	

	// Exp
	wsprintf(G_cTxt, "%d", m_iExp);
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 126, "Exp", 250, 250, 250);
	PutAlignedString(sX + 180, sX + 250, sY + 126, G_cTxt, 250, 250, 250);

	// Next.Exp
	wsprintf(G_cTxt, "%d", iGetLevelExp(DecriptInt(m_iLevel) + 1));
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 143, "Next Exp", 250, 250, 250);
	PutAlignedString(sX + 180, sX + 250, sY + 143, G_cTxt,250, 250, 250);

	// Hp
	iTemp = DecriptInt(m_iHP);
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 166, "Health", 250, 250, 250);
	wsprintf(G_cTxt, "%d/%d", iTemp, m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) / 2);
	PutAlignedString(sX + 180, sX + 250, sY + 166, G_cTxt,255, 0, 0);//45 25 25 

	// Mp
	iTemp = DecriptInt(m_iMP);
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 183, "Mana", 250, 250, 250);
	wsprintf(G_cTxt, "%d/%d", iTemp, (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) * 2 + DecriptInt(m_iLevel) * 2 + (m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) / 2);
	PutAlignedString(sX + 180, sX + 250, sY + 183, G_cTxt,0, 0, 255);

	// Sp
	iTemp = DecriptInt(m_iSP);
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 201, "Stamina", 250, 250, 250);
	wsprintf(G_cTxt, "%d/%d", iTemp, DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) * 2);
	PutAlignedString(sX + 180, sX + 250, sY + 201, G_cTxt,0, 255, 0);

	// Max.Load
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 223, "Max Load", 250, 250, 250);
	wsprintf(G_cTxt, "%d/%d", (_iCalcTotalWeight() / 100), ((m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) * 5 + DecriptInt(m_iLevel) * 5));
	PutAlignedString(sX + 180, sX + 250, sY + 223, G_cTxt,250, 250, 250);

	// Enemy Kills
	//Lalo Desencriptar
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 241, "Eks", 250, 250, 250);
	wsprintf(G_cTxt, "%d", m_iEnemyKillCount);
	PutAlignedString(sX + 180, sX + 250, sY + 241, G_cTxt,250, 250, 250);

	//New - ZeroEoyPnk
	PutAlignedString(sX + 180 - 140, sX + 250, sY + 259, "Contrib", 250, 250, 250);
	wsprintf(G_cTxt, "%d", m_iContribution);
	PutAlignedString(sX + 180, sX + 250, sY + 259, G_cTxt,250, 250, 250);


	int rem = 30;
	PutAlignedString(sX + 40 - rem, sX + 71 - rem, sY + 287, "Str", 250, 250, 250);
	// Str
	if (DecriptInt(m_iAngelicStr) == 0)
	{
		wsprintf(G_cTxt, "%d", m_iStr + m_sRankAddStr);
		PutAlignedString(sX + 40, sX + 71, sY + 287, G_cTxt, 0, 255, 0);
	}
	else
	{
		wsprintf(G_cTxt, "%d", m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr));
		PutAlignedString(sX + 40, sX + 71, sY + 287, G_cTxt, 0, 255, 0);
	}


	PutAlignedString(sX + 159 - rem, sX + 189 - rem, sY + 287, "Vit", 250, 250, 250);
	// Vit
	wsprintf(G_cTxt, "%d", m_iVit);
	PutAlignedString(sX + 159, sX + 189, sY + 287, G_cTxt, 0, 255, 0);


	PutAlignedString(sX + 40 - rem, sX + 71 - rem, sY + 307, "Dex", 250, 250, 250);
	// Dex
	if (DecriptInt(m_iAngelicDex) == 0)
	{
		wsprintf(G_cTxt, "%d", m_iDex + m_sRankAddDex);
		PutAlignedString(sX + 40, sX + 71, sY + 307, G_cTxt, 0, 255, 0);
	}
	else
	{
		wsprintf(G_cTxt, "%d", m_iDex + m_sRankAddDex + DecriptInt(m_iAngelicDex));
		PutAlignedString(sX + 40, sX + 71, sY + 307, G_cTxt, 0, 255, 0);
	}

	PutAlignedString(sX + 99 - rem, sX + 129 - rem, sY + 287, "Int", 250, 250, 250);
	// Int
	if (DecriptInt(m_iAngelicInt) == 0)
	{
		wsprintf(G_cTxt, "%d", m_iInt + m_sRankAddInt);
		PutAlignedString(sX + 99, sX + 129, sY + 287, G_cTxt, 0, 255, 0);
	}
	else
	{
		wsprintf(G_cTxt, "%d", m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt));
		PutAlignedString(sX + 99, sX + 129, sY + 287, G_cTxt, 0, 255, 0);
	}



	PutAlignedString(sX + 99 - rem, sX + 129 - rem, sY + 307, "Mag", 250, 250, 250);
	// Mag
	if (DecriptInt(m_iAngelicMag) == 0)
	{
		wsprintf(G_cTxt, "%d", m_iMag + m_sRankAddMag);
		PutAlignedString(sX + 99, sX + 129, sY + 307, G_cTxt, 0, 255, 0);
	}
	else
	{
		wsprintf(G_cTxt, "%d", m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag));
		PutAlignedString(sX + 99, sX + 129, sY + 307, G_cTxt, 0, 255, 0);
	}


	PutAlignedString(sX + 159 - rem, sX + 189 - rem, sY + 307, "Chr", 250, 250, 250);
	// Chr
	wsprintf(G_cTxt, "%d", m_iCharisma);
	PutAlignedString(sX + 159, sX + 189, sY + 307, G_cTxt, 0, 255, 0);

	//New - ZeroEoyPnk
	//Majestics points
	wsprintf(G_cTxt, "%d", DecriptInt(m_iGizonItemUpgradeLeft));
	PutAlignedString(sX + 221 - rem, sX + 251 - rem, sY + 287, "Maj", 250, 250, 250);
	PutAlignedString(sX + 221, sX + 251, sY + 287, G_cTxt, 0, 255, 0);


	PutAlignedString(sX + 221 - rem, sX + 251 - rem, sY + 307, "Rep", 250, 250, 250);
	//Reputacion Point
	wsprintf(G_cTxt, "%d", DecriptInt(m_iReputation));
	PutAlignedString(sX + 221, sX + 251, sY + 307, G_cTxt, 0, 255, 0);

	for (i = 0; i < DEF_MAXITEMEQUIPPOS; i++)
		cEquipPoiStatus[i] = -1;

	for (i = 0; i < DEF_MAXITEMS; i++)
	{
		if ((m_pItemList[i] != NULL) && (m_bIsItemEquipped[i] == TRUE))	cEquipPoiStatus[m_pItemList[i]->m_cEquipPos] = i;
	}
	if ((m_sPlayerType >= 1) && (m_sPlayerType <= 3))
	{
		cCollison = -1;
		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 0]->PutSpriteFast(sX + 171, sY + 290, m_sPlayerType - 1, m_dwCurTime);
		if (cEquipPoiStatus[DEF_EQUIPPOS_HEAD] == -1)
		{
			_GetHairColorRGB(((m_sPlayerAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
			m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 18]->PutSpriteRGB(sX + 171, sY + 290, (m_sPlayerAppr1 & 0x0F00) >> 8, iR, iG, iB, m_dwCurTime);
		}

		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 19]->PutSpriteFast(sX + 171, sY + 290, (m_sPlayerAppr1 & 0x000F), m_dwCurTime);

		if (cEquipPoiStatus[DEF_EQUIPPOS_BACK] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_BACK]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 41, sY + 137, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 41, sY + 137, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 41, sY + 137, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 41, sY + 137, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 41, sY + 137, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_BACK;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_PANTS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_PANTS;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_ARMS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_ARMS;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_BOOTS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_BOOTS;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_BODY] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_BODY]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_BODY;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_FULLBODY;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_LHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 90, sY + 170, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 90, sY + 170, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 90, sY + 170, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 90, sY + 170, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 90, sY + 170, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_LHAND;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_RHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 57, sY + 186, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 57, sY + 186, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 57, sY + 186, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 57, sY + 186, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 57, sY + 186, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_RHAND;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 57, sY + 186, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 57, sY + 186, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 57, sY + 186, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 57, sY + 186, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 57, sY + 186, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_TWOHAND;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_NECK] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_NECK]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 35, sY + 120, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 35, sY + 120, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 35, sY + 120, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 35, sY + 120, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 35, sY + 120, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_NECK;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_RFINGER] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 32, sY + 193, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 32, sY + 193, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 32, sY + 193, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 32, sY + 193, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 32, sY + 193, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_RFINGER;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_LFINGER] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 90, sY + 175, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 90, sY + 175, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 90, sY + 175, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 90, sY + 175, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 90, sY + 175, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_LFINGER;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_HEAD] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteFast(sX + 72, sY + 135, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutSpriteRGB(sX + 72, sY + 135, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite2(sX + 72, sY + 135, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSpriteRGB(sX + 72, sY + 135, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->_bCheckCollison(sX + 72, sY + 135, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_HEAD;
		}
		if (cCollison != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[cCollison]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[cCollison]]->m_sSpriteFrame;
			if (cCollison == DEF_EQUIPPOS_HEAD)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 72, sY + 135, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_RFINGER)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 32, sY + 193, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_LFINGER)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 90, sY + 175, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_NECK)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 35, sY + 120, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_TWOHAND)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 57, sY + 186, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_RHAND)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 57, sY + 186, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_LHAND)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 90, sY + 170, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_BODY)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_FULLBODY)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_BOOTS)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_ARMS)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_PANTS)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_BACK)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH]->PutTransSprite(sX + 41, sY + 137, sFrame, m_dwCurTime);
		}
	}
	else if ((m_sPlayerType >= 4) && (m_sPlayerType <= 6))
	{
		cCollison = -1;
		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 40]->PutSpriteFast(sX + 171, sY + 290, m_sPlayerType - 4, m_dwCurTime);

		if (cEquipPoiStatus[DEF_EQUIPPOS_HEAD] == -1)
		{
			_GetHairColorRGB(((m_sPlayerAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
			m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 18 + 40]->PutSpriteRGB(sX + 171, sY + 290, (m_sPlayerAppr1 & 0x0F00) >> 8, iR, iG, iB, m_dwCurTime);
		}

		m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 19 + 40]->PutSpriteFast(sX + 171, sY + 290, (m_sPlayerAppr1 & 0x000F), m_dwCurTime);

		if ((cEquipPoiStatus[DEF_EQUIPPOS_PANTS] != -1))
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSpriteFrame;
			if ((sSprH == 12) && (sFrame == 0)) iSkirtDraw = 1;
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_BACK] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BACK]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_BACK]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 45, sY + 143, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 45, sY + 143, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 45, sY + 143, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 45, sY + 143, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 45, sY + 143, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_BACK;
		}

		if ((cEquipPoiStatus[DEF_EQUIPPOS_BOOTS] != -1) && (iSkirtDraw == 1))
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_BOOTS;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_PANTS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_PANTS]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_PANTS;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_ARMS] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_ARMS]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_ARMS;
		}

		if ((cEquipPoiStatus[DEF_EQUIPPOS_BOOTS] != -1) && (iSkirtDraw == 0))
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_BOOTS]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_BOOTS;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_BODY] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_BODY]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_BODY]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_BODY;
		}
		if (cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_FULLBODY]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 171, sY + 290, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 171, sY + 290, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 171, sY + 290, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_FULLBODY;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_LHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_LHAND]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 84, sY + 175, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 84, sY + 175, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 84, sY + 175, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 84, sY + 175, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 84, sY + 175, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_LHAND;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_RHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]]->m_cItemColor;
			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_RHAND]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 60, sY + 191, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 60, sY + 191, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 60, sY + 191, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 60, sY + 191, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 60, sY + 191, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_RHAND;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]]->m_cItemColor;
			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_TWOHAND]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 60, sY + 191, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 60, sY + 191, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 60, sY + 191, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 60, sY + 191, sFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 60, sY + 191, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_TWOHAND;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_NECK] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_NECK]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_NECK]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 35, sY + 120, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 35, sY + 120, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 35, sY + 120, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 35, sY + 120, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 35, sY + 120, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_NECK;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_RFINGER] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_RFINGER]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 32, sY + 193, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 32, sY + 193, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 32, sY + 193, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 32, sY + 193, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 32, sY + 193, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_RFINGER;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_LFINGER] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_LFINGER]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 90, sY + 175, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 90, sY + 175, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 90, sY + 175, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 90, sY + 175, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 90, sY + 175, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_LFINGER;
		}

		if (cEquipPoiStatus[DEF_EQUIPPOS_HEAD] != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_sSpriteFrame;
			cItemColor = m_pItemList[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]]->m_cItemColor;

			if (m_bIsItemDisabled[cEquipPoiStatus[DEF_EQUIPPOS_HEAD]] == FALSE)
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteFast(sX + 72, sY + 139, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutSpriteRGB(sX + 72, sY + 139, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			else
			{
				if (cItemColor == 0)
					m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite2(sX + 72, sY + 139, sFrame, m_dwCurTime);
				else m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSpriteRGB(sX + 72, sY + 139, sFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], m_dwCurTime);
			}
			if (m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->_bCheckCollison(sX + 72, sY + 139, sFrame, msX, msY))
				cCollison = DEF_EQUIPPOS_HEAD;
		}
		if (cCollison != -1)
		{
			sSprH = m_pItemList[cEquipPoiStatus[cCollison]]->m_sSprite;
			sFrame = m_pItemList[cEquipPoiStatus[cCollison]]->m_sSpriteFrame;
			if (cCollison == DEF_EQUIPPOS_HEAD)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 72, sY + 139, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_RFINGER)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 32, sY + 193, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_LFINGER)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 90, sY + 175, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_NECK)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 35, sY + 120, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_TWOHAND)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 60, sY + 191, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_RHAND)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 60, sY + 191, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_LHAND)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 84, sY + 175, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_BODY)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_FULLBODY)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_BOOTS)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_ARMS)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_PANTS)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 171, sY + 290, sFrame, m_dwCurTime);
			else if (cCollison == DEF_EQUIPPOS_BACK)
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + sSprH + 40]->PutTransSprite(sX + 45, sY + 143, sFrame, m_dwCurTime);
		}
	}

	// v2.05
	if ((msX >= sX + 15) && (msX <= sX + 15 + DEF_BTNSZX) && (msY >= sY + 340) && (msY <= sY + 340 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 15, sY + 340, 5, FALSE, m_bDialogTrans);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 15, sY + 340, 4, FALSE, m_bDialogTrans);

	if ((msX >= sX + 98) && (msX <= sX + 98 + DEF_BTNSZX) && (msY >= sY + 340) && (msY <= sY + 340 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 98, sY + 340, 45, FALSE, m_bDialogTrans);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 98, sY + 340, 44, FALSE, m_bDialogTrans);

	if ((msX >= sX + 180) && (msX <= sX + 180 + DEF_BTNSZX) && (msY >= sY + 340) && (msY <= sY + 340 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 180, sY + 340, 11, FALSE, m_bDialogTrans);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 180, sY + 340, 10, FALSE, m_bDialogTrans);
}

// 3.51 Level Up Dialog - Diuuude
// 3.51 Level Up Dialog - Diuuude
void CGame::DrawDialogBox_LevelUpSetting(short msX, short msY)
{
	short sX, sY, szX;
	DWORD dwTime = m_dwCurTime;
	char cTxt[120];
	unsigned char iStats;
	sX = m_stDialogBoxInfo[12].sX;
	sY = m_stDialogBoxInfo[12].sY;
	szX = m_stDialogBoxInfo[12].sSizeX;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 2);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, sX + 16, sY + 100, 4);

	PutAlignedString(sX, sX + szX, sY + 50, DRAW_DIALOGBOX_LEVELUP_SETTING1);
	PutAlignedString(sX, sX + szX, sY + 65, DRAW_DIALOGBOX_LEVELUP_SETTING2);

	// Points Left - Display in green if > 0
	PutString(sX + 20, sY + 85, DRAW_DIALOGBOX_LEVELUP_SETTING3, RGB(0, 0, 0));
	wsprintf(cTxt, "%d", DecriptInt(m_iLU_Point));
	if (DecriptInt(m_iLU_Point) > 0)
	{
		PutString(sX + 80, sY + 102, cTxt, RGB(0, 0, 0));
	}
	else
	{
		PutString(sX + 80, sY + 102, cTxt, RGB(0, 0, 0));
	}
	// Strength
	PutString(sX + 24, sY + 125, DRAW_DIALOGBOX_LEVELUP_SETTING4, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iStr);
	PutString(sX + 109, sY + 125, cTxt, RGB(25, 35, 25));
	iStats = m_iStr + DecriptInt(m_cLU_Str);
	wsprintf(cTxt, "%d", iStats);
	if (iStats != m_iStr)
	{
		PutString(sX + 162, sY + 125, cTxt, RGB(255, 0, 0));
	}
	else
	{
		PutString(sX + 162, sY + 125, cTxt, RGB(25, 35, 25));
	}
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 127) && (msY <= sY + 133) && (m_iStr < 200))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 195, sY + 127, 5, dwTime);
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 127) && (msY <= sY + 133) && (DecriptInt(m_cLU_Str) > 0))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 127, 6, dwTime);

	// Vitality
	PutString(sX + 24, sY + 144, DRAW_DIALOGBOX_LEVELUP_SETTING5, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iVit);
	PutString(sX + 109, sY + 144, cTxt, RGB(25, 35, 25));
	iStats = m_iVit + DecriptInt(m_cLU_Vit);
	wsprintf(cTxt, "%d", iStats);
	if (iStats != m_iVit)
	{
		PutString(sX + 162, sY + 144, cTxt, RGB(255, 0, 0));
	}
	else
	{
		PutString(sX + 162, sY + 144, cTxt, RGB(25, 35, 25));
	}
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 146) && (msY <= sY + 152) && (m_iVit < 200))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 195, sY + 146, 5, dwTime);
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 146) && (msY <= sY + 152) && (DecriptInt(m_cLU_Vit) > 0))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 146, 6, dwTime);

	// Dexterity
	PutString(sX + 24, sY + 163, DRAW_DIALOGBOX_LEVELUP_SETTING6, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iDex);
	PutString(sX + 109, sY + 163, cTxt, RGB(25, 35, 25));
	iStats = m_iDex + DecriptInt(m_cLU_Dex);
	wsprintf(cTxt, "%d", iStats);
	if (iStats != m_iDex)
	{
		PutString(sX + 162, sY + 163, cTxt, RGB(255, 0, 0));
	}
	else
	{
		PutString(sX + 162, sY + 163, cTxt, RGB(25, 35, 25));
	}
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 165) && (msY <= sY + 171) && (m_iDex < 200))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 195, sY + 165, 5, dwTime);
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 165) && (msY <= sY + 171) && (DecriptInt(m_cLU_Dex) > 0))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 165, 6, dwTime);

	// Intelligence
	PutString(sX + 24, sY + 182, DRAW_DIALOGBOX_LEVELUP_SETTING7, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iInt);
	PutString(sX + 109, sY + 182, cTxt, RGB(25, 35, 25));
	iStats = m_iInt + DecriptInt(m_cLU_Int);
	wsprintf(cTxt, "%d", iStats);
	if (iStats != m_iInt)
	{
		PutString(sX + 162, sY + 182, cTxt, RGB(255, 0, 0));
	}
	else
	{
		PutString(sX + 162, sY + 182, cTxt, RGB(25, 35, 25));
	}
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 184) && (msY <= sY + 190) && (m_iInt < 200))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 195, sY + 184, 5, dwTime);
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 184) && (msY <= sY + 190) && (DecriptInt(m_cLU_Int) > 0))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 184, 6, dwTime);

	// Magic
	PutString(sX + 24, sY + 201, DRAW_DIALOGBOX_LEVELUP_SETTING8, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iMag);
	PutString(sX + 109, sY + 201, cTxt, RGB(25, 35, 25));
	iStats = m_iMag + DecriptInt(m_cLU_Mag);
	wsprintf(cTxt, "%d", iStats);
	if (iStats != m_iMag)
	{
		PutString(sX + 162, sY + 201, cTxt, RGB(255, 0, 0));
	}
	else
	{
		PutString(sX + 162, sY + 201, cTxt, RGB(25, 35, 25));
	}
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 203) && (msY <= sY + 209) && (m_iMag < 200))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 195, sY + 203, 5, dwTime);
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 203) && (msY <= sY + 209) && (DecriptInt(m_cLU_Mag) > 0))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 203, 6, dwTime);

	// Charisma
	PutString(sX + 24, sY + 220, DRAW_DIALOGBOX_LEVELUP_SETTING9, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iCharisma);
	PutString(sX + 109, sY + 220, cTxt, RGB(25, 35, 25));
	iStats = m_iCharisma + DecriptInt(m_cLU_Char);
	wsprintf(cTxt, "%d", iStats);
	if (iStats != m_iCharisma)
	{
		PutString(sX + 162, sY + 220, cTxt, RGB(255, 0, 0));
	}
	else
	{
		PutString(sX + 162, sY + 220, cTxt, RGB(25, 35, 25));
	}
	if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 222) && (msY <= sY + 228) && (m_iCharisma < 200))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 195, sY + 222, 5, dwTime);
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 222) && (msY <= sY + 228) && (DecriptInt(m_cLU_Char) > 0))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 222, 6, dwTime);

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
	if ((DecriptInt(m_cLU_Str) == 0) && (DecriptInt(m_cLU_Vit) == 0) && (DecriptInt(m_cLU_Dex) == 0) && (DecriptInt(m_cLU_Int) == 0) && (DecriptInt(m_cLU_Mag) == 0) && (DecriptInt(m_cLU_Char) == 0))
	{
		if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
		{
			if (DecriptInt(m_iLU_Point) <= 0) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 21);
		}
		else
		{
			if (DecriptInt(m_iLU_Point) <= 0) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 20);
		}
	}
}

void CGame::DrawDialogBox_CityHallMenu(short msX, short msY)
{
	short sX, sY, szX;
	char cTxt[120];
	int i, pos;

	sX = m_stDialogBoxInfo[13].sX;
	sY = m_stDialogBoxInfo[13].sY;
	szX = m_stDialogBoxInfo[13].sSizeX;

	DrawShadowDialog2(sX, sY, 13);
	PutCenterString_SpriteFont(sX, sX + szX, sY + 3, "CityHall Menu", 255, 255, 255);

	switch (m_stDialogBoxInfo[13].cMode) {
		case 0:
			// citizenship req
			if (DecriptBool(m_bCitizen) == FALSE)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 70) && (msY < sY + 95))
					PutAlignedString(sX, sX + szX, sY + 70, DRAW_DIALOGBOX_CITYHALL_MENU1, 255, 255, 255);	//"
				else PutAlignedString(sX, sX + szX, sY + 70, DRAW_DIALOGBOX_CITYHALL_MENU1, 255, 200, 0);		//"
			}
			else    PutAlignedString(sX, sX + szX, sY + 70, DRAW_DIALOGBOX_CITYHALL_MENU1, 255, 255, 255);			//"

			if (DecriptInt(m_iRewardGold) > 0)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 95) && (msY < sY + 120))
					PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_CITYHALL_MENU4, 255, 255, 255);	//"
				else PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_CITYHALL_MENU4, 255, 200, 0);		//"
			}
			else    PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_CITYHALL_MENU4, 255, 255, 255);			//"

		   // 3.51 Cityhall Menu - Request Hero's Items - Diuuude
			if ((m_iEnemyKillCount >= 100) && (m_iContribution >= 10))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 120) && (msY < sY + 135))
					PutAlignedString(sX, sX + szX, sY + 120, DRAW_DIALOGBOX_CITYHALL_MENU8, 255, 255, 255);
				else PutAlignedString(sX, sX + szX, sY + 120, DRAW_DIALOGBOX_CITYHALL_MENU8, 255, 200, 0);
			}
			else    PutAlignedString(sX, sX + szX, sY + 120, DRAW_DIALOGBOX_CITYHALL_MENU8, 255, 255, 255);

			if (DecriptInt(m_iLevel) > 50)//agregado
			{
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 240) && (msY < sY + 257))
				PutAlignedString(sX, sX + szX, sY + 240, "Trade Items", 255, 255, 255);
			else PutAlignedString(sX, sX + szX, sY + 240, "Trade Items", 255, 200, 0);
			}
			else PutAlignedString(sX, sX + szX, sY + 240, "Trade Items", 255, 255, 255);//agregado

			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 145) && (msY < sY + 170))
				PutAlignedString(sX, sX + szX, sY + 145, "Quest List", 255, 255, 255);//"
			else PutAlignedString(sX, sX + szX, sY + 145, "Quest List", 255, 200, 0);//"

			// change playmode
			if ((m_bIsCrusadeMode == FALSE) && DecriptBool(m_bCitizen) && (DecriptInt(m_iPKCount) == 0))
			{
				if (DecriptBool(m_bHunter) == TRUE)
				{
					if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 170) && (msY < sY + 195))
						PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_CITYHALL_MENU56, 255, 255, 255);
					else
						PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_CITYHALL_MENU56, 255, 200, 0);
				}
				else if (DecriptInt(m_iLevel) < 100)
				{
					if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 170) && (msY < sY + 195))
						PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_CITYHALL_MENU56, 255, 255, 255);
					else
						PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_CITYHALL_MENU56, 255, 200, 0);
				}
				else // Disable...
					PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_CITYHALL_MENU56, 255, 255, 255);
			}
			else PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_CITYHALL_MENU56, 255, 255, 255);

			// Teleport menu
			if ((m_bIsCrusadeMode == FALSE) && DecriptBool(m_bCitizen) && (DecriptInt(m_iPKCount) == 0))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 195) && (msY < sY + 220))
					PutAlignedString(sX, sX + szX, sY + 195, DRAW_DIALOGBOX_CITYHALL_MENU69, 255, 255, 255);//"Teleporting to dungeon level 2."
				else PutAlignedString(sX, sX + szX, sY + 195, DRAW_DIALOGBOX_CITYHALL_MENU69, 255, 200, 0);
			}
			else    PutAlignedString(sX, sX + szX, sY + 195, DRAW_DIALOGBOX_CITYHALL_MENU69, 255, 255, 255);

			//Change crusade role
			if (m_bIsCrusadeMode && DecriptBool(m_bCitizen))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 220) && (msY < sY + 245))
					PutAlignedString(sX, sX + szX, sY + 220, DRAW_DIALOGBOX_CITYHALL_MENU17B, 255, 255, 255);//"Change the crusade assignment."
				else PutAlignedString(sX, sX + szX, sY + 220, DRAW_DIALOGBOX_CITYHALL_MENU17B, 255, 200, 0);//"
			}
			else    PutAlignedString(sX, sX + szX, sY + 220, DRAW_DIALOGBOX_CITYHALL_MENU17B, 255, 255, 255);//"

			if (DecriptInt(m_iLevel) > 179)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 260) && (msY < sY + 270))
					PutAlignedString(sX, sX + szX, sY + 260, DRAW_DIALOGBOX_CITYHALL_MENUU78, 255, 255, 255);//"Take DK items."
				else PutAlignedString(sX, sX + szX, sY + 260, DRAW_DIALOGBOX_CITYHALL_MENUU78, 255, 200, 0);
			}
			else    PutAlignedString(sX, sX + szX, sY + 260, DRAW_DIALOGBOX_CITYHALL_MENUU78, 255, 255, 255);

			PutAlignedString(sX, sX + szX, sY + 300, DRAW_DIALOGBOX_CITYHALL_MENU17, 255, 255, 255);//"Select an Item you want."
			break;

		case 1: // become citizen warning
			PutAlignedString(sX, sX + szX, sY + 80, DRAW_DIALOGBOX_CITYHALL_MENU18, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_CITYHALL_MENU19, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_CITYHALL_MENU20, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU21, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_CITYHALL_MENU22, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_CITYHALL_MENU23, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_CITYHALL_MENU24, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 200, DRAW_DIALOGBOX_CITYHALL_MENU25, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 215, DRAW_DIALOGBOX_CITYHALL_MENU26, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 230, DRAW_DIALOGBOX_CITYHALL_MENU27, 255, 255, 255);//"

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;

		case 2: // Offering Citizenship.
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_CITYHALL_MENU28, 255, 255, 255);//"
			break;

		case 3: //Congratulations!! You acquired Citizenship"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_CITYHALL_MENU29, 255, 255, 255);//"

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 4: //Failed on acquiring citizenship!"//
			PutAlignedString(sX, sX + szX, sY + 80, DRAW_DIALOGBOX_CITYHALL_MENU30, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENU31, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 115, DRAW_DIALOGBOX_CITYHALL_MENU32, 255, 255, 255);//"

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 5: //The prize gold for your"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU33, 255, 255, 255);//"
			wsprintf(cTxt, DRAW_DIALOGBOX_CITYHALL_MENU34, DecriptInt(m_iRewardGold));//"
			PutAlignedString(sX, sX + szX, sY + 140, cTxt, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_CITYHALL_MENU35, 255, 255, 255);//"

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;

		case 7:// 3.51 Cityhall Menu - Request Hero's Items - Diuuude
			PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_CITYHALL_MENU44, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 55, DRAW_DIALOGBOX_CITYHALL_MENU45, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 75, DRAW_DIALOGBOX_CITYHALL_MENU46, 255, 255, 255);
			// Hero's Cape (EK 300)
			if (m_iEnemyKillCount >= 300)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 100) && (msY < sY + 115))
					PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENU47, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENU47, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENU47, 255, 255, 255);// Disabled Mode
			// Hero's Helm (EK 150 - Contrib 20)
			if ((m_iEnemyKillCount >= 150) && (m_iContribution >= 20))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 125) && (msY < sY + 140))
					PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU48, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU48, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU48, 255, 255, 255);// Disabled Mode
			// Hero's Cap (EK 100 - Contrib 20)
			if ((m_iEnemyKillCount >= 100) && (m_iContribution >= 20))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 150) && (msY < sY + 165))
					PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENU49, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENU49, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENU49, 255, 255, 255);// Disabled Mode
			// Hero's Armor (EK 300 - Contrib 30)
			if ((m_iEnemyKillCount >= 300) && (m_iContribution >= 30))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 175) && (msY < sY + 190))
					PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENU50, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENU50, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENU50, 255, 255, 255);// Disabled Mode
			// Hero's Robe (EK 200 - Contrib 20)
			if ((m_iEnemyKillCount >= 200) && (m_iContribution >= 20))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 200) && (msY < sY + 215))
					PutAlignedString(sX, sX + szX, sY + 200, DRAW_DIALOGBOX_CITYHALL_MENU51, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 200, DRAW_DIALOGBOX_CITYHALL_MENU51, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 200, DRAW_DIALOGBOX_CITYHALL_MENU51, 255, 255, 255);// Disabled Mode
			// Hero's Hauberk (EK 100 - Contrib 10)
			if ((m_iEnemyKillCount >= 100) && (m_iContribution >= 10))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 225) && (msY < sY + 240))
					PutAlignedString(sX, sX + szX, sY + 225, DRAW_DIALOGBOX_CITYHALL_MENU52, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 225, DRAW_DIALOGBOX_CITYHALL_MENU52, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 225, DRAW_DIALOGBOX_CITYHALL_MENU52, 255, 255, 255);// Disabled Mode
			// Hero's Leggings (EK 150 - Contrib 15)
			if ((m_iEnemyKillCount >= 150) && (m_iContribution >= 15))
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 250) && (msY < sY + 265))
					PutAlignedString(sX, sX + szX, sY + 250, DRAW_DIALOGBOX_CITYHALL_MENU53, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 250, DRAW_DIALOGBOX_CITYHALL_MENU53, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 250, DRAW_DIALOGBOX_CITYHALL_MENU53, 255, 255, 255);// Disabled Mode
			break;

		case 8: // cancel current quest?
			PutString_SprFont2(sX + 70, sY + 41, "Cancel Quest", 255, 200, 0);
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU54, 255, 200, 0);//"
			//PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_CITYHALL_MENU55, 55,25,25);//"

			switch (m_stDialogBoxInfo[13].sV1)
			{
				case 1: PutAlignedString(sX, sX + szX, sY + 140, "Contribution Quest?", 255, 200, 0); break;
				case 2: PutAlignedString(sX, sX + szX, sY + 140, "Item Reward Quest?", 255, 200, 0); break;
				case 3: PutAlignedString(sX, sX + szX, sY + 140, "Stated Reward Quest?", 255, 200, 0);  break;
			}

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;

		case 9: // You are civilian/ combatant now
			if (DecriptBool(m_bHunter)) PutAlignedString(sX, sX + szX, sY + 53, DRAW_DIALOGBOX_CITYHALL_MENU57, 200, 200, 25);//"
			else PutAlignedString(sX, sX + szX, sY + 53, DRAW_DIALOGBOX_CITYHALL_MENU58, 200, 200, 25);//"

			PutAlignedString(sX, sX + szX, sY + 78, DRAW_DIALOGBOX_CITYHALL_MENU59, 255, 255, 255);//"

			PutString(sX + 35, sY + 108, DRAW_DIALOGBOX_CITYHALL_MENU60, RGB(220, 130, 45));//"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU61, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_CITYHALL_MENU62, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_CITYHALL_MENU63, 255, 255, 255);//"
			PutString(sX + 35, sY + 177, DRAW_DIALOGBOX_CITYHALL_MENU64, RGB(220, 130, 45));//"
			PutAlignedString(sX, sX + szX, sY + 194, DRAW_DIALOGBOX_CITYHALL_MENU65, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 209, DRAW_DIALOGBOX_CITYHALL_MENU66, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 224, DRAW_DIALOGBOX_CITYHALL_MENU67, 255, 255, 255);//"

			PutAlignedString(sX, sX + szX, sY + 252, DRAW_DIALOGBOX_CITYHALL_MENU68, 255, 255, 255);//"
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;

		case 10: // TP 2nd screen
			if (DecriptInt(m_iTeleportMapCount) > 0)
			{
				//Reparando warning LaloRamos anulado v11 - Agregado (unsigned int)
				PutString_SprFont2(sX + (szX / 3.5 + 1), sY + 41, DRAW_DIALOGBOX_CITYHALL_MENU69, 0, 0, 0); // "Teleport List"
				PutString_SprFont2(sX + (szX / 3.5), sY + 40, DRAW_DIALOGBOX_CITYHALL_MENU69, 255, 200, 0); // "Teleport List"
			//	PutString_SprFont2(sX + (szX / 3.5 + 1), sY + 41, DRAW_DIALOGBOX_CITYHALL_MENU69, 0, 0, 0); // "Teleport List"
			//	PutString_SprFont2(sX + (szX / 3.5), sY + 40, DRAW_DIALOGBOX_CITYHALL_MENU69, 255, 200, 0); // "Teleport List"

				PutString2(sX + 20, sY + 60, "Normal teleports", 0, 250, 250);
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if ((m_stTeleportList[i].Event == FALSE) && (m_stTeleportList[i].TPEvent == FALSE))
					{
						pos++;
						ZeroMemory(cTxt, sizeof(cTxt));
						GetOfficialMapName(m_stTeleportList[i].mapname, cTxt);
						wsprintf(G_cTxt, DRAW_DIALOGBOX_CITYHALL_MENU77, cTxt, m_stTeleportList[i].iCost);
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 60 + pos * 15) && (msY <= sY + 74 + pos * 15))
							PutAlignedString(sX, sX + szX, sY + 60 + pos * 15, G_cTxt, 255, 255, 255);
						else PutAlignedString(sX, sX + szX, sY + 60 + pos * 15, G_cTxt, 255, 200, 0);
					}
				}

				PutString2(sX + 20, sY + 150, "Event Price Teleports", 0, 250, 250);
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if (m_stTeleportList[i].Event == TRUE)
					{
						pos++;
						ZeroMemory(cTxt, sizeof(cTxt));
						GetOfficialMapName(m_stTeleportList[i].mapname, cTxt);
						wsprintf(G_cTxt, DRAW_DIALOGBOX_CITYHALL_MENU77, cTxt, m_stTeleportList[i].iCost);
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 150 + pos * 15) && (msY <= sY + 164 + pos * 15))
							PutAlignedString(sX, sX + szX, sY + 150 + pos * 15, G_cTxt, 255, 255, 255);
						else PutAlignedString(sX, sX + szX, sY + 150 + pos * 15, G_cTxt, 255, 200, 0);
					}
				}

				PutString2(sX + 20, sY + 240, "Event Teleports", 0, 250, 250);
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if (m_stTeleportList[i].TPEvent == TRUE)
					{
						pos++;
						ZeroMemory(cTxt, sizeof(cTxt));
						GetOfficialMapName(m_stTeleportList[i].mapname, cTxt);
						wsprintf(G_cTxt, DRAW_DIALOGBOX_CITYHALL_MENU99, cTxt);
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 240 + pos * 15) && (msY <= sY + 254 + pos * 15))
							PutAlignedString(sX, sX + szX, sY + 240 + pos * 15, G_cTxt, 255, 255, 255);
						else PutAlignedString(sX, sX + szX, sY + 240 + pos * 15, G_cTxt, 255, 200, 0);
					}
				}
				PutString2(sX + 50, sY + 300, DRAW_DIALOGBOX_CITYHALL_MENU72_1, 255, 255, 255);//"Civilians cannot go some area."
			}
			else if (DecriptInt(m_iTeleportMapCount) == -1)
			{
				PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU73, 255, 255, 255);//"Now it's searching for possible area"
				PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENU74, 255, 255, 255);//"to teleport."
				PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENU75, 255, 255, 255);//"Please wait for a moment."
			}
			else
			{
				PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENU76, 255, 255, 255);//"There is no area that you can teleport."
			}
			break;

		case 11: //drajwer - ask for tooking hero mantle
			PutAlignedString(sX, sX + szX - 1, sY + 125, m_cTakeHeroItemName, 255, 255, 255);
			PutAlignedString(sX + 1, sX + szX, sY + 125, m_cTakeHeroItemName, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 260, DRAW_DIALOGBOX_CITYHALL_MENU46A, 255, 255, 255); // would you like..
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX)
				&& (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX)
				&& (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;

		case 12:
			PutAlignedString(sX, sX + szX, sY + 55, DRAW_DIALOGBOX_CITYHALL_MENU46, 37, 20, 10);
			// Sword / rapier
			if (m_iStr >= 130)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 75) && (msY < sY + 90))
					PutAlignedString(sX, sX + szX, sY + 75, DRAW_DIALOGBOX_CITYHALL_MENUU89, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 75, DRAW_DIALOGBOX_CITYHALL_MENUU89, 255, 200, 0);// Normal Mode
			}
			// Hammer//
			if (m_iStr >= 130)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 100) && (msY < sY + 115))
					PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENUU79, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENUU79, 255, 200, 0);// Normal Mode
			}
			else if (m_iStr >= 39)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 100) && (msY < sY + 115))
					PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENUU80, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENUU80, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 100, DRAW_DIALOGBOX_CITYHALL_MENUU79, 255, 255, 255);// Disabled Mode
			// Wand 
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 125) && (msY < sY + 140))
				PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENUU81, 255, 255, 255);// On mouse over f
			else PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENUU81, 255, 200, 0);// Normal Mode

			// Helm / hat
			if (m_iStr >= 85)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 150) && (msY < sY + 165))
					PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENUU82, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENUU82, 255, 200, 0);// Normal Mode
			}
			else if (m_iMag >= 130)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 150) && (msY < sY + 165))
					PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENUU83, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENUU83, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENUU82, 255, 255, 255);// Disabled Mode
			// Armor/Chain Mail
			if (m_iStr >= 100)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 175) && (msY < sY + 190))
					PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENUU84, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENUU84, 255, 200, 0);// Normal Mode
			}
			else if (m_iStr >= 30)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 175) && (msY < sY + 190))
					PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENUU85, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENUU85, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENUU84, 255, 255, 255);// Disabled Mode
			// Robe
			if (m_iMag >= 100)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 200) && (msY < sY + 215))
					PutAlignedString(sX, sX + szX, sY + 200, DRAW_DIALOGBOX_CITYHALL_MENUU86, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 200, DRAW_DIALOGBOX_CITYHALL_MENUU86, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 200, DRAW_DIALOGBOX_CITYHALL_MENUU86, 255, 255, 255);// Disabled Mode
			// Hauberk
			if (m_iStr >= 15)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 225) && (msY < sY + 240))
					PutAlignedString(sX, sX + szX, sY + 225, DRAW_DIALOGBOX_CITYHALL_MENUU87, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 225, DRAW_DIALOGBOX_CITYHALL_MENUU87, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 225, DRAW_DIALOGBOX_CITYHALL_MENUU87, 255, 255, 255);// Disabled Mode
			// Leggings
			if (m_iStr >= 20)
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 250) && (msY < sY + 265))
					PutAlignedString(sX, sX + szX, sY + 250, DRAW_DIALOGBOX_CITYHALL_MENUU88, 255, 255, 255);// On mouse over Mode
				else PutAlignedString(sX, sX + szX, sY + 250, DRAW_DIALOGBOX_CITYHALL_MENUU88, 255, 200, 0);// Normal Mode
			}
			else PutAlignedString(sX, sX + szX, sY + 250, DRAW_DIALOGBOX_CITYHALL_MENUU88, 255, 255, 255);// Disabled Mode
			break;

		case 13:
			PutString_SprFont2(sX + 70, sY + 41, "Cancel Quest", 255, 200, 0);
			if (m_stQuest[0].sTargetType != 0)
			{
				if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 100) && (msY <= sY + 115))
					PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 255, 255, 255);
				else
					PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 255, 200, 0);
			}
			else PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 25, 25, 25);

			if (m_stQuest[1].sTargetType != 0)
			{
				if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 130) && (msY <= sY + 145))
					PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 255, 255, 255);
				else
					PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 255, 200, 0);
			}
			else PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 25, 25, 25);

			if (m_stQuest[2].sTargetType != 0)
			{
				if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 160) && (msY <= sY + 175))
					PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 255, 255, 255);
				else
					PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 255, 200, 0);
			}
			else PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 25, 25, 25);
			break;
	}
}


BOOL CGame::bInit(HWND hWnd, HINSTANCE hInst, char * pCmdLine)
{

	int iIndex;
	int i;
	class CStrTok * pStrTok;
	char seps[] = "&= ,\t\n";
	char * token;

	for (i = 0; i < DEF_MAXSPRITES; i++) m_pSprite[i] = NULL;

	if (pCmdLine != NULL) {
		ZeroMemory(G_cCmdLine, sizeof(G_cCmdLine));
		ZeroMemory(G_cCmdLineTokenA, sizeof(G_cCmdLineTokenA));
		ZeroMemory(G_cCmdLineTokenB, sizeof(G_cCmdLineTokenB));
		ZeroMemory(G_cCmdLineTokenC, sizeof(G_cCmdLineTokenC));
		ZeroMemory(G_cCmdLineTokenD, sizeof(G_cCmdLineTokenD));
		ZeroMemory(G_cCmdLineTokenE, sizeof(G_cCmdLineTokenE));

		strcpy(G_cCmdLine, pCmdLine);

		iIndex = 0;
		pStrTok = new class CStrTok(pCmdLine, seps);
		token = pStrTok->pGet();
		while (token != NULL) {
			switch (iIndex) {
				case 0:	strcpy(G_cCmdLineTokenA, token); break;
				case 1: strcpy(G_cCmdLineTokenB, token); break;
				case 2: strcpy(G_cCmdLineTokenC, token); break;
				case 3: strcpy(G_cCmdLineTokenD, token); break;
				case 4: strcpy(G_cCmdLineTokenE, token); break;
			}
			token = pStrTok->pGet();
			iIndex++;
		}
		delete pStrTok;
	}

	ZeroMemory(G_cCmdLineTokenA_Lowercase, sizeof(G_cCmdLineTokenA_Lowercase));
	strcpy(G_cCmdLineTokenA_Lowercase, G_cCmdLineTokenA);
	_strlwr(G_cCmdLineTokenA_Lowercase);

	if (memcmp(G_cCmdLineTokenA_Lowercase, "/egparam", 8) == 0) {
		ZeroMemory(G_cCmdLineTokenA, sizeof(G_cCmdLineTokenA));
		memcpy(G_cCmdLineTokenA, "dataq", 5);
	}

	m_hWnd = hWnd;
	m_bCommandAvailable = TRUE;
	m_pCGameMonitor = NULL;
	m_dwTime = G_dwGlobalTime;
	m_bSoundFlag = m_DSound.Create(m_hWnd);
	m_bMusicStat = m_bSoundStat = m_bSoundFlag;
	m_bIsHideLocalCursor = FALSE;
	m_cEnterCheck = m_cTabCheck = m_cLeftArrowCheck = NULL;

	if (bCheckImportantFile() == FALSE) {
		MessageBox(m_hWnd, "File checksum error! Get Update again please!", "ERROR1", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (_bDecodeBuildItemContents() == FALSE) {
		MessageBox(m_hWnd, "File checksum error! Get Update again please!", "ERROR2", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (bReadItemNameConfigFile() == FALSE) {
		MessageBox(m_hWnd, "ItemName.cfg file contains wrong infomation.", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (bInitMagicCfgList() == FALSE) {
		MessageBox(m_hWnd, "MAGICCFG.TXT file contains wrong infomation.", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (bReadQuestCFG("Quest.txt", 1) == FALSE) {
		MessageBox(m_hWnd, "Quest.txt file contains wrong infomation.", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (bReadQuestCFG("ItemQuest.txt", 2) == FALSE) {
		MessageBox(m_hWnd, "ItemQuest.txt file contains wrong infomation.", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (bReadQuestCFG("StatedQuest.txt", 3) == FALSE) {
		MessageBox(m_hWnd, "StatedQuest.txt file contains wrong infomation.", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (bInitSkillCfgList() == FALSE) {
		MessageBox(m_hWnd, "SKILLCFG.TXT file contains wrong infomation.", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (m_DDraw.bInit(m_hWnd) == FALSE) {
		MessageBox(m_hWnd, "This program requires DirectX7.0a!", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (m_DInput.bInit(hWnd, hInst) == FALSE) {
		MessageBox(m_hWnd, "This program requires DirectX7.0a!", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	if (bReadAchivements() == FALSE) {
		MessageBox(m_hWnd, "Achivements.txt file contains wrong infomation.", "ERROR", MB_ICONEXCLAMATION | MB_OK);
		return FALSE;
	}

	m_hPakFile = CreateFile("sprites\\New-Dialog2.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	m_pSprite[DEF_SPRID_INTERFACE_ND_LOADING] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 0, FALSE, FALSE);
	m_pSprite[DEF_SPRID_INTERFACE_ND_MAINMENU] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 1, FALSE, FALSE);
	//m_pSprite[DEF_SPRID_INTERFACE_ND_NEWACCOUNT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 2, FALSE, FALSE);
	//agregado acc
	m_pSprite[DEF_SPRID_INTERFACE_ND_QUIT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 2, FALSE, FALSE);
	CloseHandle(m_hPakFile);

	m_hPakFile = CreateFile("sprites\\New-Dialog2.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	m_pSprite[DEF_SPRID_INTERFACE_ND_LOADING] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 0, FALSE, FALSE);
	m_pSprite[DEF_SPRID_INTERFACE_ND_MAINMENU] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 1, FALSE, FALSE);
	//m_pSprite[DEF_SPRID_INTERFACE_ND_NEWACCOUNT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 2, FALSE, FALSE);
	//agregado acc
	m_pSprite[DEF_SPRID_INTERFACE_ND_QUIT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 2, FALSE, FALSE);
	CloseHandle(m_hPakFile);

	if (c_reso->IsResolution() == C800x600)
	{
		m_hPakFile = CreateFile("sprites\\New-Dialog2.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
		m_pSprite[DEF_SPRID_INTERFACE_ND_LOADING] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 0, FALSE, FALSE);
		m_pSprite[DEF_SPRID_INTERFACE_ND_MAINMENU] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 1, FALSE, FALSE);
		//m_pSprite[DEF_SPRID_INTERFACE_ND_NEWACCOUNT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 2, FALSE, FALSE);
		//agregado acc
		m_pSprite[DEF_SPRID_INTERFACE_ND_QUIT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 2, FALSE, FALSE);
		CloseHandle(m_hPakFile);
	}
	else if (c_reso->IsResolution() == C640x480)
	{
		m_hPakFile = CreateFile("sprites\\New-Dialog.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
		m_pSprite[DEF_SPRID_INTERFACE_ND_LOADING] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog", 0, FALSE, FALSE);
		m_pSprite[DEF_SPRID_INTERFACE_ND_MAINMENU] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog", 1, FALSE, FALSE);
		//m_pSprite[DEF_SPRID_INTERFACE_ND_NEWACCOUNT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog", 2, FALSE, FALSE);
		//agregado acc
		m_pSprite[DEF_SPRID_INTERFACE_ND_QUIT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog2", 2, FALSE, FALSE);
		CloseHandle(m_hPakFile);
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		m_hPakFile = CreateFile("sprites\\New-Dialog3.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
		m_pSprite[DEF_SPRID_INTERFACE_ND_LOADING] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog3", 0, FALSE, FALSE);
		m_pSprite[DEF_SPRID_INTERFACE_ND_MAINMENU] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog3", 1, FALSE, FALSE);
		//m_pSprite[DEF_SPRID_INTERFACE_ND_NEWACCOUNT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog3", 2, FALSE, FALSE);
		//agregado acc
		m_pSprite[DEF_SPRID_INTERFACE_ND_QUIT] = new class CSprite(m_hPakFile, &m_DDraw, "New-Dialog3", 2, FALSE, FALSE);
		CloseHandle(m_hPakFile);
	}

	m_hPakFile = CreateFile("sprites\\hbarg.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	/*m_pSprite[DEF_SPRID_INTERFACE_ND_LOGO] = new class CSprite(m_hPakFile, &m_DDraw, "hbarg", 0, FALSE, FALSE);
	m_pSprite[DEF_SPRID_INTERFACE_ND_LOGO2] = new class CSprite(m_hPakFile, &m_DDraw, "hbarg", 1, FALSE, FALSE);
	m_pSprite[DEF_SPRID_INTERFACE_ND_LOGO3] = new class CSprite(m_hPakFile, &m_DDraw, "hbarg", 2, FALSE, FALSE);*/
	CloseHandle(m_hPakFile);

	m_hPakFile = CreateFile("sprites\\interface2.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE] = new class CSprite(m_hPakFile, &m_DDraw, "interface2", 0, FALSE);
	m_pSprite[DEF_SPRID_INTERFACE_CRAFTING] = new class CSprite(m_hPakFile, &m_DDraw, "interface2", 3, FALSE);
	CloseHandle(m_hPakFile);

	// CLEROTH - LOAD FONTS BEFORE MAIN LOADING
	m_hPakFile = CreateFile("sprites\\interface2.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	if (m_hPakFile != INVALID_HANDLE_VALUE) {
		m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS2] = new class CSprite(m_hPakFile, &m_DDraw, "interface2", 1, FALSE);
		m_pSprite[DEF_SPRID_INTERFACE_F1HELPWINDOWS] = new class CSprite(m_hPakFile, &m_DDraw, "interface2", 2, FALSE);
		CloseHandle(m_hPakFile);
	}

	m_hPakFile = CreateFile("sprites\\sprfonts.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	if (m_hPakFile != INVALID_HANDLE_VALUE) {
		m_pSprite[DEF_SPRID_INTERFACE_FONT1] = new class CSprite(m_hPakFile, &m_DDraw, "sprfonts", 0, FALSE);
		m_pSprite[DEF_SPRID_INTERFACE_FONT2] = new class CSprite(m_hPakFile, &m_DDraw, "sprfonts", 1, FALSE);
		CloseHandle(m_hPakFile);
	}

	m_stMCursor.sX = 0;
	m_stMCursor.sY = 0;
	m_pMapData = new class CMapData(this);
	ZeroMemory(m_cPlayerName, sizeof(m_cPlayerName));
	ZeroMemory(m_cAccountName, sizeof(m_cAccountName));
	ZeroMemory(m_cAccountPassword, sizeof(m_cAccountPassword));

	m_sPlayerType = 2;
	m_cPlayerTurn = 0;
	// Snoopy: fixed here
	m_cDialogBoxOrder[DEF_MAXDIALOGBOX] = 29;
	m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1] = 30; // 29�� GaugePannel
	m_bThunder = FALSE;
	m_cMenuDir = 4;
	m_cMenuDirCnt = 0;
	m_cMenuFrame = 0;
	TotalItemsSell = EncriptInt(0);
	SellType = EncriptInt(0);

	m_cSoundVolume = 100;
	m_cMusicVolume = 100;

	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(70, 70, 80), &m_wWR[1], &m_wWG[1], &m_wWB[1]); // Light-blue
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(70, 70, 80), &m_wWR[2], &m_wWG[2], &m_wWB[2]); // light-blue
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(70, 70, 80), &m_wWR[3], &m_wWG[3], &m_wWB[3]); // light-blue
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(70, 100, 70), &m_wWR[4], &m_wWG[4], &m_wWB[4]); // Green
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(130, 90, 10), &m_wWR[5], &m_wWG[5], &m_wWB[5]); // Critical
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(42, 53, 111), &m_wWR[6], &m_wWG[6], &m_wWB[6]); // Heavy-blue
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(145, 145, 145), &m_wWR[7], &m_wWG[7], &m_wWB[7]); // White
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(120, 100, 120), &m_wWR[8], &m_wWG[8], &m_wWB[8]); // Violet
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(75, 10, 10), &m_wWR[9], &m_wWG[9], &m_wWB[9]); // Heavy-Red
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(135, 104, 30), &m_wR[10], &m_wG[10], &m_wB[10]);	// Gold, buggy
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(200 / 2, 200 / 2, 200 / 2), &m_wR[11], &m_wG[11], &m_wB[11]);	// Gold, buggy

	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(200 / 2, 200 / 2, 200 / 2), &m_wR[0], &m_wG[0], &m_wB[0]);
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0x50 / 2, 0x50 / 2, 0xC0 / 2), &m_wR[1], &m_wG[1], &m_wB[1]); // Indigo Blue
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(79, 79, 62), &m_wR[2], &m_wG[2], &m_wB[2]); // Custom-Weapon Color
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(135, 104, 30), &m_wR[3], &m_wG[3], &m_wB[3]); // Gold
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(255 / 2, 36 / 2, 0), &m_wR[4], &m_wG[4], &m_wB[4]); // Crimson
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(10, 60, 10), &m_wR[5], &m_wG[5], &m_wB[5]); // Green
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0x50 / 2, 0x50 / 2, 0x50 / 2), &m_wR[6], &m_wG[6], &m_wB[6]); // Gray
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0x5F / 2, 0x9E / 2, 0xA0 / 2), &m_wR[7], &m_wG[7], &m_wB[7]); // Aqua
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0xFF / 2, 0x69 / 2, 0xB4 / 2), &m_wR[8], &m_wG[8], &m_wB[8]); // Pink
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(90, 60, 90), &m_wR[9], &m_wG[9], &m_wB[9]); // Violet
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0, 35, 60), &m_wR[10], &m_wG[10], &m_wB[10]); // Blue
	//m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(   244,    122,      0),  &m_wR[11], &m_wG[11], &m_wB[11]); // Orange
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0xD2 / 2, 0xB4 / 2, 0x8C / 2), &m_wR[11], &m_wG[11], &m_wB[11]); // Tan
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(200 / 2, 200 / 2, 200 / 2), &m_wR[12], &m_wG[12], &m_wB[12]); // Tinta Magica
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(85, 85, 8), &m_wR[13], &m_wG[13], &m_wB[13]); // Yellow
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(75, 10, 10), &m_wR[14], &m_wG[14], &m_wB[14]); // Red
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(200 / 2, 200 / 2, 200 / 2), &m_wR[15], &m_wG[15], &m_wB[15]); // Tinta Magica

	// Nuevos Colores
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0, 153, 0), &m_wR[16], &m_wG[16], &m_wB[16]); // 1 - Verde 
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(204, 102, 0), &m_wR[17], &m_wG[17], &m_wB[17]); // 2 - Naranja
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(153, 153, 153), &m_wR[18], &m_wG[18], &m_wB[18]); // 3 - Blanco
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(153, 0, 0), &m_wR[19], &m_wG[19], &m_wB[19]); // 4 - Rojo
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0, 0, 153), &m_wR[20], &m_wG[20], &m_wB[20]); // 5 - Azul
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0, 153, 153), &m_wR[21], &m_wG[21], &m_wB[21]); // 6 - Celeste
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(32, 0, 32), &m_wR[22], &m_wG[22], &m_wB[22]); // 7 - Negro
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(153, 153, 0), &m_wR[23], &m_wG[23], &m_wB[23]); // 8 - Amarillo
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(153, 0, 153), &m_wR[24], &m_wG[24], &m_wB[24]); // 9 - Rosa
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(76, 0, 153), &m_wR[25], &m_wG[25], &m_wB[25]); // 10 - Violeta
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(102, 51, 0), &m_wR[26], &m_wG[26], &m_wB[26]); // 11 - Marron
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0, 0, 255), &m_wR[27], &m_wG[27], &m_wB[27]); // 12 - Solo GMS
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(0, 255, 0), &m_wR[28], &m_wG[28], &m_wB[28]); // 13 - Solo GMS
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(255, 0, 0), &m_wR[29], &m_wG[29], &m_wB[29]); // 14 - Solo GMS
	m_Misc.ColorTransfer(m_DDraw.m_cPixelFormat, RGB(200 / 2, 200 / 2, 200 / 2), &m_wR[30], &m_wG[30], &m_wB[30]); // 15 - Tinta Magica Verde

	_LoadGameMsgTextContents();
	ZeroMemory(m_cWorldServerName, sizeof(m_cWorldServerName));

	return TRUE;
}

BOOL CGame::bSendCommand(DWORD dwMsgID, WORD wCommand, char cDir, int iV1, int iV2, int iV3, char * pString, int iV4)
{
	char  * cp, cMsg[300], cTxt[256], cKey;
	WORD  * wp;
	DWORD * dwp, dwTime;
	short * sp;
	int   * ip, iRet, i, *fightzonenum;
	char cData[512];

	if ((m_pGSock == NULL) && (m_pLSock == NULL)) return FALSE;
	dwTime = timeGetTime();
	ZeroMemory(cMsg, sizeof(cMsg));
	ZeroMemory(cData, sizeof(cData));
	cKey = (char)(rand() % 255) + 1;

	switch (dwMsgID) {
		case CLIENT_REQUEST_ITEMTOSELLLIST:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			*sp = (short)iV1;
			cp += 2;
			ip = (int *)cp;
			*ip = (int)iV2;
			cp += 4;
			iRet = m_pGSock->iSendMsgServer(cMsg, 12, cKey);
			break;

		case REQUEST_MARKETNAMES:
			dwp = (DWORD*)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD*)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			iRet = m_pGSock->iSendMsg(cMsg, 6, cKey);
			break;

		case REQUEST_MARKETITEMS:
		{
			char name[12] = {};
			dwp = (DWORD*)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD*)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			strcpy(name, market_name.c_str());
			Push(cp, name, 10);
			iRet = m_pGSock->iSendMsg(cMsg, 16, cKey);
			break;
		}
		case REQUEST_GETMARKETITEM:
		{
			char name[12] = {};
			dwp = (DWORD*)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD*)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			strcpy(name, market_name.c_str());
			Push(cp, name, 10);
			Push(cp, market_item_ptr->index);
			Push(cp, market_item_ptr->coins);
			Push(cp, market_item_ptr->item.m_cName, 20);
			Push(cp, market_item_ptr->item.m_dwAttribute);
			iRet = m_pGSock->iSendMsg(cMsg, cp - cMsg, cKey);
			break;
		}

		case REQUEST_SETMARKETITEM:
			dwp = (DWORD*)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD*)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			Push(cp, market_item_index);
			Push(cp, market_coins);
			iRet = m_pGSock->iSendMsg(cMsg, 14, cKey);
			break;

		case NUCLEO_REQUEST_CREATEACC:
			// to Log Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, m_cAccountName, 12);
			memcpy(cp, cTxt, 12);
			cp += 12;

			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, m_cAccountPassword, 12);
			memcpy(cp, cTxt, 12);
			cp += 12;

			memcpy(cp, m_cEmailAddr, 52);
			cp += 52;

			memcpy(cp, m_cAccountQuiz, 45);
			cp += 45;

			memcpy(cp, m_cAccountAnswer, 20);
			cp += 20;
			
			iRet = m_pLSock->iSendMsg(cMsg, 147, cKey);
			break;


		case CLIENT_REQUEST_MARKET_ITEMLIST:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			*ip = (int)iV1;
			cp += 4;

			ip = (int *)cp;
			*ip = (int)iV2;
			cp += 4;

			memset(cp, 0, 10);
			memcpy((char *)cp, pString, strlen(pString) + 1);
			cp += 10;
			iRet = m_pGSock->iSendMsgServer(cMsg, 24, cKey);
			break;

		case CLIENT_REQUEST_TIPESELLLIST:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			sp = (short *)cp;
			*sp = iV1;
			cp += 2;
			iRet = m_pGSock->iSendMsgServer(cMsg, 8, cKey);
			break;

		case CLIENT_REQUEST_PURCHASE:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			*sp = (short)iV1;
			cp += 2;

			sp = (short *)cp;
			*sp = (short)iV2;
			cp += 2;

			memset(cp, 0, 10);
			memcpy((char *)cp, pString, strlen(pString) + 1);
			cp += 10;

			iRet = m_pGSock->iSendMsgServer(cMsg, 20, cKey);
			break;

		case CLIENT_REQUEST_BANKPAGE:
		case CLIENT_REQUEST_BUY_ASSAPOINTS:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			*sp = (short)iV1;
			cp += 2;
			iRet = m_pGSock->iSendMsgServer(cMsg, 10, cKey);
			break;

		case CLIENT_REQUEST_STATUS_AFK:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			ip = (int *)cp;
			*ip = iV1;
			iRet = m_pGSock->iSendMsgServer(cMsg, 10, cKey);
			break;

		case CLIENT_REQUEST_NODISCONNECT:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			iRet = m_pGSock->iSendMsgServer(cMsg, 6, cKey);

			/*case DEF_STATUS_REFLEX:
				dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
				*dwp = dwMsgID;
				wp  = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
				*wp = NULL;
				cp = (char*)(cMsg + 6);
				ip = (int *)cp;
				*ip = iV1;
				iRet = m_pGSock->iSendMsgServer(cMsg, 10, cKey);
				break;*/

		case CLIENT_REQUEST_ANGEL:	// to Game Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			memset(cp, 0, 20);
			memcpy((char *)cp, pString, strlen(pString) + 1);
			cp += 20;
			ip = (int *)cp;
			*ip = iV1; // Angel ID
			iRet = m_pGSock->iSendMsgServer(cMsg, 30, cKey);
			break;

			/*case DEF_ANGELMAGIC:
				dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
				*dwp = dwMsgID;
				wp  = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
				*wp = NULL;
				iRet = m_pGSock->iSendMsgServer(cMsg, 6, cKey);
				break;*/

		//case CLIENT_REQUEST_HACKDETECTED:
		case CLIENT_REQUEST_PACKSARPAD:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			memset(cp, 0, 30);
			memcpy((char *)cp, pString, strlen(pString) + 1);
			cp += 30;
			iRet = m_pGSock->iSendMsgServer(cMsg, 36, cKey);
			break;

		/*case CLIENT_REQUEST_DCHACK:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			memset(cp, 0, 30);
			memcpy((char *)cp, pString, strlen(pString) + 1);
			cp += 30;
			iRet = m_pGSock->iSendMsgServer(cMsg, 36, cKey);
			break;*/


		case CLIENT_REQUEST_PROCESSANDDLL:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);

			*cp = (char)iV1;
			cp++;

			memcpy(cTxt, pString, 30);
			memcpy(cp, cTxt, 30);
			cp += 30;

			iRet = m_pGSock->iSendMsgServer(cMsg, 37, cKey);
			break;


		case CLIENT_REQUEST_RESURRECTPLAYER_YES: // By snoopy
		case CLIENT_REQUEST_RESURRECTPLAYER_NO:  // By snoopy
		case CLIENT_REQUEST_ONLINE_USERS:  //who shortcut
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			iRet = m_pGSock->iSendMsgServer(cMsg, 6, cKey);
			break;

		case CLIENT_REQUEST_TELEPORT_LIST:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char*)(cMsg + 6);
			if (iV1 == 1)
			{
				memset(cp, 0, 20);
				memcpy(cp, "William", 20);
			}
			else if (iV1 == 2)
			{
				memset(cp, 0, 20);
				memcpy(cp, "AssasainO", 20);
			}
			iRet = m_pGSock->iSendMsgServer(cMsg, 26, cKey);
			break;

		case CLIENT_REQUEST_CHARGED_TELEPORT:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			ip = (int *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			*ip = iV1;
			iRet = m_pGSock->iSendMsgServer(cMsg, 10, cKey);
			break;

		case CLIENT_REQUEST_SELLITEMLIST:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			for (i = 0; i < DEF_MAXSELLLIST; i++)
			{
				*cp = m_stSellItemList[i].iIndex;
				cp++;
				ip = (int *)cp;
				*ip = m_stSellItemList[i].iAmount;
				cp += 4;
			}

			iRet = m_pGSock->iSendMsgServer(cMsg, 70, cKey);
			break;

		case CLIENT_REQUEST_RESTART:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			iRet = m_pGSock->iSendMsgServer(cMsg, 6, cKey);
			break;

		case CLIENT_REQUEST_PANNING:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			*cp = cDir;
			cp++;

			iRet = m_pGSock->iSendMsgServer(cMsg, 7, cKey);
			break;
			//AGREGADOV11
			//heaton change password
		case MSGID_REQUEST_CHANGEPASSWORD:
			dwp = (DWORD*)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD*)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char*)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			memcpy(cTxt, m_cAccountName, 10);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			memcpy(cTxt, m_cAccountPassword, 10);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			memcpy(cTxt, m_cNewPassword, 10);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			memcpy(cTxt, m_cNewPassConfirm, 10);
			memcpy(cp, cTxt, 10);
			cp += 10;

			DecriptString(m_cWorldServerName);
			memcpy(cp, m_cWorldServerName, 30);
			EncriptString(m_cWorldServerName);
			cp += 30;

			memcpy(cp, m_cEmailAddr, 52);
			cp += 52;

			iRet = m_pLSock->iSendMsg(cMsg, 128, cKey);
			break;

	//AGREGADOV11
		case MSGID_REQUEST_CREATENEWACCOUNT:
			// to Log Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp  = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, m_cAccountName, 10);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt));
			memcpy(cTxt, m_cAccountPassword, 10);
			memcpy(cp, cTxt, 10);
			cp += 10;

			memcpy(cp, m_cEmailAddr, 50);
			cp += 50;

			ZeroMemory(cTxt, sizeof(cTxt));
			strcpy(cTxt, " "); // gender
			memcpy(cp, cTxt, 10);
			cp += 10;

			memcpy(cp, m_cAccountAge, 10);
			cp += 10;

			memcpy(cp, " ", 4);
			cp += 4;

			memcpy(cp, " ", 2);
			cp += 2;

			memcpy(cp, " ", 2);
			cp += 2;

			memcpy(cp, m_cAccountCountry, 17);
			cp += 17;

			memcpy(cp, m_cAccountSSN, 28);
			cp += 28;

			memcpy(cp, m_cAccountQuiz, 45);
			cp += 45;

			memcpy(cp, m_cAccountAnswer, 20);
			cp += 20;

			memcpy(cp, G_cCmdLineTokenA_Lowercase, 50);

			iRet = m_pLSock->iSendMsg(cMsg, 214	+50, cKey);
			break;//*/

						//case MSGID_GETMINIMUMLOADGATEWAY:
		case NUCLEO_REQUEST_LOGIN:
			// to Log Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;

			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			
			DecriptString(m_cAccountName);
			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			memcpy(cTxt, m_cAccountName, 10);
			memcpy(cp, cTxt, 10);
			cp += 10;
			EncriptString(m_cAccountName);

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			DecriptString(m_cAccountPassword);
			memcpy(cTxt, m_cAccountPassword, 10);
			EncriptString(m_cAccountPassword);
			memcpy(cp, cTxt, 10);
			cp += 10;
			
			DecriptString(m_cWorldServerName);
			memcpy(cp, m_cWorldServerName, 30);
			EncriptString(m_cWorldServerName);
			cp += 30;

			iRet = m_pLSock->iSendMsg(cMsg, 56, cKey);
			break;

		case NUCLEO_REQUEST_CREATENEWCHARACTER:
			// to Log Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = (WORD)NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

		//	DecriptString(m_cPlayerName);
			memcpy(cp, m_cPlayerName, 10);
		//	EncriptString(m_cPlayerName);
			cp += 10;


			DecriptString(m_cAccountName);
			memcpy(cp, m_cAccountName, 10);
			EncriptString(m_cAccountName);
			cp += 10;

			DecriptString(m_cAccountPassword);
			memcpy(cp, m_cAccountPassword, 10);
			EncriptString(m_cAccountPassword);
			cp += 10;
			
			DecriptString(m_cWorldServerName);
			memcpy(cp, m_cWorldServerName, 30);
			EncriptString(m_cWorldServerName);
			cp += 30;

			*cp = (char)DecriptInt(m_cGender);
			cp++;

			*cp = (char)DecriptInt(m_cSkinCol);
			cp++;

			*cp = (char)DecriptInt(m_cHairStyle);
			cp++;

			*cp = (char)DecriptInt(m_cHairCol);
			cp++;

			*cp = (char)DecriptInt(m_cUnderCol);
			cp++;

			*cp = (char)DecriptInt(m_ccStr);
			cp++;

			*cp = (char)DecriptInt(m_ccVit);
			cp++;

			*cp = (char)DecriptInt(m_ccDex);
			cp++;

			*cp = (char)DecriptInt(m_ccInt);
			cp++;

			*cp = (char)DecriptInt(m_ccMag);
			cp++;

			*cp = (char)DecriptInt(m_ccChr);
			cp++;

			iRet = m_pLSock->iSendMsg(cMsg, 77, cKey);
			break;

		case NUCLEO_REQUEST_ENTERGAME:
			// to Log Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = (WORD)m_wEnterGameType;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
						
			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
		//	DecriptString(m_cPlayerName);
			memcpy(cTxt, m_cPlayerName, 10);
		//	EncriptString(m_cPlayerName);
			memcpy(cp, cTxt, 10);
			cp += 10;

			DecriptString(m_cMapName);
			ZeroMemory(cTxt, sizeof(cTxt)); // v1.43
			memcpy(cTxt, m_cMapName, 10);
			memcpy(cp, cTxt, 10);
			EncriptString(m_cMapName);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			DecriptString(m_cAccountName);
			memcpy(cTxt, m_cAccountName, 10);
			EncriptString(m_cAccountName);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			DecriptString(m_cAccountPassword);
			memcpy(cTxt, m_cAccountPassword, 10);
			EncriptString(m_cAccountPassword);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ip = (int *)cp;
			*ip = DecriptInt(m_iLevel);
			cp += 4;
			
			DecriptString(m_cWorldServerName);
			memcpy(cp, m_cWorldServerName, 30);
			EncriptString(m_cWorldServerName);
			cp += 30;

			memcpy(cp, G_cCmdLineTokenA, 120);
			cp += 120;

			iRet = m_pLSock->iSendMsg(cMsg, 200, cKey);
			break;

		case NUCLEO_REQUEST_DELETECHARACTER:
			// to Log Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = (WORD)m_wEnterGameType;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			memcpy(cp, m_pCharList[m_wEnterGameType - 1]->m_cName, 10);
			cp += 10;

			DecriptString(m_cAccountName);
			memcpy(cp, m_cAccountName, 10);
			EncriptString(m_cAccountName);
			cp += 10;

			DecriptString(m_cAccountPassword);
			memcpy(cp, m_cAccountPassword, 10);
			EncriptString(m_cAccountPassword);
			cp += 10;
			
			DecriptString(m_cWorldServerName);
			memcpy(cp, m_cWorldServerName, 30);
			EncriptString(m_cWorldServerName);
			cp += 30;

			iRet = m_pLSock->iSendMsg(cMsg, 66, cKey);
			break;

		case CLIENT_REQUEST_SETITEMPOS:
			// to Game Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			*cp = cDir;

			cp++;

			sp = (short *)cp;
			*sp = (short)iV1;
			cp += 2;

			sp = (short *)cp;
			*sp = (short)iV2;
			cp += 2;

			iRet = m_pGSock->iSendMsgServer(cMsg, 11);
			break;

		case CLIENT_REQUEST_COMMAND_CHECKCONNECTION:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			dwp = (DWORD *)cp;
			*dwp = dwTime;
			cp += 4;
			iRet = m_pGSock->iSendMsgServer(cMsg, 10, cKey);
			//CheckProcesses();
			CheckSarpado();
			CheckPalmado();
			//CheckHacks();
			break;

		case CLIENT_REQUEST_INITDATA:
		case CLIENT_REQUEST_INITPLAYER: 
			// to Game Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			ip = (int *)cp;
			*ip = DEF_SECURITY_LOGIN;
			cp += 4;

			ip = (int *)cp;
			*ip = DEF_ANTI_HACKERS;
			cp += 4;

			ZeroMemory(cTxt, sizeof(cTxt));
		//	DecriptString(m_cPlayerName);
			memcpy(cTxt, m_cPlayerName, 10);
		//	EncriptString(m_cPlayerName);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt));
			DecriptString(m_cAccountName);
			memcpy(cTxt, m_cAccountName, 10);
			EncriptString(m_cAccountName);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt));
			DecriptString(m_cAccountPassword);
			memcpy(cTxt, m_cAccountPassword, 10);
			EncriptString(m_cAccountPassword);
			memcpy(cp, cTxt, 10);
			cp += 10;

			*cp = (char)DecriptBool(m_bIsObserverMode);
			cp++;

			//added resolution
			sp = (short *)cp;
			*sp = c_reso->sResolution;
			cp += 2;

		/*	DecriptString(m_cGameServerName);
			memcpy(cp, m_cGameServerName, 20);
			EncriptString(m_cGameServerName);
			cp += 20;*/

			//original
		//	iRet = m_pGSock->iSendMsgServer(cMsg, 37 + 21 + 2, (char)0x49);
			//added resolution
		//	iRet = m_pGSock->iSendMsgServer(cMsg, 63, (char)0x49);
			//iRet = m_pGSock->iSendMsgServer(cMsg, 43, (char)0x49);
			iRet = m_pGSock->iSendMsgServer(cMsg, 47, (char)0x49);

			break;
		case CLIENT_REQUEST_LEVELUPSETTINGS:

			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			*sp = DecriptInt(m_cLU_Str);
			cp += 2;

			sp = (short *)cp;
			*sp = DecriptInt(m_cLU_Vit);
			cp += 2;

			sp = (short *)cp;
			*sp = DecriptInt(m_cLU_Dex);
			cp += 2;

			sp = (short *)cp;
			*sp = DecriptInt(m_cLU_Int);
			cp += 2;

			sp = (short *)cp;
			*sp = DecriptInt(m_cLU_Mag);
			cp += 2;

			sp = (short *)cp;
			*sp = DecriptInt(m_cLU_Char);
			cp += 2;

			sp = (short *)cp;
			*sp = TempMajestic;
			cp += 2;

			iRet = m_pGSock->iSendMsgServer(cMsg, 20);

			TempMajestic = 0;
			break;

		case CLIENT_REQUEST_COMMAND_CHATMSG:
			if (m_bIsTeleportRequested == TRUE) return FALSE;

			// to Game Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			*sp = m_sPlayerX;
			cp += 2;

			sp = (short *)cp;
			*sp = m_sPlayerY;
			cp += 2;

			memcpy(cp, m_cPlayerName, 10);
			cp += 10;

			*cp = (char)iV1;
			cp++;

			/*for (i = 0; i <= strlen(pString); i++) {
				if (pString[i] < 32 || pString[i] > 126) pString[i] = 0;
			}*/

			if (bCheckLocalChatCommand(pString) == TRUE) return FALSE;
			memcpy((char *)cp, pString, strlen(pString) + 1);

			iRet = m_pGSock->iSendMsgServer(cMsg, 22 + strlen(pString));
			break;

		case CLIENT_REQUEST_COMMAND_COMMON:
			if (m_bIsTeleportRequested == TRUE) return FALSE;
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = wCommand;
			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			sp = (short *)cp;
			*sp = m_sPlayerX;
			cp += 2;
			sp = (short *)cp;
			*sp = m_sPlayerY;
			cp += 2;
			*cp = cDir;
			cp++;
			switch (wCommand) {
				case CLIENT_REQUEST_BUILDITEM:
					memcpy(cp, pString, 20);
					cp += 20;
					*cp = (char)m_stDialogBoxInfo[26].sV1;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV2;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV3;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV4;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV5;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV6;
					cp++;
					iRet = m_pGSock->iSendMsgServer(cMsg, 37);
					break;

				case CLIENT_REQUEST_CREATEPOTION:
					*cp = (char)m_stDialogBoxInfo[26].sV1;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV2;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV3;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV4;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV5;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV6;
					cp++;
					iRet = m_pGSock->iSendMsgServer(cMsg, 18);
					break;

					//Crafting
				case CLIENT_REQUEST_CRAFTITEM:
					memcpy(cp, "                    ", 20);
					cp += 20;
					*cp = (char)m_stDialogBoxInfo[26].sV1;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV2;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV3;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV4;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV5;
					cp++;
					*cp = (char)m_stDialogBoxInfo[26].sV6;
					cp++;
					iRet = m_pGSock->iSendMsgServer(cMsg, 37);
					break;

					// Create Slate Request - Diuuude
				case CLIENT_REQUEST_CREATESLATE:
					*cp = (char)m_stDialogBoxInfo[40].sV1;
					cp++;
					*cp = (char)m_stDialogBoxInfo[40].sV2;
					cp++;
					*cp = (char)m_stDialogBoxInfo[40].sV3;
					cp++;
					*cp = (char)m_stDialogBoxInfo[40].sV4;
					cp++;
					*cp = (char)m_stDialogBoxInfo[40].sV5;
					cp++;
					*cp = (char)m_stDialogBoxInfo[40].sV6;
					cp++;
					iRet = m_pGSock->iSendMsgServer(cMsg, 18);
					break;

				default:
					if (pString == NULL)
					{
						ip = (int *)cp;
						*ip = iV1;
						cp += 4;
						ip = (int *)cp;
						*ip = iV2;
						cp += 4;
						ip = (int *)cp;
						*ip = iV3;
						cp += 4;
						dwp = (DWORD *)cp;
						*dwp = dwTime;
						cp += 4;
						iRet = m_pGSock->iSendMsgServer(cMsg, 23 + 4);
					}
					else
					{
						ip = (int *)cp;
						*ip = iV1;
						cp += 4;
						ip = (int *)cp;
						*ip = iV2;
						cp += 4;
						ip = (int *)cp;
						*ip = iV3;
						cp += 4;
						memcpy(cp, pString, 30);
						cp += 30;
						ip = (int *)cp;
						*ip = iV4;
						cp += 4;
						iRet = m_pGSock->iSendMsgServer(cMsg, 23 + 34);
					}
					break;
			}

			break;

		case CLIENT_REQUEST_CREATENEWGUILD:
		case CLIENT_REQUEST_DISBANDGUILD:
			// to Game Server
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
		//	DecriptString(m_cPlayerName);
			memcpy(cTxt, m_cPlayerName, 10);
		//	EncriptString(m_cPlayerName);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			DecriptString(m_cAccountName);
			memcpy(cTxt, m_cAccountName, 10);
			EncriptString(m_cAccountName);
			memcpy(cp, cTxt, 10);
			cp += 10;

			ZeroMemory(cTxt, sizeof(cTxt)); // v1.4
			DecriptString(m_cAccountPassword);
			memcpy(cTxt, m_cAccountPassword, 10);
			EncriptString(m_cAccountPassword);
			memcpy(cp, cTxt, 10);
			cp += 10;

			char cTemp[21];
			ZeroMemory(cTemp, sizeof(cTemp));
		//	DecriptString(m_cGuildName);
			memcpy(cTemp, m_cGuildName, 20);
	//		EncriptString(m_cGuildName);
			m_Misc.ReplaceString(cTemp, ' ', '_');
			memcpy(cp, cTemp, 20);
			cp += 20;

			iRet = m_pGSock->iSendMsgServer(cMsg, 56, cKey);
			break;

		case CLIENT_REQUEST_TELEPORT:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;

			iRet = m_pGSock->iSendMsgServer(cMsg, 6);

			m_bIsTeleportRequested = TRUE;
			break;

		case CLIENT_REQUEST_CIVILRIGHT:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;

			iRet = m_pGSock->iSendMsgServer(cMsg, 6);
			break;

		case CLIENT_REQUEST_RETRIEVEITEM:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = DEF_MSGTYPE_CONFIRM;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			*sp = iV1;
			cp += 2;

			iRet = m_pGSock->iSendMsgServer(cMsg, 8);
			break;

		case CLIENT_REQUEST_NOTICEMENT:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			ip = (int *)cp;
			*ip = iV1;
			cp += 4;

			iRet = m_pGSock->iSendMsgServer(cMsg, 10, cKey);
			break;

		case CLIENT_REQUEST_FIGHTZONE_RESERVE:
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			fightzonenum = (int *)cp;
			*fightzonenum = iV1;
			cp += 4;

			iRet = m_pGSock->iSendMsgServer(cMsg, 10);
			break;

		case CLIENT_REQUEST_STATECHANGEPOINT:
			// Diuuude
			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = NULL;
			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);
			*cp = (char)DecriptInt(cStateChange1);
			cp++;
			*cp = (char)DecriptInt(cStateChange2);
			cp++;
			*cp = (char)DecriptInt(cStateChange3);
			cp++;
			iRet = m_pGSock->iSendMsgServer(cMsg, 12);
			break;

		default:
			if (m_bIsTeleportRequested == TRUE) return FALSE;

			dwp = (DWORD *)(cMsg + DEF_INDEX4_MSGID);
			*dwp = dwMsgID;
			wp = (WORD *)(cMsg + DEF_INDEX2_MSGTYPE);
			*wp = wCommand;

			cp = (char *)(cMsg + DEF_INDEX2_MSGTYPE + 2);

			sp = (short *)cp;
			*sp = m_sPlayerX;
			cp += 2;

			sp = (short *)cp;
			*sp = m_sPlayerY;
			cp += 2;

			*cp = cDir;
			cp++;

			sp = (short *)cp;
			*sp = (short)iV1;
			cp += 2;

			sp = (short *)cp;
			*sp = (short)iV2;
			cp += 2;

			sp = (short *)cp;
			*sp = (short)iV3;
			cp += 2;
			if ((wCommand == DEF_OBJECTATTACK) || (wCommand == DEF_OBJECTATTACKMOVE))
			{
				sp = (short *)cp;
				*sp = (short)iV4;
				cp += 2;
				dwp = (DWORD *)cp;
				*dwp = dwTime;
				cp += 4;
				iRet = m_pGSock->iSendMsgServer(cMsg, 19 + 4);
			}
			else
			{
				dwp = (DWORD *)cp;
				*dwp = dwTime;
				cp += 4;

				iRet = m_pGSock->iSendMsgServer(cMsg, 17 + 4); //v2.171
			}
			m_cCommandCount++;
			break;
	}
	switch (iRet) {
		case DEF_XSOCKEVENT_SOCKETCLOSED:
		case DEF_XSOCKEVENT_SOCKETERROR:
		case DEF_XSOCKEVENT_QUENEFULL:
			ChangeGameMode(DEF_GAMEMODE_ONCONNECTIONLOST);
			delete m_pGSock;
			m_pGSock = NULL;
			break;

		case DEF_XSOCKEVENT_CRITICALERROR:
			delete m_pGSock;
			m_pGSock = NULL;
			if (G_pCalcSocket != NULL) {
				delete G_pCalcSocket;
				G_pCalcSocket = NULL;
			}
			SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
			break;
	}
	return TRUE;
}

/*********************************************************************************************************************
**  void CGame::DrawDialogBox_ConfirmExchange(short msX, short msY)	(snoopy)										**
**  description			:: paints the trade windows	Added confirmation window in v3.71								**
**********************************************************************************************************************/
void CGame::DrawDialogBox_ConfirmExchange(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[41].sX;
	sY = m_stDialogBoxInfo[41].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME1, sX, sY, 2);
	switch (m_stDialogBoxInfo[41].cMode) {
		case 1: // Question
			PutString(sX + 35, sY + 30, "Do you really want to exchange?", RGB(4, 0, 50));
			PutString(sX + 36, sY + 30, "Do you really want to exchange?", RGB(4, 0, 50));

			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 55, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 55, 18);

			if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 55, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 55, 2);
			break;

		case 2: // Waiting for response
			PutString(sX + 45, sY + 36, "Waiting for a other client confirm...", RGB(4, 0, 50));
			PutString(sX + 46, sY + 36, "Waiting for a other client confirm...", RGB(4, 0, 50));
			break;
	}
}

/*********************************************************************************************************************
**  void CGame::DrawDialogBox		(snoopy)											**
**  description			:: paints the trade windows																	**
**********************************************************************************************************************/
void CGame::DrawDialogBox_Exchange(short msX, short msY, short msZ, char cLB)
{
	short sX, sY, szX;
	DWORD dwTime = m_dwCurTime;
	char cTxt[120], cTxt3[50];
	char cNameStr[120], cSubStr1[120], cSubStr2[120];
	int i, Line, Line2, sY1;
	BOOL MultiLine, MultiLine2, ShowList, ShowList2;
	short MaxItemsView = 14;
	short TotalLine = 0, TotalLine2 = 0;

	sX = m_stDialogBoxInfo[27].sX;
	sY = m_stDialogBoxInfo[27].sY;
	szX = m_stDialogBoxInfo[27].sSizeX;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_NEWEXCHANGE, sX, sY, 0);
	switch (m_stDialogBoxInfo[27].cMode) {
		case 1: // Not yet confirmed exchange
		//	DecriptString(m_cPlayerName);
			PutString(sX + 16, sY + 37, m_cPlayerName, RGB(0, 255, 0));
			wsprintf(cTxt3, "%d / 20", DecriptInt(ItemsInExchange) + 1);
			PutString(sX + 115, sY + 37, cTxt3, RGB(255, 255, 255));
		//	EncriptString(m_cPlayerName);

			PutString(sX + 159, sY + 37, PlayerNameExc, RGB(0, 255, 0));
			wsprintf(cTxt3, "%d / 20", DecriptInt(ItemsInExchange2) + 1);
			PutString(sX + 260, sY + 37, cTxt3, RGB(255, 255, 255));

			MultiLine = MultiLine2 = FALSE;
			ShowList = ShowList2 = TRUE;
			Line = Line2 = 50;

			if (DecriptInt(ItemsInExchange) != -1)
			{
				if (ShowList)
				{
					TotalLine = 0;
					i = m_stDialogBoxInfo[27].sV1;
					while (TotalLine <= MaxItemsView)
					{
						if (i <= DecriptInt(ItemsInExchange))
						{
							if (MultiLine)
								Line += (15 * 2);
							else
								Line += 15;

							GetItemName(m_stDialogBoxExchangeInfo[i].cStr1, m_stDialogBoxExchangeInfo[i].dwV1, cNameStr, cSubStr1, cSubStr2, m_stDialogBoxExchangeInfo[i].cValueA);
							wsprintf(cTxt, "%s", cNameStr);

							sY1 = Line + 15;
							if (strlen(cNameStr) > 23)
							{
								sY1 += 15;
								MultiLine = TRUE;
								TotalLine += 2;
							}
							else
							{
								MultiLine = FALSE;
								TotalLine++;
							}

							if ((msX >= sX + 16) && (msX <= sX + 139) && (msY >= sY + Line + 1) && (msY <= sY + sY1 - 1))
								PutAlignedString(sX + 16, sX + 144, sY + Line, cTxt, 255, 200, 0);
							else
								PutAlignedString(sX + 16, sX + 144, sY + Line, cTxt, 255, 255, 255);

							if ((msX >= sX + 16) && (msX <= sX + 139) && (msY >= sY + Line) && (msY <= sY + sY1))
							{
								ShowList2 = FALSE;
								ShowItemExchange(27, sX, sY, i, 1);
							}
							i++;
						}
						else
							TotalLine = MaxItemsView + 1;
					}

					// Up
					if (m_stDialogBoxInfo[27].sV1 > 0)
					{
						if ((msX >= sX + 139) && (msX <= sX + 11 + 139) && (msY >= sY + 59) && (msY <= sY + 11 + 59))
							DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 139 + 6, sY + 59 + 5, 13);
						else
							DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 139 + 6, sY + 59 + 5, 15);
					}

					if (i <= DecriptInt(ItemsInExchange))
					{
						// Down
						if ((msX >= sX + 139) && (msX <= sX + 11 + 139) && (msY >= sY + 280) && (msY <= sY + 11 + 280))
							DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 139 + 6, sY + 280 + 5, 14);
						else
							DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 139 + 6, sY + 280 + 5, 16);
					}
				}
			}

			if (DecriptInt(ItemsInExchange2) != -1)
			{
				if (ShowList2)
				{
					TotalLine = 0;
					i = m_stDialogBoxInfo[27].sV2;
					while (TotalLine <= MaxItemsView)
					{
						if (i + 20 <= DecriptInt(ItemsInExchange2) + 20)
						{
							if (MultiLine2)
								Line2 += (15 * 2);
							else
								Line2 += 15;

							GetItemName(m_stDialogBoxExchangeInfo[i + 20].cStr1, m_stDialogBoxExchangeInfo[i + 20].dwV1, cNameStr, cSubStr1, cSubStr2, m_stDialogBoxExchangeInfo[i + 20].cValueA);
							wsprintf(cTxt, "%s", cNameStr);

							sY1 = Line2 + 15;
							if (strlen(cNameStr) > 23)
							{
								sY1 += 15;
								MultiLine2 = TRUE;
								TotalLine += 2;
							}
							else
							{
								MultiLine2 = FALSE;
								TotalLine++;
							}

							if ((msX >= sX + 159) && (msX <= sX + 283) && (msY >= sY + Line2 + 1) && (msY <= sY + sY1 - 1))
								PutAlignedString(sX + 159, sX + 295, sY + Line2, cTxt, 255, 200, 0);
							else
								PutAlignedString(sX + 159, sX + 295, sY + Line2, cTxt, 255, 255, 255);

							if ((msX >= sX + 159) && (msX <= sX + 283) && (msY >= sY + Line2) && (msY <= sY + sY1))
							{
								ShowList = FALSE;
								ShowItemExchange(27, sX, sY, i + 20, 2);
							}
							i++;
						}
						else
							TotalLine = MaxItemsView + 1;
					}

					// Up
					if (m_stDialogBoxInfo[27].sV2 > 0)
					{
						if ((msX >= sX + 283) && (msX <= sX + 11 + 283) && (msY >= sY + 59) && (msY <= sY + 11 + 59))
							DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 283 + 6, sY + 59 + 5, 13);
						else
							DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 283 + 6, sY + 59 + 5, 15);
					}

					if (i <= DecriptInt(ItemsInExchange2))
					{
						// Down
						if ((msX >= sX + 283) && (msX <= sX + 11 + 283) && (msY >= sY + 280) && (msY <= sY + 11 + 280))
							DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 283 + 6, sY + 280 + 5, 14);
						else
							DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 283 + 6, sY + 280 + 5, 16);
					}
				}
			}

			m_pSprite[DEF_SPRID_INTERFACE_ND_NEWEXCHANGE]->PutSpriteFast(sX + 14, sY + 293, 2, dwTime);

			if (ExchangeErrors)
			{
			//	DecriptString(m_cPlayerName);
				switch (ExchangeError)
				{
					case 1: wsprintf(G_cTxt, EXCHANGE_WEIGHT_LIMIT, m_cPlayerName); break;
					case 2: wsprintf(G_cTxt, EXCHANGE_WEIGHT_LIMIT, PlayerNameExc); break;
					case 3: wsprintf(G_cTxt, EXCHANGE_BAGITEM_LIMIT, m_cPlayerName); break;
					case 4: wsprintf(G_cTxt, EXCHANGE_BAGITEM_LIMIT, PlayerNameExc); break;
					default:
						break;
				}
			//	EncriptString(m_cPlayerName);

				PutAlignedString(sX + 16 - 1, sX + 293 - 1, sY + 301 - 1, G_cTxt, 255, 0, 0);
				PutAlignedString(sX + 16, sX + 293, sY + 301, G_cTxt, 125, 0, 0);
			}

			for (i = 0; i <= 2; i++)
			{
				if (strlen(ExchangeLog[i].ItemName) > 0)
				{
					sY1 = i * 14;

				//	DecriptString(m_cPlayerName);
					if (ExchangeLog[i].Me)
					{
						if (ExchangeLog[i].Added)
							wsprintf(G_cTxt, EXCHANGE_HISTORY1, m_cPlayerName, ExchangeLog[i].ItemName);
						else
							wsprintf(G_cTxt, EXCHANGE_HISTORY2, m_cPlayerName, ExchangeLog[i].ItemName);
					}
					else
					{
						if (ExchangeLog[i].Added)
							wsprintf(G_cTxt, EXCHANGE_HISTORY1, PlayerNameExc, ExchangeLog[i].ItemName);
						else
							wsprintf(G_cTxt, EXCHANGE_HISTORY2, PlayerNameExc, ExchangeLog[i].ItemName);
					}
				//	EncriptString(m_cPlayerName);

					if (ExchangeLog[i].Added) PutAlignedString(sX + 16, sX + 293, sY + 322 + sY1, G_cTxt, 0, 255, 0);
					else PutAlignedString(sX + 16, sX + 293, sY + 322 + sY1, G_cTxt, 255, 0, 0);
				}
			}

			// Accept
			if (!MeConfirmed)
			{
				if ((msX >= sX + DEF_LBTNPOSX - 16) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX - 16) && (msY >= sY + DEF_BTNPOSY + 78) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY + 78))
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX - 16, sY + DEF_BTNPOSY + 78, 33);
				else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX - 16, sY + DEF_BTNPOSY + 78, 32);
			}

			// Cancel
			if ((msX >= sX + DEF_RBTNPOSX + 68) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX + 68) && (msY >= sY + DEF_BTNPOSY + 78) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY + 78))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX + 68, sY + DEF_BTNPOSY + 78, 17);//Red Cancel Button
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX + 68, sY + DEF_BTNPOSY + 78, 16);//Gray Cancel Button
			break;
	}
}

void CGame::ShowItemExchange(short Dialog, short sX, short sY, short Item, short Show)
{
	short X, X2, iLoc;
	char cNameStr[120], cSubStr1[120], cSubStr2[120], cItemColor, cTxt[120], cTxt2[128];
	DWORD dwTime = m_dwCurTime;

	if (Show == 1)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_NEWEXCHANGE]->PutSpriteFast(sX + 158, sY + 59, 1, dwTime);
		X = 159;
		X2 = 295;
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_NEWEXCHANGE]->PutSpriteFast(sX + 14, sY + 59, 1, dwTime);
		X = 16;
		X2 = 151;
	}


	cItemColor = m_stDialogBoxExchangeInfo[Item].sV4;
	if (cItemColor == 0)
		if (Show == 1)
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_stDialogBoxExchangeInfo[Item].sV1]->PutSpriteFast(sX + 226, sY + 135, m_stDialogBoxExchangeInfo[Item].sV2, dwTime);
		else
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_stDialogBoxExchangeInfo[Item].sV1]->PutSpriteFast(sX + 82, sY + 135, m_stDialogBoxExchangeInfo[Item].sV2, dwTime);
	else
	{
		switch (m_stDialogBoxExchangeInfo[Item].sV1) {//sV1 : Sprite
			case 1: //  Swds
			case 2: //  Bows
			case 3: //  Shields
			case 15: // Axes hammers
			case 17: // Wands
				if (Show == 1)
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_stDialogBoxExchangeInfo[Item].sV1]->PutSpriteRGB(sX + 226, sY + 135
						, m_stDialogBoxExchangeInfo[Item].sV2, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
				else
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_stDialogBoxExchangeInfo[Item].sV1]->PutSpriteRGB(sX + 82, sY + 135
						, m_stDialogBoxExchangeInfo[Item].sV2, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
				break;
			default:
				if (Show == 1)
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_stDialogBoxExchangeInfo[Item].sV1]->PutSpriteRGB(sX + 226, sY + 135
						, m_stDialogBoxExchangeInfo[Item].sV2, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
				else
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_stDialogBoxExchangeInfo[Item].sV1]->PutSpriteRGB(sX + 82, sY + 135
						, m_stDialogBoxExchangeInfo[Item].sV2, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
				break;
		}
	}

	GetItemName(m_stDialogBoxExchangeInfo[Item].cStr1, m_stDialogBoxExchangeInfo[Item].dwV1, cNameStr, cSubStr1, cSubStr2, m_stDialogBoxExchangeInfo[Item].cValueA);
	wsprintf(cTxt, "%s", cNameStr);

	if (m_bIsSpecial)
		PutAlignedString(sX + X, sX + X2, sY + 207, cTxt, 0, 255, 50);
	else
		PutAlignedString(sX + X, sX + X2, sY + 207, cTxt, 255, 255, 255);

	if (strlen(cTxt) > 23)
		iLoc = 30;
	else
		iLoc = 15;

	if (strlen(cSubStr1) != 0)
	{
		PutAlignedString(sX + X, sX + X2, sY + 207 + iLoc, cSubStr1, 0, 0, 0);
		if (strlen(cSubStr1) > 23)
			iLoc += 30;
		else
			iLoc += 15;
	}

	if (strlen(cSubStr2) != 0)
	{
		PutAlignedString(sX + X, sX + X2, sY + 207 + iLoc, cSubStr2, 0, 0, 0);
		if (strlen(cSubStr2) > 23)
			iLoc += 30;
		else
			iLoc += 15;
	}

	if (m_stDialogBoxExchangeInfo[Item].sV3 != 1) // Item avec Quantity
	{
		if (m_stDialogBoxExchangeInfo[Item].sV3 > 1)
		{
			DisplayCommaNumber_G_cTxt(m_stDialogBoxExchangeInfo[Item].sV3);
			strcpy(cTxt2, G_cTxt);
		}
		else
			wsprintf(cTxt2, DRAW_DIALOGBOX_EXCHANGE2, m_stDialogBoxExchangeInfo[Item].sV3);

		PutAlignedString(sX + X, sX + X2, sY + 207 + iLoc, cTxt2, 35, 35, 35);

		if (strlen(cTxt2) > 23)
			iLoc += 30;
		else
			iLoc += 15;
	}

	if (m_stDialogBoxExchangeInfo[Item].sV5 != -1) // completion
	{	// Crafting Magins completion fix
		/*if (m_stDialogBoxExchangeInfo[Item].sV1 == 22)
		{
			if ((m_stDialogBoxExchangeInfo[Item].sV2 > 5) && (m_stDialogBoxExchangeInfo[Item].sV2 < 10))
				wsprintf(cTxt, GET_ITEM_NAME2, (m_stDialogBoxExchangeInfo[Item].sV7 - 100)); //Completion - 100
		}
		else if (m_stDialogBoxExchangeInfo[Item].sV1 == 6)
			wsprintf(cTxt, GET_ITEM_NAME1, (m_stDialogBoxExchangeInfo[Item].sV7 - 100)); //Purity
		else
			wsprintf(cTxt, GET_ITEM_NAME2, m_stDialogBoxExchangeInfo[Item].sV7); //Completion*/
		//fix lalo ramos exchange
		if (m_stDialogBoxExchangeInfo[Item].sV1 == 22)
		{
			if (m_stDialogBoxExchangeInfo[Item].sV1 == 22)//6
				wsprintf(cTxt, GET_ITEM_NAME1, (m_stDialogBoxExchangeInfo[Item].sV7 - 100)); //Purity
			else
				wsprintf(cTxt, GET_ITEM_NAME2, m_stDialogBoxExchangeInfo[Item].sV7); //Completion aca en el exchange lo suele mostrar bien por mas q haya varios stats
		}
		else if ((m_stDialogBoxExchangeInfo[Item].sV2 > 5) && (m_stDialogBoxExchangeInfo[Item].sV2 < 10))
			wsprintf(cTxt, GET_ITEM_NAME2, (m_stDialogBoxExchangeInfo[Item].sV7)); //Completion - 100
		else
			wsprintf(cTxt, GET_ITEM_NAME2, m_stDialogBoxExchangeInfo[Item].sV7); //Completion

		PutAlignedString(sX + X, sX + X2, sY + 207 + iLoc, cTxt, 35, 35, 35);
		if (strlen(cTxt) > 23)
			iLoc += 30;
		else
			iLoc += 15;
	}

	if (iLoc < 45) // Endurance
	{
		wsprintf(cTxt, DRAW_DIALOGBOX_EXCHANGE3, m_stDialogBoxExchangeInfo[Item].sV5, m_stDialogBoxExchangeInfo[Item].sV6);
		PutAlignedString(sX + X, sX + X2, sY + 207 + iLoc, cTxt, 35, 35, 35);
		if (strlen(cTxt) > 23)
			iLoc += 30;
		else
			iLoc += 15;
	}
}

void CGame::DrawDialogBox_Fishing(short msX, short msY)
{

	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	char  cTxt[120];

	sX = m_stDialogBoxInfo[24].sX;
	sY = m_stDialogBoxInfo[24].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME1, sX, sY, 2);

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_stDialogBoxInfo[24].cStr, NULL, cStr1, cStr2, cStr3);

	switch (m_stDialogBoxInfo[24].cMode) {
		case 0:
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_stDialogBoxInfo[24].sV3]->PutSpriteFast(sX + 18 + 35, sY + 18 + 17, m_stDialogBoxInfo[24].sV4, dwTime);
			wsprintf(cTxt, "%s", cStr1);
			PutString(sX + 98, sY + 14, cTxt, RGB(255, 255, 255));
			wsprintf(cTxt, DRAW_DIALOGBOX_FISHING1, m_stDialogBoxInfo[24].sV2);
			PutString(sX + 98, sY + 28, cTxt, RGB(0, 0, 0));
			PutString(sX + 97, sY + 43, DRAW_DIALOGBOX_FISHING2, RGB(0, 0, 0));
			wsprintf(cTxt, "%d %%", m_stDialogBoxInfo[24].sV1);
			PutString_SprFont(sX + 157, sY + 40, cTxt, 10, 0, 0);
			if ((msX >= sX + 160) && (msX <= sX + 253) && (msY >= sY + 70) && (msY <= sY + 90))
				PutString_SprFont(sX + 160, sY + 70, "Try Now!", 6, 6, 20);
			else PutString_SprFont(sX + 160, sY + 70, "Try Now!", 0, 0, 7);
			break;
	}

}

void CGame::DrawDialogBox_GuildMenu(short msX, short msY)
{
	short sX, sY;
	int iAdjX, iAdjY;

	sX = m_stDialogBoxInfo[7].sX;
	sY = m_stDialogBoxInfo[7].sY;
	int szX = m_stDialogBoxInfo[7].sSizeX;
	int szY = m_stDialogBoxInfo[7].sSizeY;

	iAdjX = -13;
	iAdjY = 30;
	/*DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 19);*/

	DrawShadowMenu(sX, sY, sX + szX, sY + szY);
	DrawShadowMenu_DialogBorders(sX, sY, szX, szY);
	PutString_SprFont2(sX + 80, sY + 3, "Items for sale", 240, 240, 240);

	switch (m_stDialogBoxInfo[7].cMode) {
		case 0:
			// Create a new guild
			if ((DecriptInt(m_iGuildRank) == -1) && (m_iCharisma >= 10) && (DecriptInt(m_iLevel) >= 20)) {
				if ((msX > sX + iAdjX + 80) && (msX < sX + iAdjX + 210) && (msY > sY + iAdjY + 63) && (msY < sY + iAdjY + 78))
					PutAlignedString(sX, sX + szX, sY + iAdjY + 65, DRAW_DIALOGBOX_GUILDMENU1, 255, 255, 255);//"
				else PutAlignedString(sX, sX + szX, sY + iAdjY + 65, DRAW_DIALOGBOX_GUILDMENU1, 255, 200, 0);//"
			}
			else PutAlignedString(sX, sX + szX, sY + iAdjY + 65, DRAW_DIALOGBOX_GUILDMENU1, 255, 255, 255);//"

			// Break up your guild
			if (DecriptInt(m_iGuildRank) == 0) {
				if ((msX > sX + iAdjX + 72) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 82) && (msY < sY + iAdjY + 99))
					PutAlignedString(sX, sX + szX, sY + iAdjY + 85, DRAW_DIALOGBOX_GUILDMENU4, 255, 255, 255);//"
				else PutAlignedString(sX, sX + szX, sY + iAdjY + 85, DRAW_DIALOGBOX_GUILDMENU4, 255, 200, 0);//"
			}
			else PutAlignedString(sX, sX + szX, sY + iAdjY + 85, DRAW_DIALOGBOX_GUILDMENU4, 255, 255, 255);//"

			// Buy a guild admission ticket
			if ((msX > sX + iAdjX + 61) && (msX < sX + iAdjX + 226) && (msY > sY + iAdjY + 103) && (msY < sY + iAdjY + 120))
				PutAlignedString(sX, sX + szX, sY + iAdjY + 105, DRAW_DIALOGBOX_GUILDMENU7, 255, 255, 255);//"
			else PutAlignedString(sX, sX + szX, sY + iAdjY + 105, DRAW_DIALOGBOX_GUILDMENU7, 255, 200, 0);//"

			// Buy a guild withdrawal tickett
			if ((msX > sX + iAdjX + 60) && (msX < sX + iAdjX + 227) && (msY > sY + iAdjY + 123) && (msY < sY + iAdjY + 139))
				PutAlignedString(sX, sX + szX, sY + iAdjY + 125, DRAW_DIALOGBOX_GUILDMENU9, 255, 255, 255);//"
			else PutAlignedString(sX, sX + szX, sY + iAdjY + 125, DRAW_DIALOGBOX_GUILDMENU9, 255, 200, 0);//"

			// Fight Zone
			if (DecriptInt(m_iGuildRank) == 0 && DecriptInt(m_iFightzoneNumber) == 0) {
				if ((msX > sX + iAdjX + 72) && (msX < sX + iAdjX + 228) && (msY > sY + iAdjY + 143) && (msY < sY + iAdjY + 159))
					PutAlignedString(sX, sX + szX, sY + iAdjY + 145, DRAW_DIALOGBOX_GUILDMENU11, 255, 255, 255);//"
				else PutAlignedString(sX, sX + szX, sY + iAdjY + 145, DRAW_DIALOGBOX_GUILDMENU11, 255, 200, 0);//"

			}
			else if (DecriptInt(m_iGuildRank) == 0 && DecriptInt(m_iFightzoneNumber) > 0) {
				if ((msX > sX + iAdjX + 72) && (msX < sX + iAdjX + 216) && (msY > sY + iAdjY + 143) && (msY < sY + iAdjY + 159))
					PutAlignedString(sX, sX + szX, sY + iAdjY + 145, DRAW_DIALOGBOX_GUILDMENU13, 255, 255, 255);//"
				else PutAlignedString(sX, sX + szX, sY + iAdjY + 145, DRAW_DIALOGBOX_GUILDMENU13, 255, 200, 0);//"

			}
			else if (DecriptInt(m_iFightzoneNumber) < 0) {
				PutAlignedString(sX, sX + szX, sY + iAdjY + 145, DRAW_DIALOGBOX_GUILDMENU13, 255, 255, 255);//"
			}
			else PutAlignedString(sX, sX + szX, sY + iAdjY + 145, DRAW_DIALOGBOX_GUILDMENU11, 255, 255, 255);//"

			if (DecriptInt(m_iGuildRank) != 0 && DecriptInt(m_iGuildRank) != -1)
			{
				if ((msX > sX + iAdjX + 60) && (msX < sX + iAdjX + 227) && (msY > sY + iAdjY + 163) && (msY < sY + iAdjY + 179))
					PutAlignedString(sX, sX + szX, sY + iAdjY + 165, DRAW_DIALOGBOX_GUILDMENU83, 255, 255, 255);//"
				else PutAlignedString(sX, sX + szX, sY + iAdjY + 165, DRAW_DIALOGBOX_GUILDMENU83, 255, 200, 0);//"
			}
			else PutAlignedString(sX, sX + szX, sY + iAdjY + 165, DRAW_DIALOGBOX_GUILDMENU83, 255, 255, 255);//"

			PutAlignedString(sX, sX + szX, sY + iAdjY + 205, DRAW_DIALOGBOX_GUILDMENU17, 255, 255, 255);//"


			break;

		case 1:
			PutAlignedString(sX + 24, sX + 239, sY + 125, DRAW_DIALOGBOX_GUILDMENU18, 255, 255, 255);//"
			PutString(sX + 75, sY + 144, "____________________", RGB(255, 255, 255));

			if (iGetTopDialogBoxIndex() != 7) {
			//	DecriptString(m_cGuildName);
				PutString(sX + 75, sY + 140, m_cGuildName, RGB(255, 255, 255), 16, FALSE, 2);
			//	EncriptString(m_cGuildName);
			}

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
			//	DecriptString(m_cGuildName);
				if ((strcmp(m_cGuildName, "NONE") == 0) || (strlen(m_cGuildName) == 0)) {
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 24);//Create Gray Button
				}
				else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 25);//Create Highlight Button
			//	EncriptString(m_cGuildName);
			}
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 24);//Create Gray Button

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);//Red Cancel Button
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);//Gray Cancel Button
			break;

		case 2:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU19, 255, 255, 255);//"
			break;
		case 3:
		//	DecriptString(m_cGuildName);
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_GUILDMENU20, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 140, m_cGuildName, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 144, "____________________", 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 160, DRAW_DIALOGBOX_GUILDMENU21, 255, 255, 255);//"
		//	EncriptString(m_cGuildName);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
		case 4:
			PutAlignedString(sX, sX + szX, sY + 135, DRAW_DIALOGBOX_GUILDMENU22, 55, 25, 25);//"
			PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_GUILDMENU23, 55, 25, 25);//"

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
		case 5:
		//	DecriptString(m_cGuildName);
			PutAlignedString(sX, sX + szX, sY + 90, DRAW_DIALOGBOX_GUILDMENU24, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 105, m_cGuildName, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 109, "____________________", 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 130, DRAW_DIALOGBOX_GUILDMENU25, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 145, DRAW_DIALOGBOX_GUILDMENU26, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 160, DRAW_DIALOGBOX_GUILDMENU27, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + 185, DRAW_DIALOGBOX_GUILDMENU28, 255, 255, 255);
		//	EncriptString(m_cGuildName);

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;
		case 6:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU29, 255, 255, 255);
			break;
		case 7:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU30, 255, 255, 255);
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
		case 8:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU31, 255, 255, 255);
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
		case 9:
			PutAlignedString(sX, sX + szX, sY + iAdjY + 60, DRAW_DIALOGBOX_GUILDMENU32, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 75, DRAW_DIALOGBOX_GUILDMENU33, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 90, DRAW_DIALOGBOX_GUILDMENU34, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 105, DRAW_DIALOGBOX_GUILDMENU35, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 130, DRAW_DIALOGBOX_GUILDMENU36, 255, 255, 255);
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 31);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 30);
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;
		case 10:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU37, 255, 255, 255);
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
		case 11:
			PutAlignedString(sX, sX + szX, sY + iAdjY + 60, DRAW_DIALOGBOX_GUILDMENU38, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 75, DRAW_DIALOGBOX_GUILDMENU39, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 90, DRAW_DIALOGBOX_GUILDMENU40, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 105, DRAW_DIALOGBOX_GUILDMENU41, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 130, DRAW_DIALOGBOX_GUILDMENU42, 255, 255, 255);
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 31);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 30);
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;
		case 12:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU43, 255, 255, 255);
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 13:
			PutAlignedString(sX, sX + szX, sY + iAdjY + 40, DRAW_DIALOGBOX_GUILDMENU44, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 55, DRAW_DIALOGBOX_GUILDMENU45, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 70, DRAW_DIALOGBOX_GUILDMENU46, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 85, DRAW_DIALOGBOX_GUILDMENU47, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 100, DRAW_DIALOGBOX_GUILDMENU48, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 115, DRAW_DIALOGBOX_GUILDMENU49, 255, 255, 255);
			PutAlignedString(sX, sX + szX, sY + iAdjY + 130, DRAW_DIALOGBOX_GUILDMENU50, 255, 255, 255);

			if ((msX > sX + iAdjX + 65) && (msX < sX + iAdjX + 137) && (msY > sY + iAdjY + 168) && (msY < sY + iAdjY + 185))
				PutString(sX + iAdjX + 65 + 25 - 23, sY + iAdjY + 170, DRAW_DIALOGBOX_GUILDMENU51, RGB(255, 255, 255));
			else PutString(sX + iAdjX + 65 + 25 - 23, sY + iAdjY + 170, DRAW_DIALOGBOX_GUILDMENU51, RGB(255, 200, 0));

			if ((msX > sX + iAdjX + 150) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 168) && (msY < sY + iAdjY + 185))
				PutString(sX + iAdjX + 150 + 25 - 23, sY + iAdjY + 170, DRAW_DIALOGBOX_GUILDMENU53, RGB(255, 255, 255));
			else PutString(sX + iAdjX + 150 + 25 - 23, sY + iAdjY + 170, DRAW_DIALOGBOX_GUILDMENU53, RGB(255, 200, 0));

			if ((msX > sX + iAdjX + 65) && (msX < sX + iAdjX + 137) && (msY > sY + iAdjY + 188) && (msY < sY + iAdjY + 205))
				PutString(sX + iAdjX + 65 + 25 - 23, sY + iAdjY + 190, DRAW_DIALOGBOX_GUILDMENU55, RGB(255, 255, 255));
			else PutString(sX + iAdjX + 65 + 25 - 23, sY + iAdjY + 190, DRAW_DIALOGBOX_GUILDMENU55, RGB(255, 200, 0));

			if ((msX > sX + iAdjX + 150) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 188) && (msY < sY + iAdjY + 205))
				PutString(sX + iAdjX + 150 + 25 - 23, sY + iAdjY + 190, DRAW_DIALOGBOX_GUILDMENU57, RGB(255, 255, 255));
			else PutString(sX + iAdjX + 150 + 25 - 23, sY + iAdjY + 190, DRAW_DIALOGBOX_GUILDMENU57, RGB(255, 200, 0));

			if ((msX > sX + iAdjX + 65) && (msX < sX + iAdjX + 137) && (msY > sY + iAdjY + 208) && (msY < sY + iAdjY + 225))
				PutString(sX + iAdjX + 65 + 25 - 23, sY + iAdjY + 210, DRAW_DIALOGBOX_GUILDMENU59, RGB(255, 255, 255));
			else PutString(sX + iAdjX + 65 + 25 - 23, sY + iAdjY + 210, DRAW_DIALOGBOX_GUILDMENU59, RGB(255, 200, 0));

			if ((msX > sX + iAdjX + 150) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 208) && (msY < sY + iAdjY + 225))
				PutString(sX + iAdjX + 150 + 25 - 23, sY + iAdjY + 210, DRAW_DIALOGBOX_GUILDMENU61, RGB(255, 255, 255));
			else PutString(sX + iAdjX + 150 + 25 - 23, sY + iAdjY + 210, DRAW_DIALOGBOX_GUILDMENU61, RGB(255, 200, 0));

			if ((msX > sX + iAdjX + 65) && (msX < sX + iAdjX + 137) && (msY > sY + iAdjY + 228) && (msY < sY + iAdjY + 245))
				PutString(sX + iAdjX + 65 + 25 - 23, sY + iAdjY + 230, DRAW_DIALOGBOX_GUILDMENU63, RGB(255, 255, 255));
			else PutString(sX + iAdjX + 65 + 25 - 23, sY + iAdjY + 230, DRAW_DIALOGBOX_GUILDMENU63, RGB(255, 200, 0));

			if ((msX > sX + iAdjX + 150) && (msX < sX + iAdjX + 222) && (msY > sY + iAdjY + 228) && (msY < sY + iAdjY + 245))
				PutString(sX + iAdjX + 150 + 25 - 23, sY + iAdjY + 230, DRAW_DIALOGBOX_GUILDMENU65, RGB(255, 255, 255));
			else PutString(sX + iAdjX + 150 + 25 - 23, sY + iAdjY + 230, DRAW_DIALOGBOX_GUILDMENU65, RGB(255, 200, 0));

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 14:
			PutAlignedString(sX, sX + szX, sY + 130, DRAW_DIALOGBOX_GUILDMENU66, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 145, DRAW_DIALOGBOX_GUILDMENU67, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 160, DRAW_DIALOGBOX_GUILDMENU68, 255, 255, 255);//
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 15:
			PutAlignedString(sX, sX + szX, sY + 135, DRAW_DIALOGBOX_GUILDMENU69, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_GUILDMENU70, 255, 255, 255);//"
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 16:
			PutAlignedString(sX, sX + szX, sY + 135, DRAW_DIALOGBOX_GUILDMENU71, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_GUILDMENU72, 255, 255, 255);//"
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 17:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU73, 255, 255, 255);//"
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 18:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU74, 255, 255, 255);//"
			break;

		case 19:
			if (DecriptInt(m_iFightzoneNumber) > 0)
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GETOCCUPYFIGHTZONETICKET, NULL, NULL, NULL, NULL, NULL);
			m_stDialogBoxInfo[7].cMode = 0;
			break;

		case 20:
		//	DecriptString(m_cGuildName);
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_GUILDMENU75, 255, 255, 255);//"
			PutString(sX + 75, sY + 144, "____________________", RGB(255, 255, 255));
			PutString(sX + 75, sY + 140, m_cGuildName, RGB(255, 255, 255), FALSE, 2);
		//	EncriptString(m_cGuildName);

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 25);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 24);
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 21:
			PutAlignedString(sX, sX + szX, sY + iAdjY + 95, DRAW_DIALOGBOX_GUILDMENU76, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + iAdjY + 110, DRAW_DIALOGBOX_GUILDMENU77, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + iAdjY + 135, DRAW_DIALOGBOX_GUILDMENU78, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + iAdjY + 150, DRAW_DIALOGBOX_GUILDMENU79, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + iAdjY + 165, DRAW_DIALOGBOX_GUILDMENU80, 255, 255, 255);//"
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 22:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU81, 255, 255, 255);//"
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 23:
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_GUILDMENU82, 255, 255, 255);//"
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;
	}
}

void CGame::DrawDialogBox_GuildOperation(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[8].sX;
	sY = m_stDialogBoxInfo[8].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 19);

	switch (m_stGuildOpList[0].cOpMode) {
		case 1:
			PutAlignedString(sX + 24, sX + 248, sY + 50, DRAW_DIALOGBOX_GUILD_OPERATION1);
			PutAlignedString(sX + 24, sX + 248, sY + 65, m_stGuildOpList[0].cName, 35, 35, 35);
			PutAlignedString(sX + 24, sX + 248, sY + 69, "____________________", 0, 0, 0);
			PutAlignedString(sX + 24, sX + 248, sY + 90, DRAW_DIALOGBOX_GUILD_OPERATION2);
			PutAlignedString(sX + 24, sX + 248, sY + 105, DRAW_DIALOGBOX_GUILD_OPERATION3);
			PutAlignedString(sX + 24, sX + 248, sY + 120, DRAW_DIALOGBOX_GUILD_OPERATION4);
			PutAlignedString(sX + 24, sX + 248, sY + 160, DRAW_DIALOGBOX_GUILD_OPERATION5, 55, 25, 25);

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 33);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 32);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 35);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 34);
			break;

		case 2:
			PutAlignedString(sX + 24, sX + 248, sY + 50, DRAW_DIALOGBOX_GUILD_OPERATION6);
			PutAlignedString(sX + 24, sX + 248, sY + 65, m_stGuildOpList[0].cName, 35, 35, 35);
			PutAlignedString(sX + 24, sX + 248, sY + 69, "____________________", 0, 0, 0);
			PutAlignedString(sX + 24, sX + 248, sY + 90, DRAW_DIALOGBOX_GUILD_OPERATION7);
			PutAlignedString(sX + 24, sX + 248, sY + 105, DRAW_DIALOGBOX_GUILD_OPERATION8);
			PutAlignedString(sX + 24, sX + 248, sY + 120, DRAW_DIALOGBOX_GUILD_OPERATION9);
			PutAlignedString(sX + 24, sX + 248, sY + 160, DRAW_DIALOGBOX_GUILD_OPERATION10, 55, 25, 25);

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 33);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 32);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 35);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 34);
			break;

		case 3:
			PutAlignedString(sX + 24, sX + 248, sY + 50, DRAW_DIALOGBOX_GUILD_OPERATION11);
			PutAlignedString(sX + 24, sX + 248, sY + 65, m_stGuildOpList[0].cName, 35, 35, 35);
			PutAlignedString(sX + 24, sX + 248, sY + 69, "____________________", 0, 0, 0);
			PutAlignedString(sX + 24, sX + 248, sY + 90, DRAW_DIALOGBOX_GUILD_OPERATION12);
			PutAlignedString(sX + 24, sX + 248, sY + 105, DRAW_DIALOGBOX_GUILD_OPERATION13);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 4:
			PutAlignedString(sX + 24, sX + 248, sY + 50, DRAW_DIALOGBOX_GUILD_OPERATION14);
			PutAlignedString(sX + 24, sX + 248, sY + 65, m_stGuildOpList[0].cName, 35, 35, 35);
			PutAlignedString(sX + 24, sX + 248, sY + 69, "____________________", 0, 0, 0);
			PutAlignedString(sX + 24, sX + 248, sY + 90, DRAW_DIALOGBOX_GUILD_OPERATION15);
			PutAlignedString(sX + 24, sX + 248, sY + 105, DRAW_DIALOGBOX_GUILD_OPERATION16);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 5:
			PutAlignedString(sX + 24, sX + 248, sY + 50, DRAW_DIALOGBOX_GUILD_OPERATION17);
			PutAlignedString(sX + 24, sX + 248, sY + 65, m_stGuildOpList[0].cName, 35, 35, 35);
			PutAlignedString(sX + 24, sX + 248, sY + 69, "____________________", 0, 0, 0);
			PutAlignedString(sX + 24, sX + 248, sY + 90, DRAW_DIALOGBOX_GUILD_OPERATION18);
			PutAlignedString(sX + 24, sX + 248, sY + 105, DRAW_DIALOGBOX_GUILD_OPERATION19);
			PutAlignedString(sX + 24, sX + 248, sY + 120, DRAW_DIALOGBOX_GUILD_OPERATION20);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 6:
			PutAlignedString(sX + 24, sX + 248, sY + 50, DRAW_DIALOGBOX_GUILD_OPERATION21);
			PutAlignedString(sX + 24, sX + 248, sY + 65, m_stGuildOpList[0].cName, 35, 35, 35);
			PutAlignedString(sX + 24, sX + 248, sY + 69, "____________________", 0, 0, 0);
			PutAlignedString(sX + 24, sX + 248, sY + 90, DRAW_DIALOGBOX_GUILD_OPERATION22);
			PutAlignedString(sX + 24, sX + 248, sY + 105, DRAW_DIALOGBOX_GUILD_OPERATION23);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 7:
			PutAlignedString(sX + 24, sX + 248, sY + 50, DRAW_DIALOGBOX_GUILD_OPERATION24);
			//PutString(sX + 60, sY + 65, m_stGuildOpList[0].cName, RGB(35,35,35));
			//PutString(sX + 60, sY + 69, "____________________", RGB(0,0,0));
			PutAlignedString(sX + 24, sX + 248, sY + 90, DRAW_DIALOGBOX_GUILD_OPERATION25);
			PutAlignedString(sX + 24, sX + 248, sY + 105, DRAW_DIALOGBOX_GUILD_OPERATION26);
			PutAlignedString(sX + 24, sX + 248, sY + 120, DRAW_DIALOGBOX_GUILD_OPERATION27);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
	}
}

int  _tmp_iMCProb[] = { 0, 300, 250, 200, 150, 100, 80, 70, 60, 50, 40 };
int  _tmp_iMLevelPenalty[] = { 0, 5, 5, 8, 8, 10, 14, 28, 32, 36, 40 };

void CGame::DrawDialogBox_Magic(short msX, short msY, short msZ)
{
	short sX, sY, sMagicCircle, sLevelMagic;
	int  iCPivot, i, iYloc, iResult, iManaCost;
	char cTxt[120], cMana[10];
	DWORD dwTime = m_dwCurTime;
	double dV1, dV2, dV3, dV4;
	int r, g, b;

	sX = m_stDialogBoxInfo[3].sX;
	sY = m_stDialogBoxInfo[3].sY;

	short limitX, limitY;
	limitX = sX + m_stDialogBoxInfo[3].sSizeX;
	limitY = sY + m_stDialogBoxInfo[3].sSizeY;

	m_DDraw.DrawItemShadowBox(sX, sY, limitX, limitY);
	m_DDraw.DrawItemShadowBox(sX, sY, limitX, limitY);

	PutString_SprFont2(sX + 100, sY + 5, "Magics", 240, 240, 240);

	r = 255;
	g = 255;
	b = 255;

	if (iGetTopDialogBoxIndex() == 3 && msZ != 0)
	{
		if (msZ > 0) m_stDialogBoxInfo[3].sView--;
		if (msZ < 0) m_stDialogBoxInfo[3].sView++;
		m_DInput.m_sZ = 0;
	}
	if (m_stDialogBoxInfo[3].sView < 0) m_stDialogBoxInfo[3].sView = 9;
	if (m_stDialogBoxInfo[3].sView > 9) m_stDialogBoxInfo[3].sView = 0;

	//Circle
	ZeroMemory(cTxt, sizeof(cTxt));
	switch (m_stDialogBoxInfo[3].sView) {
	case 0: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC1);  break;//"Circle One"
	case 1: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC2);  break;//"Circle Two"
	case 2: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC3);  break;//"Circle Three"
	case 3: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC4);  break;//"Circle Four"
	case 4: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC5);  break;//"Circle Five"
	case 5: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC6);  break;//"Circle Six"
	case 6: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC7);  break;//"Circle Seven"
	case 7: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC8);  break;//"Circle Eight"
	case 8: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC9);  break;//"Circle Nine"
	case 9: strcpy(cTxt, DRAW_DIALOGBOX_MAGIC10); break;//"Circle Ten"
	}
	PutAlignedString(sX + 3, sX + 256, sY + 50, cTxt, 0, 255, 0);
	//PutAlignedString(sX + 4, sX + 257, sY + 50, cTxt, 0,255,0);
	iCPivot = m_stDialogBoxInfo[3].sView * 10;
	iYloc = 0;

	for (i = 0; i < 9; i++) {
		if ((m_cMagicMastery[iCPivot + i] != 0) && (m_pMagicCfgList[iCPivot + i] != 0)) {
			wsprintf(cTxt, "%s", m_pMagicCfgList[iCPivot + i]->m_cName);

			m_Misc.ReplaceString(cTxt, '-', ' ');
			iManaCost = iGetManaCost(iCPivot + i);
			if (iManaCost > m_iMP)
			{
				if (m_Misc.bCheckIMEString(cTxt) == false)
				{
					PutString(sX + 30, sY + 73 + iYloc, cTxt, RGB(41, 16, 41));
					PutString(sX + 31, sY + 73 + iYloc, cTxt, RGB(41, 16, 41));
				}
				else PutString_SprFont(sX + 30, sY + 70 + iYloc, cTxt, 5, 5, 5);
				wsprintf(cMana, "%3d", iManaCost);
				PutString_SprFont(sX + 206, sY + 70 + iYloc, cMana, 5, 5, 5);
			}
			else
				if ((msX >= sX + 30) && (msX <= sX + 240) && (msY >= sY + 70 + iYloc) && (msY <= sY + 70 + 14 + iYloc))
				{
					if (m_Misc.bCheckIMEString(cTxt) == false)
					{
						PutString(sX + 30, sY + 73 + iYloc, cTxt, RGB(255, 255, 255));
						PutString(sX + 31, sY + 73 + iYloc, cTxt, RGB(255, 255, 255));
					}
					else PutString_SprFont2(sX + 30, sY + 70 + iYloc, cTxt, 255, 255, 255);
					wsprintf(cMana, "%3d", iManaCost);
					PutString_SprFont2(sX + 206, sY + 70 + iYloc, cMana, 255, 255, 255);
				}
				else
				{
					if (m_Misc.bCheckIMEString(cTxt) == false)
					{
						PutString(sX + 30, sY + 73 + iYloc, cTxt, RGB(8, 0, 66));
						PutString(sX + 31, sY + 73 + iYloc, cTxt, RGB(8, 0, 66));
					}
					else PutString_SprFont2(sX + 30, sY + 70 + iYloc, cTxt, 19, 104, 169);
					wsprintf(cMana, "%3d", iManaCost);
					PutString_SprFont2(sX + 206, sY + 70 + iYloc, cMana, 19, 104, 169);
				}

			iYloc += 18;
		}

	}

	if (iYloc == 0) {
		PutAlignedString(sX + 3, sX + 256, sY + 100, DRAW_DIALOGBOX_MAGIC11, r, g, b);//"
		PutAlignedString(sX + 3, sX + 256, sY + 115, DRAW_DIALOGBOX_MAGIC12, r, g, b);//"
		PutAlignedString(sX + 3, sX + 256, sY + 130, DRAW_DIALOGBOX_MAGIC13, r, g, b);//"
		PutAlignedString(sX + 3, sX + 256, sY + 145, DRAW_DIALOGBOX_MAGIC14, r, g, b);//"
		PutAlignedString(sX + 3, sX + 256, sY + 160, DRAW_DIALOGBOX_MAGIC15, r, g, b);//"
	}

	m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 30, sY + 250, 19, dwTime);

	switch (m_stDialogBoxInfo[3].sView) {
	case 0: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 30, sY + 250, 20, dwTime); break;
	case 1: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 43, sY + 250, 21, dwTime); break;
	case 2: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 61, sY + 250, 22, dwTime); break;
	case 3: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 86, sY + 250, 23, dwTime); break;
	case 4: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 106, sY + 250, 24, dwTime); break;
	case 5: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 121, sY + 250, 25, dwTime); break;
	case 6: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 142, sY + 250, 26, dwTime); break;
	case 7: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 169, sY + 250, 27, dwTime); break;
	case 8: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 202, sY + 250, 28, dwTime); break;
	case 9: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 222, sY + 250, 29, dwTime); break;
	}

	sMagicCircle = m_stDialogBoxInfo[3].sView + 1;
	if (m_cSkillMastery[4] == 0)
		dV1 = 1.0f;
	else dV1 = (double)m_cSkillMastery[4];
	dV2 = (double)(dV1 / 100.0f);
	dV3 = (double)_tmp_iMCProb[sMagicCircle];
	dV1 = dV2 * dV3;
	iResult = (int)dV1;
	if ((m_iInt + DecriptInt(m_iAngelicInt)) > 50) iResult += ((m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) - 50) / 2;
	sLevelMagic = (DecriptInt(m_iLevel) / 10);
	if (sMagicCircle != sLevelMagic)
	{
		if (sMagicCircle > sLevelMagic)
		{
			dV1 = (double)(DecriptInt(m_iLevel) - sLevelMagic * 10);
			dV2 = (double)abs(sMagicCircle - sLevelMagic)*_tmp_iMLevelPenalty[sMagicCircle];
			dV3 = (double)abs(sMagicCircle - sLevelMagic) * 10;
			dV4 = (dV1 / dV3)*dV2;
			iResult -= abs(abs(sMagicCircle - sLevelMagic)*_tmp_iMLevelPenalty[sMagicCircle] - (int)dV4);
		}
		else
		{
			iResult += 5 * abs(sMagicCircle - sLevelMagic);
		}
	}

	switch (m_cWhetherStatus) {
	case 0: break;
	case 1: iResult = iResult - (iResult / 24); break;
	case 2:	iResult = iResult - (iResult / 12); break;
	case 3: iResult = iResult - (iResult / 5);  break;
	}
	for (i = 0; i < DEF_MAXITEMS; i++)
	{
		if (m_pItemList[i] == NULL) continue;
		if (m_bIsItemEquipped[i] == TRUE)
		{
			if (((m_pItemList[i]->m_dwAttribute & 0x00F00000) >> 20) == 10)
			{
				dV1 = (double)iResult;
				dV2 = (double)(((m_pItemList[i]->m_dwAttribute & 0x000F0000) >> 16) * 3);
				dV3 = dV1 + dV2;
				iResult = (int)dV3;
				break;
			}
		}
	}

	if (iResult > 100) iResult = 100;
	if (m_iSP < 1) iResult = iResult * 9 / 10;
	if (iResult < 1) iResult = 1;

	ZeroMemory(cTxt, sizeof(cTxt));
	wsprintf(cTxt, DRAW_DIALOGBOX_MAGIC16, iResult);//"
	PutAlignedString(sX, sX + 256, sY + 267 - 5, cTxt, r, g, b);
	//PutAlignedString(sX + 1, sX + 257, sY + 267, cTxt);

	
	DrawMenu_SmallButton(sX, sY, msX, msY, DEF_RBTNPOSX, 285, "Alchemy");
		
}

/*
void CGame::DrawDialogBox_MagicShop(short msX, short msY, short msZ)
{
	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	int  i;

	int  iCPivot, iYloc;
	char cTxt[120], cMana[10];

	sX = m_stDialogBoxInfo[16].sX;
	sY = m_stDialogBoxInfo[16].sY;
	short sizeX = m_stDialogBoxInfo[16].sSizeX;

	DrawShadowDialog2(sX, sY, 16);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "Magic Shop", 255, 255, 255);

	if (iGetTopDialogBoxIndex() == 16 && msZ != 0)
	{
		if (msZ > 0) m_stDialogBoxInfo[16].sView--;
		if (msZ < 0) m_stDialogBoxInfo[16].sView++;
		m_DInput.m_sZ = 0;
	}
	if (m_stDialogBoxInfo[16].sView < 0) m_stDialogBoxInfo[16].sView = 9;
	if (m_stDialogBoxInfo[16].sView > 9) m_stDialogBoxInfo[16].sView = 0;

	PutString(sX - 20 + 60 - 17, sY - 35 + 90, DRAW_DIALOGBOX_MAGICSHOP11, RGB(45, 25, 25));//"Spell Name"
	PutString(sX - 20 + 232 - 20, sY - 35 + 90, DRAW_DIALOGBOX_MAGICSHOP12, RGB(45, 25, 25));//"Req.Int"
	PutString(sX - 20 + 270, sY - 35 + 90, DRAW_DIALOGBOX_MAGICSHOP13, RGB(45, 25, 25));//"Cost"

	iCPivot = m_stDialogBoxInfo[16].sView * 10;

	iYloc = 0;
	for (i = 0; i < 9; i++) {
		if ((m_pMagicCfgList[iCPivot + i] != NULL) && (m_pMagicCfgList[iCPivot + i]->m_bIsVisible)) {
			wsprintf(cTxt, "%s", m_pMagicCfgList[iCPivot + i]->m_cName);

			m_Misc.ReplaceString(cTxt, '-', ' ');
			if (m_cMagicMastery[iCPivot + i] != 0) {
				if (m_Misc.bCheckIMEString(cTxt) == FALSE)
				{
					PutString(sX + 24, sY + 73 + iYloc, cTxt, RGB(41, 16, 41));
					PutString(sX + 25, sY + 73 + iYloc, cTxt, RGB(41, 16, 41));
				}
				else PutString_SprFont(sX + 24, sY + 70 + iYloc, cTxt, 5, 5, 5);
				wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue2);
				PutString_SprFont(sX + 200, sY + 70 + iYloc, cMana, 5, 5, 5);
				wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue3);
				PutString_SprFont(sX + 241, sY + 70 + iYloc, cMana, 5, 5, 5);
			}
			else
				if ((msX >= sX + 24) && (msX <= sX + 24 + 135) && (msY >= sY + 70 + iYloc) && (msY <= sY + 70 + 14 + iYloc)) {
					if (m_Misc.bCheckIMEString(cTxt) == FALSE)
					{
						PutString(sX + 24, sY + 73 + iYloc, cTxt, RGB(255, 255, 255));
						PutString(sX + 25, sY + 73 + iYloc, cTxt, RGB(255, 255, 255));
					}
					else PutString_SprFont(sX - 20 + 44, sY + 70 + iYloc, cTxt, 250, 250, 250);
					wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue2);
					PutString_SprFont(sX - 20 + 220, sY + 70 + iYloc, cMana, 250, 250, 250);
					wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue3);
					PutString_SprFont(sX - 20 + 261, sY + 70 + iYloc, cMana, 250, 250, 250);
				}
				else {
					if (m_Misc.bCheckIMEString(cTxt) == FALSE)
					{
						PutString(sX + 24, sY + 73 + iYloc, cTxt, RGB(8, 0, 66));
						PutString(sX + 25, sY + 73 + iYloc, cTxt, RGB(8, 0, 66));
					}
					else PutString_SprFont(sX - 20 + 44, sY + 70 + iYloc, cTxt, 1, 1, 8);
					wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue2);
					PutString_SprFont(sX - 20 + 220, sY + 70 + iYloc, cMana, 1, 1, 8);
					wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue3);
					PutString_SprFont(sX - 20 + 261, sY + 70 + iYloc, cMana, 1, 1, 8);
				}
				iYloc += 18;
		}
	}

	m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 55, sY + 250, 19, dwTime);

	switch (m_stDialogBoxInfo[16].sView) {
		case 0: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 44 + 31, sY + 250, 20, dwTime); break;
		case 1: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 57 + 31, sY + 250, 21, dwTime); break;
		case 2: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 75 + 31, sY + 250, 22, dwTime); break;
		case 3: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 100 + 31, sY + 250, 23, dwTime); break;
		case 4: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 120 + 31, sY + 250, 24, dwTime); break;
		case 5: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 135 + 31, sY + 250, 25, dwTime); break;
		case 6: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 156 + 31, sY + 250, 26, dwTime); break;
		case 7: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 183 + 31, sY + 250, 27, dwTime); break;
		case 8: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 216 + 31, sY + 250, 28, dwTime); break;
		case 9: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 236 + 31, sY + 250, 29, dwTime); break;
	}

	PutAlignedString(sX, sX + m_stDialogBoxInfo[16].sSizeX, sY + 275, DRAW_DIALOGBOX_MAGICSHOP14, 45, 25, 25);
}*/

void CGame::DrawDialogBox_MagicShop(short msX, short msY, short msZ)
{
	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	int  i;

	int  iCPivot, iYloc;
	char cTxt[120], cMana[10];

	sX = m_stDialogBoxInfo[16].sX;
	sY = m_stDialogBoxInfo[16].sY;
	short sizeX = m_stDialogBoxInfo[16].sSizeX;

	DrawShadowDialog2(sX, sY, 16);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "Magic Shop", 255, 255, 255);

	if (iGetTopDialogBoxIndex() == 16 && msZ != 0)
	{
		if (msZ > 0) m_stDialogBoxInfo[16].sView--;
		if (msZ < 0) m_stDialogBoxInfo[16].sView++;
		m_DInput.m_sZ = 0;
	}
	if (m_stDialogBoxInfo[16].sView < 0) m_stDialogBoxInfo[16].sView = 9;
	if (m_stDialogBoxInfo[16].sView > 9) m_stDialogBoxInfo[16].sView = 0;

	PutString(sX - 20 + 60 - 17, sY - 35 + 90, DRAW_DIALOGBOX_MAGICSHOP11, RGB(255,255,255)); //"Spell Name"
	PutString(sX - 20 + 232 - 20 + 10 + 5 + 50, sY - 35 + 90, DRAW_DIALOGBOX_MAGICSHOP12, RGB(255, 255, 255)); //"Req.Int"
	PutString(sX - 20 + 270 + 50 - 5, sY - 35 + 90, DRAW_DIALOGBOX_MAGICSHOP13, RGB(255, 255, 255)); //"Cost"

	iCPivot = m_stDialogBoxInfo[16].sView * 10;

	iYloc = 0;
	for (i = 0; i < 9; i++) {
		if ((m_pMagicCfgList[iCPivot + i] != NULL) && (m_pMagicCfgList[iCPivot + i]->m_bIsVisible)) {
			wsprintf(cTxt, "%s", m_pMagicCfgList[iCPivot + i]->m_cName);

			m_Misc.ReplaceString(cTxt, '-', ' ');
			if (m_cMagicMastery[iCPivot + i] != 0) {
				if (m_Misc.bCheckIMEString(cTxt) == FALSE)
				{
					PutString(sX + 24, sY + 73 + iYloc, cTxt, RGB(255, 255, 255)); // Blanco
					PutString(sX + 25, sY + 73 + iYloc, cTxt, RGB(255, 255, 255)); // Blanco
				}
				else PutString_SprFont2(sX + 24, sY + 70 + iYloc, cTxt, 0, 255, 0); // Amarillo
				wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue2);
				PutString_SprFont2(sX + 200 + 50, sY + 70 + iYloc, cMana, 255,255,255); // Verde
				wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue3);
				PutString_SprFont2(sX + 241 + 50, sY + 70 + iYloc, cMana, 255, 255, 255); // Verde
			}
			else
				if ((msX >= sX + 24) && (msX <= sX + 24 + 135 + 100) && (msY >= sY + 70 + iYloc) && (msY <= sY + 70 + 14 + iYloc)) {
					if (m_Misc.bCheckIMEString(cTxt) == FALSE)
					{
						PutString(sX + 24, sY + 73 + iYloc, cTxt, RGB(255, 255, 255)); // Blanco al pasar el mouse
						PutString(sX + 25, sY + 73 + iYloc, cTxt, RGB(255, 255, 255)); // Blanco al pasar el mouse
					}
					else PutString_SprFont2(sX - 20 + 44, sY + 70 + iYloc, cTxt, 255, 255, 255); // Blanco al pasar el mouse
					wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue2);
					PutString_SprFont2(sX - 20 + 220 + 50, sY + 70 + iYloc, cMana, 255, 255, 255); // Verde
					wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue3);
					PutString_SprFont2(sX - 20 + 261 + 50, sY + 70 + iYloc, cMana, 255, 255, 255); // Verde
				}
				else {
					if (m_Misc.bCheckIMEString(cTxt) == FALSE)
					{
						PutString(sX + 24, sY + 73 + iYloc, cTxt, RGB(255, 255, 255)); // Blanco
						PutString(sX + 25, sY + 73 + iYloc, cTxt, RGB(255, 255, 255)); // Blanco
					}
					else PutString_SprFont2(sX - 20 + 44, sY + 70 + iYloc, cTxt, 255, 200, 0); // Amarillo
					wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue2);
					PutString_SprFont2(sX - 20 + 220 + 50, sY + 70 + iYloc, cMana, 255, 255, 255); // Verde
					wsprintf(cMana, "%3d", m_pMagicCfgList[iCPivot + i]->m_sValue3);
					PutString_SprFont2(sX - 20 + 261 + 50, sY + 70 + iYloc, cMana, 255, 255, 255); // Verde
				}
				iYloc += 18;
		}
	}

	m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX + 55, sY + 250, 19, dwTime);

	switch (m_stDialogBoxInfo[16].sView) {
	case 0: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 44 + 31, sY + 250, 20, dwTime); break;
	case 1: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 57 + 31, sY + 250, 21, dwTime); break;
	case 2: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 75 + 31, sY + 250, 22, dwTime); break;
	case 3: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 100 + 31, sY + 250, 23, dwTime); break;
	case 4: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 120 + 31, sY + 250, 24, dwTime); break;
	case 5: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 135 + 31, sY + 250, 25, dwTime); break;
	case 6: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 156 + 31, sY + 250, 26, dwTime); break;
	case 7: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 183 + 31, sY + 250, 27, dwTime); break;
	case 8: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 216 + 31, sY + 250, 28, dwTime); break;
	case 9: m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS]->PutSpriteFast(sX - 20 + 236 + 31, sY + 250, 29, dwTime); break;
	}

	PutAlignedString(sX, sX + m_stDialogBoxInfo[16].sSizeX, sY + 275, DRAW_DIALOGBOX_MAGICSHOP14, 255,255,255);
}


void CGame::DrawDialogBox_ShutDownMsg(short msX, short msY)
{
	short sX, sY, szX;

	sX = m_stDialogBoxInfo[25].sX;
	sY = m_stDialogBoxInfo[25].sY;
	szX = m_stDialogBoxInfo[25].sSizeX;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, sX, sY, 2);

	switch (m_stDialogBoxInfo[25].cMode) {
		case 1:
			ZeroMemory(G_cTxt, sizeof(G_cTxt));
			if (m_stDialogBoxInfo[25].sV1 != 0) wsprintf(G_cTxt, DRAW_DIALOGBOX_NOTICEMSG1, m_stDialogBoxInfo[25].sV1);
			else strcpy(G_cTxt, DRAW_DIALOGBOX_NOTICEMSG2);
			PutAlignedString(sX, sX + szX, sY + 31, G_cTxt, 100, 10, 10);
			PutAlignedString(sX, sX + szX, sY + 48, DRAW_DIALOGBOX_NOTICEMSG3);
			PutAlignedString(sX, sX + szX, sY + 65, DRAW_DIALOGBOX_NOTICEMSG4);
			PutAlignedString(sX, sX + szX, sY + 82, DRAW_DIALOGBOX_NOTICEMSG5);
			PutAlignedString(sX, sX + szX, sY + 99, DRAW_DIALOGBOX_NOTICEMSG6);
			if ((msX >= sX + 210) && (msX <= sX + 210 + DEF_BTNSZX) && (msY > sY + 127) && (msY < sY + 127 + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 210, sY + 127, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 210, sY + 127, 0);
			break;

		case 2:
			PutAlignedString(sX, sX + szX, sY + 31, DRAW_DIALOGBOX_NOTICEMSG7, 100, 10, 10);
			PutAlignedString(sX, sX + szX, sY + 48, DRAW_DIALOGBOX_NOTICEMSG8);
			PutAlignedString(sX, sX + szX, sY + 65, DRAW_DIALOGBOX_NOTICEMSG9);
			PutAlignedString(sX, sX + szX, sY + 82, DRAW_DIALOGBOX_NOTICEMSG10);
			PutAlignedString(sX, sX + szX, sY + 99, DRAW_DIALOGBOX_NOTICEMSG11);
			if ((msX >= sX + 210) && (msX <= sX + 210 + DEF_BTNSZX) && (msY > sY + 127) && (msY < sY + 127 + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 210, sY + 127, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 210, sY + 127, 0);
			break;
	}
}

void CGame::DrawDialogBox_NpcActionQuery(short msX, short msY)
{
	short sX, sY, szX;

	char cTxt[120], cTxt2[120], cStr1[64], cStr2[64], cStr3[64];

	ZeroMemory(cStr1, sizeof(cStr1));
	ZeroMemory(cStr2, sizeof(cStr2));
	ZeroMemory(cStr3, sizeof(cStr3));

	sX = m_stDialogBoxInfo[20].sX;
	sY = m_stDialogBoxInfo[20].sY;
	szX = m_stDialogBoxInfo[20].sSizeX;

	//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 5); //5
	//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 6); //6

	switch (m_stDialogBoxInfo[20].cMode) {
		case 0: // npc
///			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 5);
			DrawShadowDialog2(sX, sY, 20);
			switch (m_stDialogBoxInfo[20].sV3) {
				case 15:
					PutString(sX + 33, sY + 23, NPC_NAME_SHOP_KEEPER, RGB(255,255,255));
					break;
				case 19:
					PutString(sX + 33, sY + 23, NPC_NAME_MAGICIAN, RGB(255,255,255));
					break;
				case 20:
					PutString(sX + 33, sY + 23, NPC_NAME_WAREHOUSE_KEEPER, RGB(255,255,255));
					break;
				case 24:
					PutString(sX + 33, sY + 23, NPC_NAME_BLACKSMITH_KEEPER, RGB(255,255,255));
					break;
				case 25:
					PutString(sX + 33, sY + 23, NPC_NAME_CITYHALL_OFFICER, RGB(255,255,255));

					if ((msX > sX + 125 - 50) && (msX < sX + 170 - 50) && (msY > sY + 55) && (msY < sY + 70)) {
						PutString(sX + 125 - 50, sY + 55, "Rebirth", RGB(255, 255, 255)); // "Talk"
						PutString(sX + 126 - 50, sY + 55, "Rebirth", RGB(255, 255, 255));
					}
					else {
						PutString(sX + 125 - 50, sY + 55, "Rebirth", RGB(255,255,0));
						PutString(sX + 126 - 50, sY + 55, "Rebirth", RGB(255,255,0));
					}
					break;
				case 26: // "Guildhall Officer"
					PutString(sX + 33, sY + 23, NPC_NAME_GUILDHALL_OFFICER, RGB(255,255,255));
					break;
				case 90: //Gail
					PutString(sX + 33, sY + 23, "Trade Officer", RGB(255,255,255));
					break;
				case 111: //Gail
					PutString(sX + 33, sY + 23, "Assassin Officer", RGB(255,255,255));
					break;
			}

			if (m_stDialogBoxInfo[20].sV3 == 25)
			{   // OFFER
				if ((msX > sX + 25) && (msX < sX + 70) && (msY > sY + 55) && (msY < sY + 70)) {
					PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY13, RGB(255, 255, 255)); // "Offer"
					PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY13, RGB(255, 255, 255));
				}
				else {
					PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY13, RGB(255,255,0));
					PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY13, RGB(255,255,0));
				}
			}
			else if (m_stDialogBoxInfo[20].sV3 == 20)
			{   // WITHDRAW
				if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70)) {
					PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY17, RGB(255, 255, 255)); // "Withdraw"
					PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY17, RGB(255, 255, 255));
				}
				else {
					PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY17, RGB(255,255,0));
					PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY17, RGB(255,255,0));
				}
			}
			else if (m_stDialogBoxInfo[20].sV3 == 19) // CLEROTH: MAGICIAN
			{   // LEARN
				if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70)) {
					PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY19, RGB(255, 255, 255)); // "Learn"
					PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY19, RGB(255, 255, 255));
				}
				else {
					PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY19, RGB(255,255,0));
					PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY19, RGB(255,255,0));
				}
			}
			else
			{   // TRADE
				if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70)) {
					PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255)); // "Trade"
					PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255));
				}
				else {
					PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
					PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
				}
			}

			if (m_bIsDialogEnabled[21] == FALSE)
			{
				if ((msX > sX + 125) && (msX < sX + 180) && (msY > sY + 55) && (msY < sY + 70)) {
					PutString(sX + 125, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255, 255, 255)); // "Talk"
					PutString(sX + 126, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255, 255, 255));
				}
				else {
					PutString(sX + 125, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255,255,0));
					PutString(sX + 126, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255,255,0));
				}
			}
			break;

		case 1: // Other char
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 6);
			DrawShadowDialog2(sX, sY, 20);
			GetItemName(m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cName, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_sItemSpecEffectValue3);
			wsprintf(cTxt, DRAW_DIALOGBOX_NPCACTION_QUERY29, m_stDialogBoxInfo[20].sV3, cStr1); //"%d %s to"
			wsprintf(cTxt2, DRAW_DIALOGBOX_NPCACTION_QUERY29_1, m_stDialogBoxInfo[20].cStr); // "%s"

			PutString(sX + 24, sY + 25, cTxt, RGB(255,255,255));
			PutString(sX + 24, sY + 40, cTxt2, RGB(255,255,255));

			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70)) {
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY30, RGB(255, 255, 255));//"Give"
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY30, RGB(255, 255, 255));
			}
			else {
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY30, RGB(255,255,0));
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY30, RGB(255,255,0));
			}

			if ((msX > sX + 155) && (msX < sX + 210) && (msY > sY + 55) && (msY < sY + 70)) {
				PutString(sX + 155, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY34, RGB(255, 255, 255));//"Exchange"
				PutString(sX + 156, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY34, RGB(255, 255, 255));
			}
			else {
				PutString(sX + 155, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY34, RGB(255,255,0));
				PutString(sX + 156, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY34, RGB(255,255,0));
			}
			break;

		case 2: // Shop / BS
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 5);
			DrawShadowDialog2(sX, sY, 20);
			GetItemName(m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cName, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_sItemSpecEffectValue3);

			wsprintf(cTxt, DRAW_DIALOGBOX_NPCACTION_QUERY29, m_stDialogBoxInfo[20].sV3, cStr1);//"%d %s to"
			wsprintf(cTxt2, DRAW_DIALOGBOX_NPCACTION_QUERY29_1, m_stDialogBoxInfo[20].cStr);//"%s"

			PutString(sX + 24, sY + 20, cTxt, RGB(255,255,255));
			PutString(sX + 24, sY + 35, cTxt2, RGB(255,255,255));

			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255, 255, 255));//"Sell"
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255,255,0));
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255,255,0));
			}

			if ((m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cItemType == DEF_ITEMTYPE_CONSUME) ||
				(m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cItemType == DEF_ITEMTYPE_ARROW))
			{
			}
			else
			{
				if ((msX > sX + 125) && (msX < sX + 180) && (msY > sY + 55) && (msY < sY + 70))
				{
					PutString(sX + 125, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY43, RGB(255, 255, 255));//"Repair"
					PutString(sX + 126, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY43, RGB(255, 255, 255));
				}
				else
				{
					PutString(sX + 125, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY43, RGB(255,255,0));
					PutString(sX + 126, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY43, RGB(255,255,0));
				}
			}
			break;

		case 3: // WH
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 6);
			DrawShadowDialog2(sX, sY, 20);
			GetItemName(m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cName, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_sItemSpecEffectValue3);

			wsprintf(cTxt, DRAW_DIALOGBOX_NPCACTION_QUERY29, m_stDialogBoxInfo[20].sV3, cStr1);//"%d %s to"
			wsprintf(cTxt2, DRAW_DIALOGBOX_NPCACTION_QUERY29_1, m_stDialogBoxInfo[20].cStr);//"%s"

			PutAlignedString(sX, sX + 240, sY + 20, cTxt, 255,255,255);
			PutAlignedString(sX, sX + 240, sY + 35, cTxt2, 255,255,255);

			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70)) {
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY48, RGB(255, 255, 255));//"Deposit"
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY48, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY48, RGB(255,255,0));
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY48, RGB(255,255,0));
			}
			break;

		case 4: // talk to npc or unicorn
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 5);
			DrawShadowDialog2(sX, sY, 20);
			switch (m_stDialogBoxInfo[20].sV3) {
				case 21:
					PutString(sX + 35, sY + 25, NPC_NAME_GUARD, RGB(255,255,255));//
					break;
				case 32:
					PutString(sX + 35, sY + 25, NPC_NAME_UNICORN, RGB(255,255,255));//"
					break;
				case 67:
					PutString(sX + 35, sY + 25, NPC_NAME_MCGAFFIN, RGB(255,255,255));
					break;
				case 68:
					PutString(sX + 35, sY + 25, NPC_NAME_PERRY, RGB(255,255,255));
					break;
				case 69:
					PutString(sX + 35, sY + 25, NPC_NAME_DEVLIN, RGB(255,255,255));
					break;

				case 129:
				{
					PutString(sX + 35, sY + 25, "Market Officer", RGB(255,255,255));

					if ((msX > sX + 125 - 100) && (msX < sX + 180 - 100) && (msY > sY + 55) && (msY < sY + 70)) {
						PutString(sX + 125 - 100, sY + 55, "Market Place", RGB(255, 255, 255));
						PutString(sX + 126 - 100, sY + 55, "Market Place", RGB(255, 255, 255));
					}
					else {
						PutString(sX + 125 - 100, sY + 55, "Market Place", RGB(255,255,0));
						PutString(sX + 126 - 100, sY + 55, "Market Place", RGB(255,255,0));
					}
					break;
				}
			}
			
			if (m_bIsDialogEnabled[21] == FALSE && m_stDialogBoxInfo[20].sV3 != 129) {
				if ((msX > sX + 125) && (msX < sX + 180) && (msY > sY + 55) && (msY < sY + 70)) {
					PutString(sX + 125, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255, 255, 255));
					PutString(sX + 126, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255, 255, 255));
				}
				else {
					PutString(sX + 125, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255,255,0));
					PutString(sX + 126, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255,255,0));
				}
			}
			break;

		case 5: // Shop / BS
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 6);
			DrawShadowDialog2(sX, sY, 20);
			PutString(sX + 33, sY + 23, NPC_NAME_SHOP_KEEPER, RGB(255, 255, 255));//Shop Keeper"

			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255));//"Trade"
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
			}

			if ((msX > sX + 25 + 79) && (msX < sX + 80 + 75) && (msY > sY + 55) && (msY < sY + 70))
			{
				PutString(sX + 28 + 75, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255, 255, 255));//"Sell"
				PutString(sX + 29 + 75, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 28 + 75, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255,255,0));
				PutString(sX + 29 + 75, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255,255,0));
			}

			if (m_bIsDialogEnabled[21] == FALSE)
			{
				if ((msX > sX + 155) && (msX < sX + 210) && (msY > sY + 55) && (msY < sY + 70))
				{
					PutString(sX + 155, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255, 255, 255));//"Talk"
					PutString(sX + 156, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255, 255, 255));
				}
				else
				{
					PutString(sX + 155, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255,255,0));
					PutString(sX + 156, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255,255,0));
				}
			}
			break;

		case 6: //Gail
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 5);
			DrawShadowDialog2(sX, sY, 20);
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255)); // "Trade"
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
			}
			PutString(sX + 33, sY + 23, "Trade Officer", RGB(255, 255, 255));
			break;

		case 7: // ZeroEoyPnk - NewDialog - BSmith
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 6);
			DrawShadowDialog2(sX, sY, 20);
			PutString(sX + 33, sY + 23, NPC_NAME_BLACKSMITH_KEEPER, RGB(255, 255, 255));//"BlackSmith Keeper"
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255));//"Trade"
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
			}

			if ((msX > sX + 25 + 79) && (msX < sX + 80 + 75) && (msY > sY + 55) && (msY < sY + 70))
			{
				PutString(sX + 28 + 75, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255, 255, 255));//"Sell"
				PutString(sX + 29 + 75, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 28 + 75, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255,255,0));
				PutString(sX + 29 + 75, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY39, RGB(255,255,0));
			}
			//Repair all - ZeroEoyPnk
			if ((msX > sX + 155) && (msX < sX + 210) && (msY > sY + 55) && (msY < sY + 70))
			{
				PutString(sX + 155, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY43_ALL, RGB(255, 255, 255));//"Talk"
				PutString(sX + 156, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY43_ALL, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 155, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY43_ALL, RGB(255,255,0));
				PutString(sX + 156, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY43_ALL, RGB(255,255,0));
			}
			break;

		case 8:
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 5);
			DrawShadowDialog2(sX, sY, 20);
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255)); // "Trade"
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255, 255, 255));
			}
			else
			{
				PutString(sX + 28, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
				PutString(sX + 29, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY21, RGB(255,255,0));
			}

			if ((msX > sX + 125) && (msX < sX + 180) && (msY > sY + 55) && (msY < sY + 70)) {
				PutString(sX + 125, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255, 255, 255)); // "Talk"
				PutString(sX + 126, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255, 255, 255));
			}
			else {
				PutString(sX + 125, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255,255,0));
				PutString(sX + 126, sY + 55, DRAW_DIALOGBOX_NPCACTION_QUERY25, RGB(255,255,0));
			}

			PutString(sX + 33, sY + 23, "Assassin Officer", RGB(45, 25, 25));
			PutString(sX + 33 - 1, sY + 23 - 1, "Assassin Officer", RGB(255, 255, 255));
			break;

	}
}

void CGame::DrawDialogBox_Party(short msX, short msY)
{
	short sX, sY, szX;
	int  i, iNth;
	sX = m_stDialogBoxInfo[32].sX;
	sY = m_stDialogBoxInfo[32].sY;
	szX = m_stDialogBoxInfo[32].sSizeX;

	DrawShadowDialog2(sX, sY, 32);

	PutCenterString_SpriteFont(sX, sX + szX, sY + 3, "Party Menu", 0, 0, 0);
	PutCenterString_SpriteFont(sX, sX + szX, sY + 4, "Party Menu", 250, 250, 250);

	switch (m_stDialogBoxInfo[32].cMode) {
		case 0:
			if (DecriptInt(m_iPartyStatus) == 0) {
				if ((msX > sX + 80) && (msX < sX + 195) && (msY > sY + 80) && (msY < sY + 100))
					PutAlignedString(sX, sX + szX, sY + 85, DRAW_DIALOGBOX_PARTY1, 255, 255, 255);//"
				else PutAlignedString(sX, sX + szX, sY + 85, DRAW_DIALOGBOX_PARTY1, 255,255,0);//"
			}
			else PutAlignedString(sX, sX + szX, sY + 85, DRAW_DIALOGBOX_PARTY1, 255, 255, 255);//"

			if (DecriptInt(m_iPartyStatus) != 0) {
				if ((msX > sX + 80) && (msX < sX + 195) && (msY > sY + 100) && (msY < sY + 120))
					PutAlignedString(sX, sX + szX, sY + 105, DRAW_DIALOGBOX_PARTY4, 255, 255, 255);//"
				else PutAlignedString(sX, sX + szX, sY + 105, DRAW_DIALOGBOX_PARTY4, 255,255,0);//"
			}
			else PutAlignedString(sX, sX + szX, sY + 105, DRAW_DIALOGBOX_PARTY4, 255, 255, 255);//"

			if (DecriptInt(m_iPartyStatus) != 0) {
				if ((msX > sX + 80) && (msX < sX + 195) && (msY > sY + 120) && (msY < sY + 140))
					PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY6, 255, 255, 255);//"
				else PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY6, 255,255,0);//"
			}
			else PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY6, 255, 255, 255);//"		

			switch (DecriptInt(m_iPartyStatus)) {
				case 0:
					PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_PARTY10, 255, 255, 255);//"
					PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_PARTY11, 255, 255, 255);//"
					PutAlignedString(sX, sX + szX, sY + 185, DRAW_DIALOGBOX_PARTY12, 255, 255, 255);//"
					break;

				case 1:
				case 2:
					PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_PARTY13, 255, 255, 255);//"
					PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_PARTY14, 255, 255, 255);//"
					PutAlignedString(sX, sX + szX, sY + 185, DRAW_DIALOGBOX_PARTY15, 255, 255, 255);//"
					break;
			}

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
			break;

		case 1: //
			wsprintf(G_cTxt, DRAW_DIALOGBOX_PARTY16, m_stDialogBoxInfo[32].cStr);
			PutAlignedString(sX, sX + szX, sY + 95, G_cTxt);
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_PARTY17, 255, 255, 255);//"join the party. You can"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY18, 255, 255, 255);//"share the experience by"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_PARTY19, 255, 255, 255);//"the ratio of level if"
			PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_PARTY20, 255, 255, 255);//"you join the party."
			PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_PARTY21, 255, 255, 255);//"Would you like to join party?"

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;

		case 2:
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_PARTY22, 255, 255, 255);//"Click the character which"
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_PARTY23, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY24, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_PARTY25, 255, 255, 255);//"

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 3:
			wsprintf(G_cTxt, DRAW_DIALOGBOX_PARTY26, m_stDialogBoxInfo[32].cStr);//"
			PutAlignedString(sX, sX + szX, sY + 95, G_cTxt);
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_PARTY27, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY28, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_PARTY29, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_PARTY30, 255, 255, 255);//"

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 4:
			char CoordX[5], CoordY[5], name[8], map[5], coord[8], Mapa[20];
			wsprintf(name, "Nombre");
			wsprintf(map, "Mapa");
			wsprintf(coord, "Coords");
			PutString(sX + 20, sY + 37, name, RGB(255, 255, 255));
			PutString(sX + 100, sY + 37, map, RGB(255, 255, 255));
			PutString(sX + 190, sY + 37, coord, RGB(255, 255, 255));

			PutString(sX + 25, sY + 47, "---------------------------------------------------", RGB(255, 255, 255));

			iNth = 0;
			for (i = 0; i <= DEF_MAXPARTYMEMBERS; i++)
				if (strlen(m_stPartyMemberNameList[i].cName) != 0) {
					wsprintf(CoordX, "%d", PartyStruct[i].iParty_sX);
					wsprintf(CoordY, "%d", PartyStruct[i].iParty_sY);
					GetOfficialMapName(PartyStruct[i].PartyMapName, Mapa);
					PutString(sX + 20, sY + 60 + 15 * (iNth), m_stPartyMemberNameList[i].cName, RGB(255, 200, 0));
					PutString(sX + 100, sY + 60 + 15 * (iNth), Mapa, RGB(255, 200, 0));
					PutString(sX + 190, sY + 60 + 15 * (iNth), CoordX, RGB(255, 200, 0));
					PutString(sX + 215, sY + 60 + 15 * (iNth), CoordY, RGB(255, 200, 0));
					iNth++;
				}

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 5:
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_PARTY33, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_PARTY34, 255, 255, 255);//"
			break;

		case 6:
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_PARTY35, 255, 255, 255);//"
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 7:
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_PARTY36, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_PARTY37, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY38, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_PARTY39, 255, 255, 255);//"
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 8:
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_PARTY40, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_PARTY41, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY42, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_PARTY43, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_PARTY44, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_PARTY45, 255, 255, 255);//"


			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 9:
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_PARTY46, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_PARTY47, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY48, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_PARTY49, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 155, DRAW_DIALOGBOX_PARTY50, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 170, DRAW_DIALOGBOX_PARTY51, 255, 255, 255);//"

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 10:
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_PARTY52, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_PARTY53, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_PARTY54, 255, 255, 255);//"
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 11: //
			PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_PARTY55, 255, 255, 255);//"
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;
	}
}

void CGame::DrawDialogBox_QueryDropItemAmount()
{
	short sX, sY;
	char cTxt[120], cStr1[64], cStr2[64], cStr3[64];

	sX = m_stDialogBoxInfo[17].sX;
	sY = m_stDialogBoxInfo[17].sY;
/*

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 5);*/


	DrawShadowDialog2(sX, sY, 17);

	auto ismarket = m_stDialogBoxInfo[17].IsMarketInput();

	switch (m_stDialogBoxInfo[17].cMode) {
		case 1:
			if (ismarket)
			{
				strcpy(cTxt, "Set the price in Coins");
				PutString(sX + 30, sY + 20, cTxt, RGB(255, 255, 255));
			}
			else
			{
				GetItemName(m_pItemList[m_stDialogBoxInfo[17].sView]->m_cName, m_pItemList[m_stDialogBoxInfo[17].sView]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[m_stDialogBoxInfo[17].sView]->m_sItemSpecEffectValue3);
				if (strlen(m_stDialogBoxInfo[17].cStr) == 0)
					wsprintf(cTxt, DRAW_DIALOGBOX_QUERY_DROP_ITEM_AMOUNT1, cStr1);
				else wsprintf(cTxt, DRAW_DIALOGBOX_QUERY_DROP_ITEM_AMOUNT2, cStr1, m_stDialogBoxInfo[17].cStr);//"%s:

				if (m_stDialogBoxInfo[17].sV3 < 1000)
					PutString(sX + 30, sY + 20, cTxt, RGB(255,255,255));

				PutString(sX + 30, sY + 35, DRAW_DIALOGBOX_QUERY_DROP_ITEM_AMOUNT3, RGB(255, 255, 255));//"
				if (iGetTopDialogBoxIndex() != 17)
					PutString(sX + 40, sY + 57, m_cAmountString, RGB(255, 200, 0), FALSE, 2);
				wsprintf(cTxt, "__________ (0 ~ %d)", m_pItemList[m_stDialogBoxInfo[17].sView]->m_dwCount);
				PutString(sX + 38, sY + 62, cTxt, RGB(255, 255, 255));

				DWORD val = 0;
				if (ismarket)
				{
					val = 500000;
				}
			}
			break;

		case 20:
			if (ismarket)
			{
				strcpy(cTxt, "Set the price in Coins");
				PutString(sX + 30, sY + 20, cTxt, RGB(255, 255, 255));
			}
			else
			{
				GetItemName(m_pItemList[m_stDialogBoxInfo[17].sView]->m_cName, m_pItemList[m_stDialogBoxInfo[17].sView]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[m_stDialogBoxInfo[17].sView]->m_sItemSpecEffectValue3);
				if (strlen(m_stDialogBoxInfo[17].cStr) == 0) // v1.4
					wsprintf(cTxt, DRAW_DIALOGBOX_QUERY_DROP_ITEM_AMOUNT1, cStr1);//"%s:
				else wsprintf(cTxt, DRAW_DIALOGBOX_QUERY_DROP_ITEM_AMOUNT2, cStr1, m_stDialogBoxInfo[17].cStr);//"%s:

				if (m_stDialogBoxInfo[17].sV3 < 1000) // v1.4
					PutString(sX + 30, sY + 20, cTxt, RGB(255, 255, 255));

				PutString(sX + 30, sY + 35, DRAW_DIALOGBOX_QUERY_DROP_ITEM_AMOUNT3, RGB(55, 25, 25));//"
				PutString(sX + 40, sY + 57, m_cAmountString, RGB(255, 200, 0), FALSE, 2);
				wsprintf(cTxt, "__________ (0 ~ %d)", m_pItemList[m_stDialogBoxInfo[17].sView]->m_dwCount);
				PutString(sX + 38, sY + 62, cTxt, RGB(255, 255, 255));

				DWORD val = 0;
				if (ismarket)
				{
					val = 500000;
				}
			}
			break;

		case 30:
			PutString(sX + 30, sY + 35, DRAW_DIALOGBOX_QUERY_DROP_ITEM_AMOUNT7, RGB(255, 255, 255));//"
			PutString(sX + 40, sY + 57, m_cAmountString, RGB(255, 200, 0), FALSE, 2);
			PutString(sX + 38, sY + 62, "_______________", RGB(255, 255, 255));
			break;
	}
}

void CGame::DrawDialogBox_Quest(int msX, int msY)
{
	short sX, sY, szX;
	char cTxt[120], cTemp[21];

	sX = m_stDialogBoxInfo[28].sX;
	sY = m_stDialogBoxInfo[28].sY;
	szX = m_stDialogBoxInfo[28].sSizeX;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 4);

	if (m_stDialogBoxInfo[28].sView != -1 && m_stDialogBoxInfo[28].cMode == 0)
		m_stDialogBoxInfo[28].cMode = 1;

	switch (m_stDialogBoxInfo[28].cMode)
	{
		case 0:
			if (m_stQuest[0].sTargetType == 0 && m_stQuest[1].sTargetType == 0 && m_stQuest[2].sTargetType == 0)
				PutAlignedString(sX, sX + szX, sY + 50 + 115 - 30, DRAW_DIALOGBOX_QUEST1, 55, 25, 25); // " You are not on a quest."
			else if (m_stDialogBoxInfo[28].sView == -1)
			{
				if (m_stQuest[0].sTargetType != 0)
				{
					if (m_stQuest[0].sCurrentCount == 0)
					{
						if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 100) && (msY <= sY + 115))
							PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 255, 255, 255);
						else PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 0, 255, 0);
					}
					else
					{
						if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 100) && (msY <= sY + 115))
							PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 255, 255, 255);
						else PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 4, 0, 50);
					}
				}
				else PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 25, 25, 25);

				if (m_stQuest[1].sTargetType != 0)
				{
					if (m_stQuest[1].sCurrentCount == 0)
					{
						if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 130) && (msY <= sY + 145))
							PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 255, 255, 255);
						else PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 0, 255, 0);
					}
					else
					{
						if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 130) && (msY <= sY + 145))
							PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 255, 255, 255);
						else PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 4, 0, 50);
					}
				}
				else PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 25, 25, 25);

				if (m_stQuest[2].sTargetType != 0)
				{
					if (m_stQuest[2].sCurrentCount == 0)
					{
						if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 160) && (msY <= sY + 175))
							PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 255, 255, 255);
						else PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 0, 255, 0);
					}
					else
					{
						if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 160) && (msY <= sY + 175))
							PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 255, 255, 255);
						else PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 4, 0, 50);
					}
				}
				else PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 25, 25, 25);
			}
			break;
		case 1:
			switch (m_stDialogBoxInfo[28].sView) {
				case NULL:
					PutAlignedString(sX, sX + szX, sY + 50 + 115 - 30, DRAW_DIALOGBOX_QUEST1, 4, 0, 50); // " You are not on a quest."
					break;

				case 1:	//  Hunt
				case 2:
				case 3:
					if (m_stQuest[m_stDialogBoxInfo[28].sView - 1].sCurrentCount > 0)
						PutAlignedString(sX, sX + szX, sY + 50, DRAW_DIALOGBOX_QUEST2, 4, 0, 50); // "You are on a monster conquering quest."
					else PutAlignedString(sX, sX + szX, sY + 50, DRAW_DIALOGBOX_QUEST3, 4, 0, 50); // "You accomplished the monster conquering quest."

					ZeroMemory(cTxt, sizeof(cTxt));
					if (m_stQuest[m_stDialogBoxInfo[28].sView - 1].sCurrentCount <= 0)
						m_stQuest[m_stDialogBoxInfo[28].sView - 1].sCurrentCount = 0;

					wsprintf(cTxt, "Rest Monster: %d", m_stQuest[m_stDialogBoxInfo[28].sView - 1].sCurrentCount); // Snoopy: "Rest Monster : %s"
					PutAlignedString(sX, sX + szX, sY + 50 + 20, cTxt, 0, 255, 0);  // m_stQuest.sCurrentCount

					ZeroMemory(cTemp, sizeof(cTemp));
					switch (m_stQuest[m_stDialogBoxInfo[28].sView - 1].sWho) {
						case 1:
						case 2:
						case 3: break;
						case 4: strcpy(cTemp, NPC_NAME_CITYHALL_OFFICER); break;
						case 5:
						case 6:
						case 7: break;
					}
					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, DRAW_DIALOGBOX_QUEST5, cTemp); // "Client: %s"
					PutAlignedString(sX, sX + szX, sY + 50 + 45, cTxt, 4, 0, 50);

					ZeroMemory(cTemp, sizeof(cTemp));
					GetNpcName(m_stQuest[m_stDialogBoxInfo[28].sView - 1].sTargetType, cTemp);
					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, NPC_TALK_HANDLER16, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sTargetCount, cTemp);
					PutAlignedString(sX, sX + szX, sY + 50 + 60, cTxt, 4, 0, 50);

					ZeroMemory(cTxt, sizeof(cTxt));
					if (memcmp(m_stQuest[m_stDialogBoxInfo[28].sView - 1].cTargetName, "NONE", 4) == 0)
					{
						strcpy(cTxt, DRAW_DIALOGBOX_QUEST31); // "Location : Anywhere"
						PutAlignedString(sX, sX + szX, sY + 50 + 75, cTxt, 4, 0, 50);
					}
					else
					{
						ZeroMemory(cTemp, sizeof(cTemp));
						GetOfficialMapName(m_stQuest[m_stDialogBoxInfo[28].sView - 1].cTargetName, cTemp);
						wsprintf(cTxt, DRAW_DIALOGBOX_QUEST32, cTemp); // "Map : %s"
						PutAlignedString(sX, sX + szX, sY + 50 + 75, cTxt, 4, 0, 50);

						if (m_stQuest[m_stDialogBoxInfo[28].sView - 1].sX != 0) {
							ZeroMemory(cTxt, sizeof(cTxt));
							wsprintf(cTxt, DRAW_DIALOGBOX_QUEST33, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sX, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sY, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sRange); // "Position: %d, %d Range: %d block"
							PutAlignedString(sX, sX + szX, sY + 50 + 90, cTxt, 4, 0, 50);
						}
					}

					ZeroMemory(cTxt, sizeof(cTxt));
					if (m_stQuest[m_stDialogBoxInfo[28].sView - 1].sQuestType == 1) wsprintf(cTxt, DRAW_DIALOGBOX_QUEST34, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sContribution); // "Contribution: %d"
					else wsprintf(cTxt, DRAW_DIALOGBOX_QUEST36, m_sQuest[m_stQuest[m_stDialogBoxInfo[28].sView - 1].sContribution].ItemPrice); // "Contribution: %d"
					PutAlignedString(sX, sX + szX, sY + 50 + 105, cTxt, 4, 0, 50);
					break;

				case 7: //
					if (m_stQuest[m_stDialogBoxInfo[28].sView - 1].sCurrentCount > 0)
						PutAlignedString(sX, sX + szX, sY + 50, DRAW_DIALOGBOX_QUEST26, 4, 0, 50);
					else PutAlignedString(sX, sX + szX, sY + 50, DRAW_DIALOGBOX_QUEST27, 4, 0, 50);

					ZeroMemory(cTemp, sizeof(cTemp));
					switch (m_stQuest[m_stDialogBoxInfo[28].sView - 1].sWho) {
						case 1:
						case 2:
						case 3: break;
						case 4: strcpy(cTemp, NPC_NAME_CITYHALL_OFFICER); break;
						case 5:
						case 6:
						case 7: break;
					}
					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, DRAW_DIALOGBOX_QUEST29, cTemp);
					PutAlignedString(sX, sX + szX, sY + 50 + 45, cTxt, 4, 0, 50);

					PutAlignedString(sX, sX + szX, sY + 50 + 60, DRAW_DIALOGBOX_QUEST30, 4, 0, 50);

					ZeroMemory(cTxt, sizeof(cTxt));
					if (memcmp(m_stQuest[m_stDialogBoxInfo[28].sView - 1].cTargetName, "NONE", 4) == 0) {
						strcpy(cTxt, DRAW_DIALOGBOX_QUEST31);
						PutAlignedString(sX, sX + szX, sY + 50 + 75, cTxt, 4, 0, 50);
					}
					else {
						ZeroMemory(cTemp, sizeof(cTemp));
						GetOfficialMapName(m_stQuest[m_stDialogBoxInfo[28].sView - 1].cTargetName, cTemp);
						wsprintf(cTxt, DRAW_DIALOGBOX_QUEST32, cTemp);
						PutAlignedString(sX, sX + szX, sY + 50 + 75, cTxt, 4, 0, 50);

						if (m_stQuest[m_stDialogBoxInfo[28].sView - 1].sX != 0) {
							ZeroMemory(cTxt, sizeof(cTxt));
							wsprintf(cTxt, DRAW_DIALOGBOX_QUEST33, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sX, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sY, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sRange);
							PutAlignedString(sX, sX + szX, sY + 50 + 90, cTxt, 4, 0, 50);
						}
					}

					ZeroMemory(cTxt, sizeof(cTxt));
					wsprintf(cTxt, DRAW_DIALOGBOX_QUEST34, m_stQuest[m_stDialogBoxInfo[28].sView - 1].sContribution);//" %dPoint"
					PutAlignedString(sX, sX + szX, sY + 50 + 105, cTxt, 4, 0, 50);
					break;
			}
			break;

		case 5:
			PutAlignedString(sX, sX + szX, sY + 50 + 115 - 30, DRAW_DIALOGBOX_QUEST35, 4, 0, 50);
			break;

		default: break;
	}

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
}

void CGame::DrawDialogBox_SellList(short msX, short msY)
{
	short sX, sY, szX;
	int  i, iItem;
	char cTemp[255], cStr1[64], cStr2[64], cStr3[64];

	sX = m_stDialogBoxInfo[31].sX;
	sY = m_stDialogBoxInfo[31].sY;
	szX = m_stDialogBoxInfo[31].sSizeX;

	DrawShadowDialog2(sX, sY, 31);
	PutCenterString_SpriteFont(sX, sX + szX, sY + 3, "Items for sale", 255, 255, 255);

	iItem = 0;
	for (i = 0; i < DEF_MAXSELLLIST; i++)
		if (m_stSellItemList[i].iIndex != -1)
		{
			ZeroMemory(cTemp, sizeof(cTemp));
			GetItemName(m_pItemList[m_stSellItemList[i].iIndex]->m_cName, m_pItemList[m_stSellItemList[i].iIndex]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[m_stSellItemList[i].iIndex]->m_sItemSpecEffectValue3);
			if (m_stSellItemList[i].iAmount > 1)
			{
				wsprintf(cTemp, DRAW_DIALOGBOX_SELL_LIST1, m_stSellItemList[i].iAmount, cStr1);
				if ((msX > sX + 25) && (msX < sX + 250) && (msY >= sY + 55 + i * 15) && (msY <= sY + 55 + 14 + i * 15))
					PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cTemp, 255, 255, 255);
				else
				{
					if (m_bIsSpecial)
						PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cTemp, 0, 255, 50);
					else
						PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cTemp, 255,255,255);
				}
			}
			else
			{
				if ((msX > sX + 25) && (msX < sX + 250) && (msY >= sY + 55 + i * 15) && (msY <= sY + 55 + 14 + i * 15))
				{
					if ((strlen(cStr2) == 0) && (strlen(cStr3) == 0)) PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cStr1, 255, 255, 255);
					else
					{
						ZeroMemory(G_cTxt, sizeof(G_cTxt));
						if ((strlen(cStr1) + strlen(cStr2) + strlen(cStr3)) < 36)
						{
							if ((strlen(cStr2) > 0) && (strlen(cStr3) > 0)) wsprintf(G_cTxt, "%s(%s, %s)", cStr1, cStr2, cStr3);
							else wsprintf(G_cTxt, "%s(%s%s)", cStr1, cStr2, cStr3);
							PutAlignedString(sX, sX + szX, sY + 55 + i * 15, G_cTxt, 255, 255, 255);

						}
						else
						{
							if ((strlen(cStr2) > 0) && (strlen(cStr3) > 0)) wsprintf(G_cTxt, "(%s, %s)", cStr2, cStr3);
							else wsprintf(G_cTxt, "(%s%s)", cStr2, cStr3);
							PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cStr1, 255, 255, 255);
							PutAlignedString(sX, sX + szX, sY + 55 + i * 15 + 15, G_cTxt, 200, 200, 200);
							i++;
						}
					}
				}
				else
				{
					if ((strlen(cStr2) == 0) && (strlen(cStr3) == 0))
					{
						if (m_bIsSpecial)
							PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cStr1, 0, 255, 50);
						else
							PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cStr1, 255,255,255);
					}
					else
					{
						ZeroMemory(G_cTxt, sizeof(G_cTxt));
						if ((strlen(cStr1) + strlen(cStr2) + strlen(cStr3)) < 36)
						{
							if ((strlen(cStr2) > 0) && (strlen(cStr3) > 0)) wsprintf(G_cTxt, "%s(%s, %s)", cStr1, cStr2, cStr3);
							else wsprintf(G_cTxt, "%s(%s%s)", cStr1, cStr2, cStr3);

							if (m_bIsSpecial)
								PutAlignedString(sX, sX + szX, sY + 55 + i * 15, G_cTxt, 0, 255, 50);
							else
								PutAlignedString(sX, sX + szX, sY + 55 + i * 15, G_cTxt,255,255,255);

						}
						else
						{
							if (m_bIsSpecial)
								PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cStr1, 0, 255, 50);
							else
								PutAlignedString(sX, sX + szX, sY + 55 + i * 15, cStr1, 255, 255, 255);
						}
					}
				}
			}
		}
		else iItem++;

		if (iItem == DEF_MAXSELLLIST) {
			PutAlignedString(sX, sX + szX, sY + 55 + 30 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST2, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 45 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST3, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 60 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST4, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 75 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST5, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 95 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST6, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 110 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST7, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 125 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST8, 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 155 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST9, 255, 255, 255);//"

		}

		if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY) && (iItem < DEF_MAXSELLLIST))
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 39);
		else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 38);

		if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
		else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
}

void CGame::DrawDialogBox_SellorRepairItem(short msX, short msY)
{
	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	char cItemID, cItemColor, cTxt[120], cTemp[120], cStr2[120], cStr3[120];

	sX = m_stDialogBoxInfo[23].sX;
	sY = m_stDialogBoxInfo[23].sY;

	switch (m_stDialogBoxInfo[23].cMode) {
		case 1:
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 11);

			cItemID = m_stDialogBoxInfo[23].sV1;

			cItemColor = m_pItemList[cItemID]->m_cItemColor;
			if (cItemColor == 0)
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->PutSpriteFast(sX + 62 + 15, sY + 84 + 30,
					m_pItemList[cItemID]->m_sSpriteFrame, dwTime);
			else
			{
				switch (m_pItemList[cItemID]->m_sSprite) {
					case 1: // Swds
					case 2: // Bows
					case 3: // Shields
					case 15: // Axes hammers
						m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->PutSpriteRGB(sX + 62 + 15, sY + 84 + 30
							, m_pItemList[cItemID]->m_sSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
						break;
					default: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->PutSpriteRGB(sX + 62 + 15, sY + 84 + 30
						, m_pItemList[cItemID]->m_sSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
						break;
				}
			}
			ZeroMemory(cTemp, sizeof(cTemp));
			ZeroMemory(cStr2, sizeof(cStr2));
			ZeroMemory(cStr3, sizeof(cStr3));

			GetItemName(m_pItemList[cItemID]->m_cName, m_pItemList[cItemID]->m_dwAttribute, cTemp, cStr2, cStr3, m_pItemList[cItemID]->m_sItemSpecEffectValue3);
			if (m_stDialogBoxInfo[23].sV4 == 1) strcpy(cTxt, cTemp);
			else wsprintf(cTxt, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM1, m_stDialogBoxInfo[23].sV4, cTemp);

			if (m_bIsSpecial)
			{
				PutAlignedString(sX + 25, sX + 240, sY + 60, cTxt, 0, 255, 50);
				PutAlignedString(sX + 25 + 1, sX + 240 + 1, sY + 60, cTxt, 0, 255, 50);
			}
			else
			{
				PutAlignedString(sX + 25, sX + 240, sY + 60, cTxt, 45, 25, 25);
				PutAlignedString(sX + 25 + 1, sX + 240 + 1, sY + 60, cTxt, 45, 25, 25);
			}

			wsprintf(cTxt, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM2, m_stDialogBoxInfo[23].sV2);
			PutString(sX + 95 + 15, sY + 53 + 60, cTxt, RGB(45, 25, 25));
			wsprintf(cTxt, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM3, m_stDialogBoxInfo[23].sV3);
			PutString(sX + 95 + 15, sY + 53 + 75, cTxt, RGB(45, 25, 25));
			PutString(sX + 55, sY + 190, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM4, RGB(45, 25, 25));

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 39);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 38);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 2:
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 10);
			cItemID = m_stDialogBoxInfo[23].sV1;
			cItemColor = m_pItemList[cItemID]->m_cItemColor; // v1.4
			if (cItemColor == 0)
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->PutSpriteFast(sX + 62 + 15, sY + 84 + 30,
					m_pItemList[cItemID]->m_sSpriteFrame, dwTime);
			else
			{
				switch (m_pItemList[cItemID]->m_sSprite) {
					case 1: // Swds
					case 2: // Bows
					case 3: // Shields
					case 15: // Axes hammers
						m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->PutSpriteRGB(sX + 62 + 15, sY + 84 + 30
							, m_pItemList[cItemID]->m_sSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
						break;

					default: m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[cItemID]->m_sSprite]->PutSpriteRGB(sX + 62 + 15, sY + 84 + 30
						, m_pItemList[cItemID]->m_sSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
						break;
				}
			}
			ZeroMemory(cTemp, sizeof(cTemp));
			ZeroMemory(cStr2, sizeof(cStr2));
			ZeroMemory(cStr3, sizeof(cStr3));
			GetItemName(m_pItemList[cItemID], cTemp, cStr2, cStr3);
			wsprintf(cTxt, "%s", cTemp);
			//		PutAlignedString(sX + 25, sX + 240, sY + 60, cTxt, 45,25,25);
			//		PutAlignedString(sX + 25 +1, sX + 240 +1, sY + 60, cTxt, 45,25,25);
			if (m_bIsSpecial)
			{
				PutAlignedString(sX + 25, sX + 240, sY + 60, cTxt, 0, 255, 50);
				PutAlignedString(sX + 25 + 1, sX + 240 + 1, sY + 60, cTxt, 0, 255, 50);
			}
			else
			{
				PutAlignedString(sX + 25, sX + 240, sY + 60, cTxt, 45, 25, 25);
				PutAlignedString(sX + 25 + 1, sX + 240 + 1, sY + 60, cTxt, 45, 25, 25);
			}
			wsprintf(cTxt, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM2, m_stDialogBoxInfo[23].sV2);
			PutString(sX + 95 + 15, sY + 53 + 60, cTxt, RGB(45, 25, 25));
			wsprintf(cTxt, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM6, m_stDialogBoxInfo[23].sV3);
			PutString(sX + 95 + 15, sY + 53 + 75, cTxt, RGB(45, 25, 25));
			PutString(sX + 55, sY + 190, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM7, RGB(45, 25, 25));

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 43);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 42);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 3:
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 11);

			PutString(sX + 55, sY + 100, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM8, RGB(45, 25, 25));//"
			PutString(sX + 55, sY + 120, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM9, RGB(45, 25, 25));//"
			PutString(sX + 55, sY + 135, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM10, RGB(45, 25, 25));//"
			break;

		case 4:
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 10);

			PutString(sX + 55, sY + 100, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM11, RGB(45, 25, 25));//"
			PutString(sX + 55, sY + 120, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM9, RGB(45, 25, 25));//"
			PutString(sX + 55, sY + 135, DRAW_DIALOGBOX_SELLOR_REPAIR_ITEM10, RGB(45, 25, 25));//"
			break;
	}
}

void CGame::DrawDialogBox_Shop(short msX, short msY, short msZ, char cLB)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[11].sX;
	sY = m_stDialogBoxInfo[11].sY;

	int sizeX = m_stDialogBoxInfo[11].sSizeX;
	int sizeY = m_stDialogBoxInfo[11].sSizeY;

	DrawShadowMenu(sX, sY, sX + sizeX, sY + sizeY);
	DrawShadowMenu_DialogBorders(sX, sY, sizeX, sizeY);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "Items for sale", 240, 240, 240);

	switch (m_stDialogBoxInfo[11].cMode) {
		case 0:
			ShowItemList(11, sX, sY, msX, msY, msZ, cLB);
			break;

		case -1:
			ShowMenuItems(sX, sY, msX, msY);
			break;

		default:
			ShowItemDetail(11, sX, sY, msX, msY, msZ);
			break;
	}
}

void CGame::DrawDialogBox_Skill(short msX, short msY, short msZ, char cLB)
{
	short sX, sY;
	int  i, iTotalLines, iPointerLoc;
	char cTemp[255], cTemp2[255], cTemp3[255];
	double d1, d2, d3;

	sX = m_stDialogBoxInfo[15].sX;
	sY = m_stDialogBoxInfo[15].sY;
		
	/*DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 0); // Normal Dialog
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 1); // Skill Dialog Title Bar*/

	short limitX, limitY;
	limitX = sX + m_stDialogBoxInfo[15].sSizeX + 20;
	limitY = sY + m_stDialogBoxInfo[15].sSizeY + 25;

	m_DDraw.DrawItemShadowBox(sX, sY, limitX, limitY);
	m_DDraw.DrawItemShadowBox(sX, sY, limitX, limitY);
	PutString_SprFont2(sX + 115, sY + 5, "Skills", 240, 240, 240);

	PutString(sX + 30, sY + 15 + 15, "Name", RGB(0, 255, 0));
	PutString(sX + 183, sY + 15 + 15, "Progress", RGB(0, 255, 0));

	DrawMenu_SmallButton(sX, sY, msX, msY, DEF_RBTNPOSX, 285 + 40, "Enchanting");

	/*PutString(sX + 183 + 30 + 10, sY + 15 + 15, "Level", RGB(0, 255, 0));*/

	switch (m_stDialogBoxInfo[15].cMode)
	{
	case 0:
		for (i = 0; i < 17; i++)
		{
			if ((i < DEF_MAXSKILLTYPE) && (m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView] != NULL))
			{
				ZeroMemory(cTemp, sizeof(cTemp));
				wsprintf(cTemp, "%s", m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_cName);
				m_Misc.ReplaceString(cTemp, '-', ' ');
				ZeroMemory(cTemp2, sizeof(cTemp2));
				wsprintf(cTemp2, "%3d%%", m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_iLevel);

				// Resaltar skill en nivel máximo
				auto rgb = RGB(255, 255, 255);
				if (m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_iLevel == 100)
				{
					rgb = RGB(255, 200, 0);
				}

				if ((msX >= sX + 25) && (msX <= sX + 166) && (msY >= sY + 45 + i * 15) && (msY <= sY + 59 + i * 15))
				{
					if ((m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_bIsUseable == TRUE)
						&& (m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_iLevel != 0))
					{
						PutString(sX + 30, sY + 45 + i * 15, cTemp, RGB(255, 255, 255));
						PutString(sX + 183, sY + 45 + i * 15, cTemp2, RGB(255, 255, 255));
					}
					else
					{
						PutString(sX + 30, sY + 45 + i * 15, cTemp, rgb);
						PutString(sX + 183, sY + 45 + i * 15, cTemp2, rgb);
					}
				}
				else
				{
					if ((m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_bIsUseable == TRUE)
						&& (m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_iLevel != 0))
					{
						PutString(sX + 30, sY + 45 + i * 15, cTemp, RGB(70, 130, 180));
						PutString(sX + 183, sY + 45 + i * 15, cTemp2, RGB(70, 130, 180));
					}
					else
					{
						PutString(sX + 30, sY + 45 + i * 15, cTemp, rgb);
						PutString(sX + 183, sY + 45 + i * 15, cTemp2, rgb);
					}
				}

				if (m_iDownSkillIndex == (i + m_stDialogBoxInfo[15].sView))
					m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutTransSpriteRGB(sX + 215, sY + 47 + i * 15, 21, 50, 50, 50, m_dwTime);
				else m_pSprite[DEF_SPRID_INTERFACE_ADDINTERFACE]->PutSpriteFast(sX + 215, sY + 47 + i * 15, 20, m_dwTime);
			}
		}


		iTotalLines = 0;
		for (i = 0; i < DEF_MAXSKILLTYPE; i++)
			if (m_pSkillCfgList[i] != NULL) iTotalLines++;

		if (iTotalLines > 17)
		{
			d1 = (double)m_stDialogBoxInfo[15].sView;
			d2 = (double)(iTotalLines - 17);
			d3 = (274.0f * d1) / d2;
			iPointerLoc = (int)d3;
		}
		else iPointerLoc = 0;
		if (iTotalLines > 17)
		{
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 1);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 242 + 25, sY + iPointerLoc + 35, 7);
		}

		if (cLB != 0 && iTotalLines > 17)
		{
			if ((iGetTopDialogBoxIndex() == 15))
			{
				if ((msX >= sX + 240 + 25) && (msX <= sX + 260 + 25) && (msY >= sY + 30) && (msY <= sY + 320))
				{
					d1 = (double)(msY - (sY + 35));
					d2 = (double)(iTotalLines - 17);
					d3 = (d1 * d2) / 274.0f;
					iPointerLoc = (int)(d3 + 0.5);
					if (iPointerLoc > iTotalLines - 17) iPointerLoc = iTotalLines - 17;
					m_stDialogBoxInfo[15].sView = iPointerLoc;
				}
			}
		}
		else m_stDialogBoxInfo[15].bIsScrollSelected = FALSE;
		if (iGetTopDialogBoxIndex() == 15 && msZ != 0)
		{
			if (msZ > 0) m_stDialogBoxInfo[15].sView--;
			if (msZ < 0) m_stDialogBoxInfo[15].sView++;
			m_DInput.m_sZ = 0;
		}
		if (m_stDialogBoxInfo[15].sView < 0) m_stDialogBoxInfo[15].sView = 0;
		if (iTotalLines > 17 && m_stDialogBoxInfo[15].sView > iTotalLines - 17) m_stDialogBoxInfo[15].sView = iTotalLines - 17;

		break;
	}
}


void CGame::DrawDialogBox_SysMenu(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[19].sX;
	sY = m_stDialogBoxInfo[19].sY;
	int sizeX = m_stDialogBoxInfo[19].sSizeX;
	int sizeY = m_stDialogBoxInfo[19].sSizeY;

	DrawShadowMenu(sX, sY, sX + sizeX, sY + sizeY);
	DrawShadowMenu_DialogBorders(sX, sY, sizeX, sizeY);

	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "System Menu Helbreath Xsilium", 240, 240, 240);

	if ((msX >= sX + 20) && (msX <= sX + 135) && (msY >= sY + 45) && (msY <= sY + 45 + 15))
		PutString(sX + 20 - 1, sY + 45, "Control Panel (CTRL + P)", RGB(255, 200, 0));
	else
		PutString(sX + 20 - 1, sY + 45, "Control Panel (CTRL + P)", RGB(255, 255, 255));

	//DrawNewDialogBox2(SPRID_CURSEDLOGO, sX + 2, sY + 22, 0);

	// Time
	SYSTEMTIME SysTime;
	GetLocalTime(&SysTime);
	ZeroMemory(G_cTxt, sizeof(G_cTxt));
	PutString(sX + 175 - 1, sY + 25 + 10, "Time", RGB( 255, 255, 255));
	PutString(sX + 175, sY + 25 + 10, "Time", RGB(255, 255, 255));
	//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 200, sY + 25, 10, TRUE, m_bDialogTrans);
	wsprintf(G_cTxt, "%02d:%02d:%02d", SysTime.wHour, SysTime.wMinute, SysTime.wSecond);
	PutAlignedString(sX + 200, sX + 250, sY + 25 + 10, G_cTxt, 255, 255, 255);

	// Date 
	PutString(sX + 175 - 1, sY + 50 + 5, "Date", RGB(255, 255, 255));
	PutString(sX + 175, sY + 50 + 5, "Date", RGB(255, 255, 255));
	//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 200, sY + 50, 10, TRUE, m_bDialogTrans);
	wsprintf(G_cTxt, "%02d/%02d", SysTime.wDay, SysTime.wMonth);
	PutAlignedString(sX + 200, sX + 250, sY + 50 + 5, G_cTxt, 255, 255, 255);

	// Log-Out
	if (m_cSalirDelChar == -1)
	{
		if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + 75) && (msY <= sY + 75 + DEF_BTNSZY))
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + 75, 9);
		else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + 75, 8);
	}
	else  //Continue
	{
		if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + 75) && (msY <= sY + 75 + DEF_BTNSZY))
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + 75, 7);
		else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + 75, 6);
	}
	// Restart
	if (DecriptInt(m_iHP) <= 0)
	{
		if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 75) && (msY <= sY + 75 + DEF_BTNSZY))
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + 75, 37);
		else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + 75, 36);
	}
}

//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

void CGame::bItemDrop_Character()
{
	ItemEquipHandler((char)m_stMCursor.sSelectedObjectID);
}

void CGame::bItemDrop_Inventory(short msX, short msY)
{
	short sX, sY, dX, dY;
	char  cTxt[120];
	if (m_cCommand < 0) return;
	if (m_pItemList[m_stMCursor.sSelectedObjectID] == NULL) return;
	if ((m_bSkillUsingStatus == TRUE) && (m_bIsItemEquipped[m_stMCursor.sSelectedObjectID] == TRUE))
	{
		AddEventList(BITEMDROP_INVENTORY1, 10);
		return;
	}
	if (m_bIsItemDisabled[m_stMCursor.sSelectedObjectID] == TRUE) return;
	sY = m_stDialogBoxInfo[2].sY;
	sX = m_stDialogBoxInfo[2].sX;
	dX = msX - sX - 32 - m_stMCursor.sDistX;
	dY = msY - sY - 44 - m_stMCursor.sDistY;
	if (dY < -10) dY = -10;
	if (dX < 0)   dX = 0;
	if (dX > 170) dX = 170;
	if (dY > 95) dY = 95;

	m_pItemList[m_stMCursor.sSelectedObjectID]->m_sX = dX;
	m_pItemList[m_stMCursor.sSelectedObjectID]->m_sY = dY;

	short sTmpSpr, sTmpSprFrm;
	sTmpSpr = m_pItemList[m_stMCursor.sSelectedObjectID]->m_sSprite;
	sTmpSprFrm = m_pItemList[m_stMCursor.sSelectedObjectID]->m_sSpriteFrame;

	char cItemID;
	if (m_bShiftPressed)
	{
		for (int i = 0; i < DEF_MAXITEMS; i++)
		{
			if (m_cItemOrder[DEF_MAXITEMS - 1 - i] != -1)
			{
				cItemID = m_cItemOrder[DEF_MAXITEMS - 1 - i];
				if (m_pItemList[cItemID] != NULL && memcmp(m_pItemList[cItemID]->m_cName, m_pItemList[m_stMCursor.sSelectedObjectID]->m_cName, 20) == 0)
				{
					m_pItemList[cItemID]->m_sX = dX;
					m_pItemList[cItemID]->m_sY = dY;
					bSendCommand(CLIENT_REQUEST_SETITEMPOS, NULL, cItemID, dX, dY, NULL, NULL);
				}
			}
		}
	}
	else bSendCommand(CLIENT_REQUEST_SETITEMPOS, NULL, (char)(m_stMCursor.sSelectedObjectID), dX, dY, NULL, NULL);

	if (m_bIsItemEquipped[m_stMCursor.sSelectedObjectID] == TRUE)
	{
		char cStr1[64], cStr2[64], cStr3[64];
		GetItemName(m_pItemList[m_stMCursor.sSelectedObjectID], cStr1, cStr2, cStr3);
		wsprintf(cTxt, ITEM_EQUIPMENT_RELEASED, cStr1);
		AddEventList(cTxt, 10);

		if (memcmp(m_pItemList[m_stMCursor.sSelectedObjectID]->m_cName, "AngelicPandent", 14) == 0) PlaySound('E', 53, 0);
		else PlaySound('E', 29, 0);

		// Remove Angelic Stats
		if ((m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos >= 11)
			&& (m_pItemList[m_stMCursor.sSelectedObjectID]->m_cItemType == 1))
		{
			char cItemID = m_stMCursor.sSelectedObjectID;
			if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(STR)", 19) == 0)
			{
				m_iAngelicStr = EncriptInt(0);
			}
			else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(DEX)", 19) == 0)
			{
				m_iAngelicDex = EncriptInt(0);
			}
			else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(INT)", 19) == 0)
			{
				m_iAngelicInt = EncriptInt(0);
			}
			else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(MAG)", 19) == 0)
			{
				m_iAngelicMag = EncriptInt(0);
			}
		}
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RELEASEITEM, NULL, m_stMCursor.sSelectedObjectID, NULL, NULL, NULL);
		m_bIsItemEquipped[m_stMCursor.sSelectedObjectID] = FALSE;
		m_sItemEquipmentStatus[m_pItemList[m_stMCursor.sSelectedObjectID]->m_cEquipPos] = -1;
	}
}

void CGame::bItemDrop_SellList(short msX, short msY)
{
	int i;
	char cItemID;

	cItemID = (char)m_stMCursor.sSelectedObjectID;

	if (m_pItemList[cItemID] == NULL) return;
	if (m_bIsItemDisabled[cItemID] == TRUE) return;
	if (m_cCommand < 0) return;
	for (i = 0; i < DEF_MAXSELLLIST; i++)
		if (m_stSellItemList[i].iIndex == cItemID)
		{
			AddEventList(BITEMDROP_SELLLIST1, 10);
			return;
		}
	if (strcmp(m_pItemList[cItemID]->m_cName, "Gold") == 0) {
		AddEventList(BITEMDROP_SELLLIST2, 10);
		return;
	}
	if (m_pItemList[cItemID]->m_wCurLifeSpan == 0)
	{
		ZeroMemory(G_cTxt, sizeof(G_cTxt));
		char cStr1[64], cStr2[64], cStr3[64];
		GetItemName(m_pItemList[cItemID], cStr1, cStr2, cStr3);
		wsprintf(G_cTxt, NOTIFYMSG_CANNOT_SELL_ITEM2, cStr1);
		AddEventList(G_cTxt, 10);
		return;
	}

	if (((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_ARROW)) &&
		(m_pItemList[cItemID]->m_dwCount > 1))
	{
		m_stDialogBoxInfo[17].sX = msX - 140;
		m_stDialogBoxInfo[17].sY = msY - 70;
		if (m_stDialogBoxInfo[17].sY < 0) m_stDialogBoxInfo[17].sY = 0;
		m_stDialogBoxInfo[17].sV1 = m_sPlayerX + 1;
		m_stDialogBoxInfo[17].sV2 = m_sPlayerY + 1;
		m_stDialogBoxInfo[17].sV3 = 1001;
		m_stDialogBoxInfo[17].sV4 = cItemID;
		ZeroMemory(m_stDialogBoxInfo[17].cStr, sizeof(m_stDialogBoxInfo[17].cStr));
		EnableDialogBox(17, cItemID, m_pItemList[cItemID]->m_dwCount, NULL);
		m_bIsItemDisabled[cItemID] = TRUE;
	}
	else
	{
		for (i = 0; i < DEF_MAXSELLLIST; i++)
			if (m_stSellItemList[i].iIndex == -1)
			{
				m_stSellItemList[i].iIndex = cItemID;
				m_stSellItemList[i].iAmount = 1;
				m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
		AddEventList(BITEMDROP_SELLLIST3, 10);
	}
}

void CGame::bItemDrop_ItemUpgrade()
{
	char cItemID;
	cItemID = (char)m_stMCursor.sSelectedObjectID;
	if (m_bIsItemDisabled[cItemID] == TRUE) return;
	if (m_cCommand < 0) return;
	if (m_pItemList[cItemID]->m_cEquipPos == DEF_EQUIPPOS_NONE) return;

	switch (m_stDialogBoxInfo[34].cMode) {
		case 1:
			m_bIsItemDisabled[m_stDialogBoxInfo[34].sV1] = FALSE;
			m_stDialogBoxInfo[34].sV1 = cItemID;
			m_bIsItemDisabled[cItemID] = TRUE;
			PlaySound('E', 29, 0);
			break;

		case 6:
			m_bIsItemDisabled[m_stDialogBoxInfo[34].sV1] = FALSE;
			m_stDialogBoxInfo[34].sV1 = cItemID;
			m_bIsItemDisabled[cItemID] = TRUE;
			PlaySound('E', 29, 0);
			break;
	}
}

void CGame::bItemDrop_Bank(short msX, short msY)
{
	m_stDialogBoxInfo[39].sV1 = m_stMCursor.sSelectedObjectID;
	if (m_cCommand < 0) return;
	if (m_pItemList[m_stDialogBoxInfo[39].sV1] == NULL) return;
	if (m_bIsItemDisabled[m_stDialogBoxInfo[39].sV1] == TRUE) return;
	if (m_bIsDialogEnabled[17] == TRUE)
	{
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}
	if ((m_bIsDialogEnabled[20] == TRUE) && ((m_stDialogBoxInfo[20].cMode == 1) || (m_stDialogBoxInfo[20].cMode == 2)))
	{
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}
	if (m_bIsDialogEnabled[23] == TRUE)
	{
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}
	if (m_bIsDialogEnabled[4] == TRUE)
	{
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}
	if (((m_pItemList[m_stDialogBoxInfo[39].sV1]->m_cItemType == DEF_ITEMTYPE_CONSUME) || (m_pItemList[m_stDialogBoxInfo[39].sV1]->m_cItemType == DEF_ITEMTYPE_ARROW)) && (m_pItemList[m_stDialogBoxInfo[39].sV1]->m_dwCount > 1))
	{
		m_stDialogBoxInfo[17].sX = msX - 140;
		m_stDialogBoxInfo[17].sY = msY - 70;
		if (m_stDialogBoxInfo[17].sY < 0) m_stDialogBoxInfo[17].sY = 0;

		m_stDialogBoxInfo[17].sV1 = m_sPlayerX + 1;
		m_stDialogBoxInfo[17].sV2 = m_sPlayerY + 1;
		m_stDialogBoxInfo[17].sV3 = 1002;// NPC
		m_stDialogBoxInfo[17].sV4 = m_stDialogBoxInfo[39].sV1;

		ZeroMemory(m_stDialogBoxInfo[17].cStr, sizeof(m_stDialogBoxInfo[17].cStr));
		EnableDialogBox(17, m_stDialogBoxInfo[39].sV1, m_pItemList[m_stDialogBoxInfo[39].sV1]->m_dwCount, NULL);
	}
	else
	{
		if (_iGetBankItemCount() >= (BANK_ITEMS_PAGE - 1)) AddEventList(DLGBOX_CLICK_NPCACTION_QUERY9, 10);
		else
		{
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, TempPage, NULL, NULL, NULL);
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GIVEITEMTOCHAR, m_stDialogBoxInfo[39].sV1, 1, m_stDialogBoxInfo[39].sV5, m_stDialogBoxInfo[39].sV6, m_pItemList[m_stDialogBoxInfo[39].sV1]->m_cName, m_stDialogBoxInfo[39].sV4); //v1.4
		}
	}
}

void CGame::bItemDrop_SkillDialog()
{
	int iConsumeNum;
	char cItemID;

	if (m_cCommand < 0) return;
	cItemID = (char)m_stMCursor.sSelectedObjectID;
	if (m_pItemList[cItemID] == NULL) return;
	if (m_bIsItemDisabled[cItemID] == TRUE) return;

	if (m_bIsDialogEnabled[17] == TRUE)
	{
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}

	if ((m_bIsDialogEnabled[20] == TRUE)
		&& ((m_stDialogBoxInfo[20].cMode == 1) || (m_stDialogBoxInfo[20].cMode == 2)))
	{
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}

	if (m_bIsDialogEnabled[23] == TRUE)
	{
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}

	switch (m_stDialogBoxInfo[26].cMode) {
		case 1:
			if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME)
			{
				iConsumeNum = 0;
				if (m_stDialogBoxInfo[26].sV1 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV2 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV3 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV4 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV5 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV6 == cItemID) iConsumeNum++;
				if (iConsumeNum >= (int)(m_pItemList[cItemID]->m_dwCount)) return;
			}
			if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EAT) ||
				(m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) ||
				(m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_NONE))
			{
			}
			else return;

			if (m_stDialogBoxInfo[26].sV1 == -1)
			{
				m_stDialogBoxInfo[26].sV1 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV2 == -1)
			{
				m_stDialogBoxInfo[26].sV2 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV3 == -1)
			{
				m_stDialogBoxInfo[26].sV3 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV4 == -1)
			{
				m_stDialogBoxInfo[26].sV4 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV5 == -1)
			{
				m_stDialogBoxInfo[26].sV5 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV6 == -1)
			{
				m_stDialogBoxInfo[26].sV6 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			AddEventList(BITEMDROP_SKILLDIALOG4, 10);
			break;

		case 4:
			if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME)
			{
				iConsumeNum = 0;
				if (m_stDialogBoxInfo[26].sV1 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV2 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV3 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV4 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV5 == cItemID) iConsumeNum++;
				if (m_stDialogBoxInfo[26].sV6 == cItemID) iConsumeNum++;
				if (iConsumeNum >= (int)(m_pItemList[cItemID]->m_dwCount)) return;
			}

			if (m_stDialogBoxInfo[26].sV1 == -1)
			{
				m_stDialogBoxInfo[26].sV1 = cItemID;
				m_stDialogBoxInfo[26].cStr[4] = (char)_bCheckCurrentBuildItemStatus();
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV2 == -1)
			{
				m_stDialogBoxInfo[26].sV2 = cItemID;
				m_stDialogBoxInfo[26].cStr[4] = (char)_bCheckCurrentBuildItemStatus();
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV3 == -1)
			{
				m_stDialogBoxInfo[26].sV3 = cItemID;
				m_stDialogBoxInfo[26].cStr[4] = (char)_bCheckCurrentBuildItemStatus();
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV4 == -1)
			{
				m_stDialogBoxInfo[26].sV4 = cItemID;
				m_stDialogBoxInfo[26].cStr[4] = (char)_bCheckCurrentBuildItemStatus();
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV5 == -1)
			{
				m_stDialogBoxInfo[26].sV5 = cItemID;
				m_stDialogBoxInfo[26].cStr[4] = (char)_bCheckCurrentBuildItemStatus();
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV6 == -1)
			{
				m_stDialogBoxInfo[26].sV6 = cItemID;
				m_stDialogBoxInfo[26].cStr[4] = (char)_bCheckCurrentBuildItemStatus();
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			AddEventList(BITEMDROP_SKILLDIALOG4, 10); // "There is no more space for ingredients."
			break;

			// Crafting
		case 7:
			if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_NONE)			// Merien Stone
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EQUIP)		// Necks XXXMagins
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME)		// stones
				|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_MATERIAL))	// XXXwares
			{
			}
			else return;

			if (m_stDialogBoxInfo[26].sV1 == -1)
			{
				m_stDialogBoxInfo[26].sV1 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV2 == -1)
			{
				m_stDialogBoxInfo[26].sV2 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV3 == -1)
			{
				m_stDialogBoxInfo[26].sV3 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV4 == -1)
			{
				m_stDialogBoxInfo[26].sV4 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV5 == -1)
			{
				m_stDialogBoxInfo[26].sV5 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			else if (m_stDialogBoxInfo[26].sV6 == -1)
			{
				m_stDialogBoxInfo[26].sV6 = cItemID;
				if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_CONSUME) && (m_pItemList[cItemID]->m_dwCount > 1))
				{
				}
				else m_bIsItemDisabled[cItemID] = TRUE;
				return;
			}
			AddEventList(BITEMDROP_SKILLDIALOG4, 10); // "There is no more space for ingredients."
			break;

		default:
			break;
	}
}

// Slates Item Drag&Drop - Diuuude
void CGame::bItemDrop_Slates()
{
	char cItemID;
	if (m_cCommand < 0) return;
	cItemID = (char)m_stMCursor.sSelectedObjectID;
	if (m_pItemList[cItemID] == NULL) return;
	if (m_bIsItemDisabled[cItemID] == TRUE) return;
	if (m_bIsDialogEnabled[17] == TRUE) {
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}

	if ((m_bIsDialogEnabled[20] == TRUE) &&
		((m_stDialogBoxInfo[20].cMode == 1) || (m_stDialogBoxInfo[20].cMode == 2))) {
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}

	if (m_bIsDialogEnabled[23] == TRUE) {
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}

	switch (m_stDialogBoxInfo[40].cMode) {
		case 1:
			if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_SKILL_ENABLEDIALOGBOX) && (m_pItemList[cItemID]->m_sSpriteFrame >= 151) && (m_pItemList[cItemID]->m_sSpriteFrame <= 154)) {
				char cItemIDText[20];
				switch (m_pItemList[cItemID]->m_sSpriteFrame) {
					case 151:
						if (m_stDialogBoxInfo[40].sV1 == -1) {
							m_bIsItemDisabled[cItemID] = TRUE;
							m_stDialogBoxInfo[40].sV1 = cItemID;
							//	wsprintf(cItemIDText, "Item ID : %d", cItemID);
							AddEventList(cItemIDText, 10);
						}
						break;
					case 152:
						if (m_stDialogBoxInfo[40].sV2 == -1) {
							m_bIsItemDisabled[cItemID] = TRUE;
							m_stDialogBoxInfo[40].sV2 = cItemID;
							//	wsprintf(cItemIDText, "Item ID : %d", cItemID);
							AddEventList(cItemIDText, 10);
						}
						break;
					case 153:
						if (m_stDialogBoxInfo[40].sV3 == -1) {
							m_bIsItemDisabled[cItemID] = TRUE;
							m_stDialogBoxInfo[40].sV3 = cItemID;
							//	wsprintf(cItemIDText, "Item ID : %d", cItemID);
							AddEventList(cItemIDText, 10);
						}
						break;
					case 154:
						if (m_stDialogBoxInfo[40].sV4 == -1) {
							m_bIsItemDisabled[cItemID] = TRUE;
							m_stDialogBoxInfo[40].sV4 = cItemID;
							//	wsprintf(cItemIDText, "Item ID : %d", cItemID);
							AddEventList(cItemIDText, 10);
						}
						break;
				}
			}
			break;

		default:
			break;
	}
}

void CGame::DlgBoxClick_Bank(short msX, short msY)
{
	int i, x;
	short sX, sY;


	sX = m_stDialogBoxInfo[14].sX;
	sY = m_stDialogBoxInfo[14].sY;
	int z[BANK_ITEMS_PAGE];

	switch (m_stDialogBoxInfo[14].cMode) {
		case -1:
			break;
	}

	if (m_stDialogBoxInfo[14].cMode != -1)
	{
		for (i = 0; i < BANK_ITEMS_PAGE; i++)
			z[i] = -1;

		i = 0;
		for (x = 0; x < DEF_MAXBANKITEMS; x++)
		{
			if (m_pBankList[x] != NULL)
			{
				if (m_pBankList[x]->BankPage == m_stDialogBoxInfo[14].cMode)
				{
					z[i] = x;
					i++;
				}
			}
		}

		for (i = 0; i < m_stDialogBoxInfo[14].sV1; i++)
			if ((msX > sX + 30) && (msX < sX + 210) && (msY >= sY + 110 + i * 15) && (msY <= sY + 124 + i * 15))
			{
				if ((m_pBankList[z[i + m_stDialogBoxInfo[14].sView]] != NULL) && (z[i + m_stDialogBoxInfo[14].sView] != -1))
				{
					if (_iGetTotalItemNum() >= 50) {
						AddEventList(DLGBOX_CLICK_BANK1, 10);
						return;
					}
					bSendCommand(CLIENT_REQUEST_RETRIEVEITEM, NULL, NULL, z[i + m_stDialogBoxInfo[14].sView], NULL, NULL, NULL);
					m_stDialogBoxInfo[14].cMode = -1;
					PlaySound('E', 14, 5);
				}
				return;
			}
	}
	if ((msX >= sX + 20) && (msX <= sX + 56) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 0;
		TempPage = 0;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 0, NULL, NULL, NULL);
	}
	if ((msX >= sX + 39) && (msX <= sX + 56) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 1;
		TempPage = 1;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 1, NULL, NULL, NULL);
	}
	if ((msX >= sX + 57) && (msX <= sX + 81) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 2;
		TempPage = 2;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 2, NULL, NULL, NULL);
	}
	if ((msX >= sX + 82) && (msX <= sX + 101) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 3;
		TempPage = 3;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 3, NULL, NULL, NULL);
	}
	if ((msX >= sX + 102) && (msX <= sX + 116) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 4;
		TempPage = 4;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 4, NULL, NULL, NULL);
	}
	if ((msX >= sX + 117) && (msX <= sX + 137) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 5;
		TempPage = 5;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 5, NULL, NULL, NULL);
	}
	if ((msX >= sX + 138) && (msX <= sX + 165) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 6;
		TempPage = 6;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 6, NULL, NULL, NULL);
	}
	if ((msX >= sX + 166) && (msX <= sX + 197) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 7;
		TempPage = 7;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 7, NULL, NULL, NULL);
	}
	if ((msX >= sX + 198) && (msX <= sX + 217) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 8;
		TempPage = 8;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 8, NULL, NULL, NULL);
	}
	if ((msX >= sX + 218) && (msX <= sX + 235) && (msY >= sY + 292) && (msY <= sY + 308))
	{
		m_stDialogBoxInfo[14].cMode = 9;
		TempPage = 9;
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, 9, NULL, NULL, NULL);
	}
}

void CGame::DlgBoxClick_Fish(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[24].sX;
	sY = m_stDialogBoxInfo[24].sY;

	switch (m_stDialogBoxInfo[24].cMode) {
		case 0:
			if ((msX >= sX + 160) && (msX <= sX + 253) && (msY >= sY + 70) && (msY <= sY + 90)) {
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GETFISHTHISTIME, NULL, NULL, NULL, NULL, NULL);
				AddEventList(DLGBOX_CLICK_FISH1, 10);
				DisableDialogBox(24);

				PlaySound('E', 14, 5);
			}
			break;
	}
}

void CGame::DlgBoxClick_Magic(short msX, short msY)
{
	int i, iCPivot, iYloc;
	short sX, sY;

	sX = m_stDialogBoxInfo[3].sX;
	sY = m_stDialogBoxInfo[3].sY;
	iCPivot = m_stDialogBoxInfo[3].sView * 10;
	iYloc = 0;
	for (i = 0; i < 9; i++)
	{
		if ((m_cMagicMastery[iCPivot + i] != NULL) && (m_pMagicCfgList[iCPivot + i] != NULL))
		{
			if ((msX >= sX + 30) && (msX <= sX + 240) && (msY >= sY + 70 + iYloc) && (msY <= sY + 70 + 18 + iYloc))
			{
				UseMagic(iCPivot + i);
				m_stMCursor.cSelectedObjectType = NULL;
				m_stMCursor.sSelectedObjectID = NULL;
				PlaySound('E', 14, 5);
				return;
			}
			iYloc += 18;
		}
	}
	if ((msX >= sX + 16) && (msX <= sX + 38) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 0;
	if ((msX >= sX + 39) && (msX <= sX + 56) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 1;
	if ((msX >= sX + 57) && (msX <= sX + 81) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 2;
	if ((msX >= sX + 82) && (msX <= sX + 101) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 3;
	if ((msX >= sX + 102) && (msX <= sX + 116) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 4;
	if ((msX >= sX + 117) && (msX <= sX + 137) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 5;
	if ((msX >= sX + 138) && (msX <= sX + 165) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 6;
	if ((msX >= sX + 166) && (msX <= sX + 197) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 7;
	if ((msX >= sX + 198) && (msX <= sX + 217) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 8;
	if ((msX >= sX + 218) && (msX <= sX + 239) && (msY >= sY + 240) && (msY <= sY + 268))
		m_stDialogBoxInfo[3].sView = 9;

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 285) && (msY <= sY + 285 + DEF_BTNSZY))
	{
		if (m_cSkillMastery[12] == 0) AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY16, 10);
		else
		{
			for (i = 0; i < DEF_MAXITEMS; i++)
				if ((m_pItemList[i] != NULL) && (m_pItemList[i]->m_cItemType == DEF_ITEMTYPE_USE_SKILL_ENABLEDIALOGBOX) &&
					(m_pItemList[i]->m_sSpriteFrame == 55))
				{
					EnableDialogBox(26, 1, NULL, NULL, NULL);
					AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY10, 10);
					PlaySound('E', 14, 5);
					return;
				}
			AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY15, 10);
		}
		PlaySound('E', 14, 5);
	}
}

void CGame::DlgBoxClick_NpcActionQuery(short msX, short msY)
{
	short sX, sY;
	int   absX, absY;
	if (m_bIsDialogEnabled[27] == TRUE)
	{
		AddEventList(BITEMDROP_SKILLDIALOG1, 10);
		return;
	}
	sX = m_stDialogBoxInfo[20].sX;
	sY = m_stDialogBoxInfo[20].sY;

	switch (m_stDialogBoxInfo[20].cMode) {
		case 0: // Talk to npc

			if (m_stDialogBoxInfo[20].sV3 == 25)
			{
				if ((msX > sX + 25) && (msX < sX + 70) && (msY > sY + 55) && (msY < sY + 70))
				{
					EnableDialogBox(m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV2, NULL, NULL);
					
					DisableDialogBox(20);
					return;
				}

				if ((msX > sX + 125 - 50) && (msX < sX + 170 - 50) && (msY > sY + 55) && (msY < sY + 70)) {
					EnableDialogBox(73, NULL, NULL, NULL, NULL);
				
					DisableDialogBox(20);
					return;
				}
			}

			if (m_stDialogBoxInfo[20].sV3 != 25)
			{
				if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
				{
					EnableDialogBox(m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV2, NULL, NULL);
				
					DisableDialogBox(20);
				}
			}
			
			if ((m_bIsDialogEnabled[21] == FALSE) && (msX > sX + 125) && (msX < sX + 180) && (msY > sY + 55) && (msY < sY + 70))
			{
				switch (m_stDialogBoxInfo[20].sV1) {
					case 7:	// Guild
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 1, NULL, NULL, NULL);
						AddEventList(TALKING_TO_GUILDHALL_OFFICER, 10);
						break;
					case 11: // BS or Shop
						switch (m_stDialogBoxInfo[20].sV2) {
							case 1:
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 2, NULL, NULL, NULL);
								AddEventList(TALKING_TO_SHOP_KEEPER, 10);
								break;
							case 2:
								bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_REPAIR_ALL, NULL, NULL, NULL, NULL, NULL);
							
								DisableDialogBox(20);
								break;
						}
						break;
					case 13: // CityHall officer
						/*if (m_stQuest[0].sTargetType != NULL && m_stQuest[1].sTargetType != NULL && m_stQuest[2].sTargetType != NULL)
							bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, NULL, NULL, NULL);
						else*/ 
						SendChat("/getquests");
						EnableDialogBox(77, NULL, NULL, NULL);
						AddEventList(TALKING_TO_CITYHALL_OFFICER, 10);
						break;
					case 14: // WH keeper
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 5, NULL, NULL, NULL);
						AddEventList(TALKING_TO_WAREHOUSE_KEEPER, 10);
						break;
					case 16: // Magicmerchant
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 6, NULL, NULL, NULL);
						AddEventList(TALKING_TO_MAGICIAN, 10);
						break;
				}
				DisableDialogBox(20);
			}
			break;

		case 1: // On other player
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				absX = abs(m_stDialogBoxInfo[20].sV5 - m_sPlayerX);
				absY = abs(m_stDialogBoxInfo[20].sV6 - m_sPlayerY);
				if ((absX <= 4) && (absY <= 4))
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GIVEITEMTOCHAR, m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV3, m_stDialogBoxInfo[20].sV5, m_stDialogBoxInfo[20].sV6, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cName, m_stDialogBoxInfo[20].sV4); //v1.4
				else AddEventList(DLGBOX_CLICK_NPCACTION_QUERY7, 10); //"Too far to give the item."
				DisableDialogBox(20);
			}
			else if ((msX > sX + 155) && (msX < sX + 210) && (msY > sY + 55) && (msY < sY + 70))
			{
				absX = abs(m_stDialogBoxInfo[20].sV5 - m_sPlayerX);
				absY = abs(m_stDialogBoxInfo[20].sV6 - m_sPlayerY);
				if ((absX <= 4) && (absY <= 4))
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_EXCHANGEITEMTOCHAR, m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV3, m_stDialogBoxInfo[20].sV5, m_stDialogBoxInfo[20].sV6, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cName, m_stDialogBoxInfo[20].sV4); //v1.4
				else AddEventList(DLGBOX_CLICK_NPCACTION_QUERY8, 10); //"Too far to exchange item."
				DisableDialogBox(20);
			}
			break;

		case 2: // Item on Shop/BS
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SELLITEM, NULL, m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV2, m_stDialogBoxInfo[20].sV3, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cName, m_stDialogBoxInfo[20].sV4); // v1.4
				DisableDialogBox(20);
			}
			else if ((msX > sX + 125) && (msX < sX + 180) && (msY > sY + 55) && (msY < sY + 70))
			{
				if (m_stDialogBoxInfo[20].sV3 == 1)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_REPAIRITEM, NULL, m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV2, NULL, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cName, m_stDialogBoxInfo[20].sV4); // v1.4
					DisableDialogBox(20);
				}
			}
			break;

		case 3: // Put item in the WH
			if ((msX > sX + 25) && (msX < sX + 105) && (msY > sY + 55) && (msY < sY + 70))
			{
				absX = abs(m_stDialogBoxInfo[20].sV5 - m_sPlayerX);
				absY = abs(m_stDialogBoxInfo[20].sV6 - m_sPlayerY);
				if ((absX <= 8) && (absY <= 8))
				{
					if (_iGetBankItemCount() >= (BANK_ITEMS_PAGE - 1))
					{
						AddEventList(DLGBOX_CLICK_NPCACTION_QUERY9, 10);//"here is no empty space left in warehouse."
					}
					else
					{
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_BANKPAGE, NULL, TempPage, NULL, NULL, NULL);
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GIVEITEMTOCHAR, m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV3, m_stDialogBoxInfo[39].sV5, m_stDialogBoxInfo[20].sV6, m_pItemList[m_stDialogBoxInfo[20].sV1]->m_cName, m_stDialogBoxInfo[20].sV4); //v1.4
					}
				}
				else AddEventList(DLGBOX_CLICK_NPCACTION_QUERY7, 10);//"Too far to give the item."

				DisableDialogBox(20);
			}
			break;

		case 4: // talk to npc or Unicorn
			if ((m_bIsDialogEnabled[21] == FALSE) && (msX > sX + 125) && (msX < sX + 180) && (msY > sY + 55) && (msY < sY + 70))
			{
				switch (m_stDialogBoxInfo[20].sV3)
				{
					case 21: // Guard
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 21, NULL, NULL, NULL);
						AddEventList(TALKING_TO_GUARD, 10);//"Talking to Guard..."
						break;
					case 32: // Unicorn
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 32, NULL, NULL, NULL);
						AddEventList(TALKING_TO_UNICORN, 10);//"Talking to Unicorn..."
						break;
					case 67:
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 67, NULL, NULL, NULL);
						AddEventList(TALKING_TO_MCGAFFIN, 10);//"Talking to a town man..."
						break;
					case 68:
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 68, NULL, NULL, NULL);
						AddEventList(TALKING_TO_PERRY, 10);//"Talking to a town maiden..."
						break;
					case 69:
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 69, NULL, NULL, NULL);
						AddEventList(TALKING_TO_DEVLIN, 10);//"Talking to a town magician..."
						break;
				}
			}

			if ((msX > sX + 125 - 100) && (msX < sX + 180 - 100) && (msY > sY + 55) && (msY < sY + 70) && m_bIsDialogEnabled[21] == FALSE && m_stDialogBoxInfo[20].sV3 == 129) {
				EnableDialogBox(76, NULL, NULL, NULL, NULL);
			}

			DisableDialogBox(20);
			break;


		case 5: // Talk
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				EnableDialogBox(m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV2, NULL, NULL);
				
				DisableDialogBox(20);
			}
			if ((msX > sX + 25 + 75) && (msX < sX + 80 + 75) && (msY > sY + 55) && (msY < sY + 70))
			{
				EnableDialogBox(31, NULL, NULL, NULL);
				
				DisableDialogBox(20);
			}

			if ((m_bIsDialogEnabled[21] == FALSE) && (msX > sX + 155) && (msX < sX + 210) && (msY > sY + 55) && (msY < sY + 70))
			{
				switch (m_stDialogBoxInfo[20].sV1) {
					case 7:	// Guild
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 1, NULL, NULL, NULL);
						AddEventList(TALKING_TO_GUILDHALL_OFFICER, 10);//"Talking to Guildhall Officer..."
						break;

					case 11: //
						if (m_stDialogBoxInfo[20].sV2 == 1) {
							bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 2, NULL, NULL, NULL);
							AddEventList(TALKING_TO_SHOP_KEEPER, 10);//"Talking to Shop Keeper..."
						}
						break;

					case 13: //
						//bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, NULL, NULL, NULL);
						AddEventList(TALKING_TO_CITYHALL_OFFICER, 10);//"
						break;

					case 14: //
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 5, NULL, NULL, NULL);
						AddEventList(TALKING_TO_WAREHOUSE_KEEPER, 10);//
						break;

					case 16: //
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 6, NULL, NULL, NULL);
						AddEventList(TALKING_TO_MAGICIAN, 10);//"
						break;
				}
				
				DisableDialogBox(20);
			}
			break;

		case 6: // Snoopy: Added Gail
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				/*if (DecriptInt(m_iLevel) > 50)//agregado
				{
				EnableDialogBox(57, -3, NULL, NULL);
				DisableDialogBox(20);
				}*/
				trade_mode = DEF_NOTSELECTED;
				EnableDialogBox(79, NULL, NULL, NULL, NULL);
				DisableDialogBox(20);
			}
			break;

		case 7:
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				EnableDialogBox(m_stDialogBoxInfo[20].sV1, m_stDialogBoxInfo[20].sV2, NULL, NULL);
				DisableDialogBox(20);
			}
			if ((msX > sX + 25 + 75) && (msX < sX + 80 + 75) && (msY > sY + 55) && (msY < sY + 70))
			{
				EnableDialogBox(31, NULL, NULL, NULL);
				DisableDialogBox(20);
			}
			//Repair all
			if ((msX > sX + 155) && (msX < sX + 210) && (msY > sY + 55) && (msY < sY + 70))
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_REPAIR_ALL, NULL, NULL, NULL, NULL, NULL);
				DisableDialogBox(20);
			}
			break;

		case 8:
			if ((msX > sX + 25) && (msX < sX + 100) && (msY > sY + 55) && (msY < sY + 70))
			{
				EnableDialogBox(51, 0, NULL, NULL);
				DisableDialogBox(20);
			}
			if ((msX > sX + 125) && (msX < sX + 180) && (msY > sY + 55) && (msY < sY + 70))
			{
				if (Assasain)
				{
					/*if (m_stQuest[0].sTargetType != NULL || m_stQuest[1].sTargetType != NULL || m_stQuest[2].sTargetType != NULL)
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, NULL, NULL, NULL);
					else EnableDialogBox(46, NULL, NULL, NULL);*/
				}
				else
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 111, NULL, NULL, NULL);
					AddEventList("Talking to Assassin Officer...", 10);
					DisableDialogBox(20);
				}
			}
			break;
	}
}

void CGame::DlgBoxClick_Shop(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[11].sX;
	sY = m_stDialogBoxInfo[11].sY;

	switch (m_stDialogBoxInfo[11].cMode) {
		case 0:
			ClicItemList(11, sX, sY, msX, msY);
			break;
		case -1:
			ClicMenuItems(11, sX, sY, msX, msY);
			break;

		default:
			ClicItemDetail(11, sX, sY, msX, msY);
			break;
	}
}

void CGame::DlgBoxClick_Skill(short msX, short msY)
{
	int i;
	short sX, sY;
	sX = m_stDialogBoxInfo[15].sX;
	sY = m_stDialogBoxInfo[15].sY;
	switch (m_stDialogBoxInfo[15].cMode) {
		case -1:
			break;
		case 0:

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 285 + 40) && (msY <= sY + 285 + DEF_BTNSZY + 40))
			{			
				EnableDialogBox(72, NULL, NULL, NULL);				
				PlaySound('E', 14, 5);
				DisableDialogBox(15);
				return;
			}

			for (i = 0; i < 17; i++)
				if ((i < DEF_MAXSKILLTYPE) && (m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView] != NULL))
				{
					if ((msX >= sX + 44) && (msX <= sX + 135 + 44) && (msY >= sY + 45 + i * 15) && (msY <= sY + 59 + i * 15) &&
						string(m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_cName) != "Pretend-Corpse") //chequear aca
					//if ((msX >= sX + 44) && (msX <= sX + 135 + 44) && (msY >= sY + 45 + i * 15) && (msY <= sY + 59 + i * 15))
					{
						if ((m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_bIsUseable == TRUE)
							&& (m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_iLevel != 0))
						{
							if (m_bSkillUsingStatus == TRUE)
							{
								AddEventList(DLGBOX_CLICK_SKILL1, 10); // "You are already using other skill."
								return;
							}
							if ((m_bCommandAvailable == FALSE) || (DecriptInt(m_iHP) <= 0))
							{
								AddEventList(DLGBOX_CLICK_SKILL2, 10); // "You can't use a skill while you are moving."
								return;
							}
							if (m_bIsGetPointingMode == TRUE)
							{
								return;
							}
							switch (m_pSkillCfgList[i + m_stDialogBoxInfo[15].sView]->m_cUseMethod) {
								case 0:
								case 2:
									bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_USESKILL, NULL, (i + m_stDialogBoxInfo[15].sView), NULL, NULL, NULL);
									m_bSkillUsingStatus = TRUE;
									DisableDialogBox(15);
									PlaySound('E', 14, 5);
									break;
							}
						}
					}
					else if ((msX >= sX + 215) && (msX <= sX + 240) && (msY >= sY + 45 + i * 15) && (msY <= sY + 59 + i * 15))
					{
						if (m_stDialogBoxInfo[15].bFlag == FALSE)
						{
							bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_SETDOWNSKILLINDEX, NULL, i + m_stDialogBoxInfo[15].sView, NULL, NULL, NULL);
							PlaySound('E', 14, 5);
							m_stDialogBoxInfo[15].bFlag = TRUE;
						}
					}
				}
			break;
	}
}

void CGame::DlgBoxClick_SkillDlg(short msX, short msY)
{
	int i, iAdjX, iAdjY;
	short sX, sY;

	sX = m_stDialogBoxInfo[26].sX;
	sY = m_stDialogBoxInfo[26].sY;

	iAdjX = 5;
	iAdjY = 8;


	switch (m_stDialogBoxInfo[26].cMode) {
		case 1:
			if ((msX >= sX + iAdjX + 60) && (msX <= sX + iAdjX + 153) && (msY >= sY + iAdjY + 175) && (msY <= sY + iAdjY + 195))
			{
				m_stDialogBoxInfo[26].cMode = 2;
				m_stDialogBoxInfo[26].cStr[0] = 1;
				m_stDialogBoxInfo[26].dwT1 = m_dwCurTime;
				PlaySound('E', 14, 5);
				AddEventList(DLGBOX_CLICK_SKILLDLG1, 10); // "Mixing a potion..."
				PlaySound('E', 41, 0);
			}
			break;
			// Crafting
		case 7:
			if ((msX >= sX + iAdjX + 60) && (msX <= sX + iAdjX + 153) && (msY >= sY + iAdjY + 175) && (msY <= sY + iAdjY + 195))
			{//	DebugLog("Tag1 DlgBoxClick_SkillDlg");
				if (m_stDialogBoxInfo[26].sV1 == -1)
				{
					AddEventList(DLGBOX_CLICK_SKILLDLG2, 10); // "There is not enough crafting materials. Please put in more materials."
					PlaySound('E', 14, 5);
				}
				else
				{
					m_stDialogBoxInfo[26].cMode = 8;
					m_stDialogBoxInfo[26].dwT1 = m_dwCurTime;
					m_stDialogBoxInfo[26].cStr[1] = 1;
					PlaySound('E', 14, 5);
					AddEventList(DLGBOX_CLICK_SKILLDLG3, 10); // "Crafting the item in progress"
					PlaySound('E', 51, 0);
				}
			}
			break;

		case 3:
			for (i = 0; i < 13; i++)
				if (m_pDispBuildItemList[i + m_stDialogBoxInfo[26].sView] != NULL)
				{
					if ((msX >= sX + iAdjX + 44) && (msX <= sX + iAdjX + 135 + 44) && (msY >= sY + iAdjY + 55 + i * 15) && (msY <= sY + iAdjY + 55 + 14 + i * 15)) {
						m_stDialogBoxInfo[26].cMode = 4;
						m_stDialogBoxInfo[26].cStr[0] = i + m_stDialogBoxInfo[26].sView;
						PlaySound('E', 14, 5);
					}
				}
			break;

		case 4:
			iAdjX = -1;
			iAdjY = -7;
			if (m_pDispBuildItemList[m_stDialogBoxInfo[26].cStr[0]]->m_bBuildEnabled == TRUE)
			{
				if ((msX >= sX + iAdjX + 32) && (msX <= sX + iAdjX + 95) && (msY >= sY + iAdjY + 353) && (msY <= sY + iAdjY + 372)) {
					// Back
					m_stDialogBoxInfo[26].cMode = 3;
					PlaySound('E', 14, 5);

					if ((m_stDialogBoxInfo[26].sV1 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV1] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV1] = FALSE;
					if ((m_stDialogBoxInfo[26].sV2 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV2] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV2] = FALSE;
					if ((m_stDialogBoxInfo[26].sV3 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV3] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV3] = FALSE;
					if ((m_stDialogBoxInfo[26].sV4 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV4] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV4] = FALSE;
					if ((m_stDialogBoxInfo[26].sV5 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV5] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV5] = FALSE;
					if ((m_stDialogBoxInfo[26].sV6 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV6] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV6] = FALSE;

					m_stDialogBoxInfo[26].sV1 = -1;
					m_stDialogBoxInfo[26].sV2 = -1;
					m_stDialogBoxInfo[26].sV3 = -1;
					m_stDialogBoxInfo[26].sV4 = -1;
					m_stDialogBoxInfo[26].sV5 = -1;
					m_stDialogBoxInfo[26].sV6 = -1;
					m_stDialogBoxInfo[26].cStr[0] = 0;
					m_stDialogBoxInfo[26].cStr[1] = 0;
					m_stDialogBoxInfo[26].cStr[4] = 0;
				}

				if ((msX >= sX + iAdjX + 160) && (msX <= sX + iAdjX + 255) && (msY >= sY + iAdjY + 353) && (msY <= sY + iAdjY + 372))
				{	// Manufacture
					if (m_stDialogBoxInfo[26].cStr[4] == 1)
					{
						m_stDialogBoxInfo[26].cMode = 5;
						m_stDialogBoxInfo[26].cStr[1] = 0;
						m_stDialogBoxInfo[26].dwT1 = m_dwCurTime;
						PlaySound('E', 14, 5);
						PlaySound('E', 44, 0);
					}
				}
			}
			else
			{
				if ((msX >= sX + iAdjX + 32) && (msX <= sX + iAdjX + 95) && (msY >= sY + iAdjY + 353) && (msY <= sY + iAdjY + 372)) 	// Back
				{
					m_stDialogBoxInfo[26].cMode = 3;
					PlaySound('E', 14, 5);

					if ((m_stDialogBoxInfo[26].sV1 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV1] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV1] = FALSE;
					if ((m_stDialogBoxInfo[26].sV2 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV2] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV2] = FALSE;
					if ((m_stDialogBoxInfo[26].sV3 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV3] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV3] = FALSE;
					if ((m_stDialogBoxInfo[26].sV4 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV4] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV4] = FALSE;
					if ((m_stDialogBoxInfo[26].sV5 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV5] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV5] = FALSE;
					if ((m_stDialogBoxInfo[26].sV6 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV6] != NULL))
						m_bIsItemDisabled[m_stDialogBoxInfo[26].sV6] = FALSE;

					m_stDialogBoxInfo[26].sV1 = -1;
					m_stDialogBoxInfo[26].sV2 = -1;
					m_stDialogBoxInfo[26].sV3 = -1;
					m_stDialogBoxInfo[26].sV4 = -1;
					m_stDialogBoxInfo[26].sV5 = -1;
					m_stDialogBoxInfo[26].sV6 = -1;
					m_stDialogBoxInfo[26].cStr[0] = 0;
					m_stDialogBoxInfo[26].cStr[1] = 0;
					m_stDialogBoxInfo[26].cStr[4] = 0;
				}
			}
			break;

		case 6:
			iAdjX = -1;
			iAdjY = -7;
			if ((msX >= sX + iAdjX + 32) && (msX <= sX + iAdjX + 95) && (msY >= sY + iAdjY + 353) && (msY <= sY + iAdjY + 372)) {
				// Back
				m_stDialogBoxInfo[26].cMode = 3;
				PlaySound('E', 14, 5);

				if ((m_stDialogBoxInfo[26].sV1 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV1] != NULL))
					m_bIsItemDisabled[m_stDialogBoxInfo[26].sV1] = FALSE;
				if ((m_stDialogBoxInfo[26].sV2 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV2] != NULL))
					m_bIsItemDisabled[m_stDialogBoxInfo[26].sV2] = FALSE;
				if ((m_stDialogBoxInfo[26].sV3 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV3] != NULL))
					m_bIsItemDisabled[m_stDialogBoxInfo[26].sV3] = FALSE;
				if ((m_stDialogBoxInfo[26].sV4 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV4] != NULL))
					m_bIsItemDisabled[m_stDialogBoxInfo[26].sV4] = FALSE;
				if ((m_stDialogBoxInfo[26].sV5 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV5] != NULL))
					m_bIsItemDisabled[m_stDialogBoxInfo[26].sV5] = FALSE;
				if ((m_stDialogBoxInfo[26].sV6 != -1) && (m_pItemList[m_stDialogBoxInfo[26].sV6] != NULL))
					m_bIsItemDisabled[m_stDialogBoxInfo[26].sV6] = FALSE;

				m_stDialogBoxInfo[26].sV1 = -1;
				m_stDialogBoxInfo[26].sV2 = -1;
				m_stDialogBoxInfo[26].sV3 = -1;
				m_stDialogBoxInfo[26].sV4 = -1;
				m_stDialogBoxInfo[26].sV5 = -1;
				m_stDialogBoxInfo[26].sV6 = -1;
				m_stDialogBoxInfo[26].cStr[0] = 0;
				m_stDialogBoxInfo[26].cStr[1] = 0;
				m_stDialogBoxInfo[26].cStr[4] = 0;
			}
			break;
	}
}

void CGame::UpdateScreen_OnLoading(bool bActive)
{
	int i;
	if (bActive) UpdateScreen_OnLoading_Progress();

	switch (m_cLoading) {
		case 0:
			m_hPakFile = CreateFile("sprites\\interface.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_MOUSECURSOR] = new class CSprite(m_hPakFile, &m_DDraw, "interface", 0, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_SPRFONTS] = new class CSprite(m_hPakFile, &m_DDraw, "interface", 1, FALSE);
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\Newmaps.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS1] = new class CSprite(m_hPakFile, &m_DDraw, "Newmaps", 0, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS2] = new class CSprite(m_hPakFile, &m_DDraw, "Newmaps", 1, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS3] = new class CSprite(m_hPakFile, &m_DDraw, "Newmaps", 2, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS4] = new class CSprite(m_hPakFile, &m_DDraw, "Newmaps", 3, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_NEWMAPS5] = new class CSprite(m_hPakFile, &m_DDraw, "Newmaps", 4, FALSE);
				CloseHandle(m_hPakFile);
			}

			if (c_reso->IsResolution() == C800x600)
			{
				m_hPakFile = CreateFile("sprites\\LoginDialog800.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_LOGIN] = new class CSprite(m_hPakFile, &m_DDraw, "LoginDialog800", 0, FALSE, FALSE);
					CloseHandle(m_hPakFile);
				}
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				m_hPakFile = CreateFile("sprites\\LoginDialog.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_LOGIN] = new class CSprite(m_hPakFile, &m_DDraw, "LoginDialog", 0, FALSE, FALSE);
					CloseHandle(m_hPakFile);
				}
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_hPakFile = CreateFile("sprites\\LoginDialog1024.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_LOGIN] = new class CSprite(m_hPakFile, &m_DDraw, "LoginDialog1024", 0, FALSE, FALSE);
					CloseHandle(m_hPakFile);
				}
			}

			m_hPakFile = CreateFile("sprites\\SelectServer.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_SELECTS] = new class CSprite(m_hPakFile, &m_DDraw, "SelectServer", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\Grid.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_GRID] = new class CSprite(m_hPakFile, &m_DDraw, "Grid", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			//ZeroEoyPnk
			m_hPakFile = CreateFile("sprites\\StatusMag.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL2] = new class CSprite(m_hPakFile, &m_DDraw, "StatusMag", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}
			m_hPakFile = CreateFile("sprites\\PartySprite.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_PARTYSTATUS] = new class CSprite(m_hPakFile, &m_DDraw, "PartySprite", 0, FALSE);
				CloseHandle(m_hPakFile);
			}
			/*m_hPakFile = CreateFile("sprites\\NewPanel.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_NEWPANEL] = new class CSprite(m_hPakFile, &m_DDraw, "NewPanel", 0, FALSE);
				CloseHandle(m_hPakFile);
			}*/

			m_hPakFile = CreateFile("sprites\\GameDialogb.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_INVENTORY] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialogb", 7, FALSE);
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\GameDialog.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_GAME1] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 0, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 1, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_ND_GAME3] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 2, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 3, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 4, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_GUIDEMAP] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 5, FALSE); //lalo
				//m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 6, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_ND_INVENTORY] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 7, FALSE);
			//	m_pSprite[DEF_SPRID_INTERFACE_ND_SELECTCHAR] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 8, FALSE);
			//	m_pSprite[DEF_SPRID_INTERFACE_ND_NEWCHAR] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 9, FALSE);
				//m_pSprite[DEF_SPRID_INTERFACE_ND_NEWEXCHANGE] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 10, FALSE);
				CloseHandle(m_hPakFile);
			}

			/*if (c_reso->IsResolution() == C800x600)
			{
				m_hPakFile = CreateFile("sprites\\newchar.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_NEWCHAR] = new class CSprite(m_hPakFile, &m_DDraw, "newchar", 0, FALSE);
					CloseHandle(m_hPakFile);
				}
			}

			else if (c_reso->IsResolution() == C640x480)
			{
				m_hPakFile = CreateFile("sprites\\GameDialog.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_NEWCHAR] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 9, FALSE);//, FALSE
					CloseHandle(m_hPakFile);
				}
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_hPakFile = CreateFile("sprites\\newchar1024.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_NEWCHAR] = new class CSprite(m_hPakFile, &m_DDraw, "newchar1024", 0, FALSE);
					CloseHandle(m_hPakFile);
				}
			}*/

			if (c_reso->IsResolution() == C800x600)
			{
				m_hPakFile = CreateFile("sprites\\selectchar.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_SELECTCHAR] = new class CSprite(m_hPakFile, &m_DDraw, "selectchar", 0, FALSE);
					CloseHandle(m_hPakFile);
				}
			}

			else if (c_reso->IsResolution() == C640x480)
			{
				m_hPakFile = CreateFile("sprites\\GameDialog.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_SELECTCHAR] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 8, FALSE);//, FALSE
					CloseHandle(m_hPakFile);
				}
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_hPakFile = CreateFile("sprites\\selectchar1024.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_SELECTCHAR] = new class CSprite(m_hPakFile, &m_DDraw, "selectchar1024", 0, FALSE);
					CloseHandle(m_hPakFile);
				}
			}

			if (c_reso->IsResolution() == C800x600)
			{
				m_hPakFile = CreateFile("sprites\\Barra800.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL] = new class CSprite(m_hPakFile, &m_DDraw, "Barra800", 0, FALSE);
					CloseHandle(m_hPakFile);
				}
			}

			else if (c_reso->IsResolution() == C640x480)
			{
				m_hPakFile = CreateFile("sprites\\Barra.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL] = new class CSprite(m_hPakFile, &m_DDraw, "Barra", 0, FALSE, FALSE);
					CloseHandle(m_hPakFile);
				}
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				m_hPakFile = CreateFile("sprites\\Barra1024.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
				if (m_hPakFile != INVALID_HANDLE_VALUE) {
					m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL] = new class CSprite(m_hPakFile, &m_DDraw, "Barra1024", 0, FALSE);
					CloseHandle(m_hPakFile);
				}
			}
			
			//ZeroEoyPnk
			m_hPakFile = CreateFile("sprites\\BarraC.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3] = new class CSprite(m_hPakFile, &m_DDraw, "BarraC", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\Barra-New.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL4] = new class CSprite(m_hPakFile, &m_DDraw, "Barra-New", 0, FALSE);
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\Barrita.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ITEMS] = new class CSprite(m_hPakFile, &m_DDraw, "Barrita", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\PartyBar.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY] = new class CSprite(m_hPakFile, &m_DDraw, "PartyBar", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}
			//LaloParty minimap
			m_hPakFile = CreateFile("sprites\\PnPty.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY2] = new class CSprite(m_hPakFile, &m_DDraw, "PnPty", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			//LaloParty RankUp
			m_hPakFile = CreateFile("sprites\\RankUp.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_RANKUP] = new class CSprite(m_hPakFile, &m_DDraw, "RankUp", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			//ZeroEoyPnk
			m_hPakFile = CreateFile("sprites\\Msg.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_MSG] = new class CSprite(m_hPakFile, &m_DDraw, "Msg", 0, FALSE);
				CloseHandle(m_hPakFile);
			}
			m_hPakFile = CreateFile("sprites\\F5.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_CHARACTER] = new class CSprite(m_hPakFile, &m_DDraw, "F5", 0, FALSE, FALSE);//lalo in
				m_pSprite[DEF_SPRID_INTERFACE_ND_EVENT] = new class CSprite(m_hPakFile, &m_DDraw, "F5", 1, FALSE, FALSE);
				m_pSprite[DEF_SPRID_INTERFACE_ND_MARKET] = new class CSprite(m_hPakFile, &m_DDraw, "F5", 2, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}
			m_hPakFile = CreateFile("sprites\\DialogText.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_TEXT] = new class CSprite(m_hPakFile, &m_DDraw, "DialogText", 0, FALSE);//lalo invertir
				m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON] = new class CSprite(m_hPakFile, &m_DDraw, "DialogText", 1, FALSE);
				CloseHandle(m_hPakFile);
			}
			MakeSprite("Telescope", DEF_SPRID_INTERFACE_GUIDEMAP, 32, FALSE, FALSE);	  // Snoopy: 20->32
			MakeSprite("Telescope2", DEF_SPRID_INTERFACE_GUIDEMAP + 35, 4, FALSE, FALSE); // Snoopy: Ajout.351 (heldenian maps)
			MakeSprite("Telescope3", DEF_SPRID_INTERFACE_GUIDEMAP + 40, 8, FALSE, FALSE); // Snoopy: Ajout.351 (heldenian maps)
			MakeSprite("monster", DEF_SPRID_INTERFACE_MONSTER, 1, FALSE);
			
			//HeatoN added 2024
			MakeCommonSprite("newslang", SPRID_FLAGSLANG, 2, TRUE);
			MakeCommonSprite("enhan-tab", SPRID_ENHANCEMENT_TAB, 1, TRUE);
			MakeCommonSprite("arrows", SPRID_ARROWS, 2, TRUE);
			MakeCommonSprite("smallbutton", SPRID_SMALLBUTTONS, 2, TRUE);
			MakeCommonSprite("longbuts", SPRID_LONGBUTTONS, 2, TRUE);

			MakeCommonSprite("rebirthdialog", SPRID_REBIRTHDIALOG, 1, TRUE);
			MakeCommonSprite("enchanting", SPRID_ENCHANTINGDIALOG, 1, TRUE);
			MakeCommonSprite("newscroll", SPRID_NEWSCROLL, 1, TRUE);
			MakeCommonSprite("logocursed", SPRID_CURSEDLOGO, 1, TRUE);
			MakeCommonSprite("bgs", SPRID_BACKGROUND, 3, FALSE);
			MakeCommonSprite("newbuttons", SPRID_BUTTONS, 3, FALSE);
			MakeCommonSprite("NewCharacter", DEF_SPRID_INTERFACE_ND_NEWCHAR, 1, FALSE);
			MakeCommonSprite("questlist", SPRID_QUESTLIST, 1, TRUE);
			MakeCommonSprite("NewPanel", DEF_SPRID_INTERFACE_NEWPANEL, 1, TRUE);
			MakeCommonSprite("newpanelbuts", SPRID_NEWPANELBUTS, 2, TRUE);
			MakeCommonSprite("bigcandys", SPRID_BIGCANDYS, 3, TRUE);
			
			m_cLoading = 4;
			break;

		case 4:
			MakeTileSpr("maptiles1", 0, 32, TRUE);
			m_hPakFile = CreateFile("sprites\\structures1.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL); //�Ⱦ��� Ÿ�� �ε� ���Ѵ�.2002.09.06����
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pTileSpr[1 + 50] = new class CSprite(m_hPakFile, &m_DDraw, "structures1", 1, TRUE);
				m_pTileSpr[5 + 50] = new class CSprite(m_hPakFile, &m_DDraw, "structures1", 5, TRUE);
				CloseHandle(m_hPakFile);
			}
			MakeTileSpr("Sinside1", 70, 27, FALSE);
			MakeTileSpr("shops", 70, 27, FALSE);//shops
			MakeTileSpr("Trees1", 100, 46, TRUE);
			MakeTileSpr("TreeShadows", 150, 46, TRUE);
			MakeTileSpr("objects1", 200, 10, TRUE); // snoopy: 8->10
			MakeTileSpr("objects2", 211, 5, TRUE);
			MakeTileSpr("objects3", 216, 4, TRUE);
			MakeTileSpr("objects4", 220, 2, TRUE); //snoopy: 1->2

			m_hPakFile = CreateFile("sprites\\NewExchange.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_NEWEXCHANGE] = new class CSprite(m_hPakFile, &m_DDraw, "NewExchange", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}
			m_cLoading = 8;
			break;

		case 8:
			MakeTileSpr("Tile223-225", 223, 3, TRUE);
			MakeTileSpr("Tile226-229", 226, 4, TRUE);
			MakeTileSpr("objects5", 230, 9, TRUE);	// Snoopy
			MakeTileSpr("objects6", 238, 4, TRUE);	// Snoopy
			MakeTileSpr("objects7b", 242, 7, TRUE);	// Snoopy
			MakeTileSpr("objects7", 242, 7, TRUE);
			MakeTileSpr("maptiles2", 300, 15, TRUE);//- Index 300
			MakeTileSpr("maptiles4", 320, 10, TRUE);
			MakeTileSpr("maptiles5", 330, 19, TRUE);
			MakeTileSpr("maptiles6", 349, 4, TRUE);
			MakeTileSpr("maptiles353-361", 353, 9, TRUE);
			MakeTileSpr("Tile363-366", 363, 4, TRUE);
			MakeTileSpr("Tile367-367", 367, 1, TRUE); // Add by Snoopy (fountains)
			MakeTileSpr("Tile370-381b", 370, 12, TRUE);// Tile370~381
			MakeTileSpr("Tile370-381", 370, 12, TRUE);
			MakeTileSpr("Tile382-387b", 382, 6, TRUE);
			MakeTileSpr("Tile382-387", 382, 6, TRUE);
			MakeTileSpr("Tile388-402", 388, 15, TRUE);
			MakeTileSpr("structures1", 50, 20, TRUE);
			m_cLoading = 12;
			break;

		case 12:
			MakeTileSpr("Tile403-405", 403, 3, TRUE);
			MakeTileSpr("Tile406-421", 406, 16, TRUE);
			MakeTileSpr("Tile422-429b", 422, 8, TRUE);
			MakeTileSpr("Tile422-429", 422, 8, TRUE);
			MakeTileSpr("Tile430-443", 430, 14, TRUE);
			MakeTileSpr("Tile444-444", 444, 1, TRUE);
			MakeTileSpr("Tile445-461", 445, 17, TRUE);
			MakeTileSpr("Tile462-473", 462, 12, TRUE);	// Diuuude
			MakeTileSpr("Tile474-478", 474, 5, TRUE);	// Diuuude
			MakeTileSpr("Tile479-488", 479, 10, TRUE);	// Diuuude
			MakeTileSpr("Tile489-522", 489, 34, TRUE);	// Diuuude Drunken City
			MakeTileSpr("Tile523-530", 523, 8, TRUE);	// Diuuude Rampart//// VER LALO SPRITE 
			MakeTileSpr("Tile531-540", 531, 10, TRUE);	// Diuuude GodH + Pont
			MakeTileSpr("Tile541-545", 541, 5, TRUE);	// Diuuude GodH

			//New Arg Maps
			//MakeTileSpr("mapnew", 545, 10, TRUE, FALSE);	// New Arg Maps 10
			MakeTileSpr("mapnew", 545, 11, TRUE, FALSE);	// New Arg Maps 10
			MakeTileSpr("whousetiles", 556, 7, TRUE);	// New Arg Maps 10

			MakeSprite("item-packb", DEF_SPRID_ITEMPACK_PIVOTPOINT + 1, 6, FALSE);
			MakeSprite("item-pack", DEF_SPRID_ITEMPACK_PIVOTPOINT + 1, 27, FALSE);
			m_hPakFile = CreateFile("sprites\\item-pack.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 20] = new class CSprite(m_hPakFile, &m_DDraw, "item-pack", 17, FALSE); //
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 21] = new class CSprite(m_hPakFile, &m_DDraw, "item-pack", 18, FALSE); //
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 22] = new class CSprite(m_hPakFile, &m_DDraw, "item-pack", 19, FALSE); // Angels
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\NewIconSpells.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_ICONOS] = new class CSprite(m_hPakFile, &m_DDraw, "NewIconSpells", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}
			m_hPakFile = CreateFile("sprites\\Buttons.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTONS] = new class CSprite(m_hPakFile, &m_DDraw, "Buttons", 0, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			// DEF_SPRID_ITEMGROUND_PIVOTPOINT+1
			MakeSprite("item-ground", DEF_SPRID_ITEMGROUND_PIVOTPOINT + 1, 19, FALSE);
			m_hPakFile = CreateFile("sprites\\item-ground.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE)
			{
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 20] = new class CSprite(m_hPakFile, &m_DDraw, "item-ground", 17, FALSE);
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 21] = new class CSprite(m_hPakFile, &m_DDraw, "item-ground", 18, FALSE);
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 22] = new class CSprite(m_hPakFile, &m_DDraw, "item-ground", 19, FALSE);//Angels
				CloseHandle(m_hPakFile);
			}
			// NetBoxs - ZeroEoyPnk - 14/09/2010
			MakeSprite("NetBox", DEF_SPRID_ITEMGROUND_PIVOTPOINT + 23, 23, FALSE, FALSE);
			m_hPakFile = CreateFile("sprites\\NetBox.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 23] = new class CSprite(m_hPakFile, &m_DDraw, "NetBox", 0, FALSE, FALSE); //
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 23] = new class CSprite(m_hPakFile, &m_DDraw, "NetBox", 1, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			// New Stones
			MakeSprite("Stones", DEF_SPRID_ITEMPACK_PIVOTPOINT + 32, 32, FALSE, FALSE);
			m_hPakFile = CreateFile("sprites\\Stones.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 32] = new class CSprite(m_hPakFile, &m_DDraw, "Stones", 0, FALSE, FALSE); //
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 32] = new class CSprite(m_hPakFile, &m_DDraw, "Stones", 1, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			// Necks & Rings
			MakeSprite("RingsNecks", DEF_SPRID_ITEMPACK_PIVOTPOINT + 33, 33, FALSE, FALSE);
			m_hPakFile = CreateFile("sprites\\RingsNecks.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 33] = new class CSprite(m_hPakFile, &m_DDraw, "RingsNecks", 0, FALSE, FALSE);
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 33] = new class CSprite(m_hPakFile, &m_DDraw, "RingsNecks", 0, FALSE, FALSE);
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 73] = new class CSprite(m_hPakFile, &m_DDraw, "RingsNecks", 0, FALSE, FALSE);
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 33] = new class CSprite(m_hPakFile, &m_DDraw, "RingsNecks", 1, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			//Tintas y Armor dye
			MakeSprite("Tintas", DEF_SPRID_ITEMPACK_PIVOTPOINT + 34, 34, FALSE, FALSE);
			m_hPakFile = CreateFile("sprites\\Tintas.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 34] = new class CSprite(m_hPakFile, &m_DDraw, "Tintas", 0, FALSE, FALSE);
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 34] = new class CSprite(m_hPakFile, &m_DDraw, "Tintas", 1, FALSE, FALSE);
				CloseHandle(m_hPakFile);
			}

			MakeSprite("item-dynamic", DEF_SPRID_ITEMDYNAMIC_PIVOTPOINT, 3, FALSE);// Snoopy 2-> 3 (flags)
			m_cLoading = 16;
			break;

		case 16:
			m_hPakFile = CreateFile("sprites\\item-equipM.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 0] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 0, FALSE);	// body
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 1] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 1, FALSE);	// 1-swords
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 2] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 2, FALSE);	// 2-bows
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 3] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 3, FALSE);	// 3-shields
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 4] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 4, FALSE);	// 4-tunics
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 5] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 5, FALSE);	// 5-shoes
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 7] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 6, FALSE);	// 6-berk
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 8] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 7, FALSE);	// 7-hoses
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 9] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 8, FALSE);	// 8-bodyarmor
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 15] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 11, FALSE); // Axe hammer
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 17] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 12, FALSE); // Wands
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 18] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 9, FALSE);  // hair
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 19] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 10, FALSE); // undies
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 20] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 13, FALSE); // capes
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 21] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipM", 14, FALSE); // helm
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\item-pack.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 16] = new class CSprite(m_hPakFile, &m_DDraw, "item-pack", 15); // Necks
				//Snoopy: Angels pandents
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 22] = new class CSprite(m_hPakFile, &m_DDraw, "item-pack", 19); // Angels
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\item-equipW.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 40] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 0, FALSE); // body
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 41] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 1, FALSE); // 1-swords
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 42] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 2, FALSE); // 2-bows
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 43] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 3, FALSE); // 3-shields
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 45] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 4, FALSE); // 4-shoes
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 50] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 5, FALSE); // 5-Soustif
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 51] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 6, FALSE); // 6 berk
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 52] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 7, FALSE); // 7 hose
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 53] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 8, FALSE); // 8-hoses
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 55] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 11, FALSE); // Axe hammer
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 57] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 12, FALSE); // Wands
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 58] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 9, FALSE); // hair
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 59] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 10, FALSE);// undies
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 60] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 13, FALSE);// capes
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 61] = new class CSprite(m_hPakFile, &m_DDraw, "item-equipW", 14, FALSE);// helm
				CloseHandle(m_hPakFile);
			}

			//Read Assasain Spr
			m_hPakFile = CreateFile("sprites\\item2-equipM.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 31] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipM", 0, FALSE, FALSE);	// berk
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 24] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipM", 1, FALSE, FALSE);	// hoses
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 25] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipM", 2, FALSE, FALSE);	// armor
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 26] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipM", 3, FALSE, FALSE);	// robe
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 27] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipM", 4, FALSE, FALSE); // capes
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 28] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipM", 5, FALSE, FALSE); // capes
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 29] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipM", 6, FALSE, FALSE); // helm
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 30] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipM", 7, FALSE, FALSE); // cap
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\item2-equipW.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 71] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipW", 0, FALSE, FALSE); // berk
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 64] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipW", 1, FALSE, FALSE); // hoses
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 65] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipW", 2, FALSE, FALSE); // armor
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 66] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipW", 3, FALSE, FALSE);// robe
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 67] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipW", 4, FALSE, FALSE);// capes
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 68] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipW", 5, FALSE, FALSE);// capes
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 69] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipW", 6, FALSE, FALSE);// helm
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 70] = new class CSprite(m_hPakFile, &m_DDraw, "item2-equipW", 7, FALSE, FALSE);// cap
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\item2-pack.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 31] = new class CSprite(m_hPakFile, &m_DDraw, "item2-pack", 0, FALSE, FALSE); // Hauberk
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 24] = new class CSprite(m_hPakFile, &m_DDraw, "item2-pack", 1, FALSE, FALSE); // Leggs
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 25] = new class CSprite(m_hPakFile, &m_DDraw, "item2-pack", 2, FALSE, FALSE); // Armor
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 26] = new class CSprite(m_hPakFile, &m_DDraw, "item2-pack", 3, FALSE, FALSE); // Robe
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 27] = new class CSprite(m_hPakFile, &m_DDraw, "item2-pack", 4, FALSE, FALSE); // Cape
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 28] = new class CSprite(m_hPakFile, &m_DDraw, "item2-pack", 5, FALSE, FALSE); // Cape +1
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 29] = new class CSprite(m_hPakFile, &m_DDraw, "item2-pack", 6, FALSE, FALSE); // Helm
				m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + 30] = new class CSprite(m_hPakFile, &m_DDraw, "item2-pack", 7, FALSE, FALSE); // Cap
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\item2-ground.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 31] = new class CSprite(m_hPakFile, &m_DDraw, "item2-ground", 0, FALSE, FALSE); // Hauberk
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 24] = new class CSprite(m_hPakFile, &m_DDraw, "item2-ground", 1, FALSE, FALSE); // Leggs
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 25] = new class CSprite(m_hPakFile, &m_DDraw, "item2-ground", 2, FALSE, FALSE); // Armor
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 26] = new class CSprite(m_hPakFile, &m_DDraw, "item2-ground", 3, FALSE, FALSE); // Robe
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 27] = new class CSprite(m_hPakFile, &m_DDraw, "item2-ground", 4, FALSE, FALSE); // Cape
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 28] = new class CSprite(m_hPakFile, &m_DDraw, "item2-ground", 5, FALSE, FALSE); // Cape +1
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 29] = new class CSprite(m_hPakFile, &m_DDraw, "item2-ground", 6, FALSE, FALSE); // Helm
				m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + 30] = new class CSprite(m_hPakFile, &m_DDraw, "item2-ground", 7, FALSE, FALSE); // Cap
				CloseHandle(m_hPakFile);
			}
			// End Assasain

			m_hPakFile = CreateFile("sprites\\item-pack.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 56] = new class CSprite(m_hPakFile, &m_DDraw, "item-pack", 15);// necks
				//Snoopy: Angels pandents
				m_pSprite[DEF_SPRID_ITEMEQUIP_PIVOTPOINT + 62] = new class CSprite(m_hPakFile, &m_DDraw, "item-pack", 19); // Angels
				CloseHandle(m_hPakFile);
			}
			MakeSprite("Bm", 500 + 15 * 8 * 0, 96, TRUE);// Black Man (Type: 1)
			MakeSprite("Wm", 500 + 15 * 8 * 1, 96, TRUE);// White Man (Type: 2)
			MakeSprite("Ym", 500 + 15 * 8 * 2, 96, TRUE);// Yellow Man (Type: 3)
			m_cLoading = 20;
			break;

		case 20:
			MakeSprite("TutelarAngel1", DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + 50 * 0, 48, FALSE);//(STR)
			MakeSprite("TutelarAngel2", DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + 50 * 1, 48, FALSE);//(DEX)
			MakeSprite("TutelarAngel3", DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + 50 * 2, 48, FALSE);//(INT)
			MakeSprite("TutelarAngel4", DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + 50 * 3, 48, FALSE);//(MAG)
			MakeSprite("Bw", 500 + 15 * 8 * 3, 96, TRUE);// Black Woman (Type: 4)
			MakeSprite("Ww", 500 + 15 * 8 * 4, 96, TRUE);// White Woman (Type: 5)
			MakeSprite("Yw", 500 + 15 * 8 * 5, 96, TRUE);// Yellow Woman (Type: 6)

			// Achivements
			MakeSprite("Achivements", DEF_SPRID_INTERFACE_ACHIVEMENTS, 0, FALSE);
			m_hPakFile = CreateFile("sprites\\Achivements.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS] = new class CSprite(m_hPakFile, &m_DDraw, "Achivements", 0, FALSE, FALSE); //
				m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2] = new class CSprite(m_hPakFile, &m_DDraw, "Achivements", 1, FALSE, FALSE); //
				CloseHandle(m_hPakFile);
			}
			m_cLoading = 24;
			break;

		case 24:
			MakeSprite("slm", DEF_SPRID_MOB + 7 * 8 * 0, 40, TRUE);// Slime (Type: 10)
			MakeSprite("ske", DEF_SPRID_MOB + 7 * 8 * 1, 40, TRUE);// Skeleton (Type: 11)
			MakeSprite("Gol", DEF_SPRID_MOB + 7 * 8 * 2, 40, TRUE);// Stone-Golem (Type: 12)
			MakeSprite("Cyc", DEF_SPRID_MOB + 7 * 8 * 3, 40, TRUE);// Cyclops (Type: 13)
			MakeSprite("Orc", DEF_SPRID_MOB + 7 * 8 * 4, 40, TRUE);// Orc (Type: 14)
			MakeSprite("Shopkpr", DEF_SPRID_MOB + 7 * 8 * 5, 8);		// ShopKeeper-Woman (Type: 15)
			MakeSprite("Ant", DEF_SPRID_MOB + 7 * 8 * 6, 40, TRUE);//  Giant-Ant (Type: 16)
			MakeSprite("Scp", DEF_SPRID_MOB + 7 * 8 * 7, 40, TRUE);//  Scorpion (Type: 17)
			MakeSprite("Zom", DEF_SPRID_MOB + 7 * 8 * 8, 40, TRUE);//  Zombie (Type: 18)
			MakeSprite("Gandlf", DEF_SPRID_MOB + 7 * 8 * 9, 8, TRUE);// Gandalf � (Type: 19)
			MakeSprite("Howard", DEF_SPRID_MOB + 7 * 8 * 10, 8, TRUE);// Howard ������ ���� (Type: 20)
			MakeSprite("Guard", DEF_SPRID_MOB + 7 * 8 * 11, 40, TRUE);// Guard (Type: 21)
			MakeSprite("Amp", DEF_SPRID_MOB + 7 * 8 * 12, 40, TRUE);// Amphis (Type: 22)
			MakeSprite("Cla", DEF_SPRID_MOB + 7 * 8 * 13, 40, TRUE);// Clay-Golem (Type: 23)
			MakeSprite("tom", DEF_SPRID_MOB + 7 * 8 * 14, 8, TRUE);// Tom (Type: 24)
			MakeSprite("William", DEF_SPRID_MOB + 7 * 8 * 15, 8, TRUE);// William (Type: 25)
			m_cLoading = 28;
			break;

		case 28:
			MakeSprite("Kennedy", DEF_SPRID_MOB + 7 * 8 * 16, 8, TRUE);// Kennedy (Type: 26)
			MakeSprite("Helb", DEF_SPRID_MOB + 7 * 8 * 17, 40, TRUE);// Hellbound (Type: 27)
			MakeSprite("Troll", DEF_SPRID_MOB + 7 * 8 * 18, 40, TRUE);// Troll (Type: 28)
			MakeSprite("Orge", DEF_SPRID_MOB + 7 * 8 * 19, 40, TRUE);// Orge (Type: 29)
			MakeSprite("Liche", DEF_SPRID_MOB + 7 * 8 * 20, 40, TRUE);// Liche (Type: 30)
			MakeSprite("Demon", DEF_SPRID_MOB + 7 * 8 * 21, 40, TRUE);// Demon (Type: 31)
			MakeSprite("Unicorn", DEF_SPRID_MOB + 7 * 8 * 22, 40, TRUE);// Unicorn (Type: 32)
			MakeSprite("WereWolf", DEF_SPRID_MOB + 7 * 8 * 23, 40, TRUE);// WereWolf (Type: 33)
			MakeSprite("Dummy", DEF_SPRID_MOB + 7 * 8 * 24, 40, TRUE);// Dummy (Type: 34)
			m_hPakFile = CreateFile("sprites\\Energy-Sphere.apk", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL); // Energy-Ball (Type: 35)
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 40; i++)
					m_pSprite[DEF_SPRID_MOB + i + 7 * 8 * 25] = new class CSprite(m_hPakFile, &m_DDraw, "Energy-Sphere", 0, TRUE, FALSE);

				CloseHandle(m_hPakFile);
			}
			m_cLoading = 32;
			break;

		case 32:
			MakeSprite("GT-Arrow", DEF_SPRID_MOB + 7 * 8 * 26, 40, TRUE);// Arrow-GuardTower (Type: 36)
			MakeSprite("GT-Cannon", DEF_SPRID_MOB + 7 * 8 * 27, 40, TRUE);// Cannon-GuardTower (Type: 37)
			MakeSprite("ManaCollector", DEF_SPRID_MOB + 7 * 8 * 28, 40, TRUE);// Mana Collector (Type: 38)
			MakeSprite("Detector", DEF_SPRID_MOB + 7 * 8 * 29, 40, TRUE);// Detector (Type: 39)
			MakeSprite("ESG", DEF_SPRID_MOB + 7 * 8 * 30, 40, TRUE);// ESG (Type: 40)
			MakeSprite("GMG", DEF_SPRID_MOB + 7 * 8 * 31, 40, TRUE);// GMG (Type: 41)
			MakeSprite("ManaStone", DEF_SPRID_MOB + 7 * 8 * 32, 40, TRUE);// ManaStone (Type: 42)
			MakeSprite("LWB", DEF_SPRID_MOB + 7 * 8 * 33, 40, TRUE);// Light War Beetle (Type: 43)
			MakeSprite("GHK", DEF_SPRID_MOB + 7 * 8 * 34, 40, TRUE);// God's Hand Knight (Type: 44)
			MakeSprite("GHKABS", DEF_SPRID_MOB + 7 * 8 * 35, 40, TRUE);// God's Hand Knight with Armored Battle Steed (Type: 45)
			MakeSprite("TK", DEF_SPRID_MOB + 7 * 8 * 36, 40, TRUE);// Temple Knight (Type: 46)
			MakeSprite("BG", DEF_SPRID_MOB + 7 * 8 * 37, 40, TRUE);// Battle Golem (Type: 47)
			m_cLoading = 36;
			break;

		case 36:
			MakeSprite("Stalker", DEF_SPRID_MOB + 7 * 8 * 38, 40, TRUE);// Stalker (Type: 48)
			MakeSprite("Hellclaw", DEF_SPRID_MOB + 7 * 8 * 39, 40, TRUE);// Hellclaw (Type: 49)
			MakeSprite("Tigerworm", DEF_SPRID_MOB + 7 * 8 * 40, 40, TRUE);// Tigerworm (Type: 50)
			MakeSprite("Catapult", DEF_SPRID_MOB + 7 * 8 * 41, 40, TRUE);// Catapult (Type: 51)
			MakeSprite("Gagoyle", DEF_SPRID_MOB + 7 * 8 * 42, 40, TRUE);// Gargoyle (Type: 52)
			MakeSprite("Beholder", DEF_SPRID_MOB + 7 * 8 * 43, 40, TRUE);// Beholder (Type: 53)
			MakeSprite("DarkElf", DEF_SPRID_MOB + 7 * 8 * 44, 40, TRUE);// Dark-Elf (Type: 54)
			MakeSprite("Bunny", DEF_SPRID_MOB + 7 * 8 * 45, 40, TRUE);// Bunny (Type: 55)
			MakeSprite("Cat", DEF_SPRID_MOB + 7 * 8 * 46, 40, TRUE);// Cat (Type: 56)
			MakeSprite("GiantFrog", DEF_SPRID_MOB + 7 * 8 * 47, 40, TRUE);// GiantFrog (Type: 57)
			MakeSprite("MTGiant", DEF_SPRID_MOB + 7 * 8 * 48, 40, TRUE);// Mountain Giant (Type: 58)
			m_cLoading = 40;
			break;

		case 40:
			MakeSprite("Ettin", DEF_SPRID_MOB + 7 * 8 * 49, 40, TRUE);// Ettin (Type: 59)
			MakeSprite("CanPlant", DEF_SPRID_MOB + 7 * 8 * 50, 40, TRUE);// Cannibal Plant (Type: 60)
			MakeSprite("Rudolph", DEF_SPRID_MOB + 7 * 8 * 51, 40, TRUE);// Rudolph (Type: 61)
			MakeSprite("DireBoar", DEF_SPRID_MOB + 7 * 8 * 52, 40, TRUE);// Boar (Type: 62)
			MakeSprite("frost", DEF_SPRID_MOB + 7 * 8 * 53, 40, TRUE);// Frost (Type: 63)
			MakeSprite("Crop", DEF_SPRID_MOB + 7 * 8 * 54, 40, TRUE);// Crop(Type: 64)
			MakeSprite("IceGolem", DEF_SPRID_MOB + 7 * 8 * 55, 40, TRUE);// IceGolem (Type: 65)
			MakeSprite("Wyvern", DEF_SPRID_MOB + 7 * 8 * 56, 24, TRUE);// Wyvern (Type: 66)
			MakeSprite("McGaffin", DEF_SPRID_MOB + 7 * 8 * 57, 16, TRUE);// McGaffin (Type: 67)
			MakeSprite("Perry", DEF_SPRID_MOB + 7 * 8 * 58, 16, TRUE);// Perry (Type: 68)
			MakeSprite("Devlin", DEF_SPRID_MOB + 7 * 8 * 59, 16, TRUE);// Devlin (Type: 69)
			MakeSprite("Barlog", DEF_SPRID_MOB + 7 * 8 * 60, 40, TRUE);// Barlog (Type: 70)
			MakeSprite("Centaurus", DEF_SPRID_MOB + 7 * 8 * 61, 40, TRUE);// Centaurus (Type: 71)
			MakeSprite("ClawTurtle", DEF_SPRID_MOB + 7 * 8 * 62, 40, TRUE);// Claw-Turtle (Type: 72)
			MakeSprite("FireWyvern", DEF_SPRID_MOB + 7 * 8 * 63, 24, TRUE);// Fire-Wyvern (Type: 73)
			MakeSprite("GiantCrayfish", DEF_SPRID_MOB + 7 * 8 * 64, 40, TRUE);// Giant-Crayfish (Type: 74)
			MakeSprite("GiantLizard", DEF_SPRID_MOB + 7 * 8 * 65, 40, TRUE);// Giant-Lizard (Type: 75)
			m_cLoading = 44;
			break;

		case 44:
			// New NPCs - Diuuude - fixed by Snoopy
			MakeSprite("GiantPlant", DEF_SPRID_MOB + 7 * 8 * 66, 40, TRUE);// Giant-Plant (Type: 76)
			MakeSprite("MasterMageOrc", DEF_SPRID_MOB + 7 * 8 * 67, 40, TRUE);// MasterMage-Orc (Type: 77)
			MakeSprite("Minotaurs", DEF_SPRID_MOB + 7 * 8 * 68, 40, TRUE);// Minotaurs (Type: 78)
			MakeSprite("Nizie", DEF_SPRID_MOB + 7 * 8 * 69, 40, TRUE);// Nizie (Type: 79)
			MakeSprite("Tentocle", DEF_SPRID_MOB + 7 * 8 * 70, 40, TRUE);// Tentocle (Type: 80)
			MakeSprite("yspro", DEF_SPRID_MOB + 7 * 8 * 71, 32, TRUE);// Abaddon (Type: 81)
			MakeSprite("Sorceress", DEF_SPRID_MOB + 7 * 8 * 72, 40, TRUE);// Sorceress (Type: 82)
			MakeSprite("TPKnight", DEF_SPRID_MOB + 7 * 8 * 73, 40, TRUE);// TPKnight (Type: 83)
			MakeSprite("ElfMaster", DEF_SPRID_MOB + 7 * 8 * 74, 40, TRUE);// ElfMaster (Type: 84)
			MakeSprite("DarkKnight", DEF_SPRID_MOB + 7 * 8 * 75, 40, TRUE);// DarkKnight (Type: 85)
			MakeSprite("HBTank", DEF_SPRID_MOB + 7 * 8 * 76, 32, TRUE);// HeavyBattleTank (Type: 86)
			MakeSprite("CBTurret", DEF_SPRID_MOB + 7 * 8 * 77, 32, TRUE);// CBTurret (Type: 87)
			MakeSprite("Babarian", DEF_SPRID_MOB + 7 * 8 * 78, 40, TRUE);// Babarian (Type: 88)
			MakeSprite("ACannon", DEF_SPRID_MOB + 7 * 8 * 79, 32, TRUE);// ACannon (Type: 89)
			MakeSprite("yspro", DEF_SPRID_MOB + 7 * 8 * 110, 32, TRUE);// Abaddon (Type: 110)
			m_cLoading = 48;
			break;

		case 48:
			MakeSprite("Gail", DEF_SPRID_MOB + 7 * 8 * 80, 8, TRUE); // Gail (Type: 90)
			MakeSprite("Gate", DEF_SPRID_MOB + 7 * 8 * 81, 24, TRUE);// Heldenian Gate (Type: 91)
			//ZeroEoyPnk - Reliquia-a/Reliquia-e
			MakeSprite("Reliquia", DEF_SPRID_MOB + 7 * 8 * 82, 1, TRUE, FALSE);// Reliquia-a/Reliquia-e (Type: 92)
			m_hPakFile = CreateFile("sprites\\Mpt.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_M + i + 15 * 0] = new class CSprite(m_hPakFile, &m_DDraw, "Mpt", i + 12 * 0, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_M + i + 15 * 1] = new class CSprite(m_hPakFile, &m_DDraw, "Mpt", i + 12 * 1, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_M + i + 15 * 2] = new class CSprite(m_hPakFile, &m_DDraw, "Mpt", i + 12 * 2, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_M + i + 15 * 3] = new class CSprite(m_hPakFile, &m_DDraw, "Mpt", i + 12 * 3, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_M + i + 15 * 4] = new class CSprite(m_hPakFile, &m_DDraw, "Mpt", i + 12 * 4, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_M + i + 15 * 5] = new class CSprite(m_hPakFile, &m_DDraw, "Mpt", i + 12 * 5, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_M + i + 15 * 6] = new class CSprite(m_hPakFile, &m_DDraw, "Mpt", i + 12 * 6, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_M + i + 15 * 7] = new class CSprite(m_hPakFile, &m_DDraw, "Mpt", i + 12 * 7, TRUE);
				CloseHandle(m_hPakFile);
			}
			m_cLoading = 52;
			break;

		case 52:
			m_hPakFile = CreateFile("sprites\\Mhr.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_M + i + 15 * 0] = new class CSprite(m_hPakFile, &m_DDraw, "Mhr", i + 12 * 0, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_M + i + 15 * 1] = new class CSprite(m_hPakFile, &m_DDraw, "Mhr", i + 12 * 1, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_M + i + 15 * 2] = new class CSprite(m_hPakFile, &m_DDraw, "Mhr", i + 12 * 2, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_M + i + 15 * 3] = new class CSprite(m_hPakFile, &m_DDraw, "Mhr", i + 12 * 3, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_M + i + 15 * 4] = new class CSprite(m_hPakFile, &m_DDraw, "Mhr", i + 12 * 4, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_M + i + 15 * 5] = new class CSprite(m_hPakFile, &m_DDraw, "Mhr", i + 12 * 5, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_M + i + 15 * 6] = new class CSprite(m_hPakFile, &m_DDraw, "Mhr", i + 12 * 6, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_M + i + 15 * 7] = new class CSprite(m_hPakFile, &m_DDraw, "Mhr", i + 12 * 7, TRUE);
				CloseHandle(m_hPakFile);
			}
			MakeSprite("MLArmor", DEF_SPRID_BODYARMOR_M + 15 * 1, 12, TRUE);
			MakeSprite("MCMail", DEF_SPRID_BODYARMOR_M + 15 * 2, 12, TRUE);
			MakeSprite("MSMail", DEF_SPRID_BODYARMOR_M + 15 * 3, 12, TRUE);
			MakeSprite("MPMail", DEF_SPRID_BODYARMOR_M + 15 * 4, 12, TRUE);
			MakeSprite("Mtunic", DEF_SPRID_BODYARMOR_M + 15 * 5, 12, TRUE);
			MakeSprite("MRobe1", DEF_SPRID_BODYARMOR_M + 15 * 6, 12, TRUE);
			MakeSprite("MSanta", DEF_SPRID_BODYARMOR_M + 15 * 7, 12, TRUE);
			MakeSprite("MHRobe1", DEF_SPRID_BODYARMOR_M + 15 * 10, 12, TRUE); //hero
			MakeSprite("MHRobe2", DEF_SPRID_BODYARMOR_M + 15 * 11, 12, TRUE); //hero
			MakeSprite("MHPMail1", DEF_SPRID_BODYARMOR_M + 15 * 8, 12, TRUE); //hero
			MakeSprite("MHPMail2", DEF_SPRID_BODYARMOR_M + 15 * 9, 12, TRUE); //hero
			MakeSprite("AssPMailM", DEF_SPRID_BODYARMOR_M + 15 * 12, 12, TRUE, FALSE);
			MakeSprite("AssRobeM", DEF_SPRID_BODYARMOR_M + 15 * 13, 12, TRUE, FALSE);
			MakeSprite("WhitePMailM", DEF_SPRID_BODYARMOR_M + 15 * 14, 12, TRUE, FALSE);
			MakeSprite("WhiteRobeM", DEF_SPRID_BODYARMOR_M + 15 * 15, 12, TRUE, FALSE);
			MakeSprite("MShirt", DEF_SPRID_BERK_M + 15 * 1, 12, TRUE);
			MakeSprite("MHauberk", DEF_SPRID_BERK_M + 15 * 2, 12, TRUE);
			MakeSprite("MHHauberk1", DEF_SPRID_BERK_M + 15 * 3, 12, TRUE);
			MakeSprite("MHHauberk2", DEF_SPRID_BERK_M + 15 * 4, 12, TRUE);
			MakeSprite("AssHauberkM", DEF_SPRID_BERK_M + 15 * 5, 12, TRUE, FALSE);
			MakeSprite("WhiteHauberkM", DEF_SPRID_BERK_M + 15 * 6, 12, TRUE, FALSE);
			m_cLoading = 56;
			break;

		case 56:
			MakeSprite("MTrouser", DEF_SPRID_LEGG_M + 15 * 1, 12, TRUE);
			MakeSprite("MHTrouser", DEF_SPRID_LEGG_M + 15 * 2, 12, TRUE);
			MakeSprite("MCHoses", DEF_SPRID_LEGG_M + 15 * 3, 12, TRUE);
			MakeSprite("MLeggings", DEF_SPRID_LEGG_M + 15 * 4, 12, TRUE);
			MakeSprite("MHLeggings1", DEF_SPRID_LEGG_M + 15 * 5, 12, TRUE); // hero
			MakeSprite("MHLeggings2", DEF_SPRID_LEGG_M + 15 * 6, 12, TRUE); // hero
			MakeSprite("AssLeggingsM", DEF_SPRID_LEGG_M + 15 * 7, 12, TRUE, FALSE);
			MakeSprite("WhiteLeggingsM", DEF_SPRID_LEGG_M + 15 * 8, 12, TRUE, FALSE);
			MakeSprite("MShoes", DEF_SPRID_BOOT_M + 15 * 1, 12, TRUE);
			MakeSprite("MLBoots", DEF_SPRID_BOOT_M + 15 * 2, 12, TRUE);
			m_hPakFile = CreateFile("sprites\\Msw.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 1] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 0, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 2] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 1, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 3] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 2, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 4] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 3, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 6] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 5, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 7] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 6, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 8] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 7, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 9] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 8, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 10] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 9, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 11] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 10, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 12] = new class CSprite(m_hPakFile, &m_DDraw, "Msw", i + 56 * 11, TRUE);
				CloseHandle(m_hPakFile);
			}
			m_cLoading = 60;
			break;

		case 60:
			MakeSprite("Mswx", DEF_SPRID_WEAPON_M + 64 * 5, 56, TRUE);
			MakeSprite("Msw2", DEF_SPRID_WEAPON_M + 64 * 13, 56, TRUE);
			MakeSprite("Msw3", DEF_SPRID_WEAPON_M + 64 * 14, 56, TRUE);
			MakeSprite("MStormBringer", DEF_SPRID_WEAPON_M + 64 * 15, 56, TRUE);
			MakeSprite("MDarkExec", DEF_SPRID_WEAPON_M + 64 * 16, 56, TRUE);
			MakeSprite("MKlonessBlade", DEF_SPRID_WEAPON_M + 64 * 17, 56, TRUE);
			MakeSprite("MKlonessAstock", DEF_SPRID_WEAPON_M + 64 * 18, 56, TRUE);
			MakeSprite("MDebastator", DEF_SPRID_WEAPON_M + 64 * 19, 56, TRUE);
			MakeSprite("MAxe1", DEF_SPRID_WEAPON_M + 64 * 20, 56, TRUE);// Axe
			MakeSprite("MAxe2", DEF_SPRID_WEAPON_M + 64 * 21, 56, TRUE);
			MakeSprite("MAxe3", DEF_SPRID_WEAPON_M + 64 * 22, 56, TRUE);
			MakeSprite("MAxe4", DEF_SPRID_WEAPON_M + 64 * 23, 56, TRUE);
			MakeSprite("MAxe5", DEF_SPRID_WEAPON_M + 64 * 24, 56, TRUE);
			MakeSprite("MPickAxe1", DEF_SPRID_WEAPON_M + 64 * 25, 56, TRUE);
			MakeSprite("MAxe6", DEF_SPRID_WEAPON_M + 64 * 26, 56, TRUE);
			MakeSprite("Mhoe", DEF_SPRID_WEAPON_M + 64 * 27, 56, TRUE);
			MakeSprite("MKlonessAxe", DEF_SPRID_WEAPON_M + 64 * 28, 56, TRUE);
			MakeSprite("MLightBlade", DEF_SPRID_WEAPON_M + 64 * 29, 56, TRUE);
			m_cLoading = 64;
			break;

		case 64:
			MakeSprite("MHammer", DEF_SPRID_WEAPON_M + 64 * 30, 56, TRUE);
			MakeSprite("MBHammer", DEF_SPRID_WEAPON_M + 64 * 31, 56, TRUE);
			MakeSprite("MBabHammer", DEF_SPRID_WEAPON_M + 64 * 32, 56, TRUE);
			MakeSprite("MBShadowSword", DEF_SPRID_WEAPON_M + 64 * 33, 56, TRUE);
			MakeSprite("MBerserkWand", DEF_SPRID_WEAPON_M + 64 * 34, 56, TRUE);
			MakeSprite("Mstaff1", DEF_SPRID_WEAPON_M + 64 * 35, 56, TRUE);// Staff
			MakeSprite("Mstaff2", DEF_SPRID_WEAPON_M + 64 * 36, 56, TRUE);
			MakeSprite("MStaff3", DEF_SPRID_WEAPON_M + 64 * 37, 56, TRUE);
			MakeSprite("MReMagicWand", DEF_SPRID_WEAPON_M + 64 * 38, 56, TRUE);
			MakeSprite("MKlonessWand", DEF_SPRID_WEAPON_M + 64 * 39, 56, TRUE);
			// Bows 40 41 below
			MakeSprite("MDirectBow", DEF_SPRID_WEAPON_M + 64 * 42, 56, TRUE);
			MakeSprite("MFireBow", DEF_SPRID_WEAPON_M + 64 * 43, 56, TRUE);
			m_cLoading = 68;
			break;

		case 68:
			MakeSprite("Mbo", DEF_SPRID_WEAPON_M + 64 * 40, 56, TRUE);
			m_hPakFile = CreateFile("sprites\\Mbo.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_M + i + 64 * 41] = new class CSprite(m_hPakFile, &m_DDraw, "Mbo", i + 56 * 1, TRUE);
				CloseHandle(m_hPakFile);
			}
			m_hPakFile = CreateFile("sprites\\Msh.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 1] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 0, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 2] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 1, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 3] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 2, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 4] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 3, TRUE);
				for (i = 0; i < 7; i++)	m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 5] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 4, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 6] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 5, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 7] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 6, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 8] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 7, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_M + i + 8 * 9] = new class CSprite(m_hPakFile, &m_DDraw, "Msh", i + 7 * 8, TRUE);
				CloseHandle(m_hPakFile);
			}
			m_cLoading = 72;
			break;

		case 72:
			MakeSprite("Mmantle01", DEF_SPRID_MANTLE_M + 15 * 1, 12, TRUE);
			MakeSprite("Mmantle02", DEF_SPRID_MANTLE_M + 15 * 2, 12, TRUE);
			MakeSprite("Mmantle03", DEF_SPRID_MANTLE_M + 15 * 3, 12, TRUE);
			MakeSprite("Mmantle04", DEF_SPRID_MANTLE_M + 15 * 4, 12, TRUE);
			MakeSprite("Mmantle05", DEF_SPRID_MANTLE_M + 15 * 5, 12, TRUE);
			MakeSprite("Mmantle06", DEF_SPRID_MANTLE_M + 15 * 6, 12, TRUE);
			MakeSprite("AssCapeM", DEF_SPRID_MANTLE_M + 15 * 7, 12, TRUE, FALSE);
			MakeSprite("AssCape1M", DEF_SPRID_MANTLE_M + 15 * 8, 12, TRUE, FALSE);
			MakeSprite("WhiteCapeM", DEF_SPRID_MANTLE_M + 15 * 9, 12, TRUE, FALSE);
			MakeSprite("WhiteCape1M", DEF_SPRID_MANTLE_M + 15 * 10, 12, TRUE, FALSE);
			MakeSprite("MHelm1", DEF_SPRID_HEAD_M + 15 * 1, 12, TRUE);
			//MakeSprite( "MHelm2", DEF_SPRID_HEAD_M + 15*2, 12, TRUE);
			MakeSprite("MHelm3", DEF_SPRID_HEAD_M + 15 * 3, 12, TRUE);
			MakeSprite("MHelm4", DEF_SPRID_HEAD_M + 15 * 4, 12, TRUE);
			MakeSprite("MHCap1", DEF_SPRID_HEAD_M + 15 * 11, 12, TRUE); //hero
			MakeSprite("MHCap2", DEF_SPRID_HEAD_M + 15 * 12, 12, TRUE); //hero
			MakeSprite("MHHelm1", DEF_SPRID_HEAD_M + 15 * 9, 12, TRUE);
			MakeSprite("MHHelm2", DEF_SPRID_HEAD_M + 15 * 10, 12, TRUE);
			MakeSprite("NMHelm1", DEF_SPRID_HEAD_M + 15 * 5, 12, TRUE);
			MakeSprite("NMHelm2", DEF_SPRID_HEAD_M + 15 * 6, 12, TRUE);
			MakeSprite("NMHelm3", DEF_SPRID_HEAD_M + 15 * 7, 12, TRUE);
			MakeSprite("NMHelm4", DEF_SPRID_HEAD_M + 15 * 8, 12, TRUE);
			MakeSprite("AssHelmM", DEF_SPRID_HEAD_M + 15 * 13, 12, TRUE, FALSE);
			MakeSprite("AssCapM", DEF_SPRID_HEAD_M + 15 * 14, 12, TRUE, FALSE);
			MakeSprite("WhiteHelmM", DEF_SPRID_HEAD_M + 15 * 15, 12, TRUE, FALSE);
			MakeSprite("WhiteCapM", DEF_SPRID_HEAD_M + 15 * 2, 12, TRUE, FALSE);
			m_cLoading = 76;
			break;

		case 76:
			m_hPakFile = CreateFile("sprites\\Wpt.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_W + i + 15 * 0] = new class CSprite(m_hPakFile, &m_DDraw, "Wpt", i, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_W + i + 15 * 1] = new class CSprite(m_hPakFile, &m_DDraw, "Wpt", i + 12, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_W + i + 15 * 2] = new class CSprite(m_hPakFile, &m_DDraw, "Wpt", i + 12 * 2, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_W + i + 15 * 3] = new class CSprite(m_hPakFile, &m_DDraw, "Wpt", i + 12 * 3, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_W + i + 15 * 4] = new class CSprite(m_hPakFile, &m_DDraw, "Wpt", i + 12 * 4, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_W + i + 15 * 5] = new class CSprite(m_hPakFile, &m_DDraw, "Wpt", i + 12 * 5, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_W + i + 15 * 6] = new class CSprite(m_hPakFile, &m_DDraw, "Wpt", i + 12 * 6, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_UNDIES_W + i + 15 * 7] = new class CSprite(m_hPakFile, &m_DDraw, "Wpt", i + 12 * 7, TRUE);
				CloseHandle(m_hPakFile);
			}

			m_hPakFile = CreateFile("sprites\\Whr.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_W + i + 15 * 0] = new class CSprite(m_hPakFile, &m_DDraw, "Whr", i + 0, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_W + i + 15 * 1] = new class CSprite(m_hPakFile, &m_DDraw, "Whr", i + 12, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_W + i + 15 * 2] = new class CSprite(m_hPakFile, &m_DDraw, "Whr", i + 12 * 2, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_W + i + 15 * 3] = new class CSprite(m_hPakFile, &m_DDraw, "Whr", i + 12 * 3, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_W + i + 15 * 4] = new class CSprite(m_hPakFile, &m_DDraw, "Whr", i + 12 * 4, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_W + i + 15 * 5] = new class CSprite(m_hPakFile, &m_DDraw, "Whr", i + 12 * 5, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_W + i + 15 * 6] = new class CSprite(m_hPakFile, &m_DDraw, "Whr", i + 12 * 6, TRUE);
				for (i = 0; i < 12; i++) m_pSprite[DEF_SPRID_HAIR_W + i + 15 * 7] = new class CSprite(m_hPakFile, &m_DDraw, "Whr", i + 12 * 7, TRUE);
				CloseHandle(m_hPakFile);
			}
			m_cLoading = 80;
			break;

		case 80:
		//	MakeSprite( "WBodice1", DEF_SPRID_BODYARMOR_W + 15*1, 12, TRUE);//sacado
			MakeSprite("WBodice2", DEF_SPRID_BODYARMOR_W + 15 * 2, 12, TRUE);
			MakeSprite("WLArmor", DEF_SPRID_BODYARMOR_W + 15 * 3, 12, TRUE);
			MakeSprite("WCMail", DEF_SPRID_BODYARMOR_W + 15 * 4, 12, TRUE);
			MakeSprite("WSMail", DEF_SPRID_BODYARMOR_W + 15 * 5, 12, TRUE);
			MakeSprite("WPMail", DEF_SPRID_BODYARMOR_W + 15 * 6, 12, TRUE);
			MakeSprite("WRobe1", DEF_SPRID_BODYARMOR_W + 15 * 7, 12, TRUE);
			MakeSprite("WSanta", DEF_SPRID_BODYARMOR_W + 15 * 8, 12, TRUE);
			MakeSprite("WHRobe1", DEF_SPRID_BODYARMOR_W + 15 * 11, 12, TRUE); // hero
			MakeSprite("WHRobe2", DEF_SPRID_BODYARMOR_W + 15 * 12, 12, TRUE); // hero
			MakeSprite("WHPMail1", DEF_SPRID_BODYARMOR_W + 15 * 9, 12, TRUE); //hero
			MakeSprite("WHPMail2", DEF_SPRID_BODYARMOR_W + 15 * 10, 12, TRUE); //hero
		//	MakeSprite( "AssPMailW", DEF_SPRID_BODYARMOR_W + 15*12, 12, TRUE); //hero
			MakeSprite("AssPMailW", DEF_SPRID_BODYARMOR_W + 15 * 1, 12, TRUE, FALSE); //hero
			MakeSprite("AssRobeW", DEF_SPRID_BODYARMOR_W + 15 * 13, 12, TRUE, FALSE); //hero
			MakeSprite("WhitePMailW", DEF_SPRID_BODYARMOR_W + 15 * 14, 12, TRUE, FALSE); //hero
			MakeSprite("WhiteRobeW", DEF_SPRID_BODYARMOR_W + 15 * 15, 12, TRUE, FALSE); //hero

			MakeSprite("WChemiss", DEF_SPRID_BERK_W + 15 * 1, 12, TRUE);
			MakeSprite("WShirt", DEF_SPRID_BERK_W + 15 * 2, 12, TRUE);
			MakeSprite("WHauberk", DEF_SPRID_BERK_W + 15 * 3, 12, TRUE);
			MakeSprite("WHHauberk1", DEF_SPRID_BERK_W + 15 * 4, 12, TRUE);
			MakeSprite("WHHauberk2", DEF_SPRID_BERK_W + 15 * 5, 12, TRUE);
			MakeSprite("AssHauberkW", DEF_SPRID_BERK_W + 15 * 6, 12, TRUE, FALSE);
			MakeSprite("WhiteHauberkW", DEF_SPRID_BERK_W + 15 * 7, 12, TRUE, FALSE);
			MakeSprite("WSkirt", DEF_SPRID_LEGG_W + 15 * 1, 12, TRUE);
			MakeSprite("WTrouser", DEF_SPRID_LEGG_W + 15 * 2, 12, TRUE);
			MakeSprite("WHTrouser", DEF_SPRID_LEGG_W + 15 * 3, 12, TRUE);
			MakeSprite("WHLeggings1", DEF_SPRID_LEGG_W + 15 * 6, 12, TRUE);
			MakeSprite("WHLeggings2", DEF_SPRID_LEGG_W + 15 * 7, 12, TRUE);
			MakeSprite("WCHoses", DEF_SPRID_LEGG_W + 15 * 4, 12, TRUE);
			MakeSprite("WLeggings", DEF_SPRID_LEGG_W + 15 * 5, 12, TRUE);
			MakeSprite("AssLeggingsW", DEF_SPRID_LEGG_W + 15 * 8, 12, TRUE, FALSE);
			MakeSprite("WhiteLeggingsW", DEF_SPRID_LEGG_W + 15 * 9, 12, TRUE, FALSE);
			MakeSprite("WShoes", DEF_SPRID_BOOT_W + 15 * 1, 12, TRUE);
			MakeSprite("WLBoots", DEF_SPRID_BOOT_W + 15 * 2, 12, TRUE);
			m_cLoading = 84;
			break;

		case 84:
			m_hPakFile = CreateFile("sprites\\Wsw.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 1] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 0, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 2] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 1, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 3] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 2, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 4] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 3, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 6] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 5, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 7] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 6, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 8] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 7, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 9] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 8, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 10] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 9, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 11] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 10, TRUE);
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 12] = new class CSprite(m_hPakFile, &m_DDraw, "Wsw", i + 56 * 11, TRUE);
				CloseHandle(m_hPakFile);
			}
			MakeSprite("Wswx", DEF_SPRID_WEAPON_W + 64 * 5, 56, TRUE);
			MakeSprite("Wsw2", DEF_SPRID_WEAPON_W + 64 * 13, 56, TRUE);
			MakeSprite("Wsw3", DEF_SPRID_WEAPON_W + 64 * 14, 56, TRUE); // TheVampire
			MakeSprite("WStormBringer", DEF_SPRID_WEAPON_W + 64 * 15, 56, TRUE);
			MakeSprite("WDarkExec", DEF_SPRID_WEAPON_W + 64 * 16, 56, TRUE);
			MakeSprite("WKlonessBlade", DEF_SPRID_WEAPON_W + 64 * 17, 56, TRUE);
			MakeSprite("WKlonessAstock", DEF_SPRID_WEAPON_W + 64 * 18, 56, TRUE);
			MakeSprite("WDebastator", DEF_SPRID_WEAPON_W + 64 * 19, 56, TRUE);
			m_cLoading = 88;
			break;

		case 88:
			MakeSprite("WAxe1", DEF_SPRID_WEAPON_W + 64 * 20, 56, TRUE);// Axe
			MakeSprite("WAxe2", DEF_SPRID_WEAPON_W + 64 * 21, 56, TRUE);
			MakeSprite("WAxe3", DEF_SPRID_WEAPON_W + 64 * 22, 56, TRUE);
			MakeSprite("WAxe4", DEF_SPRID_WEAPON_W + 64 * 23, 56, TRUE);
			MakeSprite("WAxe5", DEF_SPRID_WEAPON_W + 64 * 24, 56, TRUE);
			MakeSprite("WpickAxe1", DEF_SPRID_WEAPON_W + 64 * 25, 56, TRUE);
			MakeSprite("WAxe6", DEF_SPRID_WEAPON_W + 64 * 26, 56, TRUE);
			MakeSprite("Whoe", DEF_SPRID_WEAPON_W + 64 * 27, 56, TRUE);
			MakeSprite("WKlonessAxe", DEF_SPRID_WEAPON_W + 64 * 28, 56, TRUE);
			MakeSprite("WLightBlade", DEF_SPRID_WEAPON_W + 64 * 29, 56, TRUE);
			MakeSprite("WHammer", DEF_SPRID_WEAPON_W + 64 * 30, 56, TRUE);
			MakeSprite("WBHammer", DEF_SPRID_WEAPON_W + 64 * 31, 56, TRUE);
			MakeSprite("WBabHammer", DEF_SPRID_WEAPON_W + 64 * 32, 56, TRUE);
			MakeSprite("WBShadowSword", DEF_SPRID_WEAPON_W + 64 * 33, 56, TRUE);
			MakeSprite("WBerserkWand", DEF_SPRID_WEAPON_W + 64 * 34, 56, TRUE);
			MakeSprite("Wstaff1", DEF_SPRID_WEAPON_W + 64 * 35, 56, TRUE);// Staff
			MakeSprite("Wstaff2", DEF_SPRID_WEAPON_W + 64 * 36, 56, TRUE);
			MakeSprite("WStaff3", DEF_SPRID_WEAPON_W + 64 * 37, 56, TRUE);
			MakeSprite("WKlonessWand", DEF_SPRID_WEAPON_W + 64 * 39, 56, TRUE);
			MakeSprite("WReMagicWand", DEF_SPRID_WEAPON_W + 64 * 38, 56, TRUE);
			// bows 40 41 below
			MakeSprite("WDirectBow", DEF_SPRID_WEAPON_W + 64 * 42, 56, TRUE);
			MakeSprite("WFireBow", DEF_SPRID_WEAPON_W + 64 * 43, 56, TRUE);
			m_cLoading = 92;
			break;

		case 92:
			MakeSprite("Wmantle01", DEF_SPRID_MANTLE_W + 15 * 1, 12, TRUE);
			MakeSprite("Wmantle02", DEF_SPRID_MANTLE_W + 15 * 2, 12, TRUE);
			MakeSprite("Wmantle03", DEF_SPRID_MANTLE_W + 15 * 3, 12, TRUE);
			MakeSprite("Wmantle04", DEF_SPRID_MANTLE_W + 15 * 4, 12, TRUE);
			MakeSprite("Wmantle05", DEF_SPRID_MANTLE_W + 15 * 5, 12, TRUE);
			MakeSprite("Wmantle06", DEF_SPRID_MANTLE_W + 15 * 6, 12, TRUE);
			MakeSprite("AssCapeW", DEF_SPRID_MANTLE_W + 15 * 7, 12, TRUE, FALSE);
			MakeSprite("AssCape1W", DEF_SPRID_MANTLE_W + 15 * 8, 12, TRUE, FALSE);
			MakeSprite("WhiteCapeW", DEF_SPRID_MANTLE_W + 15 * 9, 12, TRUE, FALSE);
			MakeSprite("WhiteCape1W", DEF_SPRID_MANTLE_W + 15 * 10, 12, TRUE, FALSE);
			MakeSprite("WHelm1", DEF_SPRID_HEAD_W + 15 * 1, 12, TRUE);
			MakeSprite("WHelm4", DEF_SPRID_HEAD_W + 15 * 4, 12, TRUE);
			MakeSprite("WHHelm1", DEF_SPRID_HEAD_W + 15 * 9, 12, TRUE);
			MakeSprite("WHHelm2", DEF_SPRID_HEAD_W + 15 * 10, 12, TRUE);
			MakeSprite("WHCap1", DEF_SPRID_HEAD_W + 15 * 11, 12, TRUE);
			MakeSprite("WHCap2", DEF_SPRID_HEAD_W + 15 * 12, 12, TRUE);
			MakeSprite("NWHelm1", DEF_SPRID_HEAD_W + 15 * 5, 12, TRUE);
			MakeSprite("NWHelm2", DEF_SPRID_HEAD_W + 15 * 6, 12, TRUE);
			MakeSprite("NWHelm3", DEF_SPRID_HEAD_W + 15 * 7, 12, TRUE);
			MakeSprite("NWHelm4", DEF_SPRID_HEAD_W + 15 * 8, 12, TRUE);
			MakeSprite("AssHelmW", DEF_SPRID_HEAD_W + 15 * 13, 12, TRUE, FALSE);
			MakeSprite("AssCapW", DEF_SPRID_HEAD_W + 15 * 14, 12, TRUE, FALSE);
			MakeSprite("WhiteHelmW", DEF_SPRID_HEAD_W + 15 * 15, 12, TRUE, FALSE);
			MakeSprite("WhiteCapW", DEF_SPRID_HEAD_W + 15 * 2, 12, TRUE, FALSE);
			m_cLoading = 96;
			break;

		case 96:
			MakeSprite("Wbo", DEF_SPRID_WEAPON_W + 64 * 40, 56, TRUE);// Bow
			m_hPakFile = CreateFile("sprites\\Wbo.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 56; i++) m_pSprite[DEF_SPRID_WEAPON_W + i + 64 * 41] = new class CSprite(m_hPakFile, &m_DDraw, "Wbo", i + 56 * 1, TRUE);
				CloseHandle(m_hPakFile);
			}
			m_hPakFile = CreateFile("sprites\\Wsh.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 1] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 0, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 2] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 1, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 3] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 2, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 4] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 3, TRUE);
				for (i = 0; i < 7; i++)	m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 5] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 4, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 6] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 5, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 7] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 6, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 8] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 7, TRUE);
				for (i = 0; i < 7; i++) m_pSprite[DEF_SPRID_SHIELD_W + i + 8 * 9] = new class CSprite(m_hPakFile, &m_DDraw, "Wsh", i + 7 * 8, TRUE);
				CloseHandle(m_hPakFile);
			}
			m_cLoading = 98;
			break;

		case 98:
			//New Mobs - ZeroEoyPnk
			MakeSprite("BDemon", DEF_SPRID_MOB + 7 * 8 * 85, 40, TRUE, FALSE);
			MakeSprite("Butcher", DEF_SPRID_MOB + 7 * 8 * 89, 40, TRUE, FALSE);
			MakeSprite("Diablo", DEF_SPRID_MOB + 7 * 8 * 94, 40, TRUE, FALSE);
			MakeSprite("FSnoob", DEF_SPRID_MOB + 7 * 8 * 91, 40, TRUE, FALSE);
			MakeSprite("FWorm", DEF_SPRID_MOB + 7 * 8 * 84, 40, TRUE, FALSE);
			MakeSprite("GEttin", DEF_SPRID_MOB + 7 * 8 * 97, 40, TRUE, FALSE);
			MakeSprite("GSpider", DEF_SPRID_MOB + 7 * 8 * 93, 40, TRUE, FALSE);
			MakeSprite("IceLizzard", DEF_SPRID_MOB + 7 * 8 * 88, 40, TRUE, FALSE);
			MakeSprite("IWorm", DEF_SPRID_MOB + 7 * 8 * 83, 40, TRUE, FALSE);
			MakeSprite("Pantom", DEF_SPRID_MOB + 7 * 8 * 95, 40, TRUE, FALSE);
			MakeSprite("Satan", DEF_SPRID_MOB + 7 * 8 * 92, 40, TRUE, FALSE);
			MakeSprite("Snoob", DEF_SPRID_MOB + 7 * 8 * 90, 40, TRUE, FALSE);
			MakeSprite("WGolem", DEF_SPRID_MOB + 7 * 8 * 87, 40, TRUE, FALSE);
			MakeSprite("Yeti", DEF_SPRID_MOB + 7 * 8 * 96, 40, TRUE, FALSE);
			MakeSprite("RDemon", DEF_SPRID_MOB + 7 * 8 * 86, 40, TRUE, FALSE);
			MakeSprite("Hellclaw", DEF_SPRID_MOB + 7 * 8 * 98, 40, TRUE);// HellDeath (Type: 108)
			MakeSprite("Tigerworm", DEF_SPRID_MOB + 7 * 8 * 99, 40, TRUE);// Tigerworm (Type: 50)
			MakeSprite("AssasainOfficer", DEF_SPRID_MOB + 7 * 8 * 101, 1, TRUE, FALSE); // Gail (Type: 111)

			MakeSprite("Helb", DEF_SPRID_MOB + 7 * 8 * 102, 40, TRUE);// HounHell (Type: 112)
			MakeSprite("Liche", DEF_SPRID_MOB + 7 * 8 * 103, 40, TRUE);// Hell Liche (Type: 113)
			MakeSprite("FireWyvern", DEF_SPRID_MOB + 7 * 8 * 104, 24, TRUE);// Death Wyvern (Type: 114)
			MakeSprite("Butcher", DEF_SPRID_MOB + 7 * 8 * 105, 40, TRUE, FALSE); // Hell Butcher (Type:115)
			MakeSprite("Troll", DEF_SPRID_MOB + 7 * 8 * 106, 40, TRUE);// Hell Troll (Type: 116)
			MakeSprite("MTGiant", DEF_SPRID_MOB + 7 * 8 * 107, 40, TRUE);// Mount Death (Type: 117)
			MakeSprite("Gagoyle", DEF_SPRID_MOB + 7 * 8 * 108, 40, TRUE);// Hell Goyle (Type: 118)
			MakeSprite("Demon", DEF_SPRID_MOB + 7 * 8 * 109, 40, TRUE);// Hell Demon (Type: 119)
			//agregado probando
			MakeSprite("GhostAba", DEF_SPRID_MOB + 7 * 8 * 111, 48, TRUE, FALSE);// GhostAba (Type: 121)
			MakeSprite("Goblin", DEF_SPRID_MOB + 7 * 8 * 112, 40, TRUE, FALSE);// RedGoblin (Type: 122)
			MakeSprite("GmGoblin", DEF_SPRID_MOB + 7 * 8 * 113, 40, TRUE, FALSE);// BlueGoblin (Type: 123)
			MakeSprite("Danny", DEF_SPRID_MOB + 7 * 8 * 114, 40, TRUE, FALSE);// Danny (Type: 124)
			MakeSprite("Guard_Sword", DEF_SPRID_MOB + 7 * 8 * 115, 40, TRUE, FALSE);// GS (Type: 125)
			MakeSprite("Guard_Axe", DEF_SPRID_MOB + 7 * 8 * 116, 40, TRUE, FALSE);// GA (Type: 126)
			MakeSprite("Guard_Archer", DEF_SPRID_MOB + 7 * 8 * 117, 40, TRUE, FALSE);// GR (Type: 127)
			MakeSprite("BlackWyvern", DEF_SPRID_MOB + 7 * 8 * 118, 24, TRUE, FALSE);// BlackWyvern (Type: 128)
			MakeSprite("MarketMob", DEF_SPRID_MOB + 7 * 8 * 119, 24, TRUE, TRUE);// MarketMob (Type: 128)
			m_cLoading = 100;
			break;

		case 100:
			MakeEffectSpr("effect", 0, 10, FALSE);
			MakeEffectSpr("effect2b", 10, 3, FALSE);
			MakeEffectSpr("effect2", 10, 3, FALSE);
			MakeEffectSpr("effect3", 13, 6, FALSE);
			MakeEffectSpr("effect4", 19, 5, FALSE);
			m_hPakFile = CreateFile("sprites\\effect5.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				for (i = 0; i <= 6; i++) // Because effectn�0 is EnergySphere
					m_pEffectSpr[i + 24] = new class CSprite(m_hPakFile, &m_DDraw, "effect5", i + 1, FALSE);
				CloseHandle(m_hPakFile);
			}
			MakeEffectSpr("CruEffect1", 31, 9, FALSE);
			MakeEffectSpr("effect6", 40, 5, FALSE);
			MakeEffectSpr("effect7b", 45, 12, FALSE);
			MakeEffectSpr("effect7", 45, 12, FALSE);
			MakeEffectSpr("effect8", 57, 9, FALSE);
			MakeEffectSpr("effect9", 66, 21, FALSE);

			MakeEffectSpr("effect10", 87, 2, FALSE); // Effets Hero items
			MakeEffectSpr("effect11b", 89, 14, FALSE); // Cancel, stormBlade, resu, GateHeldenian....etc
			MakeEffectSpr("effect11", 89, 14, FALSE);
			//NB: Charge 15 du client 3.51, mais il n'y a que 14 ds le PAK
			MakeEffectSpr("effect11s", 104, 1, FALSE); // effet sort mais je ne sais pas lequel
			// Manque des effets ici .....
			//MakeEffectSpr( "effect13", 108, 2, FALSE); // not loaded by client 351 (Heldenian gates death)/lalo
			//MakeEffectSpr( "yseffect2", 141, 8, FALSE); // Wrong in 351 client...lalo
			MakeEffectSpr("yseffect2", 140, 8, FALSE); // Abaddon's death
			MakeEffectSpr("effect12", 148, 4, FALSE); // Slates auras
			MakeEffectSpr("yseffect3", 152, 16, FALSE); // Fumerolles ou ame qui s'envole
			//MakeEffectSpr( "yseffect4", 167, 7, FALSE); // Wrong in 351 client lalo
			MakeEffectSpr("yseffect4", 133, 7, FALSE); // Abaddon's map thunder.

			MakeEffectSpr("Magic-Effectb", 168, 5, FALSE, FALSE);
			MakeEffectSpr("Magic-Effect", 168, 5, FALSE, FALSE);
			MakeEffectSpr("AssasainEffect", 174, 2, FALSE, FALSE);


			if (m_bSoundFlag) { // Attention il y a un autre systeme de chargement ds la v351
				for (i = 1; i <= 24; i++) {
					wsprintf(G_cTxt, "sounds\\C%d.wav", i);
					m_pCSound[i] = new class CSoundBuffer(m_DSound.m_lpDS, m_DSound.m_DSCaps, G_cTxt);
				}

				for (i = 1; i <= 156; i++) {
					wsprintf(G_cTxt, "sounds\\M%d.wav", i);
					m_pMSound[i] = new class CSoundBuffer(m_DSound.m_lpDS, m_DSound.m_DSCaps, G_cTxt);
				}
				for (i = 1; i <= 53; i++) {
					wsprintf(G_cTxt, "sounds\\E%d.wav", i);
					m_pESound[i] = new class CSoundBuffer(m_DSound.m_lpDS, m_DSound.m_DSCaps, G_cTxt);
				}
			}
			
			ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
			break;
	}
}

void CGame::ResponseTeleportList(char *pData)
{
	char *cp;
	int  *ip, i;
#ifdef _DEBUGS
	AddEventList("Teleport ???", 10);
#endif
	cp = pData + 6;
	ip = (int*)cp;
	m_iTeleportMapCount = EncriptInt(*ip);
	cp += 4;
	for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
	{
		ip = (int*)cp;
		m_stTeleportList[i].iIndex = *ip;
		cp += 4;
		ZeroMemory(m_stTeleportList[i].mapname, sizeof(m_stTeleportList[i].mapname));
		memcpy(m_stTeleportList[i].mapname, cp, 10);
		cp += 10;
		ip = (int*)cp;
		m_stTeleportList[i].iX = *ip;
		cp += 4;
		ip = (int*)cp;
		m_stTeleportList[i].iY = *ip;
		cp += 4;
		ip = (int*)cp;
		m_stTeleportList[i].iCost = *ip;
		cp += 4;
		m_stTeleportList[i].Event = (BOOL)*cp;
		cp++;
		m_stTeleportList[i].TPEvent = (BOOL)*cp;
		cp++;

	}
}

void CGame::ResponseChargedTeleport(char *pData)
{
	short *sp;
	char *cp;
	short sRejectReason = 0;
	cp = (char*)pData + DEF_INDEX2_MSGTYPE + 2;
	sp = (short*)cp;
	sRejectReason = *sp;

#ifdef _DEBUGS
	AddEventList("charged teleport ?", 10);
#endif

	switch (sRejectReason) {
		case 1:
			AddEventList(RESPONSE_CHARGED_TELEPORT1, 10);
			break;
		case 2:
			AddEventList(RESPONSE_CHARGED_TELEPORT2, 10);
			break;
		case 3:
			AddEventList(RESPONSE_CHARGED_TELEPORT3, 10);
			break;
		case 4:
			AddEventList(RESPONSE_CHARGED_TELEPORT4, 10);
			break;
		case 5:
			AddEventList(RESPONSE_CHARGED_TELEPORT5, 10);
			break;
		case 6:
			AddEventList(RESPONSE_CHARGED_TELEPORT6, 10);
			break;
		default:
			AddEventList(RESPONSE_CHARGED_TELEPORT7, 10);
	}
}

void CGame::NotifyMsg_CannotGiveItem(char *pData)
{
	char * cp, cName[21], cTxt[256];
	WORD * wp, wItemIndex;
	int  * ip, iAmount;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	wItemIndex = *wp;
	cp += 2;

	ip = (int *)cp;
	iAmount = *ip;
	cp += 4;

	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[wItemIndex], cStr1, cStr2, cStr3);
	if (iAmount == 1) wsprintf(cTxt, NOTIFYMSG_CANNOT_GIVE_ITEM2, cStr1, cName);
	else wsprintf(cTxt, NOTIFYMSG_CANNOT_GIVE_ITEM1, iAmount, cStr1, cName);


	AddEventList(cTxt, 10);
}

void CGame::NotifyMsg_DropItemFin_CountChanged(char *pData)
{
	char * cp, cTxt[256];
	WORD * wp, wItemIndex;
	int  * ip, iAmount;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	wItemIndex = *wp;
	cp += 2;

	ip = (int *)cp;
	iAmount = *ip;
	cp += 4;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[wItemIndex]->m_cName, m_pItemList[wItemIndex]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[wItemIndex]->m_sItemSpecEffectValue3);
	wsprintf(cTxt, NOTIFYMSG_THROW_ITEM1, iAmount, cStr1);

	AddEventList(cTxt, 10);
}

void CGame::NotifyMsg_CannotJoinMoreGuildsMan(char * pData)
{
	char * cp, cName[12], cTxt[120];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);

	wsprintf(cTxt, NOTIFYMSG_CANNOT_JOIN_MOREGUILDMAN1, cName);
	AddEventList(cTxt, 10);
	AddEventList(NOTIFYMSG_CANNOT_JOIN_MOREGUILDMAN2, 10);
}



/*void CGame::NotifyMsg_DismissGuildsMan(char * pData)
{
	char * cp, cName[12], cTxt[120];
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);

	DecriptString(m_cPlayerName);
	if (memcmp(m_cPlayerName, cName, 10) != 0) {
		wsprintf(cTxt, NOTIFYMSG_DISMISS_GUILDMAN1, cName);
		AddEventList(cTxt, 10);
	}
	EncriptString(m_cPlayerName);

	ClearGuildNameList();
}*/

void CGame::NotifyMsg_DismissGuildsMan(char * pData)
{
	char * cp, cName[12], cTxt[120];
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);

	if (memcmp(m_cPlayerName, cName, 10) != 0) {
		wsprintf(cTxt, NOTIFYMSG_DISMISS_GUILDMAN1, cName);
		AddEventList(cTxt, 10);
	}
	ClearGuildNameList();
}






void CGame::NotifyMsg_CannotRating(char * pData)
{
	char * cp, cTxt[120];
	WORD * wp, wTime;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	wTime = *wp;
	cp += 2;

	if (wTime == 0) wsprintf(cTxt, NOTIFYMSG_CANNOT_RATING1, wTime * 3);
	else wsprintf(cTxt, NOTIFYMSG_CANNOT_RATING2, wTime * 3);
	AddEventList(cTxt, 10);
}

void CGame::NotifyMsg_CannotRepairItem(char * pData)
{
	char * cp, cTxt[120], cStr1[64], cStr2[64], cStr3[64];
	WORD * wp, wV1, wV2;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	wV1 = *wp;
	cp += 2;
	wp = (WORD *)cp;
	wV2 = *wp;
	cp += 2;
	ZeroMemory(cStr1, sizeof(cStr1));
	ZeroMemory(cStr2, sizeof(cStr2));
	ZeroMemory(cStr3, sizeof(cStr3));
	GetItemName(m_pItemList[wV1], cStr1, cStr2, cStr3);

	switch (wV2) {
		case 1:
			wsprintf(cTxt, NOTIFYMSG_CANNOT_REPAIR_ITEM1, cStr1);
			AddEventList(cTxt, 10);
			break;
		case 2:
			wsprintf(cTxt, NOTIFYMSG_CANNOT_REPAIR_ITEM2, cStr1);
			AddEventList(cTxt, 10);
			break;
	}
	m_bIsItemDisabled[wV1] = FALSE;
}

void CGame::NotifyMsg_CannotSellItem(char * pData)
{
	char * cp, cTxt[120], cStr1[64], cStr2[64], cStr3[64];
	WORD * wp, wV1, wV2;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	wp = (WORD *)cp;
	wV1 = *wp;
	cp += 2;

	wp = (WORD *)cp;
	wV2 = *wp;
	cp += 2;

	ZeroMemory(cStr1, sizeof(cStr1));
	ZeroMemory(cStr2, sizeof(cStr2));
	ZeroMemory(cStr3, sizeof(cStr3));
	GetItemName(m_pItemList[wV1], cStr1, cStr2, cStr3);

	switch (wV2) {
		case 1:
			wsprintf(cTxt, NOTIFYMSG_CANNOT_SELL_ITEM1, cStr1);//"
			AddEventList(cTxt, 10);
			break;

		case 2:
			wsprintf(cTxt, NOTIFYMSG_CANNOT_SELL_ITEM2, cStr1);//"
			AddEventList(cTxt, 10);
			break;

		case 3:
			wsprintf(cTxt, NOTIFYMSG_CANNOT_SELL_ITEM3, cStr1);//"
			AddEventList(cTxt, 10);
			AddEventList(NOTIFYMSG_CANNOT_SELL_ITEM4, 10);//"
			break;

		case 4:
			AddEventList(NOTIFYMSG_CANNOT_SELL_ITEM5, 10); // "
			AddEventList(NOTIFYMSG_CANNOT_SELL_ITEM6, 10); // "
			break;
	}
	m_bIsItemDisabled[wV1] = FALSE;
}

void CGame::NotifyMsg_Charisma(char * pData)
{
	DWORD * dwp;
	int  iPrevChar;
	char cTxt[120];

	iPrevChar = m_iCharisma;
	dwp = (DWORD *)(pData + DEF_INDEX2_MSGTYPE + 2);
	m_iCharisma = (int)*dwp;

	if (m_iCharisma > iPrevChar)
	{
		wsprintf(cTxt, NOTIFYMSG_CHARISMA_UP, m_iCharisma - iPrevChar);//"
		AddEventList(cTxt, 10);
		PlaySound('E', 21, 0);
	}
	else
	{
		wsprintf(cTxt, NOTIFYMSG_CHARISMA_DOWN, iPrevChar - m_iCharisma);//"
		AddEventList(cTxt, 10);
	}
}

void CGame::NotifyMsg_DropItemFin_EraseItem(char *pData)
{
	char * cp;
	WORD * wp;
	int * ip, iAmount;
	short  sItemIndex;
	char   cTxt[120];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	wp = (WORD *)cp;
	sItemIndex = *wp;
	cp += 2;

	ip = (int *)cp;
	iAmount = *ip;
	cp += 4;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[sItemIndex], cStr1, cStr2, cStr3);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bIsItemEquipped[sItemIndex] == TRUE)
	{
		wsprintf(cTxt, ITEM_EQUIPMENT_RELEASED, cStr1);
		AddEventList(cTxt, 10);
		m_sItemEquipmentStatus[m_pItemList[sItemIndex]->m_cEquipPos] = -1;
		m_bIsItemEquipped[sItemIndex] = FALSE;
	}
	if (DecriptInt(m_iHP) > 0)
	{
		wsprintf(cTxt, NOTIFYMSG_THROW_ITEM2, cStr1);
	}
	else
	{
		if (iAmount < 2)
			wsprintf(cTxt, NOTIFYMSG_DROPITEMFIN_ERASEITEM3, cStr1); // "You dropped a %s."
		else // Snoopy fix
		{
			wsprintf(cTxt, NOTIFYMSG_DROPITEMFIN_ERASEITEM5, cStr1); // "You dropped %s."
		}
	}
	AddEventList(cTxt, 10);
	EraseItem((char)sItemIndex);
	_bCheckBuildItemStatus();
}

///lalomodificar
void CGame::NotifyMsg_EnemyKillReward(char *pData)
{
	DWORD * dwp;
	short * sp, sGuildRank;
	char  * cp, cName[12], cGuildName[24], cTxt[120];
	int   iExp, iWarContribution;

	ZeroMemory(cName, sizeof(cName));
	ZeroMemory(cGuildName, sizeof(cGuildName));

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	dwp = (DWORD *)cp;
	iExp = *dwp;
	cp += 4;
	memcpy(cName, cp, 10);
	cp += 10;
	memcpy(cGuildName, cp, 20);
	cp += 20;
	sp = (short *)cp;
	sGuildRank = *sp;
	cp += 2;
	sp = (short *)cp;
	iWarContribution = *sp;
	cp += 2;

	if (iWarContribution > DecriptInt(m_iWarContribution))
	{
		wsprintf(G_cTxt, "%s +%d!", m_pGameMsgList[21]->m_pMsg, iWarContribution - DecriptInt(m_iWarContribution));
		SetTopMsg(G_cTxt, 5);
	}
	else if (iWarContribution < DecriptInt(m_iWarContribution))
	{
	}
	m_iWarContribution = EncriptInt(iWarContribution);

	if (sGuildRank == -1)
	{
		wsprintf(cTxt, NOTIFYMSG_ENEMYKILL_REWARD1, cName);
		AddEventList(cTxt, 11);
	}
	else
	{
		wsprintf(cTxt, NOTIFYMSG_ENEMYKILL_REWARD2, cName, cGuildName); // Fixed by Snoopy
		AddEventList(cTxt, 11);
	}

	_RemoveChatMsgListByObjectID(m_sPlayerObjectID);
	for (int i = 1; i < DEF_MAXCHATMSGS; i++)
		if (m_pChatMsgList[i] == NULL) {
			ZeroMemory(cTxt, sizeof(cTxt));
			strcpy(cTxt, "Enemy Kill!");
			m_pChatMsgList[i] = new class CMsg(23, cTxt, m_dwCurTime);
			m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;

			if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE) {
				delete m_pChatMsgList[i];
				m_pChatMsgList[i] = NULL;
			}
			break;
		}

	if (iExp >= 0) m_iExp = iExp;
	PlaySound('E', 23, 0);
	m_bCreateScreen = TRUE;
	m_dwTimeScreen = m_dwCurTime;
}
void CGame::NotifyMsg_EventFishMode(char * pData)
{
	short sSprite, sSpriteFrame;
	char * cp, cName[21];
	WORD * wp, wPrice;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	wp = (WORD *)cp;
	wPrice = *wp;
	cp += 2;

	wp = (WORD *)cp;
	sSprite = (short)*wp;
	cp += 2;

	wp = (WORD *)cp;
	sSpriteFrame = (short)*wp;
	cp += 2;

	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;

	EnableDialogBox(24, 0, NULL, wPrice, cName);
	m_stDialogBoxInfo[24].sV3 = sSprite;
	m_stDialogBoxInfo[24].sV4 = sSpriteFrame;

	AddEventList(NOTIFYMSG_EVENTFISHMODE1, 10);
}

void CGame::NotifyMsg_Exp(char * pData)
{
	DWORD * dwp;
	int iPrevExp;
	char * cp, cTxt[120];

	iPrevExp = m_iExp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	dwp = (DWORD *)cp;
	m_iExp = (int)*dwp;
	cp += 4;

	if (m_iExp > iPrevExp) {
		wsprintf(cTxt, EXP_INCREASED, m_iExp - iPrevExp);
		AddEventList(cTxt, 10);
	}
	else {
		wsprintf(cTxt, EXP_DECREASED, iPrevExp - m_iExp);
		AddEventList(cTxt, 10);
	}
}


void CGame::NotifyMsg_ForceDisconn(char *pData)
{
	WORD * wpCount;
	wpCount = (WORD *)(pData + 6);
	m_bForceDisconn = TRUE;
	m_cSalirDelChar = (char)*wpCount;
	if (m_bIsProgramActive)
	{
		if (m_cSalirDelChar < 0 || m_cSalirDelChar > 5) m_cSalirDelChar = 5;
		AddEventList(NOTIFYMSG_FORCE_DISCONN1, 10);
	}
	else
	{
		delete m_pGSock;
		m_pGSock = NULL;
		m_bEscPressed = FALSE;
		if (m_bSoundFlag) m_pESound[38]->bStop();
		if ((m_bSoundFlag) && (m_bMusicStat == TRUE))
		{
			if (m_pBGM != NULL) m_pBGM->bStop();
		}
		//Cambiado por log out normal LALOv10
		//if (strlen(G_cCmdLineTokenA) != 0)
		if (strlen(G_cCmdLineTokenA) == -1)
			ChangeGameMode(DEF_GAMEMODE_ONQUIT);
		else ChangeGameMode(DEF_GAMEMODE_ONMAINMENU);
	}
}

void CGame::NotifyMsg_GiveItemFin_CountChanged(char *pData)
{
	char * cp, cName[21], cTxt[256];
	WORD * wp, wItemIndex;
	int  * ip, iAmount;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	wItemIndex = *wp;
	cp += 2;

	ip = (int *)cp;
	iAmount = *ip;
	cp += 4;

	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[wItemIndex]->m_cName, m_pItemList[wItemIndex]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[wItemIndex]->m_sItemSpecEffectValue3);
	if (iAmount == 1) wsprintf(cTxt, NOTIFYMSG_GIVEITEMFIN_COUNTCHANGED1, cStr1, cName);
	wsprintf(cTxt, NOTIFYMSG_GIVEITEMFIN_COUNTCHANGED2, iAmount, cStr1, cName);
	AddEventList(cTxt, 10);
}



void CGame::NotifyMsg_GlobalAttackMode(char *pData)
{
	char * cp;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	switch (*cp) {
		case 0:
			AddEventList(NOTIFYMSG_GLOBAL_ATTACK_MODE1, 10);
			AddEventList(NOTIFYMSG_GLOBAL_ATTACK_MODE2, 10);
			break;

		case 1:
			AddEventList(NOTIFYMSG_GLOBAL_ATTACK_MODE3, 10);
			break;
	}
	cp++;
}

//LaloRamos HP ABAJO
void CGame::NotifyMsg_HP(char * pData)
{
	char * cp;
	short * sp;
	int iPrevHP;
	char cTxt[50];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	iPrevHP = DecriptInt(m_iHP);

	sp = (short *)cp;
	m_iHP = EncriptInt(*sp);
	cp += 2;

	if (DecriptInt(m_iHP) > iPrevHP)
	{
		if ((DecriptInt(m_iHP) - iPrevHP) < 10) return;
		wsprintf(cTxt, NOTIFYMSG_HP_UP, DecriptInt(m_iHP) - iPrevHP);
		AddEventList(cTxt, 10);
		PlaySound('E', 21, 0);
	}
	else
	{
		if ((m_cSalirDelChar > 0) && (m_bForceDisconn == FALSE))
		{
			m_cSalirDelChar = -1;
			AddEventList(NOTIFYMSG_HP2, 10);
		}
		if (ConteoChangeCity > 0)
		{
			ConteoChangeCity = -1;
			AddEventList(NOTIFYMSG_ChangeC2, 14);
		}
		m_dwDamagedTime = timeGetTime();
		if (DecriptInt(m_iHP) < 20) AddEventList(NOTIFYMSG_HP3, 10);
		if ((iPrevHP - DecriptInt(m_iHP)) < 10) return;
		wsprintf(cTxt, NOTIFYMSG_HP_DOWN, iPrevHP - DecriptInt(m_iHP));
		AddEventList(cTxt, 10);
	}
}

void CGame::NotifyMsg_Hunger(char * pData)
{
	char * cp, cHLv;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	cHLv = *cp;

	if ((cHLv <= 40) && (cHLv > 30)) AddEventList(NOTIFYMSG_HUNGER1, 10);//"
	if ((cHLv <= 25) && (cHLv > 20)) AddEventList(NOTIFYMSG_HUNGER2, 10);//"
	if ((cHLv <= 20) && (cHLv > 15)) AddEventList(NOTIFYMSG_HUNGER3, 10);//"
	if ((cHLv <= 15) && (cHLv > 10)) AddEventList(NOTIFYMSG_HUNGER4, 10);//"
	if ((cHLv <= 10) && (cHLv >= 0)) AddEventList(NOTIFYMSG_HUNGER5, 10);//"
}

void CGame::NotifyMsg_ItemColorChange(char *pData)
{
	short * sp, sItemIndex, sItemColor;
	char * cp;
	char cTxt[120];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	sItemIndex = *sp;
	cp += 2;

	sp = (short *)cp;
	sItemColor = (short)*sp;
	cp += 2;

	if (m_pItemList[sItemIndex] != NULL) {
		char cStr1[64], cStr2[64], cStr3[64];
		GetItemName(m_pItemList[sItemIndex], cStr1, cStr2, cStr3);
		if (sItemColor != -1) {
			m_pItemList[sItemIndex]->m_cItemColor = (char)sItemColor;
			wsprintf(cTxt, NOTIFYMSG_ITEMCOLOR_CHANGE1, cStr1);
			AddEventList(cTxt, 10);
		}
		else {
			wsprintf(cTxt, NOTIFYMSG_ITEMCOLOR_CHANGE2, cStr1);
			AddEventList(cTxt, 10);
		}
	}
}

void CGame::NotifyMsg_ItemDepleted_EraseItem(char * pData)
{
	char * cp;
	WORD * wp;
	short  sItemIndex;
	BOOL   bIsUseItemResult;
	char   cTxt[120];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	wp = (WORD *)cp;
	sItemIndex = *wp;
	cp += 2;

	bIsUseItemResult = (BOOL)*cp;
	cp += 2;

	ZeroMemory(cTxt, sizeof(cTxt));

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[sItemIndex], cStr1, cStr2, cStr3);

	if (m_bIsItemEquipped[sItemIndex] == TRUE) {
		wsprintf(cTxt, ITEM_EQUIPMENT_RELEASED, cStr1);
		AddEventList(cTxt, 10);

		// v1.42
		m_sItemEquipmentStatus[m_pItemList[sItemIndex]->m_cEquipPos] = -1;
		m_bIsItemEquipped[sItemIndex] = FALSE;
	}

	ZeroMemory(cTxt, sizeof(cTxt));
	if ((m_pItemList[sItemIndex]->m_cItemType == DEF_ITEMTYPE_CONSUME) ||
		(m_pItemList[sItemIndex]->m_cItemType == DEF_ITEMTYPE_ARROW)) {
		wsprintf(cTxt, NOTIFYMSG_ITEMDEPlETED_ERASEITEM2, cStr1);
	}
	else {
		if (m_pItemList[sItemIndex]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE) {
			if (bIsUseItemResult == TRUE) {
				wsprintf(cTxt, NOTIFYMSG_ITEMDEPlETED_ERASEITEM3, cStr1);
			}
		}
		else if (m_pItemList[sItemIndex]->m_cItemType == DEF_ITEMTYPE_EAT) {
			if (bIsUseItemResult == TRUE) {
				wsprintf(cTxt, NOTIFYMSG_ITEMDEPlETED_ERASEITEM4, cStr1);
				if ((m_sPlayerType >= 1) && (m_sPlayerType <= 3))
					PlaySound('C', 19, 0);
				if ((m_sPlayerType >= 4) && (m_sPlayerType <= 6))
					PlaySound('C', 20, 0);
			}
		}
		else if (m_pItemList[sItemIndex]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE_DEST) {
			if (bIsUseItemResult == TRUE) {
				wsprintf(cTxt, NOTIFYMSG_ITEMDEPlETED_ERASEITEM3, cStr1);
			}
		}
		else {
			if (bIsUseItemResult == TRUE) {
				wsprintf(cTxt, NOTIFYMSG_ITEMDEPlETED_ERASEITEM6, cStr1);
				PlaySound('E', 10, 0);
			}
		}
	}
	AddEventList(cTxt, 10);

	if (bIsUseItemResult == TRUE) m_bItemUsingStatus = FALSE;
	EraseItem((char)sItemIndex);
	_bCheckBuildItemStatus();
}

void CGame::NotifyMsg_ItemLifeSpanEnd(char * pData)
{
	char * cp;
	short * sp, sEquipPos, sItemIndex;
	char cTxt[120];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *)cp;
	sEquipPos = *sp;
	cp += 2;
	sp = (short *)cp;
	sItemIndex = *sp;
	cp += 2;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[sItemIndex], cStr1, cStr2, cStr3);
	wsprintf(cTxt, NOTIFYMSG_ITEMLIFE_SPANEND1, cStr1);
	AddEventList(cTxt, 10);
	m_sItemEquipmentStatus[m_pItemList[sItemIndex]->m_cEquipPos] = -1;
	m_bIsItemEquipped[sItemIndex] = FALSE;
	m_pItemList[sItemIndex]->m_wCurLifeSpan = 0;

	PlaySound('E', 10, 0);
}

void CGame::NotifyMsg_ItemObtained(char * pData)
{
	char * cp;
	short * sp;
	DWORD * dwp;
	int i, j;

	DWORD dwCount, dwAttribute;
	char  cName[21], cItemType, cEquipPos;
	BOOL  bIsEquipped;
	short sSprite, sSpriteFrame, sLevelLimit, sSpecialEV2, sSpecialEV3;
	char  cTxt[120], cGenderLimit, cItemColor;
	WORD  * wp, wWeight, wCurLifeSpan;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	cp++;

	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;

	dwp = (DWORD *)cp;
	dwCount = *dwp;
	cp += 4;

	cItemType = *cp;
	cp++;

	cEquipPos = *cp;
	cp++;

	bIsEquipped = (BOOL)*cp;
	cp++;

	sp = (short *)cp;
	sLevelLimit = *sp;
	cp += 2;

	cGenderLimit = *cp;
	cp++;

	wp = (WORD *)cp;
	wCurLifeSpan = *wp;
	cp += 2;

	wp = (WORD *)cp;
	wWeight = *wp;
	cp += 2;

	sp = (short *)cp;
	sSprite = *sp;
	cp += 2;

	sp = (short *)cp;
	sSpriteFrame = *sp;
	cp += 2;

	cItemColor = *cp;
	cp++;

	//sSpecialEV2 = (short)*cp; // v1.41
	//cp++;
	//lalomanu
	sp = (short *)cp;
	sSpecialEV2 = *sp;
	cp += 2;

	dwp = (DWORD *)cp;
	dwAttribute = *dwp;
	cp += 4;

	sSpecialEV3 = (short)*cp; // v1.41
	cp++;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(cName, dwAttribute, cStr1, cStr2, cStr3, sSpecialEV3);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (dwCount == 1) wsprintf(cTxt, NOTIFYMSG_ITEMOBTAINED2, cStr1);
	else wsprintf(cTxt, NOTIFYMSG_ITEMOBTAINED1, dwCount, cStr1);

	AddEventList(cTxt, 10);

	PlaySound('E', 20, 0);

	if ((cItemType == DEF_ITEMTYPE_CONSUME) || (cItemType == DEF_ITEMTYPE_ARROW))
	{
		for (i = 0; i < DEF_MAXITEMS; i++)
			if ((m_pItemList[i] != NULL) && (memcmp(m_pItemList[i]->m_cName, cName, 20) == 0))
			{
				m_pItemList[i]->m_dwCount += dwCount;
				m_bIsItemDisabled[i] = FALSE;
				return;
			}
	}

	short nX, nY;
	for (i = 0; i < DEF_MAXITEMS; i++)
	{
		if ((m_pItemList[i] != NULL) && (memcmp(m_pItemList[i]->m_cName, cName, 20) == 0))
		{
			nX = m_pItemList[i]->m_sX;
			nY = m_pItemList[i]->m_sY;
			break;
		}
		else
		{
			nX = 40;
			nY = 30;
		}
	}


	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pItemList[i] == NULL)
		{
			m_pItemList[i] = new class CItem;
			memcpy(m_pItemList[i]->m_cName, cName, 20);
			m_pItemList[i]->m_dwCount = dwCount;
			//m_pItemList[i]->m_sX      =	40;
			//m_pItemList[i]->m_sY      =	30;
			m_pItemList[i]->m_sX = nX;
			m_pItemList[i]->m_sY = nY;
			bSendCommand(CLIENT_REQUEST_SETITEMPOS, NULL, i, nX, nY, NULL, NULL);
			m_pItemList[i]->m_cItemType = cItemType;
			m_pItemList[i]->m_cEquipPos = cEquipPos;
			m_bIsItemDisabled[i] = FALSE;

			m_bIsItemEquipped[i] = FALSE;
			m_pItemList[i]->m_sLevelLimit = sLevelLimit;
			m_pItemList[i]->m_cGenderLimit = cGenderLimit;
			m_pItemList[i]->m_wCurLifeSpan = wCurLifeSpan;
			m_pItemList[i]->m_wWeight = wWeight;
			m_pItemList[i]->m_sSprite = sSprite;
			m_pItemList[i]->m_sSpriteFrame = sSpriteFrame;
			m_pItemList[i]->m_cItemColor = cItemColor;
			m_pItemList[i]->m_sItemSpecEffectValue2 = sSpecialEV2; // v1.41
			m_pItemList[i]->m_dwAttribute = dwAttribute;
			m_pItemList[i]->m_sItemSpecEffectValue3 = sSpecialEV3;

			_bCheckBuildItemStatus();

			for (j = 0; j < DEF_MAXITEMS; j++)
				if (m_cItemOrder[j] == -1) {
					m_cItemOrder[j] = i;
					return;
				}
			return;
		}
}

void CGame::NotifyMsg_ItemPurchased(char * pData)
{
	char  * cp;
	short * sp;
	DWORD * dwp;
	WORD  * wp;
	int * ip;
	int i, j, wCost;

	DWORD dwCount;
	char  cName[21], cItemType, cEquipPos, cGenderLimit;
	BOOL  bIsEquipped;
	short sSprite, sSpriteFrame, sLevelLimit;
	WORD  wWeight, wCurLifeSpan;
	char  cTxt[120], cItemColor, Type;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	cp++;

	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;

	dwp = (DWORD *)cp;
	dwCount = *dwp;
	cp += 4;

	cItemType = *cp;
	cp++;

	cEquipPos = *cp;
	cp++;

	bIsEquipped = FALSE;

	Type = *cp;
	cp++;

	sp = (short *)cp;
	sLevelLimit = *sp;
	cp += 2;

	cGenderLimit = *cp;
	cp++;

	wp = (WORD *)cp;
	wCurLifeSpan = *wp;
	cp += 2;

	wp = (WORD *)cp;
	wWeight = *wp;
	cp += 2;

	sp = (short *)cp;
	sSprite = *sp;
	cp += 2;

	sp = (short *)cp;
	sSpriteFrame = *sp;
	cp += 2;

	cItemColor = *cp; // v1.4
	cp++;

	ip = (int *)cp;
	wCost = *ip;
	cp += 4;

	ZeroMemory(cTxt, sizeof(cTxt));
	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(cName, NULL, cStr1, cStr2, cStr3);
	switch (Type)
	{
		case 0:
			wsprintf(cTxt, NOTIFYMSG_ITEMPURCHASED1, cStr1, wCost);
			break;
		case 1:
			wsprintf(cTxt, NOTIFYMSG_ITEMPURCHASED2, cStr1, wCost);
			break;
		case 2:
			wsprintf(cTxt, NOTIFYMSG_ITEMPURCHASED3, cStr1, wCost);
			break;
		case 3:
			wsprintf(cTxt, NOTIFYMSG_ITEMPURCHASED4, cStr1, wCost);
			break;
		default:
			wsprintf(cTxt, NOTIFYMSG_ITEMPURCHASED, cStr1, wCost);
			break;
	}
	AddEventList(cTxt, 10);

	if ((cItemType == DEF_ITEMTYPE_CONSUME) || (cItemType == DEF_ITEMTYPE_ARROW))
	{
		for (i = 0; i < DEF_MAXITEMS; i++)
			if ((m_pItemList[i] != NULL) && (memcmp(m_pItemList[i]->m_cName, cName, 20) == 0))
			{
				m_pItemList[i]->m_dwCount += dwCount;
				return;
			}
	}

	short nX, nY;
	for (i = 0; i < DEF_MAXITEMS; i++)
	{
		if ((m_pItemList[i] != NULL) && (memcmp(m_pItemList[i]->m_cName, cName, 20) == 0))
		{
			nX = m_pItemList[i]->m_sX;
			nY = m_pItemList[i]->m_sY;
			break;
		}
		else
		{
			nX = 40;
			nY = 30;
		}
	}

	for (i = 0; i < DEF_MAXITEMS; i++)
		if (m_pItemList[i] == NULL)
		{
			m_pItemList[i] = new class CItem;
			memcpy(m_pItemList[i]->m_cName, cName, 20);
			m_pItemList[i]->m_dwCount = dwCount;
			//m_pItemList[i]->m_sX           = 40;
			//m_pItemList[i]->m_sY           = 30;
			m_pItemList[i]->m_sX = nX;
			m_pItemList[i]->m_sY = nY;
			bSendCommand(CLIENT_REQUEST_SETITEMPOS, NULL, i, nX, nY, NULL, NULL);
			m_pItemList[i]->m_cItemType = cItemType;
			m_pItemList[i]->m_cEquipPos = cEquipPos;
			m_bIsItemDisabled[i] = FALSE;
			m_bIsItemEquipped[i] = FALSE;
			m_pItemList[i]->m_sLevelLimit = sLevelLimit;
			m_pItemList[i]->m_cGenderLimit = cGenderLimit;
			m_pItemList[i]->m_wCurLifeSpan = wCurLifeSpan;
			m_pItemList[i]->m_wWeight = wWeight;
			m_pItemList[i]->m_sSprite = sSprite;
			m_pItemList[i]->m_sSpriteFrame = sSpriteFrame;
			m_pItemList[i]->m_cItemColor = cItemColor;    // v1.4

			// fixed v1.11
			for (j = 0; j < DEF_MAXITEMS; j++)
				if (m_cItemOrder[j] == -1) {
					m_cItemOrder[j] = i;
					return;
				}

			return;
		}
}

//Fix Angelics
void CGame::NotifyMsg_ItemReleased(char * pData)
{
	char * cp;
	short * sp, sEquipPos, sItemIndex;
	char cTxt[120];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *)cp;
	sEquipPos = *sp;
	cp += 2;
	sp = (short *)cp;
	sItemIndex = *sp;
	cp += 2;

	if ((sEquipPos >= 11) && (m_pItemList[m_sItemEquipmentStatus[sEquipPos]]->m_cItemType == 1))
	{
		char cItemID = m_sItemEquipmentStatus[sEquipPos];
		if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(STR)", 19) == 0)
		{
			m_iAngelicStr = EncriptInt(0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(DEX)", 19) == 0)
		{
			m_iAngelicDex = EncriptInt(0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(INT)", 19) == 0)
		{
			m_iAngelicInt = EncriptInt(0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(MAG)", 19) == 0)
		{
			m_iAngelicMag = EncriptInt(0);
		}
	}

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[sItemIndex], cStr1, cStr2, cStr3);
	wsprintf(cTxt, ITEM_EQUIPMENT_RELEASED, cStr1);
	AddEventList(cTxt, 10);
	m_bIsItemEquipped[sItemIndex] = FALSE;
	m_sItemEquipmentStatus[m_pItemList[sItemIndex]->m_cEquipPos] = -1;

	if (memcmp(m_pItemList[sItemIndex]->m_cName, "AngelicPendant", 14) == 0) {
		PlaySound('E', 53, 0);
	}
	else PlaySound('E', 29, 0);
}

void CGame::NotifyMsg_ItemRepaired(char * pData)
{
	char * cp, cTxt[120];
	DWORD * dwp, dwItemID, dwLife;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	dwp = (DWORD *)cp;
	dwItemID = *dwp;
	cp += 4;

	dwp = (DWORD *)cp;
	dwLife = *dwp;
	cp += 4;

	m_pItemList[dwItemID]->m_wCurLifeSpan = (WORD)dwLife;
	m_bIsItemDisabled[dwItemID] = FALSE;
	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[dwItemID], cStr1, cStr2, cStr3);

	wsprintf(cTxt, NOTIFYMSG_ITEMREPAIRED1, cStr1);

	AddEventList(cTxt, 10);
}

void CGame::NotifyMsg_Killed(char * pData)
{
	char * cp, cAttackerName[21];
	m_bCommandAvailable = FALSE;
	m_cCommand = DEF_OBJECTSTOP;
	m_iHP = EncriptInt(0);
	m_cCommand = -1;
	char cTxt[40];
	// Restart
	m_bItemUsingStatus = FALSE;
	ClearSkillUsingStatus();
	ZeroMemory(cAttackerName, sizeof(cAttackerName));
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	memcpy(cAttackerName, cp, 20);
	cp += 20;

	// Snoopy: reduced 3 lines -> 2 lines
	//anuncio cuando moris
	_RemoveChatMsgListByObjectID(m_sPlayerObjectID);
	for (int i = 1; i < DEF_MAXCHATMSGS; i++)
		if (m_pChatMsgList[i] == NULL) {
			ZeroMemory(cTxt, sizeof(cTxt));
			strcpy(cTxt, "You Have Die!!");
			m_pChatMsgList[i] = new class CMsg(23, cTxt, m_dwCurTime);
			m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;

			if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE) {
				delete m_pChatMsgList[i];
				m_pChatMsgList[i] = NULL;
			}
			return;
		}
	AddEventList(NOTIFYMSG_KILLED1, 10);
	AddEventList(NOTIFYMSG_KILLED3, 10);
	//AddEventList(NOTIFYMSG_KILLED4, 10);//"Log Out


}

// This msg is sent by server when lvl-up
void CGame::NotifyMsg_LevelUp(char * pData)
{
	char * cp;
	int  * ip;
	int i;
	char cTxt[120];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	ip = (int *)cp;
	m_iLevel = EncriptInt(*ip);
	cp += 4;

	wsprintf(cTxt, NOTIFYMSG_LEVELUP1, DecriptInt(m_iLevel));// "Level up!!! Level %d!"
	AddEventList(cTxt, 10);

	switch (m_sPlayerType) {
		case 1:
		case 2:
		case 3:
			PlaySound('C', 21, 0);
			break;

		case 4:
		case 5:
		case 6:
			PlaySound('C', 22, 0);
			break;
	}

	_RemoveChatMsgListByObjectID(m_sPlayerObjectID);

	for (i = 1; i < DEF_MAXCHATMSGS; i++)
		if (m_pChatMsgList[i] == NULL) {
			ZeroMemory(cTxt, sizeof(cTxt));
			strcpy(cTxt, "Level up!");
			m_pChatMsgList[i] = new class CMsg(23, cTxt, m_dwCurTime);
			m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;

			if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE) {
				delete m_pChatMsgList[i];
				m_pChatMsgList[i] = NULL;
			}
			return;
		}
}

void CGame::NotifyMsg_LuPool(char * pData)
{
	char * cp;
	short * sp;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	m_iLU_Point = EncriptInt(*sp);
	sp += 2;

	m_cLU_Str = EncriptInt(0);
	m_cLU_Vit = EncriptInt(0);
	m_cLU_Dex = EncriptInt(0);
	m_cLU_Int = EncriptInt(0);
	m_cLU_Mag = EncriptInt(0);
	m_cLU_Char = EncriptInt(0);
}

// CLEROTH - LU
void CGame::NotifyMsg_SettingSuccess(char * pData)
{
	char * cp;
	char cTxt[30];
	char Notify;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	m_iStr = *cp;
	cp++;
	m_iVit = *cp;
	cp++;
	m_iDex = *cp;
	cp++;
	m_iInt = *cp;
	cp++;
	m_iMag = *cp;
	cp++;
	m_iCharisma = *cp;
	cp++;
	Notify = *cp;
	cp++;

	// Break guild - change stats - ZeroEoyPnk puto del orto
	/*if ((DecriptInt(m_iGuildRank) == 0) && (m_iCharisma < 20))
		bSendCommand(CLIENT_REQUEST_DISBANDGUILD, DEF_MSGTYPE_CONFIRM, NULL, NULL, NULL, NULL, NULL);*/

	if (Notify == 0)
	{
		wsprintf(cTxt, "Your stat has been changed.");
		AddEventList(cTxt, 10);
	}
}

void CGame::NotifyMsg_MagicEffectOff(char * pData) // MORLA - Aca efectua para uras
{
	char * cp;
	WORD * wp;
	short  sMagicType, sMagicEffect;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	sMagicType = (short)*wp;
	cp += 2;
	wp = (WORD *)cp;
	sMagicEffect = (short)*wp;
	cp += 2;
	switch (sMagicType) {
		case DEF_MAGICTYPE_PROTECT:
			switch (sMagicEffect) {
				case 1: // "Protection from arrows has vanished."
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF1, 10);
					bPfa = FALSE;
					break;
				case 2:	// "Protection from magic has vanished."
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF2, 10);
					bPfm = FALSE;
					break;
				case 3:	// "Defense shield effect has vanished."
				case 4:	// "Defense shield effect has vanished."
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF3, 10);
					bShield = FALSE;
					break;
				case 5:	// "Absolute Magic Protection has been vanished."
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF14, 10);
					bPfm = FALSE;
					break;
			}
			break;

		case DEF_MAGICTYPE_HOLDOBJECT:
			switch (sMagicEffect) {
				case 1:	// "Hold person magic effect has vanished."
					m_bParalyze = EncriptBool(FALSE);
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF4, 10);
					break;

				case 2:	// "Paralysis magic effect has vanished."
					m_bParalyze = EncriptBool(FALSE);
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF5, 10);
					break;
			}
			break;

		case DEF_MAGICTYPE_INVISIBILITY:
			switch (sMagicEffect) {
				case 1:	// "Invisibility magic effect has vanished."
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF6, 10);
					bInvi = FALSE;
					break;
			}
			break;

		case DEF_MAGICTYPE_CONFUSE:
			switch (sMagicEffect) {
				case 1:	// "Language confuse magic effect has vanished."
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF7, 10);
					break;
				case 2:	// "Confusion magic has vanished."
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF8, 10);
					m_bIsConfusion = EncriptBool(FALSE);
					break;
				case 3:	// "Illusion magic has vanished."
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF9, 10);
					m_iIlusionOwnerH = EncriptInt(0);
					break;
				case 4:	// "At last, you gather your senses." // snoopy
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF15, 10);
					m_bIllusionMVT = EncriptBool(FALSE);
					break;
			}
			break;

		case DEF_MAGICTYPE_POISON:
			if (m_bIsPoisoned) AddEventList(NOTIFYMSG_MAGICEFFECT_OFF10, 10);
			m_bIsPoisoned = FALSE;
			break;

		case DEF_MAGICTYPE_BERSERK:
			switch (sMagicEffect) {
				case 1:
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF11, 10);
					bZerk = FALSE;
					break;
				case 2:
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF16, 10);
					bZerk = FALSE;
					break;
			}
			break;

		case DEF_MAGICTYPE_POLYMORPH:
			switch (sMagicEffect) {
				case 1:
					AddEventList(NOTIFYMSG_MAGICEFFECT_OFF12, 10);
					break;
			}
			break;

		case DEF_MAGICTYPE_ICE:
			AddEventList(NOTIFYMSG_MAGICEFFECT_OFF13, 10);
			break;
	}
}

char CGame::cGetNextMoveDirMVT(short sX, short sY, short dstX, short dstY, BOOL bMoveCheck, BOOL bMIM)
{
	char  cDir, cTmpDir;
	//int   aX, aY, aX2, aY2, dX, dY;
	int   aX, aY, dX, dY;
	int   i;
	if ((sX == dstX) && (sY == dstY)) return 0;
	dX = sX;
	dY = sY;

	cDir = m_Misc.cGetNextMoveDirMVT(dX, dY, dstX, dstY);

	if (m_cPlayerTurn == 0)
		for (i = cDir; i <= cDir + 2; i++)
		{
			cTmpDir = i;
			if (cTmpDir > 8) cTmpDir -= 8;
			aX = _tmp_cTmpDirX[cTmpDir];
			aY = _tmp_cTmpDirY[cTmpDir];
			//if (((dX + aX) == DecriptInt(m_iPrevMoveX)) && ((dY + aY) == DecriptInt(m_iPrevMoveY)) && (m_bIsPrevMoveBlocked == TRUE) && (bMoveCheck == TRUE))
			if (((dX + aX) == m_iPrevMoveX) && ((dY + aY) == m_iPrevMoveY) && (m_bIsPrevMoveBlocked == TRUE) && (bMoveCheck == TRUE))
			{
				m_bIsPrevMoveBlocked = FALSE;
			}
			else if (m_pMapData->bGetIsLocateable(dX + aX, dY + aY) == TRUE)
			{
				if (m_pMapData->bIsTeleportLoc(dX + aX, dY + aY) == TRUE)
				{
					if (_bCheckMoveable(dX + aX, dY + aY) == TRUE) return cTmpDir;
					else
					{
						SetTopMsg(DEF_MSG_GETNEXTMOVEDIR, 5);
					}
				}
				else return cTmpDir;
			}
		}

	if (m_cPlayerTurn == 1)
		for (i = cDir; i >= cDir - 2; i--)
		{
			cTmpDir = i;
			if (cTmpDir < 1) cTmpDir += 8;
			aX = _tmp_cTmpDirX[cTmpDir];
			aY = _tmp_cTmpDirY[cTmpDir];
			//if (((dX + aX) == DecriptInt(m_iPrevMoveX)) && ((dY + aY) == DecriptInt(m_iPrevMoveY)) && (m_bIsPrevMoveBlocked == TRUE) && (bMoveCheck == TRUE))
			if (((dX + aX) == m_iPrevMoveX) && ((dY + aY) == m_iPrevMoveY) && (m_bIsPrevMoveBlocked == TRUE) && (bMoveCheck == TRUE))
			{
				m_bIsPrevMoveBlocked = FALSE;
			}
			else if (m_pMapData->bGetIsLocateable(dX + aX, dY + aY) == TRUE)
			{
				if (m_pMapData->bIsTeleportLoc(dX + aX, dY + aY) == TRUE)
				{
					if (_bCheckMoveable(dX + aX, dY + aY) == TRUE) return cTmpDir;
					else
					{
						SetTopMsg(DEF_MSG_GETNEXTMOVEDIR, 5);
					}
				}
				else return cTmpDir;
			}
		}
	return 0;
}

void CGame::NotifyMsg_MagicEffectOn(char * pData)
{
	char * cp;
	DWORD * dwp;
	WORD * wp;
	short  sMagicType, sMagicEffect, sOwnerH;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	sMagicType = (short)*wp;
	cp += 2;
	dwp = (DWORD *)cp;
	sMagicEffect = (short)*dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	sOwnerH = (short)*dwp;
	cp += 4;
	switch (sMagicType) {
		case DEF_MAGICTYPE_PROTECT:
			switch (sMagicEffect) {
				case 1: // "You are completely protected from arrows!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON1, 10);
					bPfa = TRUE;
					m_sPfa = 60;
					break;
				case 2: // "You are protected from magic!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON2, 10);
					bPfm = TRUE;
					m_sPfm = 60;
					break;
				case 3: // "Defense ratio increased by a magic shield!"
				case 4: // "Defense ratio increased by a magic shield!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON3, 10);
					bShield = TRUE;
					m_sShield = 60;
					break;
				case 5: // "You are completely protected from magic!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON14, 10);
					bPfm = TRUE;
					m_sPfm = 60;
					break;
			}
			break;

		case DEF_MAGICTYPE_HOLDOBJECT:
			switch (sMagicEffect) {
				case 1: // "You were bounded by a Hold Person spell! Unable to move!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON4, 10);
					break;
				case 2: // "You were bounded by a Paralysis spell! Unable to move!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON5, 10);
					break;
			}
			m_bParalyze = EncriptBool(TRUE);
			break;

		case DEF_MAGICTYPE_INVISIBILITY:
			switch (sMagicEffect) {
				case 1: // "You are now invisible, no one can see you!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON6, 10);
					bInvi = TRUE;
					m_sInv = 60;
					break;
			}
			break;

		case DEF_MAGICTYPE_CONFUSE:
			switch (sMagicEffect) {
				case 1:	// Confuse Language "No one understands you because of language confusion magic!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON7, 10);
					break;

				case 2: // Confusion "Confusion magic casted, impossible to determine player allegience."
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON8, 10);
					m_bIsConfusion = EncriptBool(TRUE);
					break;

				case 3:	// Illusion "Illusion magic casted, impossible to tell who is who!"
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON9, 10);
					_SetIlusionEffect(sOwnerH);
					break;

				case 4:	// IllusionMouvement "You are thrown into confusion, and you are flustered yourself." // snoopy
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON15, 10);
					m_bIllusionMVT = EncriptBool(TRUE);
					break;
			}
			break;

		case DEF_MAGICTYPE_POISON:
			AddEventList(NOTIFYMSG_MAGICEFFECT_ON10, 10);
			m_bIsPoisoned = TRUE;
			break;

		case DEF_MAGICTYPE_BERSERK:
			switch (sMagicEffect) {
				case 1:
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON11, 10);
					bZerk = TRUE;
					m_sZerk = 40;
					break;

				case 2:
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON16, 10);
					FuryWar = TRUE;
					break;
			}
			break;

		case DEF_MAGICTYPE_POLYMORPH:
			switch (sMagicEffect) {
				case 1:
					AddEventList(NOTIFYMSG_MAGICEFFECT_ON12, 10);
					m_bRunningMode = FALSE; // Centuu : Cuando polymorph esta activado no puedes correr.
					break;
			}
			break;

		case DEF_MAGICTYPE_ICE:
			AddEventList(NOTIFYMSG_MAGICEFFECT_ON13, 10);
			break;
	}
}

void CGame::NotifyMsg_MagicStudyFail(char * pData)
{
	char * cp, cMagicNum, cName[31], cFailCode;
	char cTxt[120];
	int  * ip, iCost, iReqInt;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	cFailCode = *cp;
	cp++;
	cMagicNum = *cp;
	cp++;
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 30);
	cp += 30;
	ip = (int *)cp;
	iCost = *ip;
	cp += 4;
	ip = (int *)cp;
	iReqInt = *ip;
	cp += 4;

	if (iCost > 0)
	{
		wsprintf(cTxt, NOTIFYMSG_MAGICSTUDY_FAIL1, cName);
		AddEventList(cTxt, 10);
	}
	else
	{
		wsprintf(cTxt, NOTIFYMSG_MAGICSTUDY_FAIL2, cName);
		AddEventList(cTxt, 10);
		wsprintf(cTxt, NOTIFYMSG_MAGICSTUDY_FAIL3, iReqInt);
		AddEventList(cTxt, 10);
	}
}

void CGame::NotifyMsg_MagicStudySuccess(char * pData)
{
	char * cp, cMagicNum, cName[31];
	char cTxt[120];
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	cMagicNum = *cp;
	cp++;
	m_cMagicMastery[cMagicNum] = 1;
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 30);
	wsprintf(cTxt, NOTIFYMSG_MAGICSTUDY_SUCCESS1, cName);
	AddEventList(cTxt, 10);
	PlaySound('E', 23, 0);
}
//MP ABAJO LaloRamos
void CGame::NotifyMsg_MP(char * pData)
{
	char * cp;
	short * sp;
	int iPrevMP;
	char cTxt[50];

	iPrevMP = DecriptInt(m_iMP);

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	m_iMP = EncriptInt(*sp);
	cp += 2;

	if (abs(DecriptInt(m_iMP) - iPrevMP) < 10) return;
	if (DecriptInt(m_iMP) > iPrevMP)
	{
		wsprintf(cTxt, NOTIFYMSG_MP_UP, DecriptInt(m_iMP) - iPrevMP);//"MP�
		AddEventList(cTxt, 10);
		PlaySound('E', 21, 0);
	}
	else
	{
		wsprintf(cTxt, NOTIFYMSG_MP_DOWN, iPrevMP - DecriptInt(m_iMP));//"MP�
		AddEventList(cTxt, 10);
	}
}

void CGame::NotifyMsg_NewGuildsMan(char * pData)
{
	char * cp, cName[12], cTxt[120];
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);
	wsprintf(cTxt, NOTIFYMSG_NEW_GUILDMAN1, cName);
	AddEventList(cTxt, 10);
	ClearGuildNameList();
}

void CGame::NotifyMsg_PKcaptured(char *pData)
{
	char  * cp;
	DWORD * dwp;
	WORD  * wp;
	int     iPKcount, iLevel, iExp, iRewardGold;
	char cTxt[120], cName[12];
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	iPKcount = *wp;
	cp += 2;
	wp = (WORD *)cp;
	iLevel = *wp;
	cp += 2;
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);
	cp += 10;
	dwp = (DWORD *)cp;
	iRewardGold = *dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	iExp = *dwp;
	cp += 4;
	wsprintf(cTxt, NOTIFYMSG_PK_CAPTURED1, iLevel, cName, iPKcount);
	AddEventList(cTxt, 10);
	wsprintf(cTxt, EXP_INCREASED, iExp - m_iExp);
	AddEventList(cTxt, 10);
	wsprintf(cTxt, NOTIFYMSG_PK_CAPTURED3, iExp - m_iExp);
	AddEventList(cTxt, 10);

	_RemoveChatMsgListByObjectID(m_sPlayerObjectID);
	for (int i = 1; i < DEF_MAXCHATMSGS; i++)
		if (m_pChatMsgList[i] == NULL) {
			ZeroMemory(cTxt, sizeof(cTxt));
			strcpy(cTxt, "Enemy Kill!");
			m_pChatMsgList[i] = new class CMsg(23, cTxt, m_dwCurTime);
			m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;

			if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE) {
				delete m_pChatMsgList[i];
				m_pChatMsgList[i] = NULL;
			}
			break;
		}

	m_bCreateScreen = TRUE;
	m_dwTimeScreen = m_dwCurTime;
}

void CGame::NotifyMsg_PKpenalty(char *pData)
{
	char  * cp;
	DWORD * dwp;
	int     iPKcount, iExp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	dwp = (DWORD *)cp;
	iExp = *dwp;
	cp += 4;
	dwp = (DWORD *)cp;
	iPKcount = *dwp;
	cp += 4;
	wsprintf(G_cTxt, NOTIFYMSG_PK_PENALTY1, iPKcount);
	AddEventList(G_cTxt, 10);
	if (m_iExp > iExp) {
		wsprintf(G_cTxt, NOTIFYMSG_PK_PENALTY2, m_iExp - iExp);
		AddEventList(G_cTxt, 10);
	}
	m_iExp = iExp;
	m_iPKCount = EncriptInt(iPKcount);
}

void CGame::NotifyMsg_PlayerShutUp(char * pData)
{
	char * cp, cName[12];
	WORD * wp, wTime;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	wTime = *wp;
	cp += 2;
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);
	cp += 10;
	if (memcmp(m_cPlayerName, cName, 10) == 0)
		wsprintf(G_cTxt, NOTIFYMSG_PLAYER_SHUTUP1, wTime);
	else wsprintf(G_cTxt, NOTIFYMSG_PLAYER_SHUTUP2, cName, wTime);

	AddEventList(G_cTxt, 10);
}

void CGame::NotifyMsg_PlayerStatus(BOOL bOnGame, char * pData)
{
	char cName[12], cMapName[12], *cp;
	WORD * wp;
	WORD  dx = 1, dy = 1;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);
	cp += 10;
	ZeroMemory(cMapName, sizeof(cMapName));
	memcpy(cMapName, cp, 10);
	cp += 10;
	wp = (WORD *)cp;
	dx = (WORD)*wp;
	cp += 2;
	wp = (WORD *)cp;
	dy = (WORD)*wp;
	cp += 2;
	ZeroMemory(G_cTxt, sizeof(G_cTxt));
	if (bOnGame == TRUE) {
		if (strlen(cMapName) == 0) wsprintf(G_cTxt, NOTIFYMSG_PLAYER_STATUS1, cName);
		else wsprintf(G_cTxt, NOTIFYMSG_PLAYER_STATUS2, cName, cMapName, dx, dy);
	}
	else wsprintf(G_cTxt, NOTIFYMSG_PLAYER_STATUS3, cName);
	AddEventList(G_cTxt, 10);
}


void CGame::NotifyMsg_QuestReward(char *pData)
{
	short * sp, sWho, sFlag, Pos;
	char  * cp, cRewardName[21], cTxt[120];
	int   * ip, iAmount, iIndex, iPreCon;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	sp = (short *)cp;
	Pos = *sp;
	cp += 2;
	sp = (short *)cp;
	sWho = *sp;
	cp += 2;
	sp = (short *)cp;
	sFlag = *sp;
	cp += 2;
	ZeroMemory(cRewardName, sizeof(cRewardName));
	memcpy(cRewardName, cp, 20);
	cp += 20;
	ip = (int *)cp;
	iAmount = *ip;
	cp += 4;
	iPreCon = m_iContribution;
	ip = (int *)cp;
	m_iContribution = *ip;
	cp += 4;

	if (sFlag == 1)
	{
		m_stQuest[Pos].sWho = NULL;
		m_stQuest[Pos].sQuestType = NULL;
		m_stQuest[Pos].sContribution = NULL;
		m_stQuest[Pos].sTargetType = NULL;
		m_stQuest[Pos].sTargetCount = NULL;
		m_stQuest[Pos].sX = NULL;
		m_stQuest[Pos].sY = NULL;
		m_stQuest[Pos].sRange = NULL;
		m_stQuest[Pos].sCurrentCount = NULL;
		m_stQuest[Pos].bIsQuestCompleted = FALSE;
		ZeroMemory(m_stQuest[Pos].cTargetName, sizeof(m_stQuest[Pos].cTargetName));
		EnableDialogBox(21, 0, sWho + 110, 0);
		iIndex = m_stDialogBoxInfo[21].sV1;
		m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
		iIndex++;
		ZeroMemory(cTxt, sizeof(cTxt));
		if (memcmp(cRewardName, "Reward", 6) == 0)
		{
			if (iAmount > 0) wsprintf(cTxt, NOTIFYMSG_QUEST_REWARD1, iAmount);
		}
		else
		{
			wsprintf(cTxt, NOTIFYMSG_QUEST_REWARD2, iAmount, cRewardName);
		}
		m_pMsgTextList2[iIndex] = new class CMsg(NULL, cTxt, NULL);
		iIndex++;
		m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
		iIndex++;
		ZeroMemory(cTxt, sizeof(cTxt));
		if (iPreCon < m_iContribution)
			wsprintf(cTxt, NOTIFYMSG_QUEST_REWARD3, m_iContribution - iPreCon);
		else wsprintf(cTxt, NOTIFYMSG_QUEST_REWARD4, iPreCon - m_iContribution);

		m_pMsgTextList2[iIndex] = new class CMsg(NULL, "  ", NULL);
		iIndex++;
	}
	else EnableDialogBox(21, 0, sWho + 120, 0);
}

void CGame::NotifyMsg_RatingPlayer(char * pData)
{
	int * ip;
	char * cp, cName[12];
	WORD  cValue;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	cValue = *cp;
	cp++;
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);
	cp += 10;
	ip = (int *)cp;
	m_iReputation = *ip;
	cp += 4;
	ZeroMemory(G_cTxt, sizeof(G_cTxt));
	if (memcmp(m_cPlayerName, cName, 10) == 0)
	{
		if (cValue == 1)
		{
			strcpy(G_cTxt, NOTIFYMSG_RATING_PLAYER1);
			PlaySound('E', 23, 0);
		}
	}
	else
	{
		if (cValue == 1)
			wsprintf(G_cTxt, NOTIFYMSG_RATING_PLAYER2, cName);
		else wsprintf(G_cTxt, NOTIFYMSG_RATING_PLAYER3, cName);
	}
	AddEventList(G_cTxt, 10);
}




void CGame::NotifyMsg_ServerChange(char * pData)
{
	
}

void CGame::NotifyMsg_SetItemCount(char * pData)
{
	char  * cp;
	WORD  * wp;
	DWORD * dwp;
	short  sItemIndex;
	DWORD  dwCount;
	BOOL   bIsItemUseResponse;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	sItemIndex = *wp;
	cp += 2;
	dwp = (DWORD *)cp;
	dwCount = *dwp;
	cp += 4;
	bIsItemUseResponse = (BOOL)*cp;
	cp++;
	if (m_pItemList[sItemIndex] != NULL)
	{
		m_pItemList[sItemIndex]->m_dwCount = dwCount;
		if (bIsItemUseResponse == TRUE) m_bIsItemDisabled[sItemIndex] = FALSE;
	}
}

void CGame::NotifyMsg_ShowMap(char * pData)
{
	char * cp;
	WORD * wp, w1, w2;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	w1 = *wp;
	cp += 2;
	wp = (WORD *)cp;
	w2 = *wp;
	cp += 2;
	if (w2 == 0) AddEventList(NOTIFYMSG_SHOW_MAP1, 10);
	else EnableDialogBox(22, NULL, w1, w2 - 1);
}

void CGame::NotifyMsg_Skill(char *pData)
{
	WORD * wp;
	short sSkillIndex, sValue;
	char * cp;
	char cTxt[120];
	int i;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	sSkillIndex = (short)*wp;
	cp += 2;
	wp = (WORD *)cp;
	sValue = (short)*wp;
	cp += 2;
	_RemoveChatMsgListByObjectID(m_sPlayerObjectID);
	if (m_pSkillCfgList[sSkillIndex]->m_iLevel < sValue)
	{//	wsprintf(cTxt, NOTIFYMSG_SKILL1, m_pSkillCfgList[sSkillIndex]->m_cName, sValue - m_pSkillCfgList[sSkillIndex]->m_iLevel);
	//	AddEventList(cTxt, 10);
	//	PlaySound('E', 23, 0);
		for (i = 1; i < DEF_MAXCHATMSGS; i++)
			if (m_pChatMsgList[i] == NULL)
			{
				ZeroMemory(cTxt, sizeof(cTxt));
				//wsprintf(cTxt, "%s +%d%%", m_pSkillCfgList[sSkillIndex]->m_cName, sValue - m_pSkillCfgList[sSkillIndex]->m_iLevel);
				m_pChatMsgList[i] = new class CMsg(20, cTxt, m_dwCurTime);
				m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;
				if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE)
				{
					delete m_pChatMsgList[i];
					m_pChatMsgList[i] = NULL;
				}
				break;
			}
	}
	else if (m_pSkillCfgList[sSkillIndex]->m_iLevel > sValue) {
		//	wsprintf(cTxt, NOTIFYMSG_SKILL2, m_pSkillCfgList[sSkillIndex]->m_cName, m_pSkillCfgList[sSkillIndex]->m_iLevel - sValue);
		//	AddEventList(cTxt, 10);
		//	PlaySound('E', 24, 0);
		for (i = 1; i < DEF_MAXCHATMSGS; i++)
			if (m_pChatMsgList[i] == NULL)
			{
				ZeroMemory(cTxt, sizeof(cTxt));
				//	wsprintf(cTxt, "%s -%d%%", m_pSkillCfgList[sSkillIndex]->m_cName, sValue - m_pSkillCfgList[sSkillIndex]->m_iLevel);
				m_pChatMsgList[i] = new class CMsg(20, cTxt, m_dwCurTime);
				m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;
				if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE)
				{
					delete m_pChatMsgList[i];
					m_pChatMsgList[i] = NULL;
				}
				break;
			}
	}
	m_pSkillCfgList[sSkillIndex]->m_iLevel = sValue;
	m_cSkillMastery[sSkillIndex] = (unsigned char)sValue;
}


void CGame::NotifyMsg_SkillTrainSuccess(char * pData)
{
	char * cp, cSkillNum, cSkillLevel;
	char cTemp[120];
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	cSkillNum = *cp;
	cp++;
	cSkillLevel = *cp;
	cp++;
	ZeroMemory(cTemp, sizeof(cTemp));
	wsprintf(cTemp, NOTIFYMSG_SKILL_TRAIN_SUCCESS1, m_pSkillCfgList[cSkillNum]->m_cName, cSkillLevel);
	AddEventList(cTemp, 10);
	m_pSkillCfgList[cSkillNum]->m_iLevel = cSkillLevel;
	m_cSkillMastery[cSkillNum] = (unsigned char)cSkillLevel;
	PlaySound('E', 23, 0);
}

void CGame::NotifyMsg_SkillUsingEnd(char * pData)
{
	char * cp;
	WORD * wp, wResult;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	wp = (WORD *)cp;
	wResult = *wp;
	switch (wResult) {
		case NULL:
			AddEventList(NOTIFYMSG_SKILL_USINGEND1, 10);
			break;
		case 1:
			AddEventList(NOTIFYMSG_SKILL_USINGEND2, 10);
			break;
	}
	m_bSkillUsingStatus = FALSE;
}

void CGame::NotifyMsg_SP(char * pData)
{
	int iPrevSP;
	char * cp;
	short * sp;

	iPrevSP = DecriptInt(m_iSP);

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	m_iSP = EncriptInt(*sp);
	cp += 2;

	if (abs(DecriptInt(m_iSP) - iPrevSP) < 10) return;
	if (DecriptInt(m_iSP) > iPrevSP)
	{
		wsprintf(G_cTxt, NOTIFYMSG_SP_UP, DecriptInt(m_iSP) - iPrevSP);
		AddEventList(G_cTxt, 10);
		PlaySound('E', 21, 0);
	}
	else
	{
		wsprintf(G_cTxt, NOTIFYMSG_SP_DOWN, iPrevSP - DecriptInt(m_iSP));
		AddEventList(G_cTxt, 10);
	}
}

void CGame::NotifyMsg_TotalUsers(char * pData)
{
	WORD *wp;
	int iTotal;
	wp = (WORD *)(pData + DEF_INDEX2_MSGTYPE + 2);
	iTotal = (int)*wp;
	wsprintf(G_cTxt, NOTIFYMSG_TOTAL_USER1, iTotal);
	AddEventList(G_cTxt, 10);
}

void CGame::NotifyMsg_WhisperMode(BOOL bActive, char * pData)
{
	char cName[12], *cp;
	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);
	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 10);
	if (bActive == TRUE)
	{
		wsprintf(G_cTxt, NOTIFYMSG_WHISPERMODE1, cName);
		if (m_pWhisperMsg[DEF_MAXWHISPERMSG - 1] != NULL) {
			delete m_pWhisperMsg[DEF_MAXWHISPERMSG - 1];
			m_pWhisperMsg[DEF_MAXWHISPERMSG - 1] = NULL;
		}
		for (int i = DEF_MAXWHISPERMSG - 2; i >= 0; i--) {
			m_pWhisperMsg[i + 1] = m_pWhisperMsg[i];
			m_pWhisperMsg[i] = NULL;
		}
		m_pWhisperMsg[0] = new class CMsg(NULL, cName, NULL);
		m_cWhisperIndex = 0;
	}
	else wsprintf(G_cTxt, NOTIFYMSG_WHISPERMODE2, cName);

	AddEventList(G_cTxt, 10);
}

void CGame::DrawDialogBox_CrusadeJob(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[33].sX;
	sY = m_stDialogBoxInfo[33].sY;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 0);

	switch (m_stDialogBoxInfo[33].cMode) {
		case 1:
			PutAlignedString(sX + 24, sX + 246, sY + 45 + 20, DRAWDIALOGBOX_CRUSADEJOB1);
			PutAlignedString(sX + 24, sX + 246, sY + 60 + 20, DRAWDIALOGBOX_CRUSADEJOB2);
			PutAlignedString(sX + 24, sX + 246, sY + 75 + 20, DRAWDIALOGBOX_CRUSADEJOB3);
			PutAlignedString(sX + 24, sX + 246, sY + 90 + 20, DRAWDIALOGBOX_CRUSADEJOB4);

			if ((DecriptBool(m_bCitizen)) || (Assasain))
			{
				if (DecriptInt(m_iGuildRank) == 0)
				{
					if ((msX > sX + 24) && (msX < sX + 246) && (msY > sY + 150) && (msY < sY + 165))
						PutAlignedString(sX + 24, sX + 246, sY + 150, DRAWDIALOGBOX_CRUSADEJOB5, 255, 255, 255);//(Commander)"
					else PutAlignedString(sX + 24, sX + 246, sY + 150, DRAWDIALOGBOX_CRUSADEJOB5, 4, 0, 50);//(Commander)"
				}
				else
				{
					if ((msX > sX + 24) && (msX < sX + 246) && (msY > sY + 150) && (msY < sY + 165))
						PutAlignedString(sX + 24, sX + 246, sY + 150, DRAWDIALOGBOX_CRUSADEJOB7, 255, 255, 255);//(Soldier)"
					else PutAlignedString(sX + 24, sX + 246, sY + 150, DRAWDIALOGBOX_CRUSADEJOB7, 4, 0, 50);//(Soldier)"
					if (DecriptInt(m_iGuildRank) != -1)
					{
						if ((msX > sX + 24) && (msX < sX + 246) && (msY > sY + 175) && (msY < sY + 190))
							PutAlignedString(sX + 24, sX + 246, sY + 175, DRAWDIALOGBOX_CRUSADEJOB9, 255, 255, 255);//(Constructor)"
						else PutAlignedString(sX + 24, sX + 246, sY + 175, DRAWDIALOGBOX_CRUSADEJOB9, 4, 0, 50);//(Constructor)"
					}
				}
			}

			PutAlignedString(sX + 24, sX + 246, sY + 290 - 40, DRAWDIALOGBOX_CRUSADEJOB10);
			PutAlignedString(sX + 24, sX + 246, sY + 305 - 40, DRAWDIALOGBOX_CRUSADEJOB17);

			if ((msX > sX + 210) && (msX < sX + 260) && (msY >= sY + 296) && (msY <= sY + 316))
				PutString_SprFont(sX + 50 + 160, sY + 296, "Help", 6, 6, 20);
			else PutString_SprFont(sX + 50 + 160, sY + 296, "Help", 0, 0, 7);
			break;

		case 2:
			PutAlignedString(sX + 24, sX + 246, sY + 90 + 20, DRAWDIALOGBOX_CRUSADEJOB18);
			switch (DecriptInt(m_iCrusadeDuty)) {
				case 1: PutAlignedString(sX + 24, sX + 246, sY + 125, DRAWDIALOGBOX_CRUSADEJOB19); break;//"(Soldier)
				case 2: PutAlignedString(sX + 24, sX + 246, sY + 125, DRAWDIALOGBOX_CRUSADEJOB20); break;//"(Constructor)
				case 3: PutAlignedString(sX + 24, sX + 246, sY + 125, DRAWDIALOGBOX_CRUSADEJOB21); break;//"(Commander)
			}

			PutAlignedString(sX + 24, sX + 246, sY + 145, DRAWDIALOGBOX_CRUSADEJOB22);
			if ((msX > sX + 24) && (msX < sX + 246) && (msY > sY + 160) && (msY < sY + 175))
				PutAlignedString(sX + 24, sX + 246, sY + 160, DRAWDIALOGBOX_CRUSADEJOB23, 255, 255, 255);
			else PutAlignedString(sX + 24, sX + 246, sY + 160, DRAWDIALOGBOX_CRUSADEJOB23, 4, 0, 50);

			PutAlignedString(sX + 24, sX + 246, sY + 175, DRAWDIALOGBOX_CRUSADEJOB25);
			PutAlignedString(sX + 24, sX + 246, sY + 190, DRAWDIALOGBOX_CRUSADEJOB26);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
	}
}
//logindialog
void CGame::_Draw_OnLogin(char *pAccount, char *pPassword, int msX, int msY, int iFrame)
{
	BOOL bFlag = TRUE;
	DWORD dwTime = timeGetTime();

	m_DDraw.ClearBackB4();

	//added resolution
	if (c_reso->IsResolution() == C800x600)
	{
		/*DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 0 - 2, 0 - 1, 0, TRUE);
		DrawVersion();*/

		if (c_reso->IsResolution() == C640x480)
			m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, dwTime);
		else if (c_reso->IsResolution() == C800x600)
			m_pSprite[SPRID_BACKGROUND + 1]->PutSpriteFast(0, 0, 0, dwTime);
		else if (c_reso->IsResolution() == C1024x768)
			m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, dwTime);

		m_DDraw.DrawShadowBox(196, 192, 602, 405);
		m_DDraw.DrawShadowBox(358, 230, 544, 253);
		m_DDraw.DrawShadowBox(358, 260, 544, 282);
		m_DDraw.DrawShadowBox(358, 230, 544, 253);
		m_DDraw.DrawShadowBox(358, 260, 544, 282);

		PutCenterString_SpriteFont(196, 602, 195, "Account Login", 255, 200, 0);
		PutCenterString_SpriteFont(260, 354, 235, "Account", 255, 255, 255);
		PutCenterString_SpriteFont(260, 354, 264, "Password", 255, 255, 255);

		PutAlignedString2(265, 530, 308, "Enter Account name and password. If you don't have any account, log in after create new account.", 255, 200, 0);

		if (m_cCurFocus != 1) {
			if (m_Misc.bCheckValidName(pAccount) != FALSE)
				PutString2(365, 235, pAccount, 200, 200, 200);
			else PutString2(365, 235, pAccount, 200, 100, 100);
		}
		if ((m_Misc.bCheckValidName(pAccount) == FALSE) || (strlen(pAccount) == 0)) bFlag = FALSE;

		if (m_cCurFocus != 2) {
			if ((m_Misc.bCheckValidString(pPassword) != FALSE))
				PutString(365, 265, pPassword, RGB(200, 200, 200), TRUE, 1);
			else PutString(365, 265, pPassword, RGB(200, 100, 100), TRUE, 1);
		}
		if ((m_Misc.bCheckValidString(pPassword) == FALSE) || (strlen(pPassword) == 0)) bFlag = FALSE;

		if (m_cCurFocus == 1)
			ShowReceivedString();
		else
			if (m_cCurFocus == 2)
				ShowReceivedString(TRUE);

		if (bFlag == TRUE)
		{			
			if (m_cCurFocus == 3) PutCenterString_SpriteFont(197, 312, 379, "Connect", 255, 200, 0);
			else PutCenterString_SpriteFont(197, 312, 379, "Connect", 255, 255, 255);
		}
		else PutCenterString_SpriteFont(197, 312, 379, "Connect", 255, 255, 255);

		if (m_cCurFocus == 4) PutCenterString_SpriteFont(510, 599, 379, "Cancel", 255, 200, 0);
		else PutCenterString_SpriteFont(510, 599, 379, "Cancel", 255, 255, 255);


		/*if (m_cCurFocus == 4) DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 510, 374, 6, TRUE);
		else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_LOGIN, 510, 377, 5, TRUE);*/
		if ((m_bIsHideLocalCursor != TRUE) && (msX != 0) && (msY != 0)) {
			m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
		}
	}
	else if (c_reso->IsResolution() == C1024x768 || c_reso->IsResolution() == C640x480)
	{
		if (c_reso->IsResolution() == C640x480)
			m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, dwTime);
		else if (c_reso->IsResolution() == C1024x768)
			m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, dwTime);

		// Ajustar coordenadas según resolución
		float scaleX = (c_reso->IsResolution() == C640x480) ? 0.8f : 1.28f;
		float scaleY = (c_reso->IsResolution() == C640x480) ? 0.8f : 1.28f;

		m_DDraw.DrawShadowBox(196 * scaleX, 192 * scaleY, 602 * scaleX, 405 * scaleY);
		m_DDraw.DrawShadowBox(358 * scaleX, 230 * scaleY, 544 * scaleX, 253 * scaleY);
		m_DDraw.DrawShadowBox(358 * scaleX, 260 * scaleY, 544 * scaleX, 282 * scaleY);

		PutCenterString_SpriteFont(196 * scaleX, 602 * scaleX, 195 * scaleY, "Account Login", 255, 200, 0);
		PutCenterString_SpriteFont(260 * scaleX, 354 * scaleX, 235 * scaleY, "Account", 255, 255, 255);
		PutCenterString_SpriteFont(260 * scaleX, 354 * scaleX, 264 * scaleY, "Password", 255, 255, 255);

		PutAlignedString2(265 * scaleX, 530 * scaleX, 308 * scaleY, "Enter Account name and password. If you don't have any account, log in after create new account.", 255, 200, 0);

		if (m_cCurFocus != 1) {
			if (m_Misc.bCheckValidName(pAccount) != FALSE)
				PutString2(365 * scaleX, 235 * scaleY, pAccount, 200, 200, 200);
			else
				PutString2(365 * scaleX, 235 * scaleY, pAccount, 200, 100, 100);
		}
		if ((m_Misc.bCheckValidName(pAccount) == FALSE) || (strlen(pAccount) == 0)) bFlag = FALSE;

		if (m_cCurFocus != 2) {
			if (m_Misc.bCheckValidString(pPassword) != FALSE)
				PutString(365 * scaleX, 265 * scaleY, pPassword, RGB(200, 200, 200), TRUE, 1);
			else
				PutString(365 * scaleX, 265 * scaleY, pPassword, RGB(200, 100, 100), TRUE, 1);
		}
		if ((m_Misc.bCheckValidString(pPassword) == FALSE) || (strlen(pPassword) == 0)) bFlag = FALSE;

		if (m_cCurFocus == 1)
			ShowReceivedString();
		else if (m_cCurFocus == 2)
			ShowReceivedString(TRUE);

		if (bFlag == TRUE)
		{
			if (m_cCurFocus == 3)
				PutCenterString_SpriteFont(197 * scaleX, 312 * scaleX, 379 * scaleY, "Connect", 255, 200, 0);
			else
				PutCenterString_SpriteFont(197 * scaleX, 312 * scaleX, 379 * scaleY, "Connect", 255, 255, 255);
		}
		else
		{
			PutCenterString_SpriteFont(197 * scaleX, 312 * scaleX, 379 * scaleY, "Connect", 255, 255, 255);
		}

		if (m_cCurFocus == 4)
			PutCenterString_SpriteFont(510 * scaleX, 599 * scaleX, 379 * scaleY, "Cancel", 255, 200, 0);
		else
			PutCenterString_SpriteFont(510 * scaleX, 599 * scaleX, 379 * scaleY, "Cancel", 255, 255, 255);

		if ((m_bIsHideLocalCursor != TRUE) && (msX != 0) && (msY != 0)) {
			m_pSprite[DEF_SPRID_MOUSECURSOR]->PutSpriteFast(msX, msY, 0, dwTime);
		}
	}

}
//Cordenadas de mensajes LaloRamos EventList
void CGame::ShowEventList(DWORD dwTime)
{
	int i;

	m_DDraw._GetBackBufferDC();
	for (i = 0; i < 6; i++)
		if ((dwTime - m_stEventHistory[i].dwTime) < 5000)
		{
			switch (m_stEventHistory[i].cColor) {
				case 0:
					PutString(10, 10 + i * 15, m_stEventHistory[i].cTxt, RGB(225, 225, 225), FALSE, 1, TRUE);
					break;
				case 1:
					PutString(10, 10 + i * 15, m_stEventHistory[i].cTxt, RGB(130, 255, 130), FALSE, 1, TRUE);
					break;
				case 2:
					PutString(10, 10 + i * 15, m_stEventHistory[i].cTxt, RGB(255, 130, 130), FALSE, 1, TRUE);
					break;
				case 3:
					PutString(10, 10 + i * 15, m_stEventHistory[i].cTxt, RGB(130, 130, 255), FALSE, 1, TRUE);
					break;
				case 4:
					PutString(10, 10 + i * 15, m_stEventHistory[i].cTxt, RGB(230, 230, 130), FALSE, 1, TRUE);
					break;
				case 10:
					PutString(10, 10 + i * 15, m_stEventHistory[i].cTxt, RGB(180, 255, 180), FALSE, 1, TRUE);
					break;
				case 20:
					PutString(10, 10 + i * 15, m_stEventHistory[i].cTxt, RGB(150, 150, 170), FALSE, 1, TRUE);
					break;
			}
		}

	int res_y = 0;
	int res_x = 0;
	int res_y2 = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		res_y = 120;
		res_x = 90;
		res_y2 = 85;
	}
	if (c_reso->IsResolution() == C1024x768)
	{
		res_y = 286;
		res_x = 205;
		res_y2 = 197;
	}

	for (i = 0; i < 6; i++)
		if ((dwTime - m_stEventHistory2[i].dwTime) < 5000)
		{
			switch (m_stEventHistory2[i].cColor) {
					case 0:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(225, 225, 225), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(225, 225, 225), FALSE, 1, TRUE);
						break;
					case 1:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(130, 255, 130), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(130, 255, 130), FALSE, 1, TRUE);
						break;
					case 2:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(255, 130, 130), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(255, 130, 130), FALSE, 1, TRUE);
						break;
					case 3:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(130, 130, 255), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(130, 130, 255), FALSE, 1, TRUE);
						break;
					case 4:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(230, 230, 130), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(230, 230, 130), FALSE, 1, TRUE);
						break;
					case 10:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(180, 255, 180), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(180, 255, 180), FALSE, 1, TRUE);
						break;
					case 20:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(150, 150, 170), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(150, 150, 170), FALSE, 1, TRUE);
						break;
					case 11:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(225, 225, 225), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(225, 225, 225), FALSE, 1, TRUE);
						break;
					case 12:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(130, 255, 130), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(130, 255, 130), FALSE, 1, TRUE);
						break;
					case 13:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(255, 130, 130), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(255, 130, 130), FALSE, 1, TRUE);
						break;
					case 14:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(130, 130, 255), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(130, 130, 255), FALSE, 1, TRUE);
						break;
					case 15:
						if (BigBar == 0)
							PutString(10, 324 + res_y + i * 15, m_stEventHistory2[i].cTxt, RGB(230, 230, 130), FALSE, 1, TRUE);
						else
							PutString(10, 324 + res_y + 50 + i * 15, m_stEventHistory2[i].cTxt, RGB(230, 230, 130), FALSE, 1, TRUE);
						break;
			}
		}
	if (m_bSkillUsingStatus == TRUE)
	{
		PutString(280 - 29 + res_x, 280 - 52 + res_y2, SHOW_EVENT_LIST1, RGB(235, 235, 235), FALSE, 1, TRUE);
	}
	m_DDraw._ReleaseBackBufferDC();
}


void CGame::RequestTeleportAndWaitData()
{
	short PlayerX, PlayerY;

	PlayerX = m_sPlayerX;
	PlayerY = m_sPlayerY;

	DecriptString(m_cMapName);
	if (strcmp(m_cMapName, "arefarm") == 0) {
		if (((PlayerX == 78) && (PlayerY == 71)) ||
			((PlayerX == 79) && (PlayerY == 69)) ||
			((PlayerX == 78) && (PlayerY == 70)) ||
			((PlayerX == 80) && (PlayerY == 69)) ||
			((PlayerX == 79) && (PlayerY == 70))) {
			if ((DecriptInt(m_iLevel) < 30) || (DecriptInt(m_iLevel) > 80)) {
				AddEventList(REQUEST_TELEPORT_AND_WAIT_DATA1, 10);
				return;
			}
		}
		if (((PlayerX == 114) && (PlayerY == 23)) ||
			((PlayerX == 115) && (PlayerY == 23)) ||
			((PlayerX == 116) && (PlayerY == 23)) ||
			((PlayerX == 117) && (PlayerY == 23)) ||
			((PlayerX == 118) && (PlayerY == 23)) ||
			((PlayerX == 119) && (PlayerY == 23)) ||
			((PlayerX == 120) && (PlayerY == 23)) ||
			((PlayerX == 121) && (PlayerY == 23)) ||
			((PlayerX == 122) && (PlayerY == 23)) ||
			((PlayerX == 123) && (PlayerY == 23)) ||
			((PlayerX == 124) && (PlayerY == 23)) ||
			((PlayerX == 125) && (PlayerY == 23))) {
			if (DecriptBool(m_bCitizen) == FALSE) {
				AddEventList(RESPONSE_CHARGED_TELEPORT3, 10);
				return;
			}
		}
	}
	if (strcmp(m_cMapName, "elvfarm") == 0) {
		if (((PlayerX == 138) && (PlayerY == 207)) ||
			((PlayerX == 138) && (PlayerY == 206)) ||
			((PlayerX == 139) && (PlayerY == 206)) ||
			((PlayerX == 139) && (PlayerY == 205)) ||
			((PlayerX == 140) && (PlayerY == 205))) {
			if ((DecriptInt(m_iLevel) < 30) || (DecriptInt(m_iLevel) > 80)) {
				AddEventList(REQUEST_TELEPORT_AND_WAIT_DATA1, 10);
				return;
			}
		}
		if (((PlayerX == 156) && (PlayerY == 229)) ||
			((PlayerX == 157) && (PlayerY == 229)) ||
			((PlayerX == 158) && (PlayerY == 229)) ||
			((PlayerX == 159) && (PlayerY == 229)) ||
			((PlayerX == 160) && (PlayerY == 229)) ||
			((PlayerX == 161) && (PlayerY == 229)) ||
			((PlayerX == 162) && (PlayerY == 229)) ||
			((PlayerX == 163) && (PlayerY == 229)) ||
			((PlayerX == 164) && (PlayerY == 229))) {
			if (DecriptBool(m_bCitizen) == FALSE) {
				AddEventList(RESPONSE_CHARGED_TELEPORT3, 10);
				return;
			}
		}

	}

	if ((m_bIsCrusadeMode == FALSE) && (DecriptBool(m_bHunter) == TRUE) && (DecriptBool(m_bCitizen) == TRUE)) {
		if (strcmp(m_cMapName, "aresden") == 0) {
			if (PlayerY == 20) {
				if ((PlayerX >= 27) && (PlayerX <= 35)) { SetTopMsg(DEF_MSG_GETNEXTMOVEDIR, 5); return; }
				if ((PlayerX >= 258) && (PlayerX <= 266)) { SetTopMsg(DEF_MSG_GETNEXTMOVEDIR, 5); return; }
			}
		}
		if (strcmp(m_cMapName, "elvine") == 0) {
			if (PlayerY == 277) {
				if ((PlayerX >= 21) && (PlayerX <= 26)) { SetTopMsg(DEF_MSG_GETNEXTMOVEDIR, 5); return; }
			}
			if (PlayerY == 274) {
				if ((PlayerX >= 250) && (PlayerX <= 257)) { SetTopMsg(DEF_MSG_GETNEXTMOVEDIR, 5); return; }
			}
		}
	}

	DecriptString(m_cLocation);

	if ((strcmp(m_cMapName, "elvine") == 0) && (strcmp(m_cLocation, "aresden") == 0) || (Assasain) ||
		((m_iPlayerStatus & 0x40000) != 0) || ((m_iPlayerStatus & 0x80000) != 0)) {
		//shop
		if (((PlayerX == 225) && (PlayerY == 151)) ||
			((PlayerX == 225) && (PlayerY == 152)) ||
			((PlayerX == 226) && (PlayerY == 152)) ||
			((PlayerX == 229) && (PlayerY == 152)) ||
			((PlayerX == 230) && (PlayerY == 151)) ||
			//cityhall
			((PlayerX == 135) && (PlayerY == 133)) ||
			((PlayerX == 136) && (PlayerY == 133)) ||
			((PlayerX == 137) && (PlayerY == 133)) ||
			((PlayerX == 137) && (PlayerY == 132)) ||
			((PlayerX == 144) && (PlayerY == 127)) ||
			((PlayerX == 145) && (PlayerY == 127)) ||
			((PlayerX == 145) && (PlayerY == 126)) ||
			((PlayerX == 146) && (PlayerY == 126)) ||
			//cath1
			((PlayerX == 131) && (PlayerY == 77)) ||
			((PlayerX == 132) && (PlayerY == 77)) ||
			((PlayerX == 132) && (PlayerY == 76)) ||
			((PlayerX == 133) && (PlayerY == 76)) ||
			//bsmith
			((PlayerX == 239) && (PlayerY == 107)) ||
			((PlayerX == 240) && (PlayerY == 107)) ||
			((PlayerX == 241) && (PlayerY == 107)) ||
			((PlayerX == 241) && (PlayerY == 106)) ||
			((PlayerX == 229) && (PlayerY == 112)) ||
			((PlayerX == 229) && (PlayerY == 113)) ||
			((PlayerX == 230) && (PlayerY == 113)) ||
			//wrhus2
			((PlayerX == 197) && (PlayerY == 127)) ||
			((PlayerX == 198) && (PlayerY == 128)) ||
			((PlayerX == 199) && (PlayerY == 129)) ||
			((PlayerX == 203) && (PlayerY == 129)) ||
			//elvwrhus
			((PlayerX == 87) && (PlayerY == 174)) ||
			((PlayerX == 88) && (PlayerY == 175)) ||
			((PlayerX == 89) && (PlayerY == 176)) ||
			((PlayerX == 93) && (PlayerY == 176)) ||
			//gldhall
			((PlayerX == 76) && (PlayerY == 141)) ||
			((PlayerX == 77) && (PlayerY == 140)) ||
			((PlayerX == 77) && (PlayerY == 141)) ||
			((PlayerX == 78) && (PlayerY == 141)) ||
			//wztwr
			((PlayerX == 180) && (PlayerY == 77)) ||
			((PlayerX == 181) && (PlayerY == 77)) ||
			((PlayerX == 181) && (PlayerY == 76)) ||
			//cmdhall
			((PlayerX == 213) && (PlayerY == 89)) ||
			((PlayerX == 214) && (PlayerY == 89)) ||
			((PlayerX == 214) && (PlayerY == 88)) ||
			((PlayerX == 220) && (PlayerY == 87)) ||
			((PlayerX == 221) && (PlayerY == 87)) ||
			((PlayerX == 222) && (PlayerY == 87))) {
			if (((m_iPlayerStatus & 0x40000) != 0) || ((m_iPlayerStatus & 0x80000) != 0))
				AddEventList("The Flag Carrier no entering in structures", 10);
			else {
				AddEventList(REQUEST_TELEPORT_AND_WAIT_DATA2, 10);
				EncriptString(m_cLocation);
				EncriptString(m_cMapName);
			}
			return;
		}
	}

	if ((strcmp(m_cMapName, "aresden") == 0) && (strcmp(m_cLocation, "elvine") == 0) || (Assasain) ||
		((m_iPlayerStatus & 0x40000) != 0) || ((m_iPlayerStatus & 0x80000) != 0)) {
		if (((PlayerX == 126) && (PlayerY == 166)) || //shop
			((PlayerX == 126) && (PlayerY == 167)) ||
			((PlayerX == 127) && (PlayerY == 167)) ||
			((PlayerX == 130) && (PlayerY == 167)) ||
			((PlayerX == 131) && (PlayerY == 166)) ||
			//cityhall
			((PlayerX == 135) && (PlayerY == 129)) ||
			((PlayerX == 136) && (PlayerY == 129)) ||
			((PlayerX == 137) && (PlayerY == 129)) ||
			((PlayerX == 137) && (PlayerY == 128)) ||
			((PlayerX == 145) && (PlayerY == 122)) ||
			((PlayerX == 144) && (PlayerY == 123)) ||
			((PlayerX == 145) && (PlayerY == 123)) ||
			((PlayerX == 146) && (PlayerY == 123)) ||
			((PlayerX == 146) && (PlayerY == 122)) ||
			//cath1
			((PlayerX == 185) && (PlayerY == 93)) ||
			((PlayerX == 186) && (PlayerY == 93)) ||
			((PlayerX == 186) && (PlayerY == 92)) ||
			((PlayerX == 187) && (PlayerY == 92)) ||
			//bsmith
			((PlayerX == 167) && (PlayerY == 195)) ||
			((PlayerX == 168) && (PlayerY == 195)) ||
			((PlayerX == 169) && (PlayerY == 195)) ||
			((PlayerX == 169) && (PlayerY == 194)) ||
			((PlayerX == 157) && (PlayerY == 200)) ||
			((PlayerX == 157) && (PlayerY == 201)) ||
			((PlayerX == 158) && (PlayerY == 201)) ||
			//wrhus1
			((PlayerX == 101) && (PlayerY == 183)) ||
			((PlayerX == 102) && (PlayerY == 184)) ||
			((PlayerX == 103) && (PlayerY == 185)) ||
			((PlayerX == 107) && (PlayerY == 185)) ||
			//arewrhus
			((PlayerX == 217) && (PlayerY == 132)) ||
			((PlayerX == 218) && (PlayerY == 133)) ||
			((PlayerX == 219) && (PlayerY == 134)) ||
			((PlayerX == 223) && (PlayerY == 134)) ||
			//gldhall
			((PlayerX == 112) && (PlayerY == 97)) ||
			((PlayerX == 113) && (PlayerY == 96)) ||
			((PlayerX == 113) && (PlayerY == 97)) ||
			((PlayerX == 114) && (PlayerY == 97)) ||
			//wztwr
			((PlayerX == 55) && (PlayerY == 118)) ||
			((PlayerX == 56) && (PlayerY == 118)) ||
			((PlayerX == 57) && (PlayerY == 117)) ||
			//cmdhall
			((PlayerX == 94) && (PlayerY == 161)) ||
			((PlayerX == 95) && (PlayerY == 161)) ||
			((PlayerX == 95) && (PlayerY == 160)) ||
			((PlayerX == 101) && (PlayerY == 159)) ||
			((PlayerX == 102) && (PlayerY == 159)) ||
			((PlayerX == 103) && (PlayerY == 159))) {
			if (((m_iPlayerStatus & 0x40000) != 0) || ((m_iPlayerStatus & 0x80000) != 0))
				AddEventList("The Flag Carrier no entering in structures", 10);
			else {
				AddEventList(REQUEST_TELEPORT_AND_WAIT_DATA2, 10);
				EncriptString(m_cLocation);	
				EncriptString(m_cMapName);
			}
			return;
		}
	}
	EncriptString(m_cLocation);

	if (m_bIsCrusadeMode == TRUE)
	{
		if (strcmp(m_cMapName, "aresden") == 0)
		{
			// Dungeon aresden in sade no tp
			if (((PlayerX == 78) && (PlayerY == 210)) ||
				((PlayerX == 78) && (PlayerY == 211)) ||
				((PlayerX == 79) && (PlayerY == 209)) ||
				((PlayerX == 79) && (PlayerY == 210)) ||
				((PlayerX == 80) && (PlayerY == 209)))
			{
				AddEventList("No teleport in crusade event!", 10);
				return;
			}
		}
		else if (strcmp(m_cMapName, "elvine") == 0)
		{
			// Dungeon elvine in sade no tp
			if (((PlayerX == 258) && (PlayerY == 82)) ||
				((PlayerX == 258) && (PlayerY == 83)) ||
				((PlayerX == 259) && (PlayerY == 82)) ||
				((PlayerX == 259) && (PlayerY == 81)) ||
				((PlayerX == 260) && (PlayerY == 81)))
			{
				AddEventList("No teleport in crusade event!", 10);
				return;
			}
		}
	}
	EncriptString(m_cMapName);

	bSendCommand(CLIENT_REQUEST_TELEPORT, NULL, NULL, NULL, NULL, NULL, NULL);
	ChangeGameMode(DEF_GAMEMODE_ONWAITINGINITDATA);
}

void CGame::DrawDialogBox_Commander(int msX, int msY) // Snoopy: Fixed for 351
{
	short sX, sY, szX, szY, MapSzX, MapSzY;
	DWORD dwTime = G_dwGlobalTime;
	double dV1, dV2, dV3;
	int i, tX, tY;
	sX = m_stDialogBoxInfo[36].sX;
	sY = m_stDialogBoxInfo[36].sY;
	szX = m_stDialogBoxInfo[36].sSizeX;
	if ((dwTime - m_dwCommanderCommandRequestedTime) > 1000 * 10)
	{
		_RequestMapStatus("middleland", 3);
		_RequestMapStatus("middleland", 1);
		m_dwCommanderCommandRequestedTime = dwTime;
	}

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY - 5, 0, FALSE, m_bDialogTrans); // Main image
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 15, FALSE, m_bDialogTrans);

	switch (m_stDialogBoxInfo[36].cMode) {
		case 0: // Main dlg
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 340, 3, dwTime); // btn
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 340, 1, dwTime); // btn
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 340, 2, dwTime); // btn
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 340, 30, dwTime); // Btn TP
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime); // btn ?
			//PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_COMMANDER1);//"Middleland warfare building structure situation"
			PutAlignedString(sX, sX + szX, sY + 37, DRAW_DIALOGBOX_COMMANDER1);//"Middleland warfare building structure situation"

			if ((msX >= sX + 20) && (msX <= sX + 20 + 46)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 340, 17, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER2, 255, 255, 255);//"Middleland teleport position set"
			}
			else if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 340, 15, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER3, 255, 255, 255);//"Teleport to the selected area"
			}
			else if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 46 + 100)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52)) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 340, 16, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER4, 255, 255, 255);//"Recall warfare units"
			}
			else if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 46 + 150)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 340, 24, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER5, 255, 255, 255);//"Middleland construction building set"
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER6, 255, 255, 255);//"Commander's duty help"
			}
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY, 21, FALSE, m_bDialogTrans);// Map
			break;

		case 1: // Set TP
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 20, dwTime); //btn <-
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime);  //btn ?
			PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_COMMANDER7); // "Click and select the teleport location."

			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 19, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER8, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER9, 255, 255, 255);
			}
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY, 21, FALSE, m_bDialogTrans);

			if ((msX >= sX + 15) && (msX <= sX + 15 + 278)
				&& (msY >= sY + 60) && (msY <= sY + 60 + 272)) // shows TP posit on map following the mouse
			{
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, msX, msY, 42, FALSE, TRUE);
			}
			break;

		case 2: // Use TP
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 340, 1, dwTime);       // Btn TP
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 20, dwTime); // Btn <-
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime);  // Btn ?
			PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_COMMANDER10); // "Teleport to the selected area"

			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 340, 15, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER11, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 19, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER12, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER13, 255, 255, 255);
			}
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY, 21, FALSE, m_bDialogTrans);
			break;

		case 3: // Choose summon
			if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == TRUE))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 220, 6, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 220, 5, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 220, 7, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 220, 35, dwTime);
			}
			else if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == FALSE))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 220, 9, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 220, 8, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 220, 7, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 220, 35, dwTime);
			}
			else if (Assasain)
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 220, 6, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 220, 8, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 220, 7, dwTime);
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 220, 35, dwTime);
			}
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 20, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime);

			PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_COMMANDER14); // "Recall warfare units"

			wsprintf(G_cTxt, "%s %d", DRAW_DIALOGBOX_COMMANDER15, DecriptInt(m_iConstructionPoint));
			PutAlignedString(sX, sX + 323, sY + 190, G_cTxt);

			if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == TRUE))
			{
				if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 3000)
					{
						m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 220, 11, dwTime);
					}
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER16, 255, 255, 255);//"�(Battle Golem)"
					PutString2(msX + 20, msY + 50, DRAW_DIALOGBOX_COMMANDER17, 255, 255, 255);//"3000"
				}
				else if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 50 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 2000)
					{
						m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 220, 10, dwTime);
					}
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER18, 255, 255, 255);//"(Temple Knight)"
					PutString2(msX + 20, msY + 50, DRAW_DIALOGBOX_COMMANDER19, 255, 255, 255);//"2000"
				}
				else if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 100 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 1000)
					{
						m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 220, 12, dwTime);
					}
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER20, 255, 255, 255);//"(Light War Beetle)"
					PutString2(msX + 20, msY + 50, DRAW_DIALOGBOX_COMMANDER21, 255, 255, 255);//" 1000"
				}
				else if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 150 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 5000)
					{
						m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 220, 29, dwTime);
					}
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER22, 255, 255, 255);//"(Catapult)"
					PutString2(msX + 20, msY + 50, DRAW_DIALOGBOX_COMMANDER23, 255, 255, 255);// 1500"
				}
				else if ((msX >= sX + 20) && (msX <= sX + 380) && (msY > sY + 140) && (msY < sY + 160))
				{
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER24, 255, 255, 255);
				}
				else if ((msX >= sX + 20) && (msX <= sX + 380) && (msY > sY + 160) && (msY < sY + 175))
				{
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER25, 255, 255, 255);
				}
				else if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
					&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
				{
					m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 19, dwTime);
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER26, 255, 255, 255);
				}
				else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
					&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
				{
					m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER27, 255, 255, 255); //"Warfare units recall related help"
				}
			}
			else if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == FALSE))
			{
				if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 3000)
					{
						m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 220, 14, dwTime);
					}
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER28, 255, 255, 255);//"(God's Hand Knight Cavalry)"
					PutString2(msX + 20, msY + 50, DRAW_DIALOGBOX_COMMANDER29, 255, 255, 255);//"3000"
				}
				else if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 50 + 45)
					&& (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 2000)
					{
						m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 220, 13, dwTime);
					}
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER30, 255, 255, 255);//"�(God's Hand Knight)"
					PutString2(msX + 20, msY + 50, DRAW_DIALOGBOX_COMMANDER31, 255, 255, 255);//"2000"
				}
				else if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 100 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 1000)
					{
						m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 220, 12, dwTime);
					}
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER32, 255, 255, 255);//"(Light War Beetle)"
					PutString2(msX + 20, msY + 50, DRAW_DIALOGBOX_COMMANDER33, 255, 255, 255);//" 1000"
				}
				else if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 150 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					if (DecriptInt(m_iConstructionPoint) >= 5000)
					{
						m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 220, 29, dwTime);
					}
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER34, 255, 255, 255);//"(Catapult)"
					PutString2(msX + 20, msY + 50, DRAW_DIALOGBOX_COMMANDER35, 255, 255, 255);//" 1500"
				}
				else if ((msX >= sX + 20) && (msX <= sX + 380) && (msY > sY + 140) && (msY < sY + 160))
				{
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER36, 255, 255, 255);
				}
				else if ((msX >= sX + 20) && (msX <= sX + 380) && (msY > sY + 160) && (msY < sY + 175))
				{
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER37, 255, 255, 255);
				}
				else if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
					&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
				{
					m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 19, dwTime);
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER38, 255, 255, 255);

				}
				else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
					&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
				{
					m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER39, 255, 255, 255);
				}
			}
			PutAlignedString(sX, sX + 323, sY + 80, DRAW_DIALOGBOX_COMMANDER40);
			PutAlignedString(sX, sX + 323, sY + 95, DRAW_DIALOGBOX_COMMANDER41);
			PutAlignedString(sX, sX + 323, sY + 110, DRAW_DIALOGBOX_COMMANDER42);

			switch (m_stDialogBoxInfo[36].sV1) {
				case 0:
					PutAlignedString(sX, sX + 323, sY + 140, DRAW_DIALOGBOX_COMMANDER43, 255, 255, 255);//"Guard Mode"
					PutAlignedString(sX, sX + 323, sY + 160, DRAW_DIALOGBOX_COMMANDER44, 4, 0, 50);//"Hold Mode"
					break;
				case 1:
					PutAlignedString(sX, sX + 323, sY + 140, DRAW_DIALOGBOX_COMMANDER43, 4, 0, 50);//"Guard Mode"
					PutAlignedString(sX, sX + 323, sY + 160, DRAW_DIALOGBOX_COMMANDER44, 255, 255, 255);//"Hold Mode"
					break;
			}
			break;

		case 4: // Set Construction point
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 20, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime);
			PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_COMMANDER47); // "Select the construction area and click."

			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 19, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER48, 255, 255, 255); // "Returns to commander's main menu"
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_COMMANDER49, 255, 255, 255); // "Construction area set related help"
			}
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY, 21);
			if ((msX >= sX + 15) && (msX <= sX + 15 + 278)
				&& (msY >= sY + 60) && (msY <= sY + 60 + 272)) // shows posit on map following the mouse
			{
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, msX, msY, 41, FALSE, TRUE);
			}
			break;
	}

	switch (m_stDialogBoxInfo[36].cMode) {
		case 0: // Main
		case 1: // Set TP
		case 2: // Use TP
		case 4: // Set construc
			szX = NULL;
			szY = NULL;
			MapSzX = NULL;
			MapSzY = NULL;
			if (strcmp(m_cStatusMapName, "aresden") == 0)
			{
				szX = 250;
				szY = 250;
			}
			else if (strcmp(m_cStatusMapName, "elvine") == 0)
			{
				szX = 250;
				szY = 250;
			}
			else if (strcmp(m_cStatusMapName, "middleland") == 0)
			{
				szX = 279;
				szY = 280;
				MapSzX = 524;
				MapSzY = 524;
			}
			if (szX != NULL)
			{
				for (i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++)
					if (m_stCrusadeStructureInfo[i].cType != NULL)
					{
						dV1 = (double)MapSzX;
						dV2 = (double)m_stCrusadeStructureInfo[i].sX;
						dV3 = (dV2*(double)szX) / dV1;
						tX = (int)dV3;
						dV1 = (double)MapSzY;
						dV2 = (double)m_stCrusadeStructureInfo[i].sY;
						dV3 = (dV2*(double)szY) / dV1;
						tY = (int)dV3;
						switch (m_stCrusadeStructureInfo[i].cType) {
							case 38:
								if (m_stCrusadeStructureInfo[i].cSide == 1)
									DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 39, FALSE, TRUE); // Base
								else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 37, FALSE, TRUE);
								break;
							case 36:
							case 37:
							case 39:
								if (m_stCrusadeStructureInfo[i].cSide == 1)
									DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 38, FALSE, TRUE); // Base
								else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 36, FALSE, TRUE);
								break;
							case 42:
								DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 40); // ManaStone
								break;
						}
					}
				if (DecriptInt(m_iTeleportLocX) != -1)
				{
					dV1 = (double)MapSzX;
					dV2 = (double)DecriptInt(m_iTeleportLocX);
					dV3 = (dV2*(double)szX) / dV1;
					tX = (int)dV3;
					dV1 = (double)MapSzY;
					dV2 = (double)DecriptInt(m_iTeleportLocY);
					dV3 = (dV2*(double)szY) / dV1;
					tY = (int)dV3;
					if ((m_stDialogBoxInfo[36].cMode == 1) && (tY >= 30) && (tY <= 494)) // Place the TP
					{
						DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 42, FALSE, TRUE); //TP
					}
					else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 42, FALSE, TRUE); //TP
				}
				if ((m_stDialogBoxInfo[36].cMode != 2) && (DecriptInt(m_iConstructLocX) != -1))
				{
					dV1 = (double)MapSzX;
					dV2 = (double)DecriptInt(m_iConstructLocX);
					dV3 = (dV2*(double)szX) / dV1;
					tX = (int)dV3;
					dV1 = (double)MapSzY;
					dV2 = (double)DecriptInt(m_iConstructLocY);
					dV3 = (dV2*(double)szY) / dV1;
					tY = (int)dV3;
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 41, FALSE, TRUE); // Contr pt
				}

				DecriptString(m_cMapName);
				if (strcmp(m_cMapName, "middleland") == 0)
				{
					dV1 = (double)MapSzX;//m_pMapData->m_sMapSizeX;
					dV2 = (double)m_sPlayerX;
					dV3 = (dV2*(double)szX) / dV1;
					tX = (int)dV3;
					dV1 = (double)MapSzY;//m_pMapData->m_sMapSizeY;
					dV2 = (double)m_sPlayerY;
					dV3 = (dV2*(double)szY) / dV1;
					tY = (int)dV3;
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 43); // Player place
				}
				EncriptString(m_cMapName);
			}
			if (m_stDialogBoxInfo[36].cMode != 3)
			{
				if ((msX >= sX + 15) && (msX <= sX + 15 + 278)
					&& (msY >= sY + 60) && (msY <= sY + 60 + 272)) // Draw mouse coordinates
				{
					dV1 = (double)(msX - (sX + 15));
					dV2 = (double)MapSzX;//(752.0f);
					dV3 = (dV2*dV1) / szX;//280.0f;
					tX = (int)dV3;
					dV1 = (double)(msY - (sY + 60));
					dV2 = (double)MapSzX;//(680.0f);
					dV3 = (dV2*dV1) / szY;//253.0f;
					tY = (int)dV3;
					if (tX < 30) tX = 30;
					if (tY < 30) tY = 30;
					if (tX > MapSzX - 30) tX = MapSzX - 30;
					if (tY > MapSzY - 30) tY = MapSzY - 30;
					wsprintf(G_cTxt, "%d,%d", tX, tY);
					PutString_SprFont3(msX + 10, msY - 10, G_cTxt, m_wR[13] * 4, m_wG[13] * 4, m_wB[13] * 4, FALSE, 2);
				}
			}
			break;
	}
}

void CGame::DrawDialogBox_Constructor(int msX, int msY) // Snoopy: Fixed for 351
{
	short sX, sY, szX, szY, MapSzX, MapSzY;
	DWORD dwTime = G_dwGlobalTime;
	double dV1, dV2, dV3;
	int tX, tY;
	char cMapName[12];
	sX = m_stDialogBoxInfo[37].sX;
	sY = m_stDialogBoxInfo[37].sY;
	szX = m_stDialogBoxInfo[37].sSizeX;
	if ((dwTime - m_dwCommanderCommandRequestedTime) > 1000 * 10)
	{
		_RequestMapStatus("middleland", 1);
		m_dwCommanderCommandRequestedTime = dwTime;
	}

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY - 5, 0, FALSE, m_bDialogTrans); // Main image
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 16, FALSE, m_bDialogTrans);

	switch (m_stDialogBoxInfo[37].cMode) {
		case 0: // Main dlg
			if (DecriptInt(m_iConstructLocX) != -1)
			{
				ZeroMemory(cMapName, sizeof(cMapName));
				DecriptString(m_cGameServerName);
				GetOfficialMapName(m_cConstructMapName, cMapName);
				EncriptString(m_cGameServerName);
				wsprintf(G_cTxt, DRAW_DIALOGBOX_CONSTRUCTOR1, cMapName, DecriptInt(m_iConstructLocX), DecriptInt(m_iConstructLocY));
				PutAlignedString(sX, sX + szX, sY + 40, G_cTxt);
			}
			else PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_CONSTRUCTOR2); //"Construction unavailable: Unable to construct"
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY, 21, FALSE, m_bDialogTrans); // Map

			if ((msX >= sX + 20) && (msX <= sX + 20 + 46)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 340, 24, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 340, 30, dwTime);

			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 340, 15, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 340, 1, dwTime);

			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime);

			if ((msX >= sX + 20) && (msX <= sX + 20 + 46)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR3, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50)
				&& (msY >= sY + 322) && (msY <= sY + 322 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR4, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 322) && (msY <= sY + 322 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR5, 255, 255, 255);
			}
			break;

		case 1: // Select building
			PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_CONSTRUCTOR6); //"Select war building"
			PutAlignedString(sX, sX + 323, sY + 80, DRAW_DIALOGBOX_CONSTRUCTOR7); //"Constructs the war building here."
			PutAlignedString(sX, sX + 323, sY + 95, DRAW_DIALOGBOX_CONSTRUCTOR8); //"Press the building icon and"
			PutAlignedString(sX, sX + 323, sY + 110, DRAW_DIALOGBOX_CONSTRUCTOR9); //"the base will be formed and slowly finished"
			PutAlignedString(sX, sX + 323, sY + 125, DRAW_DIALOGBOX_CONSTRUCTOR10);//"Attack the building with Pickaxe."
			PutAlignedString(sX, sX + 323, sY + 140, DRAW_DIALOGBOX_CONSTRUCTOR11);//"Building is not activated"
			PutAlignedString(sX, sX + 323, sY + 155, DRAW_DIALOGBOX_CONSTRUCTOR12);//"while constructing."

			if (!Assasain)
			{
				if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 220, 27, dwTime);
				}
				else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 220, 33, dwTime);
			}

			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 50 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 220, 28, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 220, 34, dwTime);

			if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 100 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 220, 26, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100, sY + 220, 32, dwTime);

			if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 150 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 220, 25, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150, sY + 220, 31, dwTime);

			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 322) && (msY <= sY + 322 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 322, 19, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 322, 20, dwTime);

			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 322) && (msY <= sY + 322 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 322, 18, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 322, 4, dwTime);

			if (!Assasain)
				if ((msX >= sX + 20) && (msX <= sX + 20 + 46) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
				{
					PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR13, 255, 255, 255);//"(Mana Collector)"
				}
			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 50 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR14, 255, 255, 255);//"(Detector)"
			}
			else if ((msX >= sX + 20 + 100) && (msX <= sX + 20 + 100 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR15, 255, 255, 255);//"(Arrow Guard Tower)"
			}
			else if ((msX >= sX + 20 + 150) && (msX <= sX + 20 + 150 + 45) && (msY >= sY + 220) && (msY <= sY + 220 + 50))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR16, 255, 255, 255);//(Cannon Guard Tower)"
			}
			else if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50) && (msY >= sY + 322) && (msY <= sY + 322 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR17, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74) && (msY >= sY + 322) && (msY <= sY + 322 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR18, 255, 255, 255);
			}
			break;

		case 2: // Teleport
			PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_CONSTRUCTOR19); //"Teleport to position that commander pointed"
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY, 21, FALSE, m_bDialogTrans); // map

			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 340, 15, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 50, sY + 340, 1, dwTime);

			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 19, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 100 + 74, sY + 340, 20, dwTime);

			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime);

			if ((msX >= sX + 20 + 50) && (msX <= sX + 20 + 46 + 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR20, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR21, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_CONSTRUCTOR22, 255, 255, 255);
			}
			break;
	}

	switch (m_stDialogBoxInfo[37].cMode) {
		case 0: // Main dlg
		case 2: // TP
			szX = NULL;
			szY = NULL;
			MapSzX = NULL;
			MapSzY = NULL;
			if (strcmp(m_cStatusMapName, "aresden") == 0)
			{
				szX = 250;
				szY = 250;
			}
			else if (strcmp(m_cStatusMapName, "elvine") == 0)
			{
				szX = 250;
				szY = 250;
			}
			else if (strcmp(m_cStatusMapName, "middleland") == 0)
			{
				szX = 279;
				szY = 280;
				MapSzX = 524;
				MapSzY = 524;
			}
			if (szX != 0)
			{
				for (int i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++)
					if (m_stCrusadeStructureInfo[i].cType == 42)
					{
						dV1 = (double)MapSzX;
						dV2 = (double)m_stCrusadeStructureInfo[i].sX;
						dV3 = (dV2*(double)szX) / dV1;
						tX = (int)dV3;
						dV1 = (double)MapSzY;
						dV2 = (double)m_stCrusadeStructureInfo[i].sY;
						dV3 = (dV2*(double)szY) / dV1;
						tY = (int)dV3;
						switch (m_stCrusadeStructureInfo[i].cType) {
							case 42:
								DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 40); // ManaStone
								break;
						}
					}
				if (DecriptInt(m_iTeleportLocX) != -1)
				{
					dV1 = (double)MapSzX;
					dV2 = (double)DecriptInt(m_iTeleportLocX);
					dV3 = (dV2*(double)szX) / dV1;
					tX = (int)dV3;
					dV1 = (double)MapSzY;
					dV2 = (double)DecriptInt(m_iTeleportLocY);
					dV3 = (dV2*(double)szY) / dV1;
					tY = (int)dV3;
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 42, FALSE, TRUE); //TP
				}
				if ((m_stDialogBoxInfo[37].cMode != 2) && (DecriptInt(m_iConstructLocX) != -1))
				{
					dV1 = (double)MapSzX;
					dV2 = (double)DecriptInt(m_iConstructLocX);
					dV3 = (dV2*(double)szX) / dV1;
					tX = (int)dV3;
					dV1 = (double)MapSzY;
					dV2 = (double)DecriptInt(m_iConstructLocY);
					dV3 = (dV2*(double)szY) / dV1;
					tY = (int)dV3;
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 41, FALSE, TRUE); // Contr pt
				}

				DecriptString(m_cMapName);
				if (strcmp(m_cMapName, "middleland") == 0)
				{
					dV1 = (double)MapSzX;//m_pMapData->m_sMapSizeX;
					dV2 = (double)m_sPlayerX;
					dV3 = (dV2*(double)szX) / dV1;
					tX = (int)dV3;
					dV1 = (double)MapSzY;//m_pMapData->m_sMapSizeY;
					dV2 = (double)m_sPlayerY;
					dV3 = (dV2*(double)szY) / dV1;
					tY = (int)dV3;
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 43); // Player place
				}
				EncriptString(m_cMapName);
			}
			if ((msX >= sX + 15) && (msX <= sX + 15 + 278)
				&& (msY >= sY + 60) && (msY <= sY + 60 + 272))  // Draw mouse coordinates
			{
				dV1 = (double)(msX - (sX + 15));
				dV2 = (double)MapSzX;//(752.0f);
				dV3 = (dV2*dV1) / szX;//280.0f;
				tX = (int)dV3;
				dV1 = (double)(msY - (sY + 60));
				dV2 = (double)MapSzX;//(680.0f);
				dV3 = (dV2*dV1) / szY;//253.0f;
				tY = (int)dV3;
				if (tX < 30) tX = 30;
				if (tY < 30) tY = 30;
				if (tX > MapSzX - 30) tX = MapSzX - 30;
				if (tY > MapSzY - 30) tY = MapSzY - 30;
				wsprintf(G_cTxt, "%d,%d", tX, tY);
				PutString_SprFont3(msX + 10, msY - 10, G_cTxt, m_wR[13] * 4, m_wG[13] * 4, m_wB[13] * 4, FALSE, 2);
			}
			break;
	}
}

void CGame::DrawDialogBox_Soldier(int msX, int msY) // Snoopy: Fixed for 351
{
	short sX, sY, szX, szY, MapSzX, MapSzY;
	DWORD dwTime = G_dwGlobalTime;
	char cMapName[120];
	double dV1, dV2, dV3;
	int tX, tY;
	sX = m_stDialogBoxInfo[38].sX;
	sY = m_stDialogBoxInfo[38].sY;
	szX = m_stDialogBoxInfo[38].sSizeX;
	if ((dwTime - m_dwCommanderCommandRequestedTime) > 1000 * 10)
	{
		_RequestMapStatus("middleland", 1);
		m_dwCommanderCommandRequestedTime = dwTime;
	}

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY - 5, 0, FALSE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY, 21, FALSE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 17, FALSE, m_bDialogTrans); // Crusade Soldier Menu Text

	switch (m_stDialogBoxInfo[38].cMode) {
		case 0: // Main dlg, Map
			if (DecriptInt(m_iTeleportLocX) != -1)
			{
				ZeroMemory(cMapName, sizeof(cMapName));
				GetOfficialMapName(m_cTeleportMapName, cMapName);
				wsprintf(G_cTxt, DRAW_DIALOGBOX_SOLDIER1, cMapName, DecriptInt(m_iTeleportLocX), DecriptInt(m_iTeleportLocY));
				PutAlignedString(sX, sX + szX, sY + 40, G_cTxt);					// "Teleport position: %s near %d, %d"
			}
			else PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_SOLDIER2); //"Teleport position is not set."

			if ((msX >= sX + 20) && (msX <= sX + 20 + 46)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 340, 15, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 340, 1, dwTime);

			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime);

			if ((msX >= sX + 20) && (msX <= sX + 20 + 46)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_SOLDIER3, 255, 255, 255); // "Teleport to position that commander pointed"
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_SOLDIER4, 255, 255, 255); // "Help for soldier"
			}
			break;

		case 1: // TP now
			PutAlignedString(sX, sX + szX, sY + 40, DRAW_DIALOGBOX_SOLDIER5); // "Teleport to position that commander pointed"
			if ((msX >= sX + 20) && (msX <= sX + 20 + 46)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 340, 15, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20, sY + 340, 1, dwTime);

			if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74 - 50, sY + 340, 19, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74 - 50, sY + 340, 20, dwTime);

			if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 18, dwTime);
			}
			else m_pSprite[DEF_SPRID_INTERFACE_ND_CRUSADE]->PutSpriteFast(sX + 20 + 150 + 74, sY + 340, 4, dwTime);

			if ((msX >= sX + 20) && (msX <= sX + 20 + 46)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_SOLDIER6, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74 - 50) && (msX <= sX + 20 + 46 + 150 + 74 - 50)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_SOLDIER7, 255, 255, 255);
			}
			else if ((msX >= sX + 20 + 150 + 74) && (msX <= sX + 20 + 46 + 150 + 74)
				&& (msY >= sY + 340) && (msY <= sY + 340 + 52))
			{
				PutString2(msX + 20, msY + 35, DRAW_DIALOGBOX_SOLDIER8, 255, 255, 255);//"Help for teleport"
			}
			break;
	}

	switch (m_stDialogBoxInfo[38].cMode) {
		case 0: // Main
		case 1: // TP
			szX = NULL;
			szY = NULL;
			MapSzX = NULL;
			MapSzY = NULL;
			if (strcmp(m_cStatusMapName, "aresden") == 0)
			{
				szX = 250;
				szY = 250;
			}
			else if (strcmp(m_cStatusMapName, "elvine") == 0)
			{
				szX = 250;
				szY = 250;
			}
			else if (strcmp(m_cStatusMapName, "middleland") == 0)
			{
				szX = 279;
				szY = 280;	  // Fix for ML
				MapSzX = 524; // Fix for ML
				MapSzY = 524; // Fix for ML
			}
			if (szX != 0)
			{
				for (int i = 0; i < DEF_MAXCRUSADESTRUCTURES; i++)
					if (m_stCrusadeStructureInfo[i].cType == 42)
					{
						dV1 = (double)MapSzX;
						dV2 = (double)m_stCrusadeStructureInfo[i].sX;
						dV3 = (dV2*(double)szX) / dV1;
						tX = (int)dV3;
						dV1 = (double)MapSzY;
						dV2 = (double)m_stCrusadeStructureInfo[i].sY;
						dV3 = (dV2*(double)szY) / dV1;
						tY = (int)dV3;
						switch (m_stCrusadeStructureInfo[i].cType) {
							case 42:
								DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 40); // ManaStone
								break;
						}
					}
				if (DecriptInt(m_iTeleportLocX) != -1)
				{
					dV1 = (double)MapSzX;
					dV2 = (double)DecriptInt(m_iTeleportLocX);
					dV3 = (dV2*(double)szX) / dV1;
					tX = (int)dV3;
					dV1 = (double)MapSzY;
					dV2 = (double)DecriptInt(m_iTeleportLocY);
					dV3 = (dV2*(double)szY) / dV1;
					tY = (int)dV3;
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 42, FALSE, TRUE); //TP
				}

				DecriptString(m_cMapName);
				if (strcmp(m_cMapName, "middleland") == 0)
				{
					dV1 = (double)MapSzX;//m_pMapData->m_sMapSizeX;
					dV2 = (double)m_sPlayerX;
					dV3 = (dV2*(double)szX) / dV1;
					tX = (int)dV3;
					dV1 = (double)MapSzY;//m_pMapData->m_sMapSizeY;
					dV2 = (double)m_sPlayerY;
					dV3 = (dV2*(double)szY) / dV1;
					tY = (int)dV3;
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX + tX + 15, sY + tY + 60, 43); // Player place
				}
				EncriptString(m_cMapName);
			}
			if ((msX >= sX + 15) && (msX <= sX + 15 + 278)
				&& (msY >= sY + 60) && (msY <= sY + 60 + 272))  // Draw mouse coordinates
			{
				dV1 = (double)(msX - (sX + 15));
				dV2 = (double)MapSzX;//(752.0f);
				dV3 = (dV2*dV1) / szX;//280.0f;
				tX = (int)dV3;
				dV1 = (double)(msY - (sY + 60));
				dV2 = (double)MapSzX;//(680.0f);
				dV3 = (dV2*dV1) / szY;//253.0f;
				tY = (int)dV3;
				if (tX < 30) tX = 30;
				if (tY < 30) tY = 30;
				if (tX > MapSzX - 30) tX = MapSzX - 30;
				if (tY > MapSzY - 30) tY = MapSzY - 30;
				wsprintf(G_cTxt, "%d,%d", tX, tY);
				PutString_SprFont3(msX + 10, msY - 10, G_cTxt, m_wR[13] * 4, m_wG[13] * 4, m_wB[13] * 4, FALSE, 2);
			}
			break;
	}
}

void CGame::GrandMagicResult(char *pMapName, int iV1, int iV2, int iV3, int iV4, int iHP1, int iHP2, int iHP3, int iHP4)
{
	int i, iTxtIdx = 0;
	char cTemp[120];

	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
	{
		if (m_pMsgTextList[i] != NULL)
			delete m_pMsgTextList[i];
		m_pMsgTextList[i] = NULL;
	}

	for (i = 0; i < 92; i++)
		if (m_pGameMsgList[i] == NULL) return;

	if (strcmp(pMapName, "aresden") == 0)
	{
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[2]->m_pMsg, NULL);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[3]->m_pMsg, NULL);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, " ", NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d", m_pGameMsgList[4]->m_pMsg, iV1);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d", m_pGameMsgList[5]->m_pMsg, iV2);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d", m_pGameMsgList[6]->m_pMsg, iV3);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d", m_pGameMsgList[58]->m_pMsg, iV4);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, " ", NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d %d %d %d", NOTIFY_MSG_STRUCTURE_HP, iHP1, iHP2, iHP3, iHP4);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, " ", NULL);

		if (iV2 == 0) {
			if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == FALSE))
			{
				PlaySound('E', 25, 0, 0);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[59]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[60]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[61]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[62]->m_pMsg, NULL);
				for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
			}
			else if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == TRUE))
			{
				PlaySound('E', 25, 0, 0);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[69]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[70]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[71]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[72]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[73]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[74]->m_pMsg, NULL);
				for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
			}
			else PlaySound('E', 25, 0, 0);
		}
		else
		{
			if (iV1 != 0)
			{
				if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == FALSE))
				{
					PlaySound('E', 23, 0, 0);
					PlaySound('C', 21, 0, 0);
					PlaySound('C', 22, 0, 0);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[63]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[64]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[65]->m_pMsg, NULL);
					for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
				}
				else if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == TRUE))
				{
					PlaySound('E', 24, 0, 0);
					PlaySound('C', 12, 0, 0);
					PlaySound('C', 13, 0, 0);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[75]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[76]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[77]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[78]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[79]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[80]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[81]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[82]->m_pMsg, NULL);
					for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
				}
				else PlaySound('E', 25, 0, 0);
			}
			else
			{
				if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == FALSE))
				{
					PlaySound('E', 23, 0, 0);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[66]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[67]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[68]->m_pMsg, NULL);
					for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
				}
				else if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == TRUE))
				{
					PlaySound('E', 24, 0, 0);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[83]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[84]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[85]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[86]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[87]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[88]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[89]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[90]->m_pMsg, NULL);
					for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
				}
				else PlaySound('E', 25, 0, 0);
			}
		}
	}
	else if (strcmp(pMapName, "elvine") == 0)
	{
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[7]->m_pMsg, NULL);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[8]->m_pMsg, NULL);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, " ", NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d", m_pGameMsgList[4]->m_pMsg, iV1);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d", m_pGameMsgList[5]->m_pMsg, iV2);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d", m_pGameMsgList[6]->m_pMsg, iV3);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d", m_pGameMsgList[58]->m_pMsg, iV4);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, " ", NULL);

		ZeroMemory(cTemp, sizeof(cTemp));
		wsprintf(cTemp, "%s %d %d %d %d", NOTIFY_MSG_STRUCTURE_HP, iHP1, iHP2, iHP3, iHP4);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, cTemp, NULL);
		m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, " ", NULL);

		if (iV2 == 0) {
			if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == TRUE))
			{
				PlaySound('E', 25, 0, 0);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[59]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[60]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[61]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[62]->m_pMsg, NULL);
				for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
			}
			else if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == FALSE))
			{
				PlaySound('E', 25, 0, 0);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[69]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[70]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[71]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[72]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[73]->m_pMsg, NULL);
				m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[74]->m_pMsg, NULL);
				for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
			}
			else PlaySound('E', 25, 0, 0);
		}
		else
		{
			if (iV1 != 0) {
				if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == TRUE))
				{
					PlaySound('E', 23, 0, 0);
					PlaySound('C', 21, 0, 0);
					PlaySound('C', 22, 0, 0);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[63]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[64]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[65]->m_pMsg, NULL);
					for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
				}
				else if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == FALSE))
				{
					PlaySound('E', 24, 0, 0);
					PlaySound('C', 12, 0, 0);
					PlaySound('C', 13, 0, 0);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[75]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[76]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[77]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[78]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[79]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[80]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[81]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[82]->m_pMsg, NULL);
					for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
				}
				else PlaySound('E', 25, 0, 0);
			}
			else
			{
				if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == TRUE))
				{
					PlaySound('E', 23, 0, 0);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[66]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[67]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[68]->m_pMsg, NULL);
					for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
				}
				else if ((DecriptBool(m_bCitizen) == TRUE) && (DecriptBool(m_bAresden) == FALSE))
				{
					PlaySound('E', 24, 0, 0);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[83]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[84]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[85]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[86]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[87]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[88]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[89]->m_pMsg, NULL);
					m_pMsgTextList[iTxtIdx++] = new class CMsg(NULL, m_pGameMsgList[90]->m_pMsg, NULL);
					for (i = iTxtIdx; i < 18; i++) m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
				}
				else PlaySound('E', 25, 0, 0);
			}
		}
	}

	EnableDialogBox(18, NULL, NULL, NULL);
}

void CGame::DrawDialogBox_Help(int msX, int msY)
{
	short sX, sY, szX;

	sX = m_stDialogBoxInfo[35].sX;
	sY = m_stDialogBoxInfo[35].sY;
	szX = m_stDialogBoxInfo[35].sSizeX;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);

	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 0) && (msY < sY + 50 + 15 * 1))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 0, DRAW_DIALOGBOX_HELP2, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 0, DRAW_DIALOGBOX_HELP2, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 1) && (msY < sY + 50 + 15 * 2))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 1, DRAW_DIALOGBOX_HELP1, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 1, DRAW_DIALOGBOX_HELP1, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 2) && (msY < sY + 50 + 15 * 3))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 2, DRAW_DIALOGBOX_HELP3, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 2, DRAW_DIALOGBOX_HELP3, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 3) && (msY < sY + 50 + 15 * 4))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 3, DRAW_DIALOGBOX_HELP4, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 3, DRAW_DIALOGBOX_HELP4, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 4) && (msY < sY + 50 + 15 * 5))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 4, DRAW_DIALOGBOX_HELP5, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 4, DRAW_DIALOGBOX_HELP5, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 5) && (msY < sY + 50 + 15 * 6))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 5, DRAW_DIALOGBOX_HELP6, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 5, DRAW_DIALOGBOX_HELP6, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 6) && (msY < sY + 50 + 15 * 7))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 6, DRAW_DIALOGBOX_HELP7, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 6, DRAW_DIALOGBOX_HELP7, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 7) && (msY < sY + 50 + 15 * 8))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 7, DRAW_DIALOGBOX_HELP8, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 7, DRAW_DIALOGBOX_HELP8, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 8) && (msY < sY + 50 + 15 * 9))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 8, DRAW_DIALOGBOX_HELP9, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 8, DRAW_DIALOGBOX_HELP9, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 9) && (msY < sY + 50 + 15 * 10))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 9, DRAW_DIALOGBOX_HELP10, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 9, DRAW_DIALOGBOX_HELP10, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 10) && (msY < sY + 50 + 15 * 11))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 10, DRAW_DIALOGBOX_HELP11, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 10, DRAW_DIALOGBOX_HELP11, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 11) && (msY < sY + 50 + 15 * 12))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 11, DRAW_DIALOGBOX_HELP12, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 11, DRAW_DIALOGBOX_HELP12, 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 12) && (msY < sY + 50 + 15 * 13))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 12, "F.A.Q.", 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 12, "F.A.Q.", 4, 0, 50);
	if ((msX >= sX + 25) && (msX <= sX + 248) && (msY >= sY + 50 + 15 * 13) && (msY < sY + 50 + 15 * 14))
		PutAlignedString(sX, sX + szX, sY + 50 + 15 * 13, DRAW_DIALOGBOX_HELP13, 255, 255, 255);
	else PutAlignedString(sX, sX + szX, sY + 50 + 15 * 13, DRAW_DIALOGBOX_HELP13, 4, 0, 50);

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
}

void CGame::DrawDialogBox_ItemUpgrade(int msX, int msY)
{
	int i, sX, sY, iValue;
	char cItemColor, cStr1[120], cStr2[120], cStr3[120];
	DWORD dwTime = timeGetTime();

	sX = m_stDialogBoxInfo[34].sX;
	sY = m_stDialogBoxInfo[34].sY;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 5); //Item Upgrade Text

	switch (m_stDialogBoxInfo[34].cMode) {
		case 1://Gizon box Drag item needed to be upgraded"
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 3);
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 30, DRAW_DIALOGBOX_ITEMUPGRADE1); // Drag item needed to be upgraded"
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 45, DRAW_DIALOGBOX_ITEMUPGRADE2); // "from the inventory. Then press"
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 60, DRAW_DIALOGBOX_ITEMUPGRADE3); // 'Upgrade' button."
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 46);
			wsprintf(G_cTxt, DRAW_DIALOGBOX_ITEMUPGRADE11, DecriptInt(m_iGizonItemUpgradeLeft));		// "Item upgrade point : %d"
			PutAlignedString(sX + 24, sX + 248, sY + 100, G_cTxt);
			if (m_stDialogBoxInfo[34].sV1 != -1)
			{
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 3);
				iValue = (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_dwAttribute & 0xF0000000) >> 28;
				iValue = iValue*(iValue + 6) / 8 + 2;
				if ((m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos >= 11)
					&& (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cItemType == 1))
				{
					if ((memcmp(m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cName, "AngelicPandent(STR)", 19) == 0)
						|| (memcmp(m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cName, "AngelicPandent(DEX)", 19) == 0)
						|| (memcmp(m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cName, "AngelicPandent(INT)", 19) == 0)
						|| (memcmp(m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cName, "AngelicPandent(MAG)", 19) == 0))
					{
						iValue = ((m_pItemList[m_stDialogBoxInfo[34].sV1]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sItemSpecEffectValue3;
						switch (iValue) {
							case 0:	iValue = 10; break;
							case 1: iValue = 11; break;
							case 2: iValue = 13; break;
							case 3: iValue = 16; break;
							case 4: iValue = 20; break;
							case 5: iValue = 25; break;
							case 6: iValue = 31; break;
							case 7: iValue = 38; break;
							case 8: iValue = 46; break;
							case 9: iValue = 55; break;
							case 10: iValue = 57; break;
							case 11: iValue = 59; break;
							case 12: iValue = 61; break;
							case 13: iValue = 63; break;
							case 14: iValue = 65; break;
							case 15: iValue = 67; break;
							case 16: iValue = 69; break;
							case 17: iValue = 71; break;
							case 18: iValue = 73; break;
							case 19: iValue = 75; break;
						}
					}
				}
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ITEMUPGRADE12, iValue); //"Needed upgrade point : %d"
				if (DecriptInt(m_iGizonItemUpgradeLeft) < iValue)
					PutAlignedString(sX + 24, sX + 248, sY + 115, G_cTxt, 195, 25, 25);
				else PutAlignedString(sX + 24, sX + 248, sY + 115, G_cTxt);
				i = m_stDialogBoxInfo[34].sV1;
				cItemColor = m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cItemColor;
				if ((m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
				}
				else
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
				}
				ZeroMemory(cStr1, sizeof(cStr1));
				ZeroMemory(cStr2, sizeof(cStr2));
				ZeroMemory(cStr3, sizeof(cStr3));
				GetItemName(m_pItemList[m_stDialogBoxInfo[34].sV1], cStr1, cStr2, cStr3);
				PutAlignedString(sX + 24, sX + 248, sY + 230 + 20, cStr1);
				PutAlignedString(sX + 24, sX + 248, sY + 245 + 20, cStr2);
				PutAlignedString(sX + 24, sX + 248, sY + 260 + 20, cStr3);
				if (DecriptInt(m_iGizonItemUpgradeLeft) < iValue)
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 46);
				else
				{
					if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
						DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 47);
					else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 46);
				}
			}
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 46);
			// Cancel
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 2: // in progress
			PutAlignedString(sX + 24, sX + 248, sY + 55 + 30 + 282 - 117 - 170, DRAW_DIALOGBOX_ITEMUPGRADE5);
			PutAlignedString(sX + 24, sX + 248, sY + 55 + 45 + 282 - 117 - 170, DRAW_DIALOGBOX_ITEMUPGRADE6);
			if (m_stDialogBoxInfo[34].sV1 != -1)
			{
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 3);
				i = m_stDialogBoxInfo[34].sV1;
				cItemColor = m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cItemColor;
				if ((m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182
						, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
				}
				else
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182
						, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
				}
				if ((rand() % 5) == 0) m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutTransSprite25(sX + 134, sY + 182, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, dwTime);
				ZeroMemory(cStr1, sizeof(cStr1));
				ZeroMemory(cStr2, sizeof(cStr2));
				ZeroMemory(cStr3, sizeof(cStr3));
				GetItemName(m_pItemList[m_stDialogBoxInfo[34].sV1], cStr1, cStr2, cStr3);
				PutAlignedString(sX + 24, sX + 248, sY + 230 + 20, cStr1);
				PutAlignedString(sX + 24, sX + 248, sY + 245 + 20, cStr2);
				PutAlignedString(sX + 24, sX + 248, sY + 260 + 20, cStr3);
			}
			if (((dwTime - m_stDialogBoxInfo[34].dwV1) / 1000 > 4) && (m_stDialogBoxInfo[34].dwV1 != NULL))
			{
				m_stDialogBoxInfo[34].dwV1 = NULL;
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_UPGRADEITEM, NULL, m_stDialogBoxInfo[34].sV1, NULL, NULL, NULL);
			}
			break;

		case 3: // Congratulations
			PutAlignedString(sX + 24, sX + 248, sY + 55 + 30 + 282 - 117 - 170, DRAW_DIALOGBOX_ITEMUPGRADE7);//"Congratulation! item upgrade"
			PutAlignedString(sX + 24, sX + 248, sY + 55 + 45 + 282 - 117 - 170, DRAW_DIALOGBOX_ITEMUPGRADE8);//"has been succeeded."
			if (m_stDialogBoxInfo[34].sV1 != -1)
			{
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 3);
				i = m_stDialogBoxInfo[34].sV1;
				cItemColor = m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cItemColor;
				if ((m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182
						, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
				}
				else
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182
						, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
				}
				ZeroMemory(cStr1, sizeof(cStr1));
				ZeroMemory(cStr2, sizeof(cStr2));
				ZeroMemory(cStr3, sizeof(cStr3));
				GetItemName(m_pItemList[m_stDialogBoxInfo[34].sV1], cStr1, cStr2, cStr3);
				PutAlignedString(sX + 24, sX + 248, sY + 230 + 20, cStr1);
				PutAlignedString(sX + 24, sX + 248, sY + 245 + 20, cStr2);
				PutAlignedString(sX + 24, sX + 248, sY + 260 + 20, cStr3);
			}
			// OK
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 4: // Failed
			PutAlignedString(sX + 24, sX + 248, sY + 55 + 30 + 282 - 117 - 170, DRAW_DIALOGBOX_ITEMUPGRADE9);//"Item upgrade has failed."
			if ((m_stDialogBoxInfo[34].sV1 != -1) && (m_pItemList[m_stDialogBoxInfo[34].sV1] == NULL))
			{
				PlaySound('E', 24, 0, 0);
				m_stDialogBoxInfo[34].cMode = 7;
				return;
			}
			if (m_stDialogBoxInfo[34].sV1 != -1)
			{
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 3);
				i = m_stDialogBoxInfo[34].sV1;
				cItemColor = m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cItemColor;
				if ((m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182
						, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
				}
				else
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182
						, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
				}
				ZeroMemory(cStr1, sizeof(cStr1));
				ZeroMemory(cStr2, sizeof(cStr2));
				ZeroMemory(cStr3, sizeof(cStr3));
				GetItemName(m_pItemList[m_stDialogBoxInfo[34].sV1], cStr1, cStr2, cStr3);
				PutAlignedString(sX + 24, sX + 248, sY + 230 + 20, cStr1);
				PutAlignedString(sX + 24, sX + 248, sY + 245 + 20, cStr2);
				PutAlignedString(sX + 24, sX + 248, sY + 260 + 20, cStr3);
			}

			// OK
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 5: // select Stone/ Gizon
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 45, DRAW_DIALOGBOX_ITEMUPGRADE13); // "Select which kind of items to upgrade."
			if ((msX > sX + 24) && (msX < sX + 248) && (msY > sY + 100) && (msY < sY + 115))
			{
				PutAlignedString(sX + 24, sX + 248, sY + 100, DRAW_DIALOGBOX_ITEMUPGRADE14, 255, 255, 255); // "Normal item upgrade"
				PutAlignedString(sX + 24, sX + 248, sY + 150, DRAW_DIALOGBOX_ITEMUPGRADE16); // "Upgrading a normal item."
				PutAlignedString(sX + 24, sX + 248, sY + 165, DRAW_DIALOGBOX_ITEMUPGRADE17); // "With upgrading weapon"
				PutAlignedString(sX + 24, sX + 248, sY + 180, DRAW_DIALOGBOX_ITEMUPGRADE18); // "items, Stone of Xelima"
				PutAlignedString(sX + 24, sX + 248, sY + 195, DRAW_DIALOGBOX_ITEMUPGRADE19); // "is needed. With upgrading"
				PutAlignedString(sX + 24, sX + 248, sY + 210, DRAW_DIALOGBOX_ITEMUPGRADE20); // "armor items, Stone of"
				PutAlignedString(sX + 24, sX + 248, sY + 225, DRAW_DIALOGBOX_ITEMUPGRADE21); // "Merien is needed."
				PutAlignedString(sX + 24, sX + 248, sY + 255, DRAW_DIALOGBOX_ITEMUPGRADE26); // "* Majestic items cannot be"
				PutAlignedString(sX + 24, sX + 248, sY + 270, DRAW_DIALOGBOX_ITEMUPGRADE27); // "upgraded with this performance."
			}
			else PutAlignedString(sX + 24, sX + 248, sY + 100, DRAW_DIALOGBOX_ITEMUPGRADE14, 4, 0, 50); // "Normal item upgrade"
			if ((msX > sX + 24) && (msX < sX + 248) && (msY > sY + 120) && (msY < sY + 135))
			{
				PutAlignedString(sX + 24, sX + 248, sY + 120, DRAW_DIALOGBOX_ITEMUPGRADE15, 255, 255, 255); // "Majestic item upgrade"
				PutAlignedString(sX + 24, sX + 248, sY + 150, DRAW_DIALOGBOX_ITEMUPGRADE22); // "Upgrading majestic items."
				PutAlignedString(sX + 24, sX + 248, sY + 165, DRAW_DIALOGBOX_ITEMUPGRADE23); // "In order to upgrade majestic items,"
				PutAlignedString(sX + 24, sX + 248, sY + 180, DRAW_DIALOGBOX_ITEMUPGRADE24); // "enough upgrade points for"
				PutAlignedString(sX + 24, sX + 248, sY + 195, DRAW_DIALOGBOX_ITEMUPGRADE25); // "majestic items are required."
				PutAlignedString(sX + 24, sX + 248, sY + 225, DRAW_DIALOGBOX_ITEMUPGRADE28); // "* Normal items cannot be"
				PutAlignedString(sX + 24, sX + 248, sY + 240, DRAW_DIALOGBOX_ITEMUPGRADE29); // "upgraded with this performance."
			}
			else PutAlignedString(sX + 24, sX + 248, sY + 120, DRAW_DIALOGBOX_ITEMUPGRADE15, 4, 0, 50); // "Majestic item upgrade"
		   // Cancel
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 6: // Stone upgrade
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 3);
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 30, DRAW_DIALOGBOX_ITEMUPGRADE31); // "After bring a normal item to"
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 45, DRAW_DIALOGBOX_ITEMUPGRADE32); //
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 60, DRAW_DIALOGBOX_ITEMUPGRADE33); //
			if (m_stDialogBoxInfo[34].sV2 == 0)
			{
				PutAlignedString(sX + 24, sX + 248, sY + 20 + 80, DRAW_DIALOGBOX_ITEMUPGRADE41, 195, 25, 25);//"You can upgrade only armor."
			}
			else
			{
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ITEMUPGRADE34, m_stDialogBoxInfo[34].sV2);//"The number of upgrade(weapon): %d"
				PutAlignedString(sX + 24, sX + 248, sY + 20 + 80, G_cTxt);
			}
			if (m_stDialogBoxInfo[34].sV3 == 0)
			{
				PutAlignedString(sX + 24, sX + 248, sY + 20 + 95, DRAW_DIALOGBOX_ITEMUPGRADE42, 195, 25, 25);//"You can upgrade only weapon."
			}
			else
			{
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ITEMUPGRADE35, m_stDialogBoxInfo[34].sV3);//"The number of upgrade(armor): %d"
				PutAlignedString(sX + 24, sX + 248, sY + 20 + 95, G_cTxt);
			}

			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 46);

			if (m_stDialogBoxInfo[34].sV1 != -1)
			{
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 3);
				i = m_stDialogBoxInfo[34].sV1;
				cItemColor = m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cItemColor;
				if ((m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_LHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_RHAND)
					|| (m_pItemList[m_stDialogBoxInfo[34].sV1]->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182
						, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
				}
				else
				{
					m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSprite]->PutSpriteRGB(sX + 134, sY + 182
						, m_pItemList[m_stDialogBoxInfo[34].sV1]->m_sSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
				}

				ZeroMemory(cStr1, sizeof(cStr1));
				ZeroMemory(cStr2, sizeof(cStr2));
				ZeroMemory(cStr3, sizeof(cStr3));
				GetItemName(m_pItemList[m_stDialogBoxInfo[34].sV1], cStr1, cStr2, cStr3);
				PutAlignedString(sX + 24, sX + 248, sY + 230 + 20, cStr1);
				PutAlignedString(sX + 24, sX + 248, sY + 245 + 20, cStr2);
				PutAlignedString(sX + 24, sX + 248, sY + 260 + 20, cStr3);
				if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 47);
				else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 46);
			}
			// Cancel
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
			break;

		case 7: // lost item
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 130, DRAW_DIALOGBOX_ITEMUPGRADE36);//"Due to the failure of upgrade, the"
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 145, DRAW_DIALOGBOX_ITEMUPGRADE37);//"item is gone. Try next time!"
			// OK
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 8: // impossible deja an max
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 130, DRAW_DIALOGBOX_ITEMUPGRADE38);//"Upgrading the item is not possible any more."
			// OK
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 9: // impossible
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 130, DRAW_DIALOGBOX_ITEMUPGRADE39);//"Upgrading the item is not possible."
			// OK
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;

		case 10: // plus de gizons
			PutAlignedString(sX + 24, sX + 248, sY + 20 + 130, DRAW_DIALOGBOX_ITEMUPGRADE40);//"A point to upgrade items is not present"
			// OK
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
			break;
	}
}

LONG CGame::GetRegKey(HKEY key, LPCTSTR subkey, LPTSTR retdata)
{
	HKEY hkey;
	LONG retval = RegOpenKeyEx(key, subkey, 0, KEY_QUERY_VALUE, &hkey);
	if (retval == ERROR_SUCCESS)
	{
		long datasize = MAX_PATH;
		TCHAR data[MAX_PATH];
		RegQueryValue(hkey, NULL, data, &datasize);
		lstrcpy(retdata, data);
		RegCloseKey(hkey);
	}
	return retval;
}

void CGame::GoHomepage(short type)
{
	LPCTSTR	url;
	switch (type) {
		case 0: url = MSG_HOMEPAGE; break;
		case 1: url = MSG_CREATEACC; break;
		case 2: url = MSG_CHANGEPASS; break;
		default: url = MSG_HOMEPAGE; break;
	}
	int		showcmd = SW_SHOW;
	char	key[MAX_PATH + MAX_PATH];
	SendMessage(G_hWnd, WM_ACTIVATEAPP, 0, 0);
	// First try ShellExecute()
	HINSTANCE result = ShellExecute(NULL, "open", url, NULL, NULL, showcmd);

	// If it failed, get the .htm regkey and lookup the program
	if ((UINT)result <= HINSTANCE_ERROR) {
		if (GetRegKey(HKEY_CLASSES_ROOT, ".htm", key) == ERROR_SUCCESS) {
			lstrcat(key, "\\shell\\open\\command");

			if (GetRegKey(HKEY_CLASSES_ROOT, key, key) == ERROR_SUCCESS) {
				char *pos;
				pos = strstr(key, "\"%1\"");
				if (pos == NULL)					// No quotes found
				{
					pos = strstr(key, "%1");			// Check for %1, without quotes
					if (pos == NULL)				// No parameter at all...
						pos = key + lstrlen(key) - 1;
					else *pos = '\0';				// Remove the parameter
				}
				else    *pos = '\0';				// Remove the parameter
				lstrcat(pos, " ");
				lstrcat(pos, url);
				result = (HINSTANCE)WinExec(key, showcmd);
			}
		}
	}
}

// num : 1 - F2, 2 - F3
void CGame::UseShortCut(int num)
{
	int index;
	//int  iDelay;
	DWORD dwTime = timeGetTime();
	if (num < 3) index = num + 1;
	else index = num + 7;
	if (m_cGameMode != DEF_GAMEMODE_ONMAINGAME) return;
	if (m_bCtrlPressed == TRUE)
	{
		if (m_sRecentShortCut == -1)
		{
			AddEventList(MSG_SHORTCUT1, 10);
			wsprintf(G_cTxt, MSG_SHORTCUT2, index);// [F%d]
			AddEventList(G_cTxt, 10);
			wsprintf(G_cTxt, MSG_SHORTCUT3, index);// [Control]-[F%d]
			AddEventList(G_cTxt, 10);
		}
		else
		{
			m_sShortCut[num] = m_sRecentShortCut;
			if (m_sShortCut[num] < 100)
			{
				if (m_pItemList[m_sShortCut[num]] == NULL)
				{
					m_sShortCut[num] = -1;
					m_sRecentShortCut = -1;
					return;
				}
				char cStr1[64], cStr2[64], cStr3[64];
				ZeroMemory(cStr1, sizeof(cStr1));
				ZeroMemory(cStr2, sizeof(cStr2));
				ZeroMemory(cStr3, sizeof(cStr3));

				GetItemName(m_pItemList[m_sShortCut[num]], cStr1, cStr2, cStr3);
				wsprintf(G_cTxt, MSG_SHORTCUT4, cStr1, cStr2, cStr3, index);// (%s %s %s) [F%d]
				AddEventList(G_cTxt, 10);
			}
			else if (m_sShortCut[num] >= 100)
			{
				if (m_pMagicCfgList[m_sShortCut[num] - 100] == NULL)
				{
					m_sShortCut[num] = -1;
					m_sRecentShortCut = -1;
					return;
				}
				wsprintf(G_cTxt, MSG_SHORTCUT5, m_pMagicCfgList[m_sShortCut[num] - 100]->m_cName, index);// %s) [F%d]
				AddEventList(G_cTxt, 10);
			}
		}
	}
	else
	{
		if (m_sShortCut[num] == -1)
		{
			AddEventList(MSG_SHORTCUT1, 10);
			wsprintf(G_cTxt, MSG_SHORTCUT2, index);// [F%d]
			AddEventList(G_cTxt, 10);
			wsprintf(G_cTxt, MSG_SHORTCUT3, index);// [Control]-[F%d]
			AddEventList(G_cTxt, 10);
		}
		else if (m_sShortCut[num] < 100)
		{
		//	if ((dwTime - m_dwTime) > 10){ //agregado lalo delay
				ItemEquipHandler((char)m_sShortCut[num]);
		//	}
		}
		else if (m_sShortCut[num] >= 100) UseMagic(m_sShortCut[num] - 100);
	}
}

//LaloGroso - Agregar MS a los wand
int CGame::iGetManaCost(int iMagicNo)
{
	int i, iManaSave, iManaCost;
	iManaSave = 0;
	if (iMagicNo < 0 || iMagicNo >= 100) return 1;
	for (i = 0; i < DEF_MAXITEMS; i++)
	{
		if (m_pItemList[i] == NULL) continue;
		if (m_bIsItemEquipped[i] == TRUE)
		{
			if (strcmp(m_pItemList[i]->m_cName, "MagicWand(MS10)") == 0)		iManaSave += 10;
			else if (strcmp(m_pItemList[i]->m_cName, "MagicWand(MS20)") == 0)		iManaSave += 20;
			else if (strcmp(m_pItemList[i]->m_cName, "MagicWand(MS30-LLF)") == 0) iManaSave += 30;
			else if (strcmp(m_pItemList[i]->m_cName, "WizMagicWand(MS10)") == 0)	iManaSave += 10;
			else if (strcmp(m_pItemList[i]->m_cName, "WizMagicWand(MS20)") == 0)	iManaSave += 20;
			else if (strcmp(m_pItemList[i]->m_cName, "MagicNecklace(MS10)") == 0) iManaSave += 10;
			else if (strcmp(m_pItemList[i]->m_cName, "MagicNecklace(MS12)") == 0) iManaSave += 12;
			else if (strcmp(m_pItemList[i]->m_cName, "MagicNecklace(MS14)") == 0) iManaSave += 14;
			else if (strcmp(m_pItemList[i]->m_cName, "MagicNecklace(MS16)") == 0) iManaSave += 16;
			else if (strcmp(m_pItemList[i]->m_cName, "MagicNecklace(MS18)") == 0) iManaSave += 18;
			else if (strcmp(m_pItemList[i]->m_cName, "DarkMageMagicStaff") == 0)	iManaSave += 25;
			else if (strcmp(m_pItemList[i]->m_cName, "DarkMageMagicStaffW") == 0) iManaSave += 25;
			else if (strcmp(m_pItemList[i]->m_cName, "DarkMageMagicWand") == 0)	iManaSave += 28;
			//Actualizar este listado
			else if (strcmp(m_pItemList[i]->m_cName, "NecklaceOfLiche") == 0)   	iManaSave += 20;
			else if (strcmp(m_pItemList[i]->m_cName, "BlackMageTemple") == 0)	    iManaSave += 28;
			else if (strcmp(m_pItemList[i]->m_cName, "BerserkWand(MS.30)") == 0)	iManaSave += 30;
			else if (strcmp(m_pItemList[i]->m_cName, "BerserkWand(MS.10)") == 0)	iManaSave += 10;
			else if (strcmp(m_pItemList[i]->m_cName, "KlonessWand(MS.30)") == 0)	iManaSave += 30;
			else if (strcmp(m_pItemList[i]->m_cName, "KlonessWand(MS.10)") == 0)	iManaSave += 10;
			else if (strcmp(m_pItemList[i]->m_cName, "ResurWand(MS.30)") == 0)	iManaSave += 30;
			else if (strcmp(m_pItemList[i]->m_cName, "ResurWand(MS.10)") == 0)	iManaSave += 10;
			else if (strcmp(m_pItemList[i]->m_cName, "WhiteMWand(MS.60)") == 0)   	iManaSave += 60;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckPower(MS.30)") == 0)   	iManaSave += 30;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckMagicPower") == 0)   		iManaSave += 20;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckMasterPower") == 0)   	iManaSave += 60;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckPowerMedu") == 0)			iManaSave += 80;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckMasterDef") == 0)			iManaSave += 50;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckMasterDef2") == 0)		iManaSave += 30;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckMasterDef3") == 0)		iManaSave += 30;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckMasterDef4") == 0)		iManaSave += 50;
			else if (strcmp(m_pItemList[i]->m_cName, "NeckMasterDef5") == 0)		iManaSave += 30;
			else if (strcmp(m_pItemList[i]->m_cName, "PowerHeroWand") == 0)   		iManaSave += 40;
			else if (strcmp(m_pItemList[i]->m_cName, "PowerMP_Neck") == 0)   		iManaSave += 80;
			else if (strcmp(m_pItemList[i]->m_cName, "PkssWand(MS.20)") == 0)   	iManaSave += 20;
			else if (strcmp(m_pItemList[i]->m_cName, "PkssWand(MS.40)") == 0)   	iManaSave += 40;
			else if (strcmp(m_pItemList[i]->m_cName, "BlackZWand(MS.32)") == 0)   	iManaSave += 32;
			else if (strcmp(m_pItemList[i]->m_cName, "PowerFull_Neck") == 0)		iManaSave += 80;//80
			else if (strcmp(m_pItemList[i]->m_cName, "NeckMasterMage") == 0)		iManaSave += 50;
		}
	}
	// Snoopy: MS max = 80%
	if (iManaSave > 80) iManaSave = 80;
	iManaCost = m_pMagicCfgList[iMagicNo]->m_sValue1;
	//if (m_bIsSafeAttackMode) iManaCost += (iManaCost/2) - (iManaCost / 10);
	if (iManaSave > 0)
	{
		double dV1 = (double)iManaSave;
		double dV2 = (double)(dV1 / 100.0f);
		double dV3 = (double)iManaCost;
		dV1 = dV2 * dV3;
		dV2 = dV3 - dV1;
		iManaCost = (int)dV2;
	}
	if (iManaCost < 1) iManaCost = 1;
	return iManaCost;
}

void CGame::UseMagic(int iMagicNo)
{
	if (iMagicNo < 0 || iMagicNo >= 100) return;
	if ((m_cMagicMastery[iMagicNo] == NULL) || (m_pMagicCfgList[iMagicNo] == NULL)) return;

	if (isInMap("dm"))
	{
		if (iMagicNo == 63 || iMagicNo == 41 || iMagicNo == 40 || iMagicNo == 54 || iMagicNo == 55 || iMagicNo == 46 || iMagicNo == 95 || iMagicNo == 65 || iMagicNo == 32 || iMagicNo == 83 || iMagicNo == 90)	return;
	}
	
	// Casting
	if (DecriptInt(m_iHP) <= 0) return;
	if (m_bIsGetPointingMode == TRUE) return;
	if (iGetManaCost(iMagicNo) > DecriptInt(m_iMP)) return;
	if (_bIsItemOnHand() == TRUE)
	{
		AddEventList(DLGBOX_CLICK_MAGIC1, 10);
		return;
	}
	if (m_bSkillUsingStatus == TRUE)
	{
		AddEventList(DLGBOX_CLICK_MAGIC2, 10);
		return;
	}

	if ((m_sPlayerAppr2 & 0xF000) == 0) bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOGGLECOMBATMODE, NULL, NULL, NULL, NULL, NULL);
	m_cCommand = DEF_OBJECTMAGIC;
	//m_iCastingMagicType = EncriptInt(iMagicNo);
	m_iCastingMagicType = iMagicNo;
	m_sMagicShortCut = iMagicNo;
	m_sRecentShortCut = iMagicNo + 100;
	m_iPointCommandType = EncriptInt(iMagicNo + 100);
//	m_iPointCommandType = iMagicNo + 100;
	//m_bIsGetPointingMode = TRUE;
	DisableDialogBox(3);

}


void CGame::ReleaseEquipHandler(char cEquipPos)
{
	char cStr1[64], cStr2[64], cStr3[64];
	if (m_sItemEquipmentStatus[cEquipPos] < 0) return;
	// Remove Angelic Stats
	if ((cEquipPos >= 11)
		&& (m_pItemList[m_sItemEquipmentStatus[cEquipPos]]->m_cItemType == 1))
	{
		char cItemID = m_sItemEquipmentStatus[cEquipPos];
		if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(STR)", 19) == 0)
		{
			m_iAngelicStr = EncriptInt(0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(DEX)", 19) == 0)
		{
			m_iAngelicDex = EncriptInt(0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(INT)", 19) == 0)
		{
			m_iAngelicInt = EncriptInt(0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(MAG)", 19) == 0)
		{
			m_iAngelicMag = EncriptInt(0);
		}
	}

	GetItemName(m_pItemList[m_sItemEquipmentStatus[cEquipPos]], cStr1, cStr2, cStr3);
	wsprintf(G_cTxt, ITEM_EQUIPMENT_RELEASED, cStr1);
	AddEventList(G_cTxt, 10);
	m_bIsItemEquipped[m_sItemEquipmentStatus[cEquipPos]] = FALSE;
	m_sItemEquipmentStatus[cEquipPos] = -1;
}

void CGame::ItemEquipHandler(char cItemID)
{
	if (bCheckItemOperationEnabled(cItemID) == FALSE) return;
	if (m_bIsItemEquipped[cItemID] == TRUE) return;
	if (m_pItemList[cItemID]->m_cEquipPos == DEF_EQUIPPOS_NONE)
	{
		AddEventList(BITEMDROP_CHARACTER3, 10);//"The item is not available."
		return;
	}
	if (m_pItemList[cItemID]->m_wCurLifeSpan == 0)
	{
		AddEventList(BITEMDROP_CHARACTER1, 10); //"The item is exhausted. Fix it to use it."
		return;
	}
	if (m_pItemList[cItemID]->m_wWeight / 100 > m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr))
	{
		AddEventList(BITEMDROP_CHARACTER2, 10);
		return;
	}
	if (((m_pItemList[cItemID]->m_dwAttribute & 0x00000001) == 0) && (m_pItemList[cItemID]->m_sLevelLimit > DecriptInt(m_iLevel)))
	{
		AddEventList(BITEMDROP_CHARACTER4, 10);
		return;
	}
	//Item Equip
	if (!CheckItemStatReq(cItemID))
		return;

	if (m_bSkillUsingStatus == TRUE)
	{
		AddEventList(BITEMDROP_CHARACTER5, 10);
		return;
	}
	if (m_pItemList[cItemID]->m_cGenderLimit != 0)
	{
		switch (m_sPlayerType) {
			case 1:
			case 2:
			case 3:
				if (m_pItemList[cItemID]->m_cGenderLimit != 1)
				{
					AddEventList(BITEMDROP_CHARACTER6, 10);
					return;
				}
				break;
			case 4:
			case 5:
			case 6:
				if (m_pItemList[cItemID]->m_cGenderLimit != 2)
				{
					AddEventList(BITEMDROP_CHARACTER7, 10);
					return;
				}
				break;
		}
	}

	bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_EQUIPITEM, NULL, cItemID, NULL, NULL, NULL);

	m_sRecentShortCut = cItemID;
	ReleaseEquipHandler(m_pItemList[cItemID]->m_cEquipPos);
	switch (m_pItemList[cItemID]->m_cEquipPos) {
		case DEF_EQUIPPOS_HEAD:
		case DEF_EQUIPPOS_BODY:
		case DEF_EQUIPPOS_ARMS:
		case DEF_EQUIPPOS_PANTS:
		case DEF_EQUIPPOS_BOOTS:
		case DEF_EQUIPPOS_BACK:
			ReleaseEquipHandler(DEF_EQUIPPOS_FULLBODY);
			break;
		case DEF_EQUIPPOS_FULLBODY:
			ReleaseEquipHandler(DEF_EQUIPPOS_HEAD);
			ReleaseEquipHandler(DEF_EQUIPPOS_BODY);
			ReleaseEquipHandler(DEF_EQUIPPOS_ARMS);
			ReleaseEquipHandler(DEF_EQUIPPOS_PANTS);
			ReleaseEquipHandler(DEF_EQUIPPOS_BOOTS);
			ReleaseEquipHandler(DEF_EQUIPPOS_BACK);
			break;
		case DEF_EQUIPPOS_LHAND:
		case DEF_EQUIPPOS_RHAND:
			ReleaseEquipHandler(DEF_EQUIPPOS_TWOHAND);
			break;
		case DEF_EQUIPPOS_TWOHAND:
			ReleaseEquipHandler(DEF_EQUIPPOS_RHAND);
			ReleaseEquipHandler(DEF_EQUIPPOS_LHAND);
			break;
	}

	m_sItemEquipmentStatus[m_pItemList[cItemID]->m_cEquipPos] = cItemID;
	m_bIsItemEquipped[cItemID] = TRUE;

	// Add Angelic Stats
	if ((m_pItemList[cItemID]->m_cItemType == 1)
		&& (m_pItemList[cItemID]->m_cEquipPos >= 11))
	{
		int iAngelValue = 0;
		if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(STR)", 19) == 0)
		{
			iAngelValue = ((m_pItemList[cItemID]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[cItemID]->m_sItemSpecEffectValue3;
			m_iAngelicStr = EncriptInt(iAngelValue);
			PlaySound('E', 52, 0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(DEX)", 19) == 0)
		{
			iAngelValue = ((m_pItemList[cItemID]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[cItemID]->m_sItemSpecEffectValue3;
			m_iAngelicDex = EncriptInt(iAngelValue);
			PlaySound('E', 52, 0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(INT)", 19) == 0)
		{
			iAngelValue = ((m_pItemList[cItemID]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[cItemID]->m_sItemSpecEffectValue3;
			m_iAngelicInt = EncriptInt(iAngelValue);
			PlaySound('E', 52, 0);
		}
		else if (memcmp(m_pItemList[cItemID]->m_cName, "AngelicPandent(MAG)", 19) == 0)
		{
			iAngelValue = ((m_pItemList[cItemID]->m_dwAttribute & 0xF0000000) >> 28) + m_pItemList[cItemID]->m_sItemSpecEffectValue3;
			m_iAngelicMag = EncriptInt(iAngelValue);
			PlaySound('E', 52, 0);
		}
	}

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[cItemID], cStr1, cStr2, cStr3);
	wsprintf(G_cTxt, BITEMDROP_CHARACTER9, cStr1);
	AddEventList(G_cTxt, 10);
	PlaySound('E', 28, 0);
}

/*********************************************************************************************************************
**  void CheckActiveAura(short sX, short sY, DWORD dwTime, short sOwnerType)( initially Cleroth fixed by Snoopy )	**
**  description			: Generates special auras around players													**
**						: v351 implements this in each drawn function,beter to regroup in single function.			**
**********************************************************************************************************************/
void CGame::CheckActiveAura(short sX, short sY, DWORD dwTime, short sOwnerType)
{
	BOOL bAresden = FALSE, bAssasain = FALSE;

	//DecriptString(m_cPlayerName);
	if (memcmp(m_cPlayerName, _tmp_cName, 10) != 0) {
		if (_tmp_iStatus & 0x80000000) bAssasain = TRUE;
		else if (_tmp_iStatus & 0x20000000) bAresden = TRUE;
		else bAresden = FALSE;
	}
	else {
		if (DecriptBool(m_bAresden) == TRUE) bAresden = TRUE;
		if (DecriptBool(m_bElvine) == TRUE) bAresden = FALSE;
	}
	//EncriptString(m_cPlayerName);

	if (!Assasain)
	{
		if (((DecriptBool(m_bAresden) == TRUE) && (bAresden == TRUE)) || ((DecriptBool(m_bElvine) == TRUE) && (bAresden == FALSE) && (!bAssasain)))
		{
			// DefenseShield
			if ((_tmp_iStatus & 0x02000000) != 0) m_pEffectSpr[80]->PutTransSprite50(sX + 75, sY + 107, _tmp_iEffectFrame % 17, dwTime);

			// Protection From Magic	
			if ((_tmp_iStatus & 0x04000000) != 0) m_pEffectSpr[79]->PutTransSprite70(sX + 101, sY + 135, _tmp_iEffectFrame % 15, dwTime);

			// Protection From Arrow
			if ((_tmp_iStatus & 0x08000000) != 0) m_pEffectSpr[72]->PutTransSprite70(sX, sY + 35, _tmp_iEffectFrame % 30, dwTime);
		}
	}
	else {
	//	DecriptString(m_cPlayerName);
		if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) {
			// DefenseShield
			if ((_tmp_iStatus & 0x02000000) != 0) m_pEffectSpr[80]->PutTransSprite50(sX + 75, sY + 107, _tmp_iEffectFrame % 17, dwTime);

			// Protection From Magic	
			if ((_tmp_iStatus & 0x04000000) != 0) m_pEffectSpr[79]->PutTransSprite70(sX + 101, sY + 135, _tmp_iEffectFrame % 15, dwTime);

			// Protection From Arrow
			if ((_tmp_iStatus & 0x08000000) != 0) m_pEffectSpr[72]->PutTransSprite70(sX, sY + 35, _tmp_iEffectFrame % 30, dwTime);
		}
	//	EncriptString(m_cPlayerName);
	}

	// Illusion
	if ((_tmp_iStatus & 0x01000000) != 0)
		m_pEffectSpr[73]->PutTransSprite70(sX + 125, sY + 130 - _iAttackerHeight[sOwnerType], _tmp_iEffectFrame % 24, dwTime);

	// Illusion movement
	if ((_tmp_iStatus & 0x00200000) != 0)
		m_pEffectSpr[151]->PutTransSprite70(sX + 90, sY + 90 - _iAttackerHeight[sOwnerType], _tmp_iEffectFrame % 24, dwTime);

	// Slate red  (HP)  Flame au sol
	if ((_tmp_iStatus & 0x00400000) != 0)
		m_pEffectSpr[149]->PutTransSprite70(sX + 90, sY + 120, _tmp_iEffectFrame % 15, dwTime);

	// Slate Blue (Mana) Bleu au sol
	if ((_tmp_iStatus & 0x00800000) != 0)
		m_pEffectSpr[150]->PutTransSprite70(sX + 1, sY + 26, _tmp_iEffectFrame % 15, dwTime);

	// Slate Green (XP) Mauve au sol
	if ((_tmp_iStatus & 0x00010000) != 0)
		m_pEffectSpr[148]->PutTransSprite70(sX, sY + 32, _tmp_iEffectFrame % 23, dwTime);

	// Hero Flag (Heldenian)  Flameches d'entangle
	if ((_tmp_iStatus & 0x00020000) != 0)
		m_pEffectSpr[87]->PutTransSprite70(sX + 53, sY + 54, _tmp_iEffectFrame % 29, dwTime);

	// Afk zZzZz
	if (((_tmp_iStatus & 0x00000008) != 0) && (m_cDetailLevel != 3 || m_cDetailLevel == 3 && Afks))
		m_pEffectSpr[85]->PutTransSprite70(sX + 55, sY + 50 - _iAttackerHeight[sOwnerType], _tmp_iEffectFrame % 24, dwTime);
}

void CGame::CheckActiveAura2(short sX, short sY, DWORD dwTime, short sOwnerType)
{	// Poison
	if ((_tmp_iStatus & 0x80) != 0)
		//m_pEffectSpr[81]->PutTransSprite(sX+115, sY+85, _tmp_iEffectFrame%21, dwTime);
		m_pEffectSpr[81]->PutTransSprite70(sX + 115, sY + 120 - _iAttackerHeight[sOwnerType], _tmp_iEffectFrame % 21, dwTime);
	//	_iAttackerHeight[]
}

// 3.51 Level Up Dialog - Changes stats Using Majestic points - Diuuude
void CGame::DrawDialogBox_ChangeStatsMajestic(short msX, short msY)
{
	short sX, sY, szX;
	DWORD dwTime = m_dwCurTime;
	char cTxt[120];
	unsigned char iStats;
	sX = m_stDialogBoxInfo[42].sX;
	sY = m_stDialogBoxInfo[42].sY;
	szX = m_stDialogBoxInfo[42].sSizeX;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_TEXT, sX, sY, 2);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME4, sX + 16, sY + 125, 4);

	PutAlignedString(sX, sX + szX, sY + 50, DRAW_DIALOGBOX_LEVELUP_SETTING14);
	PutAlignedString(sX, sX + szX, sY + 65, DRAW_DIALOGBOX_LEVELUP_SETTING15);
	PutAlignedString(sX, sX + szX, sY + 80, DRAW_DIALOGBOX_LEVELUP_SETTING16);
	PutAlignedString(sX, sX + szX, sY + 95, DRAW_DIALOGBOX_LEVELUP_SETTING17);
	PutAlignedString(sX, sX + szX, sY + 110, DRAW_DIALOGBOX_LEVELUP_SETTING18);

	// Majestic Points Left - Display in green if > 0
	PutString(sX + 20, sY + 127, DRAW_DIALOGBOX_LEVELUP_SETTING19, RGB(0, 0, 0));
	wsprintf(cTxt, "%d", DecriptInt(m_iGizonItemUpgradeLeft) - TempMajestic);
	if (DecriptInt(m_iGizonItemUpgradeLeft) > 0)
	{
		PutString(sX + 75, sY + 127, cTxt, RGB(0, 0, 0)); //verdex
	}
	else
	{
		PutString(sX + 75, sY + 127, cTxt, RGB(0, 0, 0));
	}
	// Display only MouseOver Button for - (+ is disabled)
	// Strength
	PutString(sX + 24, sY + 150, DRAW_DIALOGBOX_LEVELUP_SETTING4, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iStr);
	PutString(sX + 109, sY + 150, cTxt, RGB(25, 35, 25));
	iStats = m_iStr + DecriptInt(m_cLU_Str);
	wsprintf(cTxt, "%d", iStats);
	if (iStats < m_iStr)
		PutString(sX + 162, sY + 150, cTxt, RGB(255, 0, 0));
	else if (iStats > m_iStr)
		PutString(sX + 162, sY + 150, cTxt, RGB(0, 0, 255));
	else
		PutString(sX + 162, sY + 150, cTxt, RGB(0, 0, 0));
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 152) && (msY <= sY + 158))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 152, 6, dwTime);

	// Vitality
	PutString(sX + 24, sY + 169, DRAW_DIALOGBOX_LEVELUP_SETTING5, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iVit);
	PutString(sX + 109, sY + 169, cTxt, RGB(25, 35, 25));
	iStats = m_iVit + DecriptInt(m_cLU_Vit);
	wsprintf(cTxt, "%d", iStats);
	if (iStats < m_iVit)
		PutString(sX + 162, sY + 169, cTxt, RGB(255, 0, 0));
	else if (iStats > m_iVit)
		PutString(sX + 162, sY + 169, cTxt, RGB(0, 0, 255));
	else
		PutString(sX + 162, sY + 169, cTxt, RGB(0, 0, 0));
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 171) && (msY <= sY + 177))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 171, 6, dwTime);

	// Dexterity
	PutString(sX + 24, sY + 188, DRAW_DIALOGBOX_LEVELUP_SETTING6, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iDex);
	PutString(sX + 109, sY + 188, cTxt, RGB(25, 35, 25));
	iStats = m_iDex + DecriptInt(m_cLU_Dex);
	wsprintf(cTxt, "%d", iStats);
	if (iStats < m_iDex)
		PutString(sX + 162, sY + 188, cTxt, RGB(255, 0, 0));
	else if (iStats > m_iDex)
		PutString(sX + 162, sY + 188, cTxt, RGB(0, 0, 255));
	else
		PutString(sX + 162, sY + 188, cTxt, RGB(0, 0, 0));
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 190) && (msY <= sY + 196))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 190, 6, dwTime);

	// Intelligence
	PutString(sX + 24, sY + 207, DRAW_DIALOGBOX_LEVELUP_SETTING7, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iInt);
	PutString(sX + 109, sY + 207, cTxt, RGB(25, 35, 25));
	iStats = m_iInt + DecriptInt(m_cLU_Int);
	wsprintf(cTxt, "%d", iStats);
	if (iStats < m_iInt)
		PutString(sX + 162, sY + 207, cTxt, RGB(255, 0, 0));
	else if (iStats > m_iInt)
		PutString(sX + 162, sY + 207, cTxt, RGB(0, 0, 255));
	else
		PutString(sX + 162, sY + 207, cTxt, RGB(0, 0, 0));
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 209) && (msY <= sY + 215))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 209, 6, dwTime);

	// Magic
	PutString(sX + 24, sY + 226, DRAW_DIALOGBOX_LEVELUP_SETTING8, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iMag);
	PutString(sX + 109, sY + 226, cTxt, RGB(25, 35, 25));
	iStats = m_iMag + DecriptInt(m_cLU_Mag);
	wsprintf(cTxt, "%d", iStats);
	if (iStats < m_iMag)
		PutString(sX + 162, sY + 226, cTxt, RGB(255, 0, 0));
	else if (iStats > m_iMag)
		PutString(sX + 162, sY + 226, cTxt, RGB(0, 0, 255));
	else
		PutString(sX + 162, sY + 226, cTxt, RGB(0, 0, 0));
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 228) && (msY <= sY + 234))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 228, 6, dwTime);

	// Charisma
	PutString(sX + 24, sY + 245, DRAW_DIALOGBOX_LEVELUP_SETTING9, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_iCharisma);
	PutString(sX + 109, sY + 245, cTxt, RGB(25, 35, 25));
	iStats = m_iCharisma + DecriptInt(m_cLU_Char);
	wsprintf(cTxt, "%d", iStats);
	if (iStats < m_iCharisma)
		PutString(sX + 162, sY + 245, cTxt, RGB(255, 0, 0));
	else if (iStats > m_iCharisma)
		PutString(sX + 162, sY + 245, cTxt, RGB(0, 0, 255));
	else
		PutString(sX + 162, sY + 245, cTxt, RGB(0, 0, 0));
	if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 247) && (msY <= sY + 253))
		m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutSpriteFast(sX + 210, sY + 247, 6, dwTime);

	if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 17);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 16);

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 1);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 0);
}


// 3.51 LevelUp Box - Change stats using Majestic - Diuuude
void CGame::DlgBoxClick_ChangeStatsMajestic(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[42].sX;
	sY = m_stDialogBoxInfo[42].sY;

	if (DecriptInt(m_iGizonItemUpgradeLeft) - TempMajestic > 0)
	{
		// Str Up
		if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 151) && (msY <= sY + 161) && (DecriptInt(m_iLU_Point) > 0))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((DecriptInt(m_iLU_Point) >= 5) && ((DecriptInt(m_cLU_Str) + m_iStr) + 5 <= DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
					m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) + 5);
				}
				else if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Str) + m_iStr) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) + 1);
				}
				PlaySound('E', 14, 5);
			}
			else {
				if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Str) + m_iStr) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) + 1);
				}
				PlaySound('E', 14, 5);
			}
		}
		// Str Low
		if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 152) && (msY <= sY + 162) && (m_iStr > 10))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((m_iStr + (DecriptInt(m_cLU_Str) - 5) >= 10) && (DecriptInt(m_iGizonItemUpgradeLeft) - TempMajestic - 2 > 0))
				{
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
					m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) - 5);
					TempDiscount += 5;
					ChangeStat = TRUE;
				}
				else if (m_iStr + (DecriptInt(m_cLU_Str) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
			else {
				if (m_iStr + (DecriptInt(m_cLU_Str) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Str = EncriptInt(DecriptInt(m_cLU_Str) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
		}

		// Vit Up
		if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 171) && (msY <= sY + 181) && (DecriptInt(m_iLU_Point) > 0))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((DecriptInt(m_iLU_Point) >= 5) && ((DecriptInt(m_cLU_Vit) + m_iVit) + 5 <= DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
					m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) + 5);
				}
				else if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Vit) + m_iVit) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) + 1);
				}
				PlaySound('E', 14, 5);
			}
			else {
				if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Vit) + m_iVit) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) + 1);
				}
				PlaySound('E', 14, 5);
			}
		}
		//Vit Down
		if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 171) && (msY <= sY + 181) && (m_iVit > 10))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((m_iVit + (DecriptInt(m_cLU_Vit) - 5) >= 10) && (DecriptInt(m_iGizonItemUpgradeLeft) - TempMajestic - 2 > 0))
				{
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
					m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) - 5);
					TempDiscount += 5;
					ChangeStat = TRUE;
				}
				else if (m_iVit + (DecriptInt(m_cLU_Vit) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
			else {
				if (m_iVit + (DecriptInt(m_cLU_Vit) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Vit = EncriptInt(DecriptInt(m_cLU_Vit) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
		}

		//Dex Up
		if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 190) && (msY <= sY + 200) && (DecriptInt(m_iLU_Point) > 0))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((DecriptInt(m_iLU_Point) >= 5) && ((DecriptInt(m_cLU_Dex) + m_iDex) + 5 <= DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
					m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) + 5);
				}
				else if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Dex) + m_iDex) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) + 1);
				}
				PlaySound('E', 14, 5);
			}
			else {
				if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Dex) + m_iDex) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) + 1);
				}
				PlaySound('E', 14, 5);
			}
		}
		//Dex Down
		if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 190) && (msY <= sY + 200) && (m_iDex > 10))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((m_iDex + (DecriptInt(m_cLU_Dex) - 5) >= 10) && (DecriptInt(m_iGizonItemUpgradeLeft) - TempMajestic - 2 > 0))
				{
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
					m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) - 5);
					TempDiscount += 5;
					ChangeStat = TRUE;
				}
				else if (m_iDex + (DecriptInt(m_cLU_Dex) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
			else {
				if (m_iDex + (DecriptInt(m_cLU_Dex) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Dex = EncriptInt(DecriptInt(m_cLU_Dex) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
		}

		// Int Up
		if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 209) && (msY <= sY + 219) && (DecriptInt(m_iLU_Point) > 0))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((DecriptInt(m_iLU_Point) >= 5) && ((DecriptInt(m_cLU_Int) + m_iInt) + 5 <= DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
					m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) + 5);
				}
				else if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Int) + m_iInt) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) + 1);
				}
				PlaySound('E', 14, 5);
			}
			else {
				if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Int) + m_iInt) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) + 1);
				}
				PlaySound('E', 14, 5);
			}
		}
		// Int Down
		if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 209) && (msY <= sY + 219) && (m_iInt > 10))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((m_iInt + (DecriptInt(m_cLU_Int) - 5) >= 10) && (DecriptInt(m_iGizonItemUpgradeLeft) - TempMajestic - 2 > 0))
				{
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
					m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) - 5);
					TempDiscount += 5;
					ChangeStat = TRUE;
				}
				else if (m_iInt + (DecriptInt(m_cLU_Int) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
			else {
				if (m_iInt + (DecriptInt(m_cLU_Int) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Int = EncriptInt(DecriptInt(m_cLU_Int) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
		}

		// Mag Up
		if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 228) && (msY <= sY + 238) && (DecriptInt(m_iLU_Point) > 0))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((DecriptInt(m_iLU_Point) >= 5) && ((DecriptInt(m_cLU_Mag) + m_iMag) + 5 <= DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
					m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) + 5);
				}
				else if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Mag) + m_iMag) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) + 1);
				}
				PlaySound('E', 14, 5);
			}
			else {
				if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Mag) + m_iMag) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) + 1);
				}
				PlaySound('E', 14, 5);
			}
		}
		//Mag Down
		if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 228) && (msY <= sY + 238) && (m_iMag > 10))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((m_iMag + (DecriptInt(m_cLU_Mag) - 5) >= 10) && (DecriptInt(m_iGizonItemUpgradeLeft) - TempMajestic - 2 > 0))
				{
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
					m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) - 5);
					TempDiscount += 5;
					ChangeStat = TRUE;
				}
				else if (m_iMag + (DecriptInt(m_cLU_Mag) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
			else {
				if (m_iMag + (DecriptInt(m_cLU_Mag) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Mag = EncriptInt(DecriptInt(m_cLU_Mag) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
		}

		// Charisma Up
		if ((msX >= sX + 195) && (msX <= sX + 205) && (msY >= sY + 248) && (msY <= sY + 258) && (DecriptInt(m_iLU_Point) > 0))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((DecriptInt(m_iLU_Point) >= 5) && ((DecriptInt(m_cLU_Char) + m_iCharisma) + 5 <= DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 5);
					m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) + 5);
				}
				else if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Char) + m_iCharisma) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) + 1);
				}
				PlaySound('E', 14, 5);
			}
			else {
				if ((DecriptInt(m_iLU_Point) > 0) && ((DecriptInt(m_cLU_Char) + m_iCharisma) < DEF_STATS_LIMIT)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) - 1);
					m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) + 1);
				}
				PlaySound('E', 14, 5);
			}
		}
		// Charisma Down
		if ((msX >= sX + 210) && (msX <= sX + 220) && (msY >= sY + 247) && (msY <= sY + 257) && (m_iCharisma > 10))
		{
			if (m_bCtrlPressed == TRUE) {
				if ((m_iCharisma + (DecriptInt(m_cLU_Char) - 5) >= 10) && (DecriptInt(m_iGizonItemUpgradeLeft) - TempMajestic - 2 > 0)) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 5);
					m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) - 5);
					TempDiscount += 5;
					ChangeStat = TRUE;
				}
				else if (m_iCharisma + (DecriptInt(m_cLU_Char) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
			else {
				if (m_iCharisma + (DecriptInt(m_cLU_Char) - 1) >= 10) {
					m_iLU_Point = EncriptInt(DecriptInt(m_iLU_Point) + 1);
					m_cLU_Char = EncriptInt(DecriptInt(m_cLU_Char) - 1);
					TempDiscount += 1;
					ChangeStat = TRUE;
				}
				PlaySound('E', 14, 5);
			}
		}
	}

	if ((TempDiscount > 0) && (ChangeStat))
	{
		while (TempMajestic * 3 < TempDiscount)
			TempMajestic += 1;

		ChangeStat = FALSE;
	}

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY))
	{	// Send command to HG - Diuuude
		if (TempMajestic != 0)
		{
			if (DecriptInt(m_cLU_Int) < 0) EnableDialogBox(5, NULL, NULL, NULL);
			else
			{
				bSendCommand(CLIENT_REQUEST_LEVELUPSETTINGS, NULL, NULL, NULL, NULL, NULL, NULL);
				m_cLU_Str = EncriptInt(0);
				m_cLU_Vit = EncriptInt(0);
				m_cLU_Dex = EncriptInt(0);
				m_cLU_Int = EncriptInt(0);
				m_cLU_Mag = EncriptInt(0);
				m_cLU_Char = EncriptInt(0);
				m_iLU_Point = EncriptInt(0);
				DisableDialogBox(42);
				PlaySound('E', 14, 5);
			}
		}
		else
		{
			AddEventList("Change stat no detected", 10);
			m_cLU_Str = EncriptInt(0);
			m_cLU_Vit = EncriptInt(0);
			m_cLU_Dex = EncriptInt(0);
			m_cLU_Int = EncriptInt(0);
			m_cLU_Mag = EncriptInt(0);
			m_cLU_Char = EncriptInt(0);
			m_iLU_Point = EncriptInt(0);
			DisableDialogBox(42);
			PlaySound('E', 14, 5);
		}
	}
	if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY > sY + DEF_BTNPOSY) && (msY < sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		m_cLU_Str = EncriptInt(0);
		m_cLU_Vit = EncriptInt(0);
		m_cLU_Dex = EncriptInt(0);
		m_cLU_Int = EncriptInt(0);
		m_cLU_Mag = EncriptInt(0);
		m_cLU_Char = EncriptInt(0);
		m_iLU_Point = EncriptInt(0);
		DisableDialogBox(42);
		PlaySound('E', 14, 5);
	}
}

void CGame::DrawAngel(int iSprite, short sX, short sY, char cFrame, DWORD dwTime)
{
	switch (_tmp_cDir) {
		case 1:
			sX -= 30;
			break;
		case 2:
			sX -= 30;
			break;
		case 3:
			sX -= 30;
			break;
	}
	if ((_tmp_iStatus & 0x10) != 0) {
		if ((_tmp_iStatus & 0x1000) != 0) m_pSprite[DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + iSprite]->PutTransSprite(sX, sY, cFrame, dwTime);  //AngelicPendant(STR)
		else if ((_tmp_iStatus & 0x2000) != 0) m_pSprite[DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + (50 * 1) + iSprite]->PutTransSprite(sX, sY, cFrame, dwTime); //AngelicPendant(DEX)
		else if ((_tmp_iStatus & 0x4000) != 0) m_pSprite[DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + (50 * 2) + iSprite]->PutTransSprite(sX, sY - 15, cFrame, dwTime);//AngelicPendant(INT)
		else if ((_tmp_iStatus & 0x8000) != 0) m_pSprite[DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + (50 * 3) + iSprite]->PutTransSprite(sX, sY - 15, cFrame, dwTime);//AngelicPendant(MAG)
	}
	else
	{
		if ((_tmp_iStatus & 0x1000) != 0) m_pSprite[DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + iSprite]->PutSpriteFast(sX, sY, cFrame, dwTime);  //AngelicPendant(STR)
		else if ((_tmp_iStatus & 0x2000) != 0) m_pSprite[DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + (50 * 1) + iSprite]->PutSpriteFast(sX, sY, cFrame, dwTime); //AngelicPendant(DEX)
		else if ((_tmp_iStatus & 0x4000) != 0) m_pSprite[DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + (50 * 2) + iSprite]->PutSpriteFast(sX, sY - 15, cFrame, dwTime);//AngelicPendant(INT)
		else if ((_tmp_iStatus & 0x8000) != 0) m_pSprite[DEF_SPRID_TUTELARYANGELS_PIVOTPOINT + (50 * 3) + iSprite]->PutSpriteFast(sX, sY - 15, cFrame, dwTime);//AngelicPendant(MAG)

	}

}
/*********************************************************************************************************************
**  int CGame::bHasHeroSet( short m_sAppr3, short m_sAppr3, char OwnerType)		( Snoopy )							**
**  description			:: check weather the object (is character) is using a hero set (1:war, 2:mage)				**
**********************************************************************************************************************/
int CGame::bHasHeroSet(short Appr3, short Appr4, char OwnerType)
{
	char cArmor, cLeg, cBerk, cHat;
	cArmor = (Appr3 & 0xF000) >> 12;
	cLeg = (Appr3 & 0x0F00) >> 8;
	cHat = (Appr3 & 0x00F0) >> 4;
	cBerk = Appr3 & 0x000F;
	switch (OwnerType) {
		case 1:
		case 2:
		case 3:
			if ((cArmor == 8) && (cLeg == 5) && (cHat == 9) && (cBerk == 3)) return (1); // Warr elv M
			if ((cArmor == 9) && (cLeg == 6) && (cHat == 10) && (cBerk == 4)) return (1); // Warr ares M
			if ((cArmor == 10) && (cLeg == 5) && (cHat == 11) && (cBerk == 3)) return (2); // Mage elv M
			if ((cArmor == 11) && (cLeg == 6) && (cHat == 12) && (cBerk == 4)) return (2); // Mage ares M

			//News Heros Effects
			//Assasain
			if ((cArmor == 12) && (cLeg == 7) && (cHat == 13) && (cBerk == 5)) return (3); // Warr M
			if ((cArmor == 13) && (cLeg == 7) && (cHat == 14) && (cBerk == 5)) return (4); // Mage M

			//Power White Set
			if ((cArmor == 14) && (cLeg == 8) && (cHat == 15) && (cBerk == 6)) return (1); // Warr M
			if ((cArmor == 15) && (cLeg == 8) && (cHat == 2) && (cBerk == 6)) return (2); // Mage M
			break;
		case 4:
		case 5:
		case 6: // fixed
			if ((cArmor == 9) && (cLeg == 6) && (cHat == 9) && (cBerk == 4)) return (1); //warr elv W
			if ((cArmor == 10) && (cLeg == 7) && (cHat == 10) && (cBerk == 5)) return (1); //warr ares W
			if ((cArmor == 11) && (cLeg == 6) && (cHat == 11) && (cBerk == 4)) return (2); //mage elv W
			if ((cArmor == 12) && (cLeg == 7) && (cHat == 12) && (cBerk == 5)) return (2); //mage ares W

			//News Heros Effects
			//Assasain
			if ((cArmor == 1) && (cLeg == 8) && (cHat == 13) && (cBerk == 6)) return (3); //warr W
			if ((cArmor == 13) && (cLeg == 8) && (cHat == 14) && (cBerk == 6)) return (4); //mage W

			//Power White Set
			if ((cArmor == 14) && (cLeg == 9) && (cHat == 15) && (cBerk == 7)) return (1); //warr W
			if ((cArmor == 15) && (cLeg == 9) && (cHat == 2) && (cBerk == 7)) return (2); //mage W
			break;
	}
	return 0;
}
/*********************************************************************************************************************
**  void ShowHeldenianVictory( short sSide)				( Snoopy )													**
**  description			: Shows the Heldenian's End window															**
**********************************************************************************************************************/
void CGame::ShowHeldenianVictory(short sSide)
{
	int i, iPlayerSide;
	DisableDialogBox(18);
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
	{
		if (m_pMsgTextList[i] != NULL)
			delete m_pMsgTextList[i];
		m_pMsgTextList[i] = NULL;
	}
	if (DecriptBool(m_bCitizen) == FALSE) iPlayerSide = 0;
	else if (DecriptBool(m_bAresden) == TRUE) iPlayerSide = 1;
	else if (DecriptBool(m_bAresden) == FALSE) iPlayerSide = 2;
	switch (sSide) {
		case 0:
			PlaySound('E', 25, 0, 0);
			m_pMsgTextList[0] = new class CMsg(NULL, "Heldenian holy war has been closed!", NULL);
			m_pMsgTextList[1] = new class CMsg(NULL, " ", NULL);
			m_pMsgTextList[2] = new class CMsg(NULL, "Heldenian Holy war ended", NULL);
			m_pMsgTextList[3] = new class CMsg(NULL, "in a tie.", NULL);
			break;
		case 1:
			PlaySound('E', 25, 0, 0);
			m_pMsgTextList[0] = new class CMsg(NULL, "Heldenian holy war has been closed!", NULL);
			m_pMsgTextList[1] = new class CMsg(NULL, " ", NULL);
			m_pMsgTextList[2] = new class CMsg(NULL, "Heldenian Holy war ended", NULL);
			m_pMsgTextList[3] = new class CMsg(NULL, "in favor of Aresden.", NULL);
			break;
		case 2:
			PlaySound('E', 25, 0, 0);
			m_pMsgTextList[0] = new class CMsg(NULL, "Heldenian holy war has been closed!", NULL);
			m_pMsgTextList[1] = new class CMsg(NULL, " ", NULL);
			m_pMsgTextList[2] = new class CMsg(NULL, "Heldenian Holy war ended", NULL);
			m_pMsgTextList[3] = new class CMsg(NULL, "in favor of Elvine.", NULL);
			break;
	}
	m_pMsgTextList[4] = new class CMsg(NULL, " ", NULL);

	if (((iPlayerSide != 1) && (iPlayerSide != 2))   // Player not a normal citizen
		|| (sSide == 0))								// or no winner
	{
		PlaySound('E', 25, 0, 0);
		m_pMsgTextList[5] = new class CMsg(NULL, " ", NULL);
		m_pMsgTextList[6] = new class CMsg(NULL, " ", NULL);
		m_pMsgTextList[7] = new class CMsg(NULL, " ", NULL);
		m_pMsgTextList[8] = new class CMsg(NULL, " ", NULL);
	}
	else
	{
		if (sSide == iPlayerSide)
		{
			PlaySound('E', 23, 0, 0);
			PlaySound('C', 21, 0, 0);
			PlaySound('C', 22, 0, 0);
			m_pMsgTextList[5] = new class CMsg(NULL, "Congratulation.", NULL);
			m_pMsgTextList[6] = new class CMsg(NULL, "As cityzen of victory,", NULL);
			m_pMsgTextList[7] = new class CMsg(NULL, "You will recieve a reward.", NULL);
			m_pMsgTextList[8] = new class CMsg(NULL, "      ", NULL);
		}
		else
		{
			PlaySound('E', 24, 0, 0);
			PlaySound('C', 12, 0, 0);
			PlaySound('C', 13, 0, 0);
			m_pMsgTextList[5] = new class CMsg(NULL, "To our regret", NULL);
			m_pMsgTextList[6] = new class CMsg(NULL, "As cityzen of defeat,", NULL);
			m_pMsgTextList[7] = new class CMsg(NULL, "You cannot recieve any reward.", NULL);
			m_pMsgTextList[8] = new class CMsg(NULL, "     ", NULL);
		}
	}
	for (i = 9; i < 18; i++)
		m_pMsgTextList[i] = new class CMsg(NULL, " ", NULL);
	EnableDialogBox(18, NULL, NULL, NULL);
	DisableDialogBox(36);
	DisableDialogBox(37);
	DisableDialogBox(38);
}

/*********************************************************************************************************************
**  void DrawDialogBox_Resurect(short msX, short msY) 				( Snoopy )										**
**  description			: Asks the player if he accepts resurection													**
**********************************************************************************************************************/
void CGame::DrawDialogBox_Resurect(short msX, short msY)
{
	short sX, sY;
	//00476D02  |. 68 A4474C00    PUSH 004C47A4                    ;  ASCII "Someone intend to resurrect you."
	//00476D41  |. 68 8C474C00    PUSH 004C478C                    ;  ASCII "Will you revive here?"
	sX = m_stDialogBoxInfo[50].sX;
	sY = m_stDialogBoxInfo[50].sY;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME1, sX, sY, 2);

	PutString(sX + 50, sY + 20, "Someone intend to resurrect you.", RGB(4, 0, 50));
	PutString(sX + 80, sY + 35, "Will you revive here?", RGB(4, 0, 50));

	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 55, 19);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 55, 18);

	if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 55, 3);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 55, 2);
}

/*********************************************************************************************************************
**  void DlgBoxClick_ItemDrop(short msX, short msY)			( Snoopy )												**
**  description			: Response of the player if he accepts resurection or not									**
**********************************************************************************************************************/
void CGame::DlgBoxClick_Resurect(short msX, short msY)
{
	short sX, sY;
	//#define DEF_REQUEST_RESURRECTPLAYER_YES				0x0FC94214
	//#define DEF_REQUEST_RESURRECTPLAYER_NO				0x0FC94215
	sX = m_stDialogBoxInfo[50].sX;
	sY = m_stDialogBoxInfo[50].sY;
	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
	{   // yes
		bSendCommand(CLIENT_REQUEST_RESURRECTPLAYER_YES, 0, 0, 0, 0, 0, NULL, 0);
		DisableDialogBox(50);
	}
	else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
	{	// no
		bSendCommand(CLIENT_REQUEST_RESURRECTPLAYER_NO, 0, 0, 0, 0, 0, NULL, 0);
		DisableDialogBox(50);
	}
}

/*********************************************************************************************************************
**  void 	ResponseHeldenianTeleportList(char *pData)									(  Snoopy )					**
**  description			: Gail's TP																					**
**********************************************************************************************************************/
void CGame::ResponseHeldenianTeleportList(char *pData)
{
	char *cp;
	int  *ip, i;
#ifdef _DEBUGS
	AddEventList("Teleport ???", 10);
#endif
	cp = pData + 6;
	ip = (int*)cp;
	m_iTeleportMapCount = EncriptInt(*ip);
	cp += 4;
	for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
	{
		ip = (int*)cp;
		m_stTeleportList[i].iIndex = *ip;
		cp += 4;
		ZeroMemory(m_stTeleportList[i].mapname, sizeof(m_stTeleportList[i].mapname));
		memcpy(m_stTeleportList[i].mapname, cp, 10);
		cp += 10;
		ip = (int*)cp;
		m_stTeleportList[i].iX = *ip;
		cp += 4;
		ip = (int*)cp;
		m_stTeleportList[i].iY = *ip;
		cp += 4;
		ip = (int*)cp;
		m_stTeleportList[i].iCost = *ip;
		cp += 4;
	}
}

/*********************************************************************************************************************
**  void DrawDialogBox_CMDHallMenu(short msX, short msY)			( Snoopy )										**
**  description			: Draw the diag																				**
**********************************************************************************************************************/
void CGame::DrawDialogBox_CMDHallMenu(short msX, short msY)
{
	short sX, sY, szX;
	BOOL Check = FALSE;
	char cTxt[120];
	int i, pos;

	sX = m_stDialogBoxInfo[51].sX;
	sY = m_stDialogBoxInfo[51].sY;
	szX = m_stDialogBoxInfo[51].sSizeX;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);

	if (m_stDialogBoxInfo[51].cMode == 0)
		PutString_SprFont(sX + 68, sY + 12, DRAW_DIALOGBOX_ASSASAIN_MENU00, 255, 200, 0);
	else
	{
		if (m_stDialogBoxInfo[51].cMode != 10)
		{
			if ((msX > sX + 190) && (msX < sX + 240) && (msY > sY + 290) && (msY < sY + 310))
				PutString_SprFont(sX + 195, sY + 290, "Menu", 250, 250, 250);
			else PutString_SprFont(sX + 195, sY + 290, "Menu", 255, 200, 0);
		}
	}

	switch (m_stDialogBoxInfo[51].cMode) {
		case 0:
			if (Assasain)
			{
				// Assasain Trade Items
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 45) && (msY < sY + 60))
					PutAlignedString(sX, sX + szX, sY + 45, "Assassin Trade Items", 255, 255, 255);
				else PutAlignedString(sX, sX + szX, sY + 45, "Assassin Trade Items", 4, 0, 50);

				// Assain Heros
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 70) && (msY < sY + 85))
					PutAlignedString(sX, sX + szX, sY + 70, "Assassin Hero", 255, 255, 255);
				else PutAlignedString(sX, sX + szX, sY + 70, "Assassin Hero", 4, 0, 50);
				// Assain Weapons
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 95) && (msY < sY + 110))
					PutAlignedString(sX, sX + szX, sY + 95, "Assassin Weapons", 255, 255, 255);
				else PutAlignedString(sX, sX + szX, sY + 95, "Assassin Weapons", 4, 0, 50);
				// Assain Resets
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 120) && (msY < sY + 135))
					PutAlignedString(sX, sX + szX, sY + 120, "Assassin Reset", 255, 255, 255);
				else PutAlignedString(sX, sX + szX, sY + 120, "Assassin Reset", 4, 0, 50);
				// Assain Quest
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 145) && (msY < sY + 160))
				{
					if (m_stQuest[0].sTargetType != NULL && m_stQuest[1].sTargetType != NULL && m_stQuest[2].sTargetType != NULL)						
						PutAlignedString(sX, sX + szX, sY + 145, "Cancel quest", 255, 255, 255);
					else
						PutAlignedString(sX, sX + szX, sY + 145, "Quest List", 255, 255, 255);
				}
				else
				{
					if (m_stQuest[0].sTargetType != NULL && m_stQuest[1].sTargetType != NULL && m_stQuest[2].sTargetType != NULL)
						PutAlignedString(sX, sX + szX, sY + 145, "Cancel quest", 4, 0, 50);
					else
						PutAlignedString(sX, sX + szX, sY + 145, "Quest List", 4, 0, 50);
				}
				// Buy enemy kills
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 170) && (msY < sY + 185))
					PutAlignedString(sX, sX + szX, sY + 170, "Buy Enemy Kills", 255, 255, 255);
				else PutAlignedString(sX, sX + szX, sY + 170, "Buy Enemy Kills", 4, 0, 50);

				// Guilds
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 195) && (msY < sY + 210))
					PutAlignedString(sX, sX + szX, sY + 195, "Guild Menu", 255, 255, 255);
				else PutAlignedString(sX, sX + szX, sY + 195, "Guild Menu", 4, 0, 50);

				if (m_bIsCrusadeMode)
				{
					if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 220) && (msY < sY + 235))
						PutAlignedString(sX, sX + szX, sY + 220, DRAW_DIALOGBOX_CITYHALL_MENU17, 255, 255, 255);//"Change the crusade assignment."
					else PutAlignedString(sX, sX + szX, sY + 220, DRAW_DIALOGBOX_CITYHALL_MENU17, 4, 0, 50);//"
				}
				else PutAlignedString(sX, sX + szX, sY + 220, DRAW_DIALOGBOX_CITYHALL_MENU17, 65, 65, 65);
			}
			else
			{
				PutAlignedString(sX, sX + szX, sY + 70, "Assassin Hero", 65, 65, 65);
				PutAlignedString(sX, sX + szX, sY + 95, "Assassin Weapons", 65, 65, 65);
				PutAlignedString(sX, sX + szX, sY + 120, "Assassin Reset", 65, 65, 65);
				PutAlignedString(sX, sX + szX, sY + 145, "Quest List", 65, 65, 65);
				PutAlignedString(sX, sX + szX, sY + 170, "Buy Enemy Kills", 65, 65, 65);
				PutAlignedString(sX, sX + szX, sY + 195, "Guild Menu", 65, 65, 65);
				PutAlignedString(sX, sX + szX, sY + 220, DRAW_DIALOGBOX_CITYHALL_MENU17, 65, 65, 65);
			}

			// Trade items
			if (DecriptInt(m_iLevel) > 50)//agregado
			{
				if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 245) && (msY < sY + 260))
					PutAlignedString(sX, sX + szX, sY + 245, "Trade Items", 255, 255, 255);
				else PutAlignedString(sX, sX + szX, sY + 245, "Trade Items", 4, 0, 50);
			}
			else PutAlignedString(sX, sX + szX, sY + 245, "Trade Items", 65, 65, 65);//Agregado

			// Teleports menu
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 270) && (msY < sY + 285))
				PutAlignedString(sX, sX + szX, sY + 270, "Teleports menu", 255, 255, 255);
			else PutAlignedString(sX, sX + szX, sY + 270, "Teleports menu", 4, 0, 50);
			break;

		case 1: // 
			PutString_SprFont(sX + 75, sY + 12, DRAW_DIALOGBOX_ASSASAIN_MENU01, 255, 200, 0);

			//EspaceBar N� 1
			PutString(sX + 20, sY + 30, "-----------------------------------------------------", RGB(255, 255, 255));

			PutString(sX + 70, sY + 40, DRAW_DIALOGBOX_ASSASAIN_MENU02, RGB(255, 255, 255));

			//EspaceBar N� 2
			PutString(sX + 20, sY + 49, "-----------------------------------------------------", RGB(255, 255, 255));

			/* Assasain Helm */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM01b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 60) && (msY < sY + 75))
				{
					PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM01, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM01a, PRICE_ASSASAINITEM01b);
					PutString(sX + 160, sY + 60, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM01, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM01a, PRICE_ASSASAINITEM01b);
					PutString(sX + 160, sY + 60, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM01, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM01a, PRICE_ASSASAINITEM01b);
				PutString(sX + 160, sY + 60, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Helm */

			/* Assasain Armor */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM02b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 80) && (msY < sY + 95))
				{
					PutString(sX + 30, sY + 80, DRAW_DIALOGBOX_ASSASAINITEM02, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM02a, PRICE_ASSASAINITEM02b);
					PutString(sX + 160, sY + 80, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 80, DRAW_DIALOGBOX_ASSASAINITEM02, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM02a, PRICE_ASSASAINITEM02b);
					PutString(sX + 160, sY + 80, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 80, DRAW_DIALOGBOX_ASSASAINITEM02, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM02a, PRICE_ASSASAINITEM02b);
				PutString(sX + 160, sY + 80, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Armor */

			/* Assasain Hauberk */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM03b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 100) && (msY < sY + 115))
				{
					PutString(sX + 30, sY + 100, DRAW_DIALOGBOX_ASSASAINITEM03, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM03a, PRICE_ASSASAINITEM03b);
					PutString(sX + 160, sY + 100, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 100, DRAW_DIALOGBOX_ASSASAINITEM03, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM03a, PRICE_ASSASAINITEM03b);
					PutString(sX + 160, sY + 100, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 100, DRAW_DIALOGBOX_ASSASAINITEM03, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM03a, PRICE_ASSASAINITEM03b);
				PutString(sX + 160, sY + 100, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Hauberk */

			/* Assasain Leggings */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM04b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 120) && (msY < sY + 135))
				{
					PutString(sX + 30, sY + 120, DRAW_DIALOGBOX_ASSASAINITEM04, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM04a, PRICE_ASSASAINITEM04b);
					PutString(sX + 160, sY + 120, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 120, DRAW_DIALOGBOX_ASSASAINITEM04, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM04a, PRICE_ASSASAINITEM04b);
					PutString(sX + 160, sY + 120, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 120, DRAW_DIALOGBOX_ASSASAINITEM04, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM04a, PRICE_ASSASAINITEM04b);
				PutString(sX + 160, sY + 120, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Leggings */

			/* Assasain Cape */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM05b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 140) && (msY < sY + 155))
				{
					PutString(sX + 30, sY + 140, DRAW_DIALOGBOX_ASSASAINITEM05, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM05a, PRICE_ASSASAINITEM05b);
					PutString(sX + 160, sY + 140, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 140, DRAW_DIALOGBOX_ASSASAINITEM05, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM05a, PRICE_ASSASAINITEM05b);
					PutString(sX + 160, sY + 140, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 135, DRAW_DIALOGBOX_ASSASAINITEM05, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM05a, PRICE_ASSASAINITEM05b);
				PutString(sX + 160, sY + 135, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Cape */

			//EspaceBar N� 1
			PutString(sX + 20, sY + 165, "-----------------------------------------------------", RGB(255, 255, 255));

			PutString(sX + 70, sY + 175, DRAW_DIALOGBOX_ASSASAIN_MENU03, RGB(255, 255, 255));

			//EspaceBar N� 2
			PutString(sX + 20, sY + 184, "-----------------------------------------------------", RGB(255, 255, 255));

			/* Assasain Cap */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM06b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 195) && (msY < sY + 210))
				{
					PutString(sX + 30, sY + 195, DRAW_DIALOGBOX_ASSASAINITEM06, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM06a, PRICE_ASSASAINITEM06b);
					PutString(sX + 160, sY + 195, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 195, DRAW_DIALOGBOX_ASSASAINITEM06, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM06a, PRICE_ASSASAINITEM06b);
					PutString(sX + 160, sY + 195, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 195, DRAW_DIALOGBOX_ASSASAINITEM06, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM06a, PRICE_ASSASAINITEM06b);
				PutString(sX + 160, sY + 195, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Cap */

			/* Assasain Robe */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM07b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 215) && (msY < sY + 230))
				{
					PutString(sX + 30, sY + 215, DRAW_DIALOGBOX_ASSASAINITEM07, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM07a, PRICE_ASSASAINITEM07b);
					PutString(sX + 160, sY + 215, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 215, DRAW_DIALOGBOX_ASSASAINITEM07, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM07a, PRICE_ASSASAINITEM07b);
					PutString(sX + 160, sY + 215, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 215, DRAW_DIALOGBOX_ASSASAINITEM07, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM07a, PRICE_ASSASAINITEM07b);
				PutString(sX + 160, sY + 215, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Robe */

			/* Assasain Hauberk */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM03b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 235) && (msY < sY + 250))
				{
					PutString(sX + 30, sY + 235, DRAW_DIALOGBOX_ASSASAINITEM03, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM03a, PRICE_ASSASAINITEM03b);
					PutString(sX + 160, sY + 235, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 235, DRAW_DIALOGBOX_ASSASAINITEM03, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM03a, PRICE_ASSASAINITEM03b);
					PutString(sX + 160, sY + 235, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 235, DRAW_DIALOGBOX_ASSASAINITEM03, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM03a, PRICE_ASSASAINITEM03b);
				PutString(sX + 160, sY + 235, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Hauberk */

			/* Assasain Leggings */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM04b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 255) && (msY < sY + 270))
				{
					PutString(sX + 30, sY + 255, DRAW_DIALOGBOX_ASSASAINITEM04, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM04a, PRICE_ASSASAINITEM04b);
					PutString(sX + 160, sY + 255, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 255, DRAW_DIALOGBOX_ASSASAINITEM04, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM04a, PRICE_ASSASAINITEM04b);
					PutString(sX + 160, sY + 255, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 255, DRAW_DIALOGBOX_ASSASAINITEM04, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM04a, PRICE_ASSASAINITEM04b);
				PutString(sX + 160, sY + 255, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Leggings */

			/* Assasain Cape */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM05b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 275) && (msY < sY + 290))
				{
					PutString(sX + 30, sY + 275, DRAW_DIALOGBOX_ASSASAINITEM05, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM05a, PRICE_ASSASAINITEM05b);
					PutString(sX + 160, sY + 275, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 275, DRAW_DIALOGBOX_ASSASAINITEM05, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM05a, PRICE_ASSASAINITEM05b);
					PutString(sX + 160, sY + 275, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 275, DRAW_DIALOGBOX_ASSASAINITEM05, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM05a, PRICE_ASSASAINITEM05b);
				PutString(sX + 160, sY + 275, G_cTxt, RGB(165, 165, 165));
			}
			/* Assasain Cape */
			break;

		case 2:
			PutString_SprFont(sX + 75, sY + 12, DRAW_DIALOGBOX_ASSASAIN_MENU04, 255, 200, 0);

			//EspaceBar N� 1
			PutString(sX + 20, sY + 30, "-----------------------------------------------------", RGB(255, 255, 255));

			PutString(sX + 70, sY + 40, DRAW_DIALOGBOX_ASSASAIN_MENU05, RGB(255, 255, 255));

			//EspaceBar N� 2
			PutString(sX + 20, sY + 49, "-----------------------------------------------------", RGB(255, 255, 255));

			/* Black Kloness Esterk */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM08b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 60) && (msY < sY + 75))
				{
					PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM08, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM08a, PRICE_ASSASAINITEM08b);
					PutString(sX + 190, sY + 60, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM08, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM08a, PRICE_ASSASAINITEM08b);
					PutString(sX + 190, sY + 60, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM08, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM08a, PRICE_ASSASAINITEM08b);
				PutString(sX + 190, sY + 60, G_cTxt, RGB(165, 165, 165));
			}
			/* Black Kloness Esterk */

			/* Black Kloness Sword */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM09b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 80) && (msY < sY + 95))
				{
					PutString(sX + 30, sY + 80, DRAW_DIALOGBOX_ASSASAINITEM09, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM09a, PRICE_ASSASAINITEM09b);
					PutString(sX + 190, sY + 80, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 80, DRAW_DIALOGBOX_ASSASAINITEM09, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM09a, PRICE_ASSASAINITEM09b);
					PutString(sX + 190, sY + 80, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 80, DRAW_DIALOGBOX_ASSASAINITEM09, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM09a, PRICE_ASSASAINITEM09b);
				PutString(sX + 190, sY + 80, G_cTxt, RGB(165, 165, 165));
			}
			/* Black Kloness Sword */

			/* Black Kloness Axe */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM10b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 100) && (msY < sY + 115))
				{
					PutString(sX + 30, sY + 100, DRAW_DIALOGBOX_ASSASAINITEM10, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM10a, PRICE_ASSASAINITEM10b);
					PutString(sX + 190, sY + 100, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 100, DRAW_DIALOGBOX_ASSASAINITEM10, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM10a, PRICE_ASSASAINITEM10b);
					PutString(sX + 190, sY + 100, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 100, DRAW_DIALOGBOX_ASSASAINITEM10, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM10a, PRICE_ASSASAINITEM10b);
				PutString(sX + 190, sY + 100, G_cTxt, RGB(165, 165, 165));
			}
			/* Black Kloness Axe */

			/* Assassin Barbarian Hammer */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM11b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 120) && (msY < sY + 135))
				{
					PutString(sX + 30, sY + 120, DRAW_DIALOGBOX_ASSASAINITEM11, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM11a, PRICE_ASSASAINITEM11b);
					PutString(sX + 190, sY + 120, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 120, DRAW_DIALOGBOX_ASSASAINITEM11, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM11a, PRICE_ASSASAINITEM11b);
					PutString(sX + 190, sY + 120, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 120, DRAW_DIALOGBOX_ASSASAINITEM11, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM11a, PRICE_ASSASAINITEM11b);
				PutString(sX + 190, sY + 120, G_cTxt, RGB(165, 165, 165));
			}
			/* Assassin Barbarian Hammer */

			/* Assassin Magic Wand(MS.20) */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM12b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 140) && (msY < sY + 155))
				{
					PutString(sX + 30, sY + 140, DRAW_DIALOGBOX_ASSASAINITEM12, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM12a, PRICE_ASSASAINITEM12b);
					PutString(sX + 190, sY + 140, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 140, DRAW_DIALOGBOX_ASSASAINITEM12, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM12a, PRICE_ASSASAINITEM12b);
					PutString(sX + 190, sY + 140, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 140, DRAW_DIALOGBOX_ASSASAINITEM12, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM12a, PRICE_ASSASAINITEM12b);
				PutString(sX + 190, sY + 140, G_cTxt, RGB(165, 165, 165));
			}
			/* Assassin Magic Wand(MS.20) */

			/* Assassin Magic Wand(MS.40) */
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM13b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 160) && (msY < sY + 175))
				{
					PutString(sX + 30, sY + 160, DRAW_DIALOGBOX_ASSASAINITEM13, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM13a, PRICE_ASSASAINITEM13b);
					PutString(sX + 190, sY + 160, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 160, DRAW_DIALOGBOX_ASSASAINITEM13, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM13a, PRICE_ASSASAINITEM13b);
					PutString(sX + 190, sY + 160, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 160, DRAW_DIALOGBOX_ASSASAINITEM13, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM13a, PRICE_ASSASAINITEM13b);
				PutString(sX + 190, sY + 160, G_cTxt, RGB(165, 165, 165));
			}
			/* Assassin Magic Wand(MS.40) */
			break;

		case 3: // Assasain Reset
			PutString_SprFont(sX + 75, sY + 12, DRAW_DIALOGBOX_ASSASAIN_MENU07, 255, 200, 0);

			PutAlignedString(sX, sX + szX, sY + 85, "Para poder resetear tendras que pagar...", 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 100, "El valor del reset es de 5000", 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 115, "Junto con el reset, perderas los pks", 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 130, "sobrantes, tambien tu rep se volvera a 0", 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 145, "Si deseas restear elije la ciudad a la", 255, 255, 255);//"
			PutAlignedString(sX, sX + szX, sY + 160, "cual perteneceras a partir de ahora:", 255, 255, 255);//"

			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINRESET)
			{
				/* Aresden */
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 225) && (msY < sY + 240))
					PutAlignedString(sX, sX + szX, sY + 225, DRAW_DIALOGBOX_ASSASAINCITY1, 0, 255, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 225, DRAW_DIALOGBOX_ASSASAINCITY1, 255, 200, 0);
				/* Aresden */

				/* Elvine */
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 250) && (msY < sY + 265))
					PutAlignedString(sX, sX + szX, sY + 250, DRAW_DIALOGBOX_ASSASAINCITY2, 0, 255, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 250, DRAW_DIALOGBOX_ASSASAINCITY2, 255, 200, 0);
				/* Elvine */
			}
			else
				PutAlignedString(sX, sX + szX, sY + 235, "No tienes suficientes pks", 255, 255, 255);//"
			break;

		case 5:
			/* Change Pk to EK */
			PutString_SprFont(sX + 65, sY + 12, DRAW_DIALOGBOX_ASSASAIN_MENU08, 255, 200, 0);

			if (DecriptInt(m_iPKCount) >= 10)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 70) && (msY < sY + 85))
					PutAlignedString(sX, sX + szX, sY + 70, "10 Pks for 100 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 70, "10 Pks for 100 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 70, "10 Pks for 100 Eks", 125, 125, 125);

			if (DecriptInt(m_iPKCount) >= 50)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 90) && (msY < sY + 105))
					PutAlignedString(sX, sX + szX, sY + 90, "50 Pks for 500 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 90, "50 Pks for 500 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 90, "50 Pks for 500 Eks", 125, 125, 125);

			if (DecriptInt(m_iPKCount) >= 100)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 110) && (msY < sY + 125))
					PutAlignedString(sX, sX + szX, sY + 110, "100 Pks for 1000 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 110, "100 Pks for 1000 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 110, "100 Pks for 1000 Eks", 125, 125, 125);

			if (DecriptInt(m_iPKCount) >= 500)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 130) && (msY < sY + 145))
					PutAlignedString(sX, sX + szX, sY + 130, "500 Pks for 5000 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 130, "500 Pks for 5000 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 130, "500 Pks for 5000 Eks", 125, 125, 125);

			if (DecriptInt(m_iPKCount) >= 1000)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 150) && (msY < sY + 165))
					PutAlignedString(sX, sX + szX, sY + 150, "1000 Pks for 10000 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 150, "1000 Pks for 10000 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 150, "1000 Pks for 10000 Eks", 125, 125, 125);

			if (DecriptInt(m_iPKCount) >= 5000)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 170) && (msY < sY + 185))
					PutAlignedString(sX, sX + szX, sY + 170, "5000 Pks for 50000 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 170, "5000 Pks for 50000 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 170, "5000 Pks for 50000 Eks", 125, 125, 125);

			if (DecriptInt(m_iPKCount) >= 10000)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 190) && (msY < sY + 205))
					PutAlignedString(sX, sX + szX, sY + 190, "10000 Pks for 100000 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 190, "10000 Pks for 100000 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 190, "10000 Pks for 100000 Eks", 125, 125, 125);

			if (DecriptInt(m_iPKCount) >= 50000)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 210) && (msY < sY + 225))
					PutAlignedString(sX, sX + szX, sY + 210, "50000 Pks for 500000 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 210, "50000 Pks for 500000 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 210, "50000 Pks for 500000 Eks", 125, 125, 125);

			if (DecriptInt(m_iPKCount) >= 100000)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 230) && (msY < sY + 245))
					PutAlignedString(sX, sX + szX, sY + 230, "100000 Pks for 1000000 Eks", 255, 200, 0);
				else
					PutAlignedString(sX, sX + szX, sY + 230, "100000 Pks for 1000000 Eks", 255, 255, 255);
			}
			else
				PutAlignedString(sX, sX + szX, sY + 230, "100000 Pks for 1000000 Eks", 125, 125, 125);
			/* Change Pk to EK */
			break;

		case 8:
			if (DecriptInt(m_iTeleportMapCount) > 0)
			{
				//Reparando warning LaloRamos anulado v11 - Agregado (unsigned int)
			//	PutString_SprFont2(sX + (unsigned int)(szX / 3.5 + 1), sY + 41, DRAW_DIALOGBOX_CITYHALL_MENU69, 0, 0, 0); // "Teleport List"
			//	PutString_SprFont2(sX + (unsigned int)(szX / 3.5), sY + 40, DRAW_DIALOGBOX_CITYHALL_MENU69, 255, 200, 0); // "Teleport List"
				PutString_SprFont2(sX + (szX / 3.5 + 1), sY + 41, DRAW_DIALOGBOX_CITYHALL_MENU69, 0, 0, 0); // "Teleport List"
				PutString_SprFont2(sX + (szX / 3.5), sY + 40, DRAW_DIALOGBOX_CITYHALL_MENU69, 255, 200, 0); // "Teleport List"
				PutString2(sX + 20, sY + 60, "Normal teleports", 0, 250, 250);
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if ((m_stTeleportList[i].Event == FALSE) && (m_stTeleportList[i].TPEvent == FALSE))
					{
						pos++;
						ZeroMemory(cTxt, sizeof(cTxt));
						GetOfficialMapName(m_stTeleportList[i].mapname, cTxt);
						wsprintf(G_cTxt, DRAW_DIALOGBOX_CITYHALL_MENU77, cTxt, m_stTeleportList[i].iCost);
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 60 + pos * 15) && (msY <= sY + 74 + pos * 15))
							PutAlignedString(sX, sX + szX, sY + 60 + pos * 15, G_cTxt, 255, 255, 255);
						else PutAlignedString(sX, sX + szX, sY + 60 + pos * 15, G_cTxt, 255, 200, 0);
					}
				}

				PutString2(sX + 20, sY + 200, "Event Teleports", 0, 250, 250);
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if (m_stTeleportList[i].TPEvent == TRUE)
					{
						pos++;
						ZeroMemory(cTxt, sizeof(cTxt));
						GetOfficialMapName(m_stTeleportList[i].mapname, cTxt);
						wsprintf(G_cTxt, DRAW_DIALOGBOX_CITYHALL_MENU99, cTxt);
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 200 + pos * 15) && (msY <= sY + 214 + pos * 15))
							PutAlignedString(sX, sX + szX, sY + 200 + pos * 15, G_cTxt, 255, 255, 255);
						else PutAlignedString(sX, sX + szX, sY + 200 + pos * 15, G_cTxt, 255, 200, 0);
					}
				}

				PutString2(sX + 50, sY + 300, DRAW_DIALOGBOX_CITYHALL_MENU72_1, 255, 255, 255);//"Civilians cannot go some area."
			}
			else if (DecriptInt(m_iTeleportMapCount) == -1)
			{
				PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU73, 55, 25, 25);//"Now it's searching for possible area"
				PutAlignedString(sX, sX + szX, sY + 150, DRAW_DIALOGBOX_CITYHALL_MENU74, 55, 25, 25);//"to teleport."
				PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENU75, 55, 25, 25);//"Please wait for a moment."
			}
			else
			{
				PutAlignedString(sX, sX + szX, sY + 175, DRAW_DIALOGBOX_CITYHALL_MENU76, 55, 25, 25);//"There is no area that you can teleport."
			}
			break;

		case 10:
			switch (m_stDialogBoxInfo[51].sV1)
			{
				case 1:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM01, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM01, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 1;
					break;
				case 2:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM02, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM02, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 1;
					break;
				case 3:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM03, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM03, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 1;
					break;
				case 4:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM04, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM04, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 1;
					break;
				case 5:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM05, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM05, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 1;
					break;
				case 6:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM06, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM06, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 1;
					break;
				case 7:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM07, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM07, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 1;
					break;
				case 8:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM08, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM08, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 2;
					break;
				case 9:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM09, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM09, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 2;
					break;
				case 10:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM10, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM10, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 2;
					break;
				case 11:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM11, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM11, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 2;
					break;
				case 12:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM12, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM12, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 2;
					break;
				case 13:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM13, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM13, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 2;
					break;
				case 14:
					PutAlignedString(sX, sX + szX - 1, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM20, 55, 25, 25);
					PutAlignedString(sX + 1, sX + szX, sY + 125, DRAW_DIALOGBOX_ASSASAINITEM20, 55, 25, 25);
					Check = TRUE;
					m_stDialogBoxInfo[51].sV2 = 2;
					break;
				default:
					Check = FALSE;
					break;
			}
			if (Check)
			{
				PutAlignedString(sX, sX + szX, sY + 260, DRAW_DIALOGBOX_CITYHALL_MENU46A, 55, 25, 25);
				if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX)
					&& (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
				else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);
				if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX)
					&& (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
				else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			}
			break;

		case 11://agregar aca Cancel Quest
			PutAlignedString(sX, sX + szX, sY + 125, DRAW_DIALOGBOX_CITYHALL_MENU54, 55, 25, 25);//"
			PutAlignedString(sX, sX + szX, sY + 140, DRAW_DIALOGBOX_CITYHALL_MENU55, 55, 25, 25);//"

			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 19);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 18);

			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 3);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 2);
			break;

		case 12:
			PutString_SprFont(sX + 45, sY + 12, DRAW_DIALOGBOX_ASSASAIN_MENU09, 255, 200, 0);

			//EspaceBar N� 1
			PutString(sX + 20, sY + 30, "-----------------------------------------------------", RGB(255, 255, 255));

			PutString(sX + 30, sY + 40, DRAW_DIALOGBOX_ASSASAIN_MENU10, RGB(255, 255, 255));
			PutString(sX + 190, sY + 40, DRAW_DIALOGBOX_ASSASAIN_MENU11, RGB(255, 255, 255));

			//EspaceBar N� 2
			PutString(sX + 20, sY + 49, "-----------------------------------------------------", RGB(255, 255, 255));

			/* Rep Potion -100*/
			if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM20b)
			{
				if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 60) && (msY < sY + 75))
				{
					PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM20, RGB(249, 255, 45));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM20a, PRICE_ASSASAINITEM20b);
					PutString(sX + 190, sY + 60, G_cTxt, RGB(249, 255, 45));
				}
				else {
					PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM20, RGB(255, 255, 255));
					wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM20a, PRICE_ASSASAINITEM20b);
					PutString(sX + 190, sY + 60, G_cTxt, RGB(255, 255, 255));
				}
			}
			else {
				PutString(sX + 30, sY + 60, DRAW_DIALOGBOX_ASSASAINITEM20, RGB(165, 165, 165));
				wsprintf(G_cTxt, DRAW_DIALOGBOX_ASSASAINITEM20a, PRICE_ASSASAINITEM20b);
				PutString(sX + 190, sY + 60, G_cTxt, RGB(165, 165, 165));
			}
			/* Rep Potion -100*/
			break;
	}
}

/*********************************************************************************************************************
**  void DlgBoxClick_CMDHallMenu(short msX, short msY)			( Snoopy )											**
**  description			: Response of the player if he accepts resurection or not									**
**********************************************************************************************************************/
void CGame::DlgBoxClick_CMDHallMenu(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[51].sX;
	sY = m_stDialogBoxInfo[51].sY;

	if ((m_stDialogBoxInfo[51].cMode != 0) && (m_stDialogBoxInfo[51].cMode != 10))
		if ((msX > sX + 190) && (msX < sX + 240) && (msY > sY + 290) && (msY < sY + 310))
			m_stDialogBoxInfo[51].cMode = 0;

	switch (m_stDialogBoxInfo[51].cMode) {
		case 0: // initial diag
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 45) && (msY < sY + 60))
			{
				if (Assasain)
				{
					m_stDialogBoxInfo[51].cMode = 12;
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 70) && (msY < sY + 85))
			{
				if (Assasain)
				{
					m_stDialogBoxInfo[51].cMode = 1;
					PlaySound('E', 14, 5);
				}
			}
			// Assain Weapons
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 95) && (msY < sY + 110))
			{
				if (Assasain)
				{
					m_stDialogBoxInfo[51].cMode = 2;
					PlaySound('E', 14, 5);
				}
			}
			// Assain Resets
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 120) && (msY < sY + 135))
			{
				if (Assasain)
				{
					m_stDialogBoxInfo[51].cMode = 3;
					PlaySound('E', 14, 5);
				}
			}
			// Assain Quest
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 145) && (msY < sY + 160))
			{
				if (Assasain)
				{
					if (m_stQuest[0].sTargetType != NULL && m_stQuest[1].sTargetType != NULL && m_stQuest[2].sTargetType != NULL) {
						//m_stDialogBoxInfo[51].cMode = 11;
						//PlaySound('E', 14, 5);
						DisableDialogBox(51);
						SendChat("/getquests");
						EnableDialogBox(77, NULL, NULL, NULL);
						PlaySound('E', 14, 5);
						return;
					}
					else
					{
						DisableDialogBox(51);
						SendChat("/getquests");
						EnableDialogBox(77, NULL, NULL, NULL);
						PlaySound('E', 14, 5);
						return;
					}
				}
			}
			// Buy enemy kills
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 170) && (msY < sY + 185))
			{
				if (Assasain)
				{
					m_stDialogBoxInfo[51].cMode = 5;
					PlaySound('E', 14, 5);
				}
			}

			// Guild Menu
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 195) && (msY < sY + 210))
			{
				if (Assasain)
				{
					EnableDialogBox(7, NULL, NULL, NULL);
					DisableDialogBox(51);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 220) && (msY < sY + 235))
			{
				if (Assasain)
				{
					if (m_bIsCrusadeMode == FALSE) return;
					EnableDialogBox(33, 1, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			// Trade items
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 245) && (msY < sY + 260))
			{
				if (DecriptInt(m_iLevel) > 50)//agregado
				{
					EnableDialogBox(58, -2, NULL, NULL);
					DisableDialogBox(51);
					PlaySound('E', 14, 5);
				}
			}

			// Teleports menu
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 270) && (msY < sY + 285))
			{
				bSendCommand(CLIENT_REQUEST_TELEPORT_LIST, NULL, NULL, 2, NULL, NULL, NULL);
				m_stDialogBoxInfo[51].cMode = 8;
				PlaySound('E', 14, 5);
			}
			break;

		case 1:
			/* Assasain Hero Set War */
			/* Assasain Helm */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 60) && (msY < sY + 75))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM01b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 1; // Assasain Helm
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Helm */

			/* Assasain Armor */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 80) && (msY < sY + 95))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM02b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 2; // Assasain Armor
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Armor */

			/* Assasain Hauberk */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 100) && (msY < sY + 115))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM03b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 3; // Assasain Hauberk
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Hauberk */

			/* Assasain Leggings */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 120) && (msY < sY + 135))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM04b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 4; // Assasain Leggings
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Leggings */

			/* Assasain Cape */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 140) && (msY < sY + 155))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM05b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 5; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Cape */

			/* Assasain Hero Set Mage */

			/* Assasain Cap */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 195) && (msY < sY + 210))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM06b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 6; // Assasain Cap
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Cap */

			/* Assasain Robe */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 215) && (msY < sY + 230))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM07b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 7; // Assasain Robe
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Robe */

			/* Assasain Hauberk */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 235) && (msY < sY + 250))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM03b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 3; // Assasain Hauberk
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Hauberk */

			/* Assasain Leggings */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 255) && (msY < sY + 270))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM04b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 4; // Assasain Leggings
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Leggings */

			/* Assasain Cape */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 275) && (msY < sY + 290))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM05b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 5; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Assasain Cape */
			break;

		case 2:
			/* Black Kloness Esterk */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 60) && (msY < sY + 75))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM08b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 8; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Black Kloness Esterk */

			/* Black Kloness Sword */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 80) && (msY < sY + 95))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM09b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 9; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Black Kloness Sword */

			/* Black Kloness Axe */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 100) && (msY < sY + 115))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM10b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 10; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Black Kloness Axe */

			/* Assassin Barbarian Hammer */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 120) && (msY < sY + 135))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM11b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 11; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Assassin Barbarian Hammer */

			/* Assassin Magic Wand(MS.20) */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 140) && (msY < sY + 155))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM12b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 12; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Assassin Magic Wand(MS.20) */

			/* Assassin Magic Wand(MS.40) */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 160) && (msY < sY + 175))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM13b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 13; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Assassin Magic Wand(MS.40) */
			break;

			/* Reset Assasain */
		case 3:
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 225) && (msY < sY + 240))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINRESET)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RESETASSASAIN, NULL, 1, NULL, NULL, NULL);
					DisableDialogBox(51);
				}
			}
			else if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 250) && (msY < sY + 265))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINRESET)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_RESETASSASAIN, NULL, 2, NULL, NULL, NULL);
					DisableDialogBox(51);
				}
			}
			break;
			/* Reset Assasain */

		case 5:
			/* Change Pk to EK */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 70) && (msY < sY + 85))
			{
				if (DecriptInt(m_iPKCount) >= 10)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 1, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 90) && (msY < sY + 105))
			{
				if (DecriptInt(m_iPKCount) >= 50)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 2, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 110) && (msY < sY + 125))
			{
				if (DecriptInt(m_iPKCount) >= 100)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 3, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 130) && (msY < sY + 145))
			{
				if (DecriptInt(m_iPKCount) >= 500)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 4, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 150) && (msY < sY + 165))
			{
				if (DecriptInt(m_iPKCount) >= 1000)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 5, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 170) && (msY < sY + 185))
			{
				if (DecriptInt(m_iPKCount) >= 5000)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 6, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 190) && (msY < sY + 205))
			{
				if (DecriptInt(m_iPKCount) >= 10000)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 7, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 210) && (msY < sY + 225))
			{
				if (DecriptInt(m_iPKCount) >= 50000)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 8, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 230) && (msY < sY + 245))
			{
				if (DecriptInt(m_iPKCount) >= 100000)
				{
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CHANGEPKEK, NULL, 9, NULL, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}
			/* Change Pk to EK */
			break;

		case 8:
			if (DecriptInt(m_iTeleportMapCount) > 0)
			{
				int pos, i;
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if ((m_stTeleportList[i].Event == FALSE) && (m_stTeleportList[i].TPEvent == FALSE))
					{
						pos++;
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 60 + pos * 15) && (msY <= sY + 74 + pos * 15))
						{
							bSendCommand(CLIENT_REQUEST_CHARGED_TELEPORT, NULL, NULL, m_stTeleportList[i].iIndex, NULL, NULL, NULL);
							DisableDialogBox(13);
							return;
						}
					}
				}
				pos = 0;
				for (i = 0; i < DecriptInt(m_iTeleportMapCount); i++)
				{
					if (m_stTeleportList[i].TPEvent == TRUE)
					{
						pos++;
						if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + 200 + pos * 15) && (msY <= sY + 214 + pos * 15))
						{
							bSendCommand(CLIENT_REQUEST_CHARGED_TELEPORT, NULL, NULL, m_stTeleportList[i].iIndex, NULL, NULL, NULL);
							DisableDialogBox(13);
							return;
						}
					}
				}
			}
			break;

		case 10:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GETASSASAINHERO, NULL, m_stDialogBoxInfo[51].sV1, NULL, NULL, NULL);
				m_stDialogBoxInfo[51].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
			{
				m_stDialogBoxInfo[51].cMode = m_stDialogBoxInfo[51].sV2;
				PlaySound('E', 14, 5);
			}
			break;

		case 11:
			if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// Yes
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_CANCELQUEST, NULL, NULL, NULL, NULL, NULL);
				m_stDialogBoxInfo[51].cMode = 0;
				PlaySound('E', 14, 5);
			}
			if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
				// No
				m_stDialogBoxInfo[51].cMode = 0;
				PlaySound('E', 14, 5);
			}
			break;

		case 12:
			/* Rep Potion -100 */
			if ((msX > sX + 30) && (msX < sX + 190) && (msY > sY + 60) && (msY < sY + 75))
			{
				if (DecriptInt(m_iPKCount) >= PRICE_ASSASAINITEM20b)
				{
					m_stDialogBoxInfo[51].cMode = 10;
					m_stDialogBoxInfo[51].sV1 = 14; // Assasain Cape
					PlaySound('E', 14, 5);
				}
			}
			/* Rep Potion -100 */
			break;
	}
}

/*********************************************************************************************************************
**  bool DKGlare(int iWeaponIndex, int iWeaponIndex, int *iWeaponGlare)	( Snoopy )									**
**  description			: test glowing condition for DK set															**
**********************************************************************************************************************/
void CGame::DKGlare(short iWeaponColor, int iWeaponIndex, short *iWeaponGlare)
{
	switch (iWeaponColor)
	{
		case 9:
			if (((iWeaponIndex >= DEF_SPRID_WEAPON_M + 64 * 14) && (iWeaponIndex < DEF_SPRID_WEAPON_M + 64 * 14 + 56)) //msw3
				|| ((iWeaponIndex >= DEF_SPRID_WEAPON_W + 64 * 14) && (iWeaponIndex < DEF_SPRID_WEAPON_W + 64 * 14 + 56))) //wsw3
				*iWeaponGlare = 3;
			else if (((iWeaponIndex >= DEF_SPRID_WEAPON_M + 64 * 37) && (iWeaponIndex < DEF_SPRID_WEAPON_M + 64 * 37 + 56)) //MStaff3
				|| ((iWeaponIndex >= DEF_SPRID_WEAPON_W + 64 * 37) && (iWeaponIndex < DEF_SPRID_WEAPON_W + 64 * 37 + 56)))//WStaff3
				*iWeaponGlare = 3;
			else if (((iWeaponIndex >= DEF_SPRID_WEAPON_M + 64 * 32) && (iWeaponIndex < DEF_SPRID_WEAPON_M + 64 * 32 + 56)) //MStaff3 
				|| ((iWeaponIndex >= DEF_SPRID_WEAPON_W + 64 * 32) && (iWeaponIndex < DEF_SPRID_WEAPON_W + 64 * 32 + 56)))//WStaff3 
				*iWeaponGlare = 3;
			else if (((iWeaponIndex >= DEF_SPRID_WEAPON_M + 64 * 28) && (iWeaponIndex < DEF_SPRID_WEAPON_M + 64 * 28 + 56)) //MStaff3 
				|| ((iWeaponIndex >= DEF_SPRID_WEAPON_W + 64 * 28) && (iWeaponIndex < DEF_SPRID_WEAPON_W + 64 * 28 + 56)))//WStaff3 
				*iWeaponGlare = 3;
			break;
		case 2:
			if (((iWeaponIndex >= DEF_SPRID_WEAPON_M + 64 * 37) && (iWeaponIndex < DEF_SPRID_WEAPON_M + 64 * 37 + 56)) //MStaff3
				|| ((iWeaponIndex >= DEF_SPRID_WEAPON_W + 64 * 37) && (iWeaponIndex < DEF_SPRID_WEAPON_W + 64 * 37 + 56)))//WStaff3
				*iWeaponGlare = 2;
			break;

			//Assasain Weapons Glares
		case 11:
			*iWeaponGlare = 4;
			break;
		default:
			break;

	}
}

////////////////////////////////////////////////////////////////////////////

/************************************************************************************************************      */

void CGame::ThunderEffectAbaddonMap(short sX, short sY)
{
	int ir = (rand() % 10) - 5;
	_DrawThunderEffect(sX, 0, sX, sY, ir, ir, 2);
	_DrawThunderEffect(sX, 0, sX, sY, ir + 2, ir, 2);
	_DrawThunderEffect(sX, 0, sX, sY, ir + 2, ir + 3, 2);
	_DrawThunderEffect(sX, 0, sX, sY, ir - 1, ir + 3, 2);
	_DrawThunderEffect(sX, 0, sX, sY, ir + 1, ir - 4, 2);
	_DrawThunderEffect(sX, 0, sX, sY, ir - 1, ir + 4, 2);

}

/********************************************************************************************************************/


/*********************************************************************************************************************
**  void DrawDruncncity()	( Snoopy )																				**
**  description			: 	Placeholder for Druncncity effects (nota: bubbles already coded)						**
**********************************************************************************************************************/
void CGame::DrawDruncncity()
{
	DebugLog("druncncity");
}

/*********************************************************************************************************************
**  void CGame::Abaddon_corpse(int sX, int sY);		( Snoopy )														**
**  description			: Placeholder for abaddon's death lightnings												**
**********************************************************************************************************************/
void CGame::Abaddon_corpse(int sX, int sY)
{
	int ir = (rand() % 20) - 10;
	_DrawThunderEffect(sX + 30, 0, sX + 30, sY - 10, ir, ir, 1);
	_DrawThunderEffect(sX + 30, 0, sX + 30, sY - 10, ir + 2, ir, 2);
	_DrawThunderEffect(sX + 30, 0, sX + 30, sY - 10, ir - 2, ir, 2);
	ir = (rand() % 20) - 10;
	_DrawThunderEffect(sX - 20, 0, sX - 20, sY - 35, ir, ir, 1);
	_DrawThunderEffect(sX - 20, 0, sX - 20, sY - 35, ir + 2, ir, 2);
	_DrawThunderEffect(sX - 20, 0, sX - 20, sY - 35, ir - 2, ir, 2);
	ir = (rand() % 20) - 10;
	_DrawThunderEffect(sX - 10, 0, sX - 10, sY + 30, ir, ir, 1);
	_DrawThunderEffect(sX - 10, 0, sX - 10, sY + 30, ir + 2, ir + 2, 2);
	_DrawThunderEffect(sX - 10, 0, sX - 10, sY + 30, ir - 2, ir + 2, 2);
	ir = (rand() % 20) - 10;
	_DrawThunderEffect(sX + 50, 0, sX + 50, sY + 35, ir, ir, 1);
	_DrawThunderEffect(sX + 50, 0, sX + 50, sY + 35, ir + 2, ir + 2, 2);
	_DrawThunderEffect(sX + 50, 0, sX + 50, sY + 35, ir - 2, ir + 2, 2);
	ir = (rand() % 20) - 10;
	_DrawThunderEffect(sX + 65, 0, sX + 65, sY - 5, ir, ir, 1);
	_DrawThunderEffect(sX + 65, 0, sX + 65, sY - 5, ir + 2, ir + 2, 2);
	_DrawThunderEffect(sX + 65, 0, sX + 65, sY - 5, ir - 2, ir + 2, 2);
	ir = (rand() % 20) - 10;
	_DrawThunderEffect(sX + 45, 0, sX + 45, sY - 50, ir, ir, 1);
	_DrawThunderEffect(sX + 45, 0, sX + 45, sY - 50, ir + 2, ir + 2, 2);
	_DrawThunderEffect(sX + 45, 0, sX + 45, sY - 50, ir - 2, ir + 2, 2);

	for (int x = sX - 50; x <= sX + 100; x += rand() % 35)
		for (int y = sY - 30; y <= sY + 50; y += rand() % 45)
		{
			ir = (rand() % 20) - 10;
			_DrawThunderEffect(x, 0, x, y, ir, ir, 2);
		}
}

/*********************************************************************************************************************
**  void DebugLog(char * cStr)			( Snoopy )																	**
**  description			: writes data into "Debug.txt"																**
**********************************************************************************************************************/
void CGame::DebugLog(char * cStr)
{
	FILE * pFile;
	char cBuffer[512];
	SYSTEMTIME SysTime;
	pFile = fopen("Debug.txt", "at");
	if (pFile == NULL) return;
	ZeroMemory(cBuffer, sizeof(cBuffer));
	GetLocalTime(&SysTime);
	wsprintf(cBuffer, "(%4d:%2d:%2d_%2d:%2d:%2d) - ", SysTime.wYear, SysTime.wMonth, SysTime.wDay, SysTime.wHour, SysTime.wMinute, SysTime.wSecond);
	strcat(cBuffer, cStr);
	strcat(cBuffer, "\n");
	fwrite(cBuffer, 1, strlen(cBuffer), pFile);
	fclose(pFile);
}

void CGame::PutString_SprFont2(int iX, int iY, char * pStr, short sR, short sG, short sB)
{
	int iXpos, iR, iG, iB;
	DWORD iCnt;
	DWORD dwTime = G_dwGlobalTime;
	char  cTmpStr[200];

	m_DDraw.ColorTransferRGB(RGB(sR, sG, sB), &iR, &iG, &iB);

	ZeroMemory(cTmpStr, sizeof(cTmpStr));
	strcpy(cTmpStr, pStr);

	iXpos = iX;
	for (iCnt = 0; iCnt < strlen(cTmpStr); iCnt++) {
		if ((cTmpStr[iCnt] >= 33) && (cTmpStr[iCnt] <= 122)) {
			if ((sR == 0) && (sG == 0) && (sB == 0))
				m_pSprite[DEF_SPRID_INTERFACE_FONT1]->PutSpriteFast(iXpos, iY, cTmpStr[iCnt] - 33, dwTime);
			else m_pSprite[DEF_SPRID_INTERFACE_FONT1]->PutSpriteRGB(iXpos, iY, cTmpStr[iCnt] - 33, iR, iG, iB, dwTime);
			iXpos += __cSpace[cTmpStr[iCnt] - 33] + 2;// 33
		}
		else iXpos += 5; //5
	}
}

//Nuevos AntiHack 2013
//BOOL CGame::CheckProcesses()
BOOL CGame::CheckSarpado()
{
	HANDLE hSnapShot;
	PROCESSENTRY32 uProcess;
	BOOL r;
	BOOL bFound = FALSE;
	char Temp[50];
	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, 0);
	uProcess.dwSize = (DWORD)sizeof(PROCESSENTRY32);
	r = Process32First(hSnapShot, &uProcess);

	do {
		for (short i = 0; i < 100; i++) {
			DecriptString(Process[i]);
			if (strlen(Process[i]) > 0) {
				if (_stricmp(uProcess.szExeFile, Process[i]) == 0) {
					bFound = TRUE;
					strcpy(Temp, Process[i]);
				}
			}
			else i = 100;
			EncriptString(Process[i]);

		}
		r = Process32Next(hSnapShot, &uProcess);
	} while (r);
	CloseHandle(hSnapShot);

	if (bFound == TRUE) {
		//SetTopMsg("Client frozed by using cheats.", 8);
		//SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
		//wsprintf(G_cTxt, "!Soy tan pro, que estoy intentando usar cheats!");
		//bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, G_cTxt);
		//bSendCommand(CLIENT_REQUEST_HACKDETECTED, NULL, NULL, NULL, NULL, NULL, Temp);
		bSendCommand(CLIENT_REQUEST_PACKSARPAD, NULL, NULL, NULL, NULL, NULL, Temp);
	}
//	m_bHackMoveBlocked = EncriptBool(bFound);
	m_bPackSarpadBlock = EncriptBool(bFound);
	return bFound;
}

//BEHOLDER Cowboy al final de game.cpp
bool CGame::bCheckItemEquiped(char itemName[])
{
	for (int i = 0; i < DEF_MAXITEMS; i++)
	{
		if (m_pItemList[i] != NULL)
		{
			if (strcmp(m_pItemList[i]->m_cName, itemName) == 0)
			{
				for (int x = 0; x < DEF_MAXITEMEQUIPPOS; x++)
				{
					if (m_sItemEquipmentStatus[x] == i)
						return true;
				}
			}
		}
	}
	return false;
}

void CGame::ClearGuildList()
{
	for (short i = 0; i < 100; i++)
	{
		GuildMembersOnline[i].Rank = -1;
		ZeroMemory(GuildMembersOnline[i].GuildMemberName, sizeof(GuildMembersOnline[i].GuildMemberName));
	}
	if (DecriptInt(m_iGuildRank) != -1) bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_GUILDMEMBER, NULL, NULL, NULL, NULL, NULL);
	m_iTotalGMembes = 0;
}

//2009-03-18
void CGame::DrawDialogBox_FriendList(short msX, short msY, short msZ, char cLB)
{
	short sX, sY, sY2, i;
	short iMaxLines = 18;
	short d1, d2, d3, iPointerLoc;
	short Lines = 0;

	sX = m_stDialogBoxInfo[43].sX;
	sY = m_stDialogBoxInfo[43].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_EVENT, sX, sY, 1);

	PutString(sX + 19, sY + 323, "_________________________________", RGB(255, 255, 255));

	sY2 = sY + 35;

	PutString(sX + 25 - 1, sY + 33 - 1, "Character", RGB(0, 0, 0));
	PutString(sX + 25, sY + 33, "Character", RGB(0, 255, 0));

	PutString(sX + 150 - 1, sY + 33 - 1, "Status", RGB(0, 0, 0));
	PutString(sX + 150, sY + 33, "Status", RGB(0, 255, 0));

	switch (m_stDialogBoxInfo[53].cMode) {
		case 0: // Friend List
			PutString_SprFont(sX + 90 - 1, sY + 10 - 1, "Friend list", 0, 0, 0);
			PutString_SprFont(sX + 90, sY + 10, "Friend list", 255, 200, 0);

			for (i = 0; i <= m_iTotalFriends; i++) {
				if ((ListFriends[i].m_cFriends != NULL) && strlen(ListFriends[i].m_cFriends) > 0) {
					sY2 += 15;
					if (msX > sX + 25 && msX < sX + 150 && msY > sY2 && msY < sY2 + 15)
					{
						PutString(sX + 25 - 1, sY2 - 1, ListFriends[i].m_cFriends, RGB(0, 0, 0));
						PutString(sX + 25, sY2, ListFriends[i].m_cFriends, RGB(255, 200, 0));
					}
					else {
						PutString(sX + 25 - 1, sY2 - 1, ListFriends[i].m_cFriends, RGB(0, 0, 0));
						PutString(sX + 25, sY2, ListFriends[i].m_cFriends, RGB(255, 255, 255));
					}

					if (ListFriends[i].status)
					{
						PutString(sX + 150 - 1, sY2 - 1, "ON LINE", RGB(0, 0, 0));
						PutString(sX + 150, sY2, "ON LINE", RGB(0, 255, 0));
					}
					else
					{
						PutString(sX + 150 - 1, sY2 - 1, "OFF LINE", RGB(0, 0, 0));
						PutString(sX + 150, sY2, "OFF LINE", RGB(255, 0, 0));

					}
					if (msX > sX + 215 && msX < sX + 250 && msY > sY2 && msY < sY2 + 15)
					{
						PutString(sX + 215 - 1, sY2 - 1, "Delete", RGB(0, 0, 0));
						PutString(sX + 215, sY2, "Delete", RGB(255, 200, 0));
					}
					else
					{
						PutString(sX + 215 - 1, sY2 - 1, "Delete", RGB(0, 0, 0));
						PutString(sX + 215, sY2, "Delete", RGB(255, 255, 255));
					}
				}
			}
			break;

		case 1:
			PutString_SprFont(sX + 94 - 1, sY + 10 - 1, "Mute list", 0, 0, 0);
			PutString_SprFont(sX + 94, sY + 10, "Mute list", 255, 200, 0);

			//lalover
			for (i = 0; i <= m_iTotalMutes; i++) {
				if ((ListMute[i].m_cMuteName != NULL) && strlen(ListMute[i].m_cMuteName) > 0) {
					sY2 += 15;
					if (msX > sX + 25 && msX < sX + 150 && msY > sY2 && msY < sY2 + 15)
					{
						PutString(sX + 25 - 1, sY2 - 1, ListMute[i].m_cMuteName, RGB(0, 0, 0));
						if (!ListMute[i].status) PutString(sX + 25, sY2, ListMute[i].m_cMuteName, RGB(200, 200, 200));
						else PutString(sX + 25, sY2, ListMute[i].m_cMuteName, RGB(255, 200, 0));
					}
					else {
						PutString(sX + 25 - 1, sY2 - 1, ListMute[i].m_cMuteName, RGB(0, 0, 0));
						if (!ListMute[i].status) PutString(sX + 25, sY2, ListMute[i].m_cMuteName, RGB(200, 200, 200));
						else PutString(sX + 25, sY2, ListMute[i].m_cMuteName, RGB(255, 255, 255));
					}

					if (ListMute[i].status)
					{
						PutString(sX + 150 - 1, sY2 - 1, "Enable", RGB(0, 0, 0));
						PutString(sX + 150, sY2, "Enable", RGB(0, 255, 0));
					}
					else
					{
						PutString(sX + 150 - 1, sY2 - 1, "Disable", RGB(0, 0, 0));
						PutString(sX + 150, sY2, "Disable", RGB(255, 0, 0));
					}
					if (msX > sX + 215 && msX < sX + 250 && msY > sY2 && msY < sY2 + 15)
					{
						PutString(sX + 215 - 1, sY2 - 1, "Delete", RGB(0, 0, 0));
						PutString(sX + 215, sY2, "Delete", RGB(255, 200, 0));
					}
					else
					{
						PutString(sX + 215 - 1, sY2 - 1, "Delete", RGB(0, 0, 0));
						PutString(sX + 215, sY2, "Delete", RGB(255, 255, 255));
					}
				}
			}
			break;
		case 2:
			PutString_SprFont(sX + 75 - 1, sY + 10 - 1, "Guild Members Online", 0, 0, 0);
			PutString_SprFont(sX + 75, sY + 10, "Guild Members Online", 255, 200, 0);

			if (DecriptInt(m_iGuildRank) != -1)
			{
				if (m_iTotalGMembes > iMaxLines) {
					if (iGetTopDialogBoxIndex() == 43 && msZ != 0)
					{
						m_stDialogBoxInfo[43].sView = m_stDialogBoxInfo[43].sView - msZ / 60;
						m_DInput.m_sZ = 0;
					}
					if (m_stDialogBoxInfo[43].sView < 0) m_stDialogBoxInfo[43].sView = 0;
					if (m_iTotalGMembes > iMaxLines && m_stDialogBoxInfo[43].sView > m_iTotalGMembes - iMaxLines)
						m_stDialogBoxInfo[43].sView = m_iTotalGMembes - iMaxLines;

					//Reparando warning LaloRamos anulado v11 - Agregado (unsigned short)
					d1 = (double)m_stDialogBoxInfo[43].sView;
					d2 = (double)(m_iTotalGMembes - iMaxLines);
					d3 = ((300.0f * d1) / d2);
				/*	d1 = (unsigned short)m_stDialogBoxInfo[43].sView;
					d2 = (unsigned short)(m_iTotalGMembes - iMaxLines);
					d3 = (unsigned short)((300.0f * d1) / d2);*/
					iPointerLoc = (int)(d3 + 0.5);
					DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 252, sY + 32 + iPointerLoc, 7);
				}
				else iPointerLoc = 0;

				if (m_iTotalGMembes > iMaxLines) Lines = iMaxLines;
				else Lines = m_iTotalGMembes;

				for (i = 0; i < Lines; i++)
				{
					sY2 += 15;
					if (msX > sX + 25 && msX < sX + 150 && msY > sY2 && msY < sY2 + 15)
					{
						PutString(sX + 25 - 1, sY2 - 1, GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].GuildMemberName, RGB(0, 0, 0));
						PutString(sX + 25, sY2, GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].GuildMemberName, RGB(255, 200, 0));
					}
					else {
						PutString(sX + 25 - 1, sY2 - 1, GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].GuildMemberName, RGB(0, 0, 0));
						if (GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].Rank == 0)
							PutString(sX + 25, sY2, GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].GuildMemberName, RGB(0, 255, 0));
						else PutString(sX + 25, sY2, GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].GuildMemberName, RGB(255, 255, 255));
					}

					if (GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].Rank == 0)
					{
						PutString(sX + 150 - 1, sY2 - 1, "Master", RGB(0, 0, 0));
						PutString(sX + 150, sY2, "Master", RGB(0, 255, 0));
					}
					else
					{
						PutString(sX + 150 - 1, sY2 - 1, "Member", RGB(0, 0, 0));
						PutString(sX + 150, sY2, "Member", RGB(255, 200, 0));
					}
					//fix ban gm guild
					//if (DecriptInt(m_iGuildRank) == 0)
					if (DecriptInt(m_iGuildRank) == 0 && GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].Rank != 0)
					{
						if (msX > sX + 215 && msX < sX + 250 && msY > sY2 && msY < sY2 + 15)
						{
							PutString(sX + 215 - 1, sY2 - 1, "Ban", RGB(0, 0, 0));
							PutString(sX + 215, sY2, "Ban", RGB(255, 200, 0));
						}
						else
						{
							PutString(sX + 215 - 1, sY2 - 1, "Ban", RGB(0, 0, 0));
							PutString(sX + 215, sY2, "Ban", RGB(255, 255, 255));
						}
					}
				}
				if (cLB != 0 && m_iTotalGMembes > iMaxLines) {
					if ((iGetTopDialogBoxIndex() == 43)) {
						if ((msX >= sX + 246) && (msX <= sX + 260) && (msY >= sY + 32) && (msY <= sY + 336)) {
							//Reparando warning LaloRamos anulado v11 - Agregado (unsigned short)
							d1 = (double)(msY - (sY + 32));
							d2 = (double)(m_iTotalGMembes - iMaxLines);
							d3 = ((d1 * d2) / 300.0f);
/*
// 							d1 = (unsigned short)(msY - (sY + 32));
// 							d2 = (unsigned short)(m_iTotalGMembes - iMaxLines);
// 							d3 = (unsigned short)((d1 * d2) / 300.0f);
*/
							iPointerLoc = (int)d3;
							if (iPointerLoc > m_iTotalGMembes - iMaxLines) iPointerLoc = m_iTotalGMembes - iMaxLines;
							m_stDialogBoxInfo[43].sView = iPointerLoc;
						}
					}
				}
				else m_stDialogBoxInfo[43].bIsScrollSelected = FALSE;
			}
			break;
	}

	if ((msX > sX + 21) && (msX < sX + 94) && (msY > sY + 340) && (msY < sY + 359))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 21, sY + 340, 3);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 21, sY + 340, 0);

	if ((msX > sX + 98) && (msX < sX + 171) && (msY > sY + 340) && (msY < sY + 359))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 98, sY + 340, 4);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 98, sY + 340, 1);

	if ((msX > sX + 175) && (msX < sX + 248) && (msY > sY + 340) && (msY < sY + 359))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 175, sY + 340, 5);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 175, sY + 340, 2);
}
void CGame::DlgBoxClick_FriendList(short msX, short msY) // 43 - drajwer
{
	short sX, sY;
	int i;
	char cTxt[20];
	short sY2;
	short iMaxLines = 19;
	short Lines = 0;

	sX = m_stDialogBoxInfo[43].sX;
	sY = m_stDialogBoxInfo[43].sY;

	sY2 = sY + 35;

	switch (m_stDialogBoxInfo[53].cMode) {
		case 0: // Friend List
			for (i = 0; i <= m_iTotalFriends; i++) {
				if ((ListFriends[i].m_cFriends != NULL) && strlen(ListFriends[i].m_cFriends) > 0)
				{
					sY2 += 15;
					if (msX > sX + 25 && msX < sX + 150 && msY > sY2 && msY < sY2 + 15)
					{
						if (ListFriends[i].status)
						{
							ZeroMemory(cTxt, sizeof(cTxt));
							wsprintf(cTxt, "/to %s", ListFriends[i].m_cFriends);
							bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, cTxt);
						}
					}
					if (msX > sX + 215 && msX < sX + 250 && msY > sY2 && msY < sY2 + 15)
						DeleteFriend(i);
				}
			}
			break;
		case 1:
			for (i = 0; i <= m_iTotalMutes; i++) {
				if ((ListMute[i].m_cMuteName != NULL) && strlen(ListMute[i].m_cMuteName) > 0)
				{
					sY2 += 15;
					if (msX > sX + 25 && msX < sX + 150 && msY > sY2 && msY < sY2 + 15)
					{
						if (!ListMute[i].status)
						{
							ZeroMemory(cTxt, sizeof(cTxt));
							wsprintf(cTxt, "/to %s", ListMute[i].m_cMuteName);
							bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, cTxt);
						}
					}
					if (msX > sX + 150 && msX < sX + 210 && msY > sY2 && msY < sY2 + 15)
					{
						if (ListMute[i].status) ListMute[i].status = FALSE;
						else ListMute[i].status = TRUE;
					}
					if (msX > sX + 215 && msX < sX + 250 && msY > sY2 && msY < sY2 + 15) DeleteMute(i);
				}
			}
			break;

		case 2:
			if (DecriptInt(m_iGuildRank) != -1)
			{
				if (m_iTotalGMembes > iMaxLines) Lines = iMaxLines;
				else Lines = m_iTotalGMembes;

				for (i = 0; i <= Lines; i++)
				{
					sY2 += 15;
					if (msX > sX + 25 && msX < sX + 150 && msY > sY2 && msY < sY2 + 15)
					{
						ZeroMemory(cTxt, sizeof(cTxt));
						wsprintf(cTxt, "/to %s", GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].GuildMemberName);
						bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, cTxt);
					}

					//fix ban gm guild
					//if (DecriptInt(m_iGuildRank) == 0)
					if (DecriptInt(m_iGuildRank) == 0 && GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].Rank != 0)

					{
						if (msX > sX + 215 && msX < sX + 250 && msY > sY2 && msY < sY2 + 15)
						{
							ZeroMemory(cTxt, sizeof(cTxt));
							wsprintf(cTxt, "/ban %s", GuildMembersOnline[i + m_stDialogBoxInfo[43].sView].GuildMemberName);
							bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, cTxt);
						}
					}
				}
			}
			break;
	}

	if ((msX > sX + 21) && (msX < sX + 94) && (msY > sY + 340) && (msY < sY + 359))
		m_stDialogBoxInfo[53].cMode = 0;

	if ((msX > sX + 98) && (msX < sX + 171) && (msY > sY + 340) && (msY < sY + 359))
		m_stDialogBoxInfo[53].cMode = 1;

	if ((msX > sX + 175) && (msX < sX + 248) && (msY > sY + 340) && (msY < sY + 359))
		m_stDialogBoxInfo[53].cMode = 2;

}
void CGame::SaveFriendList()
{
	int i;
	char wr[12];
	char cFn[100];

	ZeroMemory(cFn, sizeof(cFn));

	strcat(cFn, "DATA");
	mkdir(cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");

	//DecriptString(m_cPlayerName);
	strcat(cFn, m_cPlayerName);
	//EncriptString(m_cPlayerName);

	mkdir(cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "FriendList.txt");

	FILE * f = fopen(cFn, "w");

	if (!f) return;
	for (i = 0; i <= m_iTotalFriends; i++) {
		ZeroMemory(wr, sizeof(wr));
		wsprintf(wr, "%s\n", ListFriends[i].m_cFriends);
		fputs(wr, f);
	}
	fclose(f);
}
void CGame::LoadFriendList()
{
	char buf[20];
	short i;
	unsigned long linie = 0;
	char cFn[100];
	m_iTotalFriends = 0;

	ZeroMemory(cFn, sizeof(cFn));

	strcat(cFn, "DATA");
	strcat(cFn, "\\");
	strcat(cFn, "\\");

	//DecriptString(m_cPlayerName);
	strcat(cFn, m_cPlayerName);
	//EncriptString(m_cPlayerName);

	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "FriendList.txt");

	FILE * f = fopen(cFn, "r");
	if (!f) return;

	for (i = 0; i < DEF_MAXLISTNAMES; i++)
	{
		ZeroMemory(ListFriends[i].m_cFriends, sizeof(ListFriends[i].m_cFriends));
		ListFriends[i].status = FALSE;
	}

	while (fgets(buf, 20, f)) {
		if (m_iTotalFriends < DEF_MAXLISTNAMES) {
			memcpy(ListFriends[m_iTotalFriends].m_cFriends, buf, strlen(buf) - 1);
			if (strlen(ListFriends[m_iTotalFriends].m_cFriends) > 0)
				m_iTotalFriends++;
		}
		else fclose(f);
	}
	m_iTotalFriends--;

	for (i = 0; i <= m_iTotalFriends; i++)
		if ((ListFriends[i].m_cFriends != NULL) && strlen(ListFriends[i].m_cFriends) > 0)
			bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_STATUSFRIEND, NULL, i, NULL, NULL, ListFriends[i].m_cFriends);
}

void CGame::AddFriend(char CharacterName[10])
{
	short i;
	for (i = 0; i <= m_iTotalFriends; i++)
	{
		if (strcmp(ListFriends[i].m_cFriends, CharacterName) == 0)
		{
			AddEventList("Friend in the list", 10);
			return;
		}
	}
	m_iTotalFriends++;
	if (m_iTotalFriends < DEF_MAXLISTNAMES)
	{
		memcpy(ListFriends[m_iTotalFriends].m_cFriends, CharacterName, 10);
		AddEventList("Friend added", 10);
		SaveFriendList();
		bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_STATUSFRIEND, NULL, m_iTotalFriends, NULL, NULL, ListFriends[m_iTotalFriends].m_cFriends);
	}
	else
	{
		AddEventList("Friend not added, full list", 10);
		m_iTotalFriends--;
	}
}

void CGame::DeleteFriend(short Position)
{
	short i;
	for (i = Position; i <= m_iTotalFriends; i++)
	{
		memcpy(ListFriends[i].m_cFriends, ListFriends[i + 1].m_cFriends, 10);
		ListFriends[i].status = ListFriends[i + 1].status;

		ZeroMemory(ListFriends[i + 1].m_cFriends, sizeof(ListFriends[i + 1].m_cFriends));
		ListFriends[i + 1].status = FALSE;
	}
	m_iTotalFriends--;
	SaveFriendList();
}

void CGame::LoadMuteList()
{
	char buf[20];
	short i;
	unsigned long linie = 0;
	char cFn[100];

	m_iTotalMutes = 0;

	ZeroMemory(cFn, sizeof(cFn));

	strcat(cFn, "DATA");
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	
	//DecriptString(m_cPlayerName);
	strcat(cFn, m_cPlayerName);
	//EncriptString(m_cPlayerName);

	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "MuteList.txt");

	FILE * f = fopen(cFn, "r");
	if (!f) return;

	for (i = 0; i < DEF_MAXLISTNAMES; i++)
	{
		ZeroMemory(ListMute[i].m_cMuteName, sizeof(ListMute[i].m_cMuteName));
		ListMute[i].status = TRUE;
	}

	while (fgets(buf, 20, f)) {
		if (m_iTotalMutes < DEF_MAXLISTNAMES) {
			memcpy(ListMute[m_iTotalMutes].m_cMuteName, buf, strlen(buf) - 2);
			if (strlen(ListMute[m_iTotalMutes].m_cMuteName) > 0)
			{
			//lalover
				//if (buf[strlen(buf) - 2] == '1') ListMute[m_iTotalMutes].status = TRUE;
				if (buf[strlen(buf) - 2] == '1') ListMute[m_iTotalMutes].status = TRUE;
				else ListMute[m_iTotalMutes].status = FALSE;
				m_iTotalMutes++;
			}
		}
		//Sacado probando
		//else fclose(f);
	}
	//agregado aca fclose(f);
	fclose(f);
	m_iTotalMutes--;
}

void CGame::SaveMuteList()
{
	int i;
	char wr[300];
	char cFn[100];

	ZeroMemory(cFn, sizeof(cFn));

	strcat(cFn, "DATA");
	mkdir(cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");

	//DecriptString(m_cPlayerName);
	strcat(cFn, m_cPlayerName);
	//EncriptString(m_cPlayerName);

	mkdir(cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "MuteList.txt");

	FILE * f = fopen(cFn, "w");

	if (!f) return;
	ZeroMemory(wr, sizeof(wr));
	for (i = 0; i <= m_iTotalMutes; i++) {
		strcat(wr, ListMute[i].m_cMuteName);
		if (ListMute[i].status) strcat(wr, " 1\n");
		else strcat(wr, " 0\n");
	}

	fputs(wr, f);
	fclose(f);
}

void CGame::DeleteMute(short Position)
{
	short i;
	for (i = Position; i <= m_iTotalMutes; i++)
	{
		memcpy(ListMute[i].m_cMuteName, ListMute[i + 1].m_cMuteName, 10);
		ListMute[i].status = ListMute[i + 1].status;

		ZeroMemory(ListMute[i + 1].m_cMuteName, sizeof(ListMute[i + 1].m_cMuteName));
		ListMute[i + 1].status = FALSE;
	}
	m_iTotalMutes--;
}

void CGame::OpenNoticement()
{
	DWORD  dwFileSize;
	HANDLE hFile;

	hFile = CreateFile("contents\\contents1000.txt", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	if (hFile == INVALID_HANDLE_VALUE)
		dwFileSize = 0;
	else
	{
		dwFileSize = GetFileSize(hFile, NULL);
		CloseHandle(hFile);
	}
	bSendCommand(CLIENT_REQUEST_NOTICEMENT, NULL, NULL, (int)dwFileSize, NULL, NULL, NULL);
}

void CGame::DlgBoxClick_Event(short msX, short msY)
{
	int sX, sY;

	sX = m_stDialogBoxInfo[55].sX;
	sY = m_stDialogBoxInfo[55].sY;
}

void CGame::DrawDialogBox_Event(short msX, short msY)
{
	int sX, sY;
	short Option;
	char LastWinner[17], AresdenWinner[15], ElvineWinner[14], DrawWinner[10];
	SYSTEMTIME SysTime;

	sX = m_stDialogBoxInfo[55].sX;
	sY = m_stDialogBoxInfo[55].sY;
	short sizeX = m_stDialogBoxInfo[55].sSizeX;

	Option = m_stDialogBoxInfo[55].cMode;

	ZeroMemory(LastWinner, sizeof(LastWinner));
	memcpy(LastWinner, "Ultimo Ganador: ", 17);

	ZeroMemory(AresdenWinner, sizeof(AresdenWinner));
	memcpy(AresdenWinner, "Aresden Gano: ", 15);

	ZeroMemory(ElvineWinner, sizeof(ElvineWinner));
	memcpy(ElvineWinner, "Elvine Gano: ", 14);

	ZeroMemory(DrawWinner, sizeof(DrawWinner));
	memcpy(DrawWinner, "Empates: ", 10);

	DrawShadowDialog2(sX, sY, 55);

	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "Event Menu", 0, 0, 0);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 4, "Event Menu", 250, 250, 250);


	PutString(sX + 30 - 1, sY + 39 - 1, "Eventos", RGB(0, 0, 0));
	PutString(sX + 30, sY + 39, "Eventos", RGB(0, 255, 0));

	PutString(sX + 148 - 1, sY + 39 - 1, "Informacion", RGB(0, 0, 0));
	PutString(sX + 148, sY + 39, "Informacion", RGB(0, 255, 0));

	//Crusade
	if ((msX > sX + 25) && (msX < sX + 125) && (msY > sY + 60) && (msY < sY + 75))
	{
		PutString(sX + 30 - 1, sY + 62 - 1, "Crusade >>", RGB(0, 0, 0));
		PutString(sX + 30, sY + 62, "Crusade >>", RGB(255, 200, 0));
		Option = 1;
	}
	else
	{
		PutString(sX + 30 - 1, sY + 62 - 1, "Crusade", RGB(0, 0, 0));
		PutString(sX + 30, sY + 62, "Crusade", RGB(255, 255, 255));
	}

	//Capture The Flag
	if ((msX > sX + 25) && (msX < sX + 125) && (msY > sY + 77) && (msY < sY + 92))
	{
		PutString(sX + 30 - 1, sY + 79 - 1, "Capture The Flag >>", RGB(0, 0, 0));
		PutString(sX + 30, sY + 79, "Capture The Flag >>", RGB(255, 200, 0));
		Option = 2;
	}
	else
	{
		PutString(sX + 30 - 1, sY + 79 - 1, "Capture The Flag", RGB(0, 0, 0));
		PutString(sX + 30, sY + 79, "Capture The Flag", RGB(255, 255, 255));
	}

	//Rush
	if ((msX > sX + 25) && (msX < sX + 125) && (msY > sY + 94) && (msY < sY + 109))
	{
		PutString(sX + 30 - 1, sY + 96 - 1, "Rush >>", RGB(0, 0, 0));
		PutString(sX + 30, sY + 96, "Rush >>", RGB(255, 200, 0));
		Option = 3;
	}
	else
	{
		PutString(sX + 30 - 1, sY + 96 - 1, "Rush", RGB(0, 0, 0));
		PutString(sX + 30, sY + 96, "Rush", RGB(255, 255, 255));
	}

	//Tower Denfese
	if ((msX > sX + 25) && (msX < sX + 125) && (msY > sY + 111) && (msY < sY + 126))
	{
		PutString(sX + 30 - 1, sY + 113 - 1, "Tower Denfese >>", RGB(0, 0, 0));
		PutString(sX + 30, sY + 113, "Tower Denfese >>", RGB(255, 200, 0));
		Option = 4;
	}
	else
	{
		PutString(sX + 30 - 1, sY + 113 - 1, "Tower Denfese ", RGB(0, 0, 0));
		PutString(sX + 30, sY + 113, "Tower Denfese ", RGB(255, 255, 255));
	}

	//Tower Denfese
	if ((msX > sX + 25) && (msX < sX + 125) && (msY > sY + 128) && (msY < sY + 143))
	{
		PutString(sX + 30 - 1, sY + 130 - 1, "City Vs City >>", RGB(0, 0, 0));
		PutString(sX + 30, sY + 130, "City Vs City >>", RGB(255, 200, 0));
		Option = 5;
	}
	else
	{
		PutString(sX + 30 - 1, sY + 130 - 1, "City Vs City", RGB(0, 0, 0));
		PutString(sX + 30, sY + 130, "City Vs City", RGB(255, 255, 255));
	}

	//Evento Tere
	if ((msX > sX + 25) && (msX < sX + 125) && (msY > sY + 145) && (msY < sY + 160))
	{
		PutString(sX + 30 - 1, sY + 147 - 1, "Hell of Death >>", RGB(0, 0, 0));
		PutString(sX + 30, sY + 147, "Hell of Death >>", RGB(255, 200, 0));
		Option = 6;
	}
	else
	{
		PutString(sX + 30 - 1, sY + 147 - 1, "Hell of Death", RGB(0, 0, 0));
		PutString(sX + 30, sY + 147, "Hell of Death", RGB(255, 255, 255));
	}
	//Evento World War
	if ((msX > sX + 25) && (msX < sX + 125) && (msY > sY + 162) && (msY < sY + 177))
	{
		PutString(sX + 30 - 1, sY + 164 - 1, "World War >>", RGB(0, 0, 0));
		PutString(sX + 30, sY + 164, "World War >>", RGB(255, 200, 0));
		Option = 7;
	}
	else
	{
		PutString(sX + 30 - 1, sY + 164 - 1, "World War", RGB(0, 0, 0));
		PutString(sX + 30, sY + 164, "World War", RGB(255, 255, 255));
	}

	//Evento World War II
	if ((msX > sX + 25) && (msX < sX + 125) && (msY > sY + 179) && (msY < sY + 194))
	{
		PutString(sX + 30 - 1, sY + 181 - 1, "World War II >>", RGB(0, 0, 0));
		PutString(sX + 30, sY + 181, "World War II >>", RGB(255, 200, 0));
		Option = 8;
	}
	else
	{
		PutString(sX + 30 - 1, sY + 181 - 1, "World War II", RGB(0, 0, 0));
		PutString(sX + 30, sY + 181, "World War II", RGB(255, 255, 255));
	}

	//Imprimo en pantalla
	switch (Option)
	{
		case 1: //Crusade
			PutString(sX + 148 - 1, sY + 65 - 1, "Crusade: ", RGB(0, 0, 0));
			PutString(sX + 148, sY + 65, "Crusade: ", RGB(255, 255, 255));
			break;

		case 2: //Capture The Flag
			PutString(sX + 148 - 1, sY + 65 - 1, "Capture The Flag: ", RGB(0, 0, 0));
			PutString(sX + 148, sY + 65, "Capture The Flag: ", RGB(255, 255, 255));
			break;

		case 3: //Capture The Flag
			PutString(sX + 148 - 1, sY + 65 - 1, "Rush: ", RGB(0, 0, 0));
			PutString(sX + 148, sY + 65, "Rush: ", RGB(255, 255, 255));
			break;

		case 4: //Rush
			PutString(sX + 148 - 1, sY + 65 - 1, "Tower Defense: ", RGB(0, 0, 0));
			PutString(sX + 148, sY + 65, "Tower Defense: ", RGB(255, 255, 255));
			break;

		case 5: //Tower Defense
			PutString(sX + 148 - 1, sY + 65 - 1, "City Vs City: ", RGB(0, 0, 0));
			PutString(sX + 148, sY + 65, "City Vs City: ", RGB(255, 255, 255));
			break;

		case 6: //Evento Tere
			PutString(sX + 148 - 1, sY + 65 - 1, "Hell of Death: ", RGB(0, 0, 0));
			PutString(sX + 148, sY + 65, "Hell of Death: ", RGB(255, 255, 255));
			break;

		case 7: //Evento WorldWar
			PutString(sX + 148 - 1, sY + 65 - 1, "World War: ", RGB(0, 0, 0));
			PutString(sX + 148, sY + 65, "World War: ", RGB(255, 255, 255));
			break;

		case 8: //Evento WorldWar
			PutString(sX + 148 - 1, sY + 65 - 1, "World War II: ", RGB(0, 0, 0));
			PutString(sX + 148, sY + 65, "World War II: ", RGB(255, 255, 255));
			break;

		default: break;
	}

	if (Option != 0)
	{
		PutString(sX + 148 - 1, sY + 90 - 1, LastWinner, RGB(0, 0, 0));
		PutString(sX + 148, sY + 90, LastWinner, RGB(255, 255, 255));
		PutString(sX + 148 - 1, sY + 130 - 1, AresdenWinner, RGB(0, 0, 0));
		PutString(sX + 148, sY + 130, AresdenWinner, RGB(255, 255, 255));
		PutString(sX + 148 - 1, sY + 150 - 1, ElvineWinner, RGB(0, 0, 0));
		PutString(sX + 148, sY + 150, ElvineWinner, RGB(255, 255, 255));
		PutString(sX + 148 - 1, sY + 170 - 1, DrawWinner, RGB(0, 0, 0));
		PutString(sX + 148, sY + 170, DrawWinner, RGB(255, 255, 255));

		if (LastWin[Option] == 1)
		{
			//PutString(sX + 148 - 1, sY + 110, "Aresden", 0, 0, 0);
			PutString2(sX + 148, sY + 110, "Aresden", 255, 0, 0);
		}
		else if (LastWin[Option] == 2)
		{
			//PutString(sX + 148 - 1, sY + 110, "Elvine", 0, 0, 0);
			PutString2(sX + 148, sY + 110, "Elvine", 0, 0, 255);
		}
		else
		{
			//PutString(sX + 148 - 1, sY + 110, "Sin ganador", 0, 0, 0);
			PutString2(sX + 148, sY + 110, "Sin ganador", 0, 255, 0);
		}

		wsprintf(G_cTxt, "%d", AresdenWin[Option]);
		PutString(sX + 230 - 1, sY + 130 - 1, G_cTxt, RGB(0, 0, 0));
		PutString(sX + 230, sY + 130, G_cTxt, RGB(255, 0, 0));
		wsprintf(G_cTxt, "%d", ElvineWin[Option]);
		PutString(sX + 230 - 1, sY + 150 - 1, G_cTxt, RGB(0, 0, 0));
		PutString(sX + 230, sY + 150, G_cTxt, RGB(0, 0, 255));
		wsprintf(G_cTxt, "%d", Draw[Option]);
		PutString(sX + 230 - 1, sY + 170 - 1, G_cTxt, RGB(0, 0, 0));
		PutString(sX + 230, sY + 170, G_cTxt, RGB(0, 255, 0));
	}

	if (TotalEvent == 0)
	{
		for (int p = 1; p <= 7; p++) //6
		{
			TotalEvent += AresdenWin[p] + ElvineWin[p] + Draw[p];
			AresdenWinEvent += AresdenWin[p];
			ElvineWinEvent += ElvineWin[p];
			DrawEvents += Draw[p];
		}
	}

	PutString(sX + 72 - 1, sY + 210 - 1, "Total Events Played: ", RGB(0, 0, 0));
	PutString(sX + 72, sY + 210, "Total Events Played: ", RGB(255, 255, 255));

	wsprintf(G_cTxt, "%d", TotalEvent);
	PutString(sX + 180 - 1, sY + 210 - 1, G_cTxt, RGB(0, 0, 0));
	PutString(sX + 180, sY + 210, G_cTxt, RGB(255, 200, 0));

	PutString(sX + 69 - 1, sY + 235 - 1, "Aresden Events Wins: ", RGB(0, 0, 0));
	PutString(sX + 69, sY + 235, "Aresden Events Wins: ", RGB(255, 255, 255));

	wsprintf(G_cTxt, "%d", AresdenWinEvent);
	PutString(sX + 187 - 1, sY + 235 - 1, G_cTxt, RGB(0, 0, 0));
	PutString(sX + 187, sY + 235, G_cTxt, RGB(255, 0, 0));

	PutString(sX + 74 - 1, sY + 255 - 1, "Elvine Events Wins: ", RGB(0, 0, 0));
	PutString(sX + 74, sY + 255, "Elvine Events Wins: ", RGB(255, 255, 255));

	wsprintf(G_cTxt, "%d", ElvineWinEvent);
	PutString(sX + 181 - 1, sY + 255 - 1, G_cTxt, RGB(0, 0, 0));
	PutString(sX + 181, sY + 255, G_cTxt, RGB(0, 0, 255));

	PutString(sX + 91 - 1, sY + 275 - 1, "Draws Events: ", RGB(0, 0, 0));
	PutString(sX + 91, sY + 275, "Draws Events: ", RGB(255, 255, 255));

	wsprintf(G_cTxt, "%d", DrawEvents);
	PutString(sX + 167 - 1, sY + 275 - 1, G_cTxt, RGB(0, 0, 0));
	PutString(sX + 167, sY + 275, G_cTxt, RGB(0, 255, 0));

	wsprintf(G_cTxt, "Next Event:");
	PutAlignedString(sX - 1, sX + 268 - 1, sY + 300 - 1, G_cTxt, 0, 0, 0);
	PutAlignedString(sX, sX + 268, sY + 300, G_cTxt, 255, 200, 0);

	if (ActiveEvent == 0)
	{
		GetLocalTime(&SysTime);
		switch (SysTime.wDayOfWeek)
		{
			case 1: // Lunes
				if (SysTime.wHour < 10)
					wsprintf(G_cTxt, "Summon Event - 10 Hs - Monday (Lunes)");
				else if (SysTime.wHour < 19)
					wsprintf(G_cTxt, "Capture the Flag - 19 Hs - Monday (Lunes)");
				else if (SysTime.wHour < 22)
					wsprintf(G_cTxt, "World War - 22 Hs - Monday (Lunes)");
				else
					wsprintf(G_cTxt, "Summon Event - 12 Hs - Tuesday (Martes)");
				break;
			case 2: // Martes
				if (SysTime.wHour < 12)
					wsprintf(G_cTxt, "Summon Event - 12 Hs - Tuesday (Martes)");
				else if (SysTime.wHour < 16)
					wsprintf(G_cTxt, "Rush - 16 Hs - Tuesday (Martes)");
				else if (SysTime.wHour < 21)
					wsprintf(G_cTxt, "Tower Defense - 21 Hs - Tuesday (Martes)");
				else if (SysTime.wHour < 22)
					wsprintf(G_cTxt, "Quest x 2 - 22 Hs - Tuesday (Martes)");
				else
					wsprintf(G_cTxt, "Summon Event - 14 Hs - Wednesday (Miercoles)");
				break;
			case 3: // Miercoles
				if (SysTime.wHour < 14)
					wsprintf(G_cTxt, "Summon Event - 14 Hs - Wednesday (Miercoles)");
				else if (SysTime.wHour < 18)
					wsprintf(G_cTxt, "Capture the Flag - 18 Hs - Wednesday (Miercoles)");
				else if (SysTime.wHour < 20)
					wsprintf(G_cTxt, "Crusade - 20 Hs - Wednesday (Miercoles)");
				else
					wsprintf(G_cTxt, "Summon Event - 16 Hs - Thursday (Jueves)");
				break;
			case 4: // Jueves
				if (SysTime.wHour < 16)
					wsprintf(G_cTxt, "Summon Event - 16 Hs - Thursday (Jueves)");
				else if (SysTime.wHour < 18)
					wsprintf(G_cTxt, "Tower Defense - 18 Hs - Thursday (Jueves)");
				else if (SysTime.wHour < 20)
					wsprintf(G_cTxt, "City vs City - 20 Hs - Thursday (Jueves)");
				else if (SysTime.wHour < 22)
					wsprintf(G_cTxt, "Quest x 2 - 22 Hs - Thursday (Jueves)");
				else
					wsprintf(G_cTxt, "Summon Event - 12 Hs - Friday (Viernes)");
				break;
			case 5: // Viernes
				if (SysTime.wHour < 12)
					wsprintf(G_cTxt, "Summon Event - 12 Hs - Friday (Viernes)");
				else if (SysTime.wHour < 16)
					wsprintf(G_cTxt, "Capture The Flag - 16 Hs - Friday (Viernes)");
				else if (SysTime.wHour < 19)
					wsprintf(G_cTxt, "Crusade - 19 Hs - Friday (Viernes)");
				else if (SysTime.wHour < 22)
					wsprintf(G_cTxt, "Abaddon - 22 Hs - Friday (Viernes)");
				else
					wsprintf(G_cTxt, "Summon Event - 14 Hs - Saturday (Sabado)");
				break;
			case 6: // Sabado
				if (SysTime.wHour < 14)
					wsprintf(G_cTxt, "Summon Event - 14 Hs - Saturday (Sabado)");
				else if (SysTime.wHour < 16)
					wsprintf(G_cTxt, "Rush - 16 Hs - Saturday (Sabado)");
				else if (SysTime.wHour < 18)
					wsprintf(G_cTxt, "Crusade - 18 Hs - Saturday (Sabado)");				
				else if (SysTime.wHour < 20)
					wsprintf(G_cTxt, "Death Match - 20 Hs - Saturday (Sabado)");
				else if (SysTime.wHour < 22)
					wsprintf(G_cTxt, "World War Extreme - 22 Hs - Saturday (Sabado)");
				else
					wsprintf(G_cTxt, "Summon Event - 12 Hs - Sunday (Domingo)");
				break;
			case 0: // Domingo
				if (SysTime.wHour < 12)
					wsprintf(G_cTxt, "Summon Event - 12 Hs - Sunday (Domingo)");
				else if (SysTime.wHour < 13)
					wsprintf(G_cTxt, "Quest x 2 - 13 Hs - Sunday (Domingo)");
				else if (SysTime.wHour < 14)
					wsprintf(G_cTxt, "Capture The Flag - 14 Hs - Sunday (Domingo)");
				else if (SysTime.wHour < 16)
					wsprintf(G_cTxt, "Hell Of Death - 16 Hs - Sunday (Domingo)");
				else if (SysTime.wHour < 18)
					wsprintf(G_cTxt, "Death Match - 18 Hs - Sunday (Domingo)");
				else if (SysTime.wHour < 20)
					wsprintf(G_cTxt, "Crusade - 20 Hs - Sunday (Domingo)");
				else if (SysTime.wHour < 22)
					wsprintf(G_cTxt, "City vs City - 22 Hs - Sunday (Domingo)");
				else
					wsprintf(G_cTxt, "Summon Event - 10 Hs - Monday (Lunes)");
				break;
			default:
				break;
		}
	}
	else
	{
		switch (ActiveEvent)
		{
			case 1: wsprintf(G_cTxt, "ALL VS ALL NOW!!"); break;
			case 2: wsprintf(G_cTxt, "RUSH NOW!!"); break;
			case 3: wsprintf(G_cTxt, "TOWER DEFENSE NOW!!"); break;
			case 4: wsprintf(G_cTxt, "CAPTURE THE FLAG NOW!!"); break;
			case 5: wsprintf(G_cTxt, "HAPPY HOUR NOW!!"); break;
			case 6: wsprintf(G_cTxt, "CRUSADE NOW!!"); break;
			case 7: wsprintf(G_cTxt, "ABADDON NOW!!"); break;
			case 8: wsprintf(G_cTxt, "CITY VS CITY NOW!!");	break;
			case 9: wsprintf(G_cTxt, "HELL OF DEATH NOW!!"); break;
			case 10: wsprintf(G_cTxt, "SUMMON EVENT NOW!!"); break;
			case 11: wsprintf(G_cTxt, "FINAL FIGHT NOW!!");	break;
			case 12: wsprintf(G_cTxt, "WORLD WAR NOW!!");	break;
			case 13: wsprintf(G_cTxt, "WORLD WAR EXTREME NOW!!");	break;
			case 14: wsprintf(G_cTxt, "PVP EVENT NOW!!");	break;
			case 15: wsprintf(G_cTxt, "ALL EKS EVENT NOW!!");	break;
			case 16: wsprintf(G_cTxt, "ALL DK EKS EVENT NOW!!");	break;
		}
	}
	PutAlignedString(sX - 1, sX + 268 - 1, sY + 315 - 1, G_cTxt, 0, 0, 0);
	PutAlignedString(sX, sX + 268, sY + 315, G_cTxt, 0, 255, 0);
}

// Capture The Flag - Angel position Based
void CGame::DrawFlag(short sX, short sY, DWORD dwTime)
{
	//Elvine Flag
	if ((_tmp_iStatus & 0x40000) != 0)
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX - 2, sY, 20, dwTime);
	//Aresden Flag
	else if ((_tmp_iStatus & 0x80000) != 0)
		m_pSprite[DEF_SPRID_INTERFACE_ND_ICONPANNEL3]->PutSpriteFast(sX, sY, 19, dwTime);
}

void CGame::DlgBoxClick_Status(short msX, short msY)
{
	int sX, sY;

	sX = m_stDialogBoxInfo[56].sX;
	sY = m_stDialogBoxInfo[56].sY;

	if ((msX >= sX + 305) && (msX <= sX + 305 + 11) && (msY >= sY + 152) && (msY <= sY + 152 + 11))
	{
		m_stDialogBoxInfo[56].sView++;
		if (m_stDialogBoxInfo[56].sView > MAXDIALOG) m_stDialogBoxInfo[56].sView = 0;
	}
	if ((msX >= sX + 305) && (msX <= sX + 305 + 11) && (msY >= sY + 166) && (msY <= sY + 166 + 11))
	{
		m_stDialogBoxInfo[56].sView--;
		if (m_stDialogBoxInfo[56].sView < 0) m_stDialogBoxInfo[56].sView = MAXDIALOG;
	}
}

void CGame::DrawDialogBox_Status(short msX, short msY)
{
	int sX, sY;

	sX = m_stDialogBoxInfo[56].sX;
	sY = m_stDialogBoxInfo[56].sY;
	short sizeX = m_stDialogBoxInfo[56].sSizeX;

	DrawShadowDialog2(sX, sY, 56);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "Status", 255, 255, 255);

	for (short i = 0; i < 47; i++)
		PutString(sX + 170, sY + 25 + (i * 3), "|", RGB(255, 255, 255));

	switch (m_stDialogBoxInfo[56].sView)
	{
		case 0:
			PutString_SprFont2(sX + 22, sY + 29, "Character Data", 255, 200, 0);

		//	wsprintf(G_cTxt, "Character Coins: %d", Coins);
			wsprintf(G_cTxt, "Character Coins: %d", m_iCoins);
			PutString(sX + 22, sY + 29 + 30, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Total Mobs Killed: %d", MobsKilled);
			PutString(sX + 22, sY + 29 + 50, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Total Client Killed: %d", TotalClientKilled);
			PutString(sX + 22, sY + 29 + 70, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Total Quest Complete: %d", TotalQuestComplete);
			PutString(sX + 22, sY + 29 + 90, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Character Death: %d", TotalDeath);
			PutString(sX + 22, sY + 29 + 110, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Hour in Game: %d", HourPlaying);
			PutString(sX + 22, sY + 29 + 130, G_cTxt, RGB(255, 255, 255));

			/************ Second Line ************/

			PutString_SprFont2(sX + 180, sY + 29, "Character Bonus", 255, 200, 0);

			wsprintf(G_cTxt, "Armors Defense: %d", Defense);
			PutString(sX + 180, sY + 29 + 30, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Physical Hitting: %d", Hitting);
			PutString(sX + 180, sY + 29 + 50, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Magic Hitting: %d", HitMag);
			PutString(sX + 180, sY + 29 + 70, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Physical Damage: %d", PhysicalDamage);
			PutString(sX + 180, sY + 29 + 90, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Magic Damage: %d", MagicDamage);
			PutString(sX + 180, sY + 29 + 110, G_cTxt, RGB(255, 255, 255));

		/*	wsprintf(G_cTxt, "Physical Damage: %d", PhysicalDamage);
			PutString(sX + 180, sY + 29 + 70, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Magic Damage: %d", MagicDamage);
			PutString(sX + 180, sY + 29 + 90, G_cTxt, RGB(255, 255, 255));*/

			/*wsprintf(G_cTxt, "Defense Ratio: %d%%", DR);
			PutString( sX + 180, sY + 29 + 110, G_cTxt, RGB(255,255,255) );

			wsprintf(G_cTxt, "Magic Resistance: %d%%", MR);
			PutString( sX + 180, sY + 29 + 130, G_cTxt, RGB(255,255,255) );*/
			break;

		case 1:
			PutString_SprFont2(sX + 22, sY + 29, "Character Def", 255, 200, 0);

			wsprintf(G_cTxt, "Physical Absorption: %d%%", PAABS);
			PutString(sX + 22, sY + 29 + 30, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Magic Absorption: %d%%", MAABS);
			PutString(sX + 22, sY + 29 + 50, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "HP recovery: %d%%", HPREC);
			PutString(sX + 22, sY + 29 + 70, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "MP recovery: %d%%", MPREC);
			PutString(sX + 22, sY + 29 + 90, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Defense Ratio: %d%%", DR);
			PutString(sX + 22, sY + 29 + 110, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "Magic Resistance: %d%%", MR);
			PutString(sX + 22, sY + 29 + 130, G_cTxt, RGB(255, 255, 255));

			/************ Second Line ************/

			wsprintf(G_cTxt, "Poison Resistence: %d%%", PR);
			PutString(sX + 180, sY + 29 + 30, G_cTxt, RGB(255, 255, 255));

			wsprintf(G_cTxt, "SP Recovery: %d%%", SP);
			PutString(sX + 180, sY + 29 + 50, G_cTxt, RGB(255, 255, 255));

			//LaloMerien
			wsprintf(G_cTxt, "Defense Especial: %d%%", DF);
			PutString(sX + 180, sY + 29 + 70, G_cTxt, RGB(255, 255, 255));
			break;
	}

	if ((msX >= sX + 305) && (msX <= sX + 305 + 11) && (msY >= sY + 152) && (msY <= sY + 152 + 11))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 310, sY + 157, 13, FALSE, m_bDialogTrans);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 310, sY + 157, 15, FALSE, m_bDialogTrans);

	if ((msX >= sX + 305) && (msX <= sX + 305 + 11) && (msY >= sY + 166) && (msY <= sY + 166 + 11))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 310, sY + 171, 14, FALSE, m_bDialogTrans);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 310, sY + 171, 16, FALSE, m_bDialogTrans);
}

void CGame::ConnectionEstablishHandler2()
{
	switch (m_dwConnectMode) {
		case NUCLEO_REQUEST_LOGIN:
			bSendCommand(NUCLEO_REQUEST_LOGIN, NULL, NULL, NULL, NULL, NULL, NULL);
			break;
		case NUCLEO_REQUEST_CREATEACC:
			bSendCommand(NUCLEO_REQUEST_CREATEACC, NULL, NULL, NULL, NULL, NULL, NULL);
			break;
		case NUCLEO_REQUEST_ENTERGAME:
			bSendCommand(NUCLEO_REQUEST_ENTERGAME, NULL, NULL, NULL, NULL, NULL, NULL);
			break;
		default:
			break;
	}
}


BOOL CGame::bReadQuestCFG(char CFG[], short Type)
{
	char cFn[255], cTemp[255];
	char * pContents, *token;
	char seps[] = "= ,\t\n";
	char cReadModeA = 0;
	char cReadModeB = 0;
	int  iQuest = 0;
	short ItemType, Amount, i;
	char TypeName[10];
	class CStrTok * pStrTok;
	HANDLE hFile;
	FILE * pFile;
	DWORD  dwFileSize;

	ZeroMemory(cTemp, sizeof(cTemp));
	ZeroMemory(cFn, sizeof(cFn));

	strcat(cFn, "contents");
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, CFG);

	hFile = CreateFile(cFn, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);

	pFile = fopen(cFn, "rt");
	if (pFile == NULL) return FALSE;
	else {
		pContents = new char[dwFileSize + 1];
		ZeroMemory(pContents, dwFileSize + 1);
		fread(pContents, dwFileSize, 1, pFile);
		fclose(pFile);
	}

	for (i = 0; i < 10; i++) StatedQuest[i] = 0;

	pStrTok = new class CStrTok(pContents, seps);
	token = pStrTok->pGet();
	while (token != NULL) {
		if (cReadModeA != 0) {
			switch (cReadModeA) {
				case 1:
					switch (cReadModeB) {
						case 1: // ID
							if (_bGetIsStringIsNumber(token) == FALSE)
							{
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							iQuest = atoi(token);
							m_sQuest[iQuest].ID = iQuest;

							cReadModeB = 2;
							break;

						case 2: // City
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_sQuest[iQuest].City = atoi(token);
							cReadModeB = 3;
							break;

						case 3: // NPC
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_sQuest[iQuest].Bicho = atoi(token);
							cReadModeB = 4;
							break;

						case 4: // CantChobis
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_sQuest[iQuest].CantNPC = atoi(token);
							cReadModeB = 5;
							break;

						case 5: // MinLvl
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_sQuest[iQuest].MinL = atoi(token);
							cReadModeB = 6;
							break;

						case 6: // MaxLvl
							if (_bGetIsStringIsNumber(token) == FALSE) {
								delete[] pContents;
								delete pStrTok;
								return FALSE;
							}
							m_sQuest[iQuest].MaxL = atoi(token);
							cReadModeB = 7;
							break;

						case 7: // Price
							switch (Type)
							{
								case 1:
									if (_bGetIsStringIsNumber(token) == FALSE) {
										delete[] pContents;
										delete pStrTok;
										return FALSE;
									}
									m_sQuest[iQuest].Price = atoi(token);
									break;
								case 2:
								case 3:
									ZeroMemory(m_sQuest[iQuest].ItemPrice, sizeof(m_sQuest[iQuest].ItemPrice));

									for (i = 0; i < DEF_MAXITEMNAMES; i++)
										if ((m_pItemNameList[i] != NULL) && (strcmp(m_pItemNameList[i]->m_cOriginName, token) == 0)) {
											strcpy(m_sQuest[iQuest].ItemPrice, m_pItemNameList[i]->m_cName);
											break;
										}
									break;
							}
							cReadModeB = 8;
							break;

						case 8: // MapName
							ZeroMemory(m_sQuest[iQuest].Map, sizeof(m_sQuest[iQuest].Map));
							memcpy(m_sQuest[iQuest].Map, token, strlen(token));
							m_sQuest[iQuest].Type = Type;

							if (Type == 3) cReadModeB = 9;
							else
							{
								cReadModeA = 0;
								cReadModeB = 0;
							}
							break;
						case 9:
							ItemType = atoi(token);
							if (StatedQuest[ItemType] != ItemType) StatedQuest[ItemType] = ItemType;
							m_sQuest[iQuest].ItemType = ItemType;
							ZeroMemory(TypeName, sizeof(TypeName));
							switch (ItemType)
							{
								case 1: memcpy(TypeName, " - PR ", 6); break;
								case 3: memcpy(TypeName, " - DR ", 6); break;
								case 4: memcpy(TypeName, " - HP ", 6); break;
								case 5: memcpy(TypeName, " - SP ", 6); break;
								case 6: memcpy(TypeName, " - MP ", 6); break;
								case 7: memcpy(TypeName, " - MR ", 6); break;
								case 8: memcpy(TypeName, " - PA ", 6); break;
								case 9: memcpy(TypeName, " - MA ", 6); break;
							}
							cReadModeB = 10;
							break;
						case 10:
							Amount = atoi(token);
							switch (ItemType)
							{
								case 8:
								case 9:
									Amount = Amount * 3;
									break;
								default:
									Amount = Amount * 7;
									break;
							}
							strcat(m_sQuest[iQuest].ItemPrice, TypeName);
							wsprintf(G_cTxt, "%d%%", Amount);
							strcat(m_sQuest[iQuest].ItemPrice, G_cTxt);
							cReadModeA = 0;
							cReadModeB = 0;
							break;
					}
					break;

				default:
					break;
			}
		}
		else {
			if (memcmp(token, "quest", 5) == 0) {
				cReadModeA = 1;
				cReadModeB = 1;
			}
		}
		token = pStrTok->pGet();
	}

	delete pStrTok;
	delete[] pContents;

	if ((cReadModeA != 0) || (cReadModeB != 0)) {
		return FALSE;
	}
	return TRUE;
}

void CGame::DlgBoxClick_QuestList(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[46].sX;
	sY = m_stDialogBoxInfo[46].sY;
	int i;
	int z;
	short Init, Finish;

	z = 0;
	if (m_stDialogBoxInfo[46].sView == 0)
	{
		if (m_stQuest[0].sTargetType == 0)
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 100) && (msY <= sY + 115)) m_stDialogBoxInfo[46].sView = 1;
		if (m_stQuest[1].sTargetType == 0)
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 130) && (msY <= sY + 145)) m_stDialogBoxInfo[46].sView = 2;
		if (m_stQuest[2].sTargetType == 0)
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 160) && (msY <= sY + 175)) m_stDialogBoxInfo[46].sView = 3;

		if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 250) && (msY < sY + 265))
		{
			if (m_stQuest[0].sTargetType != NULL && m_stQuest[0].sCurrentCount == 0)
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, -1, NULL, NULL);
			else if (m_stQuest[1].sTargetType != NULL && m_stQuest[1].sCurrentCount == 0)
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, -1, NULL, NULL);
			else if (m_stQuest[2].sTargetType != NULL && m_stQuest[2].sCurrentCount == 0)
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, -1, NULL, NULL);
		}

		if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 275) && (msY < sY + 290))
			if (m_stQuest[0].sTargetType != NULL || m_stQuest[1].sTargetType != NULL || m_stQuest[2].sTargetType != NULL)
			{
				EnableDialogBox(13, NULL, NULL, NULL);
				m_stDialogBoxInfo[13].cMode = 13;
				PlaySound('E', 14, 5);
			}
	}
	else {
		if (m_stDialogBoxInfo[46].sView == 2) {
			Init = 100;
			Finish = 200;
		}
		else if (m_stDialogBoxInfo[46].sView == 3 || m_stDialogBoxInfo[46].sView >= 10) {
			Init = 200;
			Finish = 500;
		}
		else {
			Init = 0;
			Finish = 100;
		}

		if (m_stDialogBoxInfo[46].sView == 3)
		{
			for (i = 0; i < 10; i++)
			{
				if (StatedQuest[i] != 0)
				{
					z++;
					if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
						m_stDialogBoxInfo[46].sView = 10 + StatedQuest[i];
				}
			}
		}
		else  {
			for (i = Init; i < Finish; i++) {
				if (m_sQuest[i].ID != NULL) {
					DecriptString(m_cLocation);
					if (memcmp(m_cLocation, "aresden", 7) == 0) {
						if (m_sQuest[i].City == 1) {
							if ((DecriptInt(m_iLevel) >= m_sQuest[i].MinL) && (DecriptInt(m_iLevel) <= m_sQuest[i].MaxL)) {
								if (m_stDialogBoxInfo[46].sView >= 10) {
									if (m_sQuest[i].ItemType == (m_stDialogBoxInfo[46].sView - 10)) {
										if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 15) && (msY <= sY + 74 + z * 15)) {
											DisableDialogBox(46);
											bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, m_sQuest[i].ID, NULL, NULL);
										}
									}
									else z--;
								}
								else {
									if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 15) && (msY <= sY + 74 + z * 15)) {
										DisableDialogBox(46);
										bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, m_sQuest[i].ID, NULL, NULL);
									}
								}
								z++;
							}
						}
					}
					else {
						if (m_sQuest[i].City == 2) {
							if ((DecriptInt(m_iLevel) >= m_sQuest[i].MinL) && (DecriptInt(m_iLevel) <= m_sQuest[i].MaxL)) {
								if (m_stDialogBoxInfo[46].sView >= 10) {
									if (m_sQuest[i].ItemType == (m_stDialogBoxInfo[46].sView - 10)) {
										if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 15) && (msY <= sY + 74 + z * 15)) {
											DisableDialogBox(46);
											bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, m_sQuest[i].ID, NULL, NULL);
										}
									}
									else z--;
								}
								else {
									if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 15) && (msY <= sY + 74 + z * 15)) {
										DisableDialogBox(46);
										bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TALKTONPC, NULL, 4, m_sQuest[i].ID, NULL, NULL);
									}
								}
								z++;
							}
						}
					}
					EncriptString(m_cLocation);
				}
			}
		}
	}
}
void CGame::DrawDialogBox_QuestList(short msX, short msY, short msZ, char cLB)
{
	short sX, sY;
	char Npc[20], cTxt[300];
	int i, z;
	short Init, Finish;

	sX = m_stDialogBoxInfo[46].sX;
	sY = m_stDialogBoxInfo[46].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);
	z = 0;

	PutString_SprFont2(sX + 90, sY + 41, "Quest List", 255, 200, 0);

	if (m_stDialogBoxInfo[46].sView == 0)
	{
		if (m_stQuest[0].sTargetType == 0)
		{
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 100) && (msY <= sY + 115))
				PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 255, 255, 255);
			else PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 4, 0, 50);
		}
		else PutAlignedString(sX, sX + 257, sY + 100, "Contribution Quest", 25, 25, 25);

		if (m_stQuest[1].sTargetType == 0)
		{
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 130) && (msY <= sY + 145))
				PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 255, 255, 255);
			else PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 4, 0, 50);
		}
		else PutAlignedString(sX, sX + 257, sY + 130, "Item Reward Quest", 25, 25, 25);

		if (m_stQuest[2].sTargetType == 0)
		{
			if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 160) && (msY <= sY + 175))
				PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 255, 255, 255);
			else PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 4, 0, 50);
		}
		else PutAlignedString(sX, sX + 257, sY + 160, "Stated Reward Quest", 25, 25, 25);

		if ((m_stQuest[0].sTargetType != NULL && m_stQuest[0].sCurrentCount == 0) ||
			(m_stQuest[1].sTargetType != NULL && m_stQuest[1].sCurrentCount == 0) ||
			(m_stQuest[2].sTargetType != NULL && m_stQuest[2].sCurrentCount == 0))
		{
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 250) && (msY < sY + 265))
				PutAlignedString(sX, sX + 257, sY + 250, "Claim the price", 255, 255, 255);
			else PutAlignedString(sX, sX + 257, sY + 250, "Claim the price", 4, 0, 50);
		}
		else PutAlignedString(sX, sX + 257, sY + 250, "Claim the price", 25, 25, 25);

		if (m_stQuest[0].sTargetType != NULL || m_stQuest[1].sTargetType != NULL || m_stQuest[2].sTargetType != NULL)
		{
			if ((msX > sX + 35) && (msX < sX + 220) && (msY > sY + 275) && (msY < sY + 290))
				PutAlignedString(sX, sX + 257, sY + 275, DRAW_DIALOGBOX_CITYHALL_MENU11, 255, 255, 255);//"
			else PutAlignedString(sX, sX + 257, sY + 275, DRAW_DIALOGBOX_CITYHALL_MENU11, 4, 0, 50);//"
		}
		else PutAlignedString(sX, sX + 257, sY + 275, DRAW_DIALOGBOX_CITYHALL_MENU11, 25, 25, 25);
	}
	else {
		if (m_stDialogBoxInfo[46].sView == 2) {
			Init = 100;
			Finish = 200;
		}
		else if (m_stDialogBoxInfo[46].sView == 3 || m_stDialogBoxInfo[46].sView >= 10) {
			Init = 200;
			Finish = 500;
		}
		else {
			Init = 0;
			Finish = 100;
		}

		if (m_stDialogBoxInfo[46].sView == 3)
		{
			for (i = 0; i < 10; i++)
			{
				if (StatedQuest[i] != 0)
				{
					z++;
					switch (StatedQuest[i])
					{
						case 1:
							if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
								PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Poison Resistance", 255, 255, 255);
							else PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Poison Resistance", 4, 0, 50);
							break;
						case 3:
							if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
								PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Defense Ratio", 255, 255, 255);
							else PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Defense Ratio", 4, 0, 50);
							break;
						case 4:
							if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
								PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "HP recovery", 255, 255, 255);
							else PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "HP recovery", 4, 0, 50);
							break;
						case 5:
							if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
								PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "SP recovery", 255, 255, 255);
							else PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "SP recovery", 4, 0, 50);
							break;
						case 6:
							if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
								PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "MP recovery", 255, 255, 255);
							else PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "MP recovery", 4, 0, 50);
							break;
						case 7:
							if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
								PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Magic Resistance", 255, 255, 255);
							else PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Magic Resistance", 4, 0, 50);
							break;
						case 8:
							if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
								PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Physical Absorption", 255, 255, 255);
							else PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Physical Absorption", 4, 0, 50);
							break;
						case 9:
							if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 25) && (msY <= sY + 74 + z * 25))
								PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Magic Absorption", 255, 255, 255);
							else PutAlignedString(sX, sX + 257, sY + 60 + z * 25, "Magic Absorption", 4, 0, 50);
							break;
						default: break;
					}
				}
			}
		}
		else {
			for (i = Init; i < Finish; i++) {
				if (m_sQuest[i].ID != NULL) {
					DecriptString(m_cLocation);
					if (memcmp(m_cLocation, "aresden", 7) == 0) {
						if (m_sQuest[i].City == 1) {
							if ((DecriptInt(m_iLevel) >= m_sQuest[i].MinL) && (DecriptInt(m_iLevel) <= m_sQuest[i].MaxL)) {
								ZeroMemory(cTxt, sizeof(cTxt));
								if (m_stDialogBoxInfo[46].sView == 2) {
									wsprintf(G_cTxt, "%s", m_sQuest[i].ItemPrice);
									strcat(cTxt, G_cTxt);
								}
								else if (m_stDialogBoxInfo[46].sView >= 10) {
									if (m_sQuest[i].ItemType == (m_stDialogBoxInfo[46].sView - 10)) {
										wsprintf(G_cTxt, "%s", m_sQuest[i].ItemPrice);
										strcat(cTxt, G_cTxt);
									}
									else z--;
								}
								else {
									GetNpcName(m_sQuest[i].Bicho, Npc);
									// Imprimo el NPC Name
									strcat(cTxt, Npc);
									// Muestro el mapa:
									wsprintf(G_cTxt, " in %s", m_sQuest[i].Map);
									strcat(cTxt, G_cTxt);

									wsprintf(G_cTxt, " - %d Contrib", m_sQuest[i].Price);
									strcat(cTxt, G_cTxt);
								}
								if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 15) && (msY <= sY + 74 + z * 15))
									PutAlignedString(sX, sX + 257, sY + 60 + z * 15, cTxt, 255, 255, 255);
								else PutAlignedString(sX, sX + 257, sY + 60 + z * 15, cTxt, 4, 0, 50);
								z++;
							}
						}
					}
					else {
						if (m_sQuest[i].City == 2) {
							if ((DecriptInt(m_iLevel) >= m_sQuest[i].MinL) && (DecriptInt(m_iLevel) <= m_sQuest[i].MaxL)) {
								ZeroMemory(cTxt, sizeof(cTxt));
								if (m_stDialogBoxInfo[46].sView == 2) {
									wsprintf(G_cTxt, "%s", m_sQuest[i].ItemPrice);
									strcat(cTxt, G_cTxt);
								}
								else if (m_stDialogBoxInfo[46].sView >= 10) {
									if (m_sQuest[i].ItemType == (m_stDialogBoxInfo[46].sView - 10)) {
										wsprintf(G_cTxt, "%s", m_sQuest[i].ItemPrice);
										strcat(cTxt, G_cTxt);
									}
									else z--;
								}
								else {
									GetNpcName(m_sQuest[i].Bicho, Npc);
									// Imprimo el NPC Name
									strcat(cTxt, Npc);
									// Muestro el mapa:
									wsprintf(G_cTxt, " in %s", m_sQuest[i].Map);
									strcat(cTxt, G_cTxt);
									wsprintf(G_cTxt, " - %d Contrib", m_sQuest[i].Price);
									strcat(cTxt, G_cTxt);
								}
								if ((msX >= sX) && (msX <= sX + 257) && (msY >= sY + 61 + z * 15) && (msY <= sY + 74 + z * 15))
									PutAlignedString(sX, sX + 257, sY + 60 + z * 15, cTxt, 255, 255, 255);
								else PutAlignedString(sX, sX + 257, sY + 60 + z * 15, cTxt, 4, 0, 50);
								z++;
							}
						}
					}
					EncriptString(m_cLocation);
				}
			}
		}
	}
}

// New Glare Effects - ZeroEoyPnk - Re-Edition
////////////////////////////////////////////////////////////////////////////
void CGame::HauberkGlare(short iArmColor, int iArmArmorIndex, short *iArmGlare)
{
	switch (iArmColor)
	{

		case 12:
			if (((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 1) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 1 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 2) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 2 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 3) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 3 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 4) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 4 + 56)))
			{
				*iArmGlare = 3;

			}

			else if (((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 1) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 1 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 2) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 2 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 3) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 3 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 4) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 4 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 5) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 5 + 56))) //wsw3
			{
				*iArmGlare = 3;

			}
			break;

		case 15:
			if (((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 1) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 1 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 2) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 2 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 3) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 3 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 4) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 4 + 56)))
			{
				*iArmGlare = 4;

			}

			else if (((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 1) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 1 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 2) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 2 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 3) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 3 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 4) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 4 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 5) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 5 + 56))) //wsw3
			{
				*iArmGlare = 4;

			}
			break;

		case 30:
			if (((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 1) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 1 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 2) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 2 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 3) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 3 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_M + 15 * 4) && (iArmArmorIndex < DEF_SPRID_BERK_M + 15 * 4 + 56)))
			{
				*iArmGlare = 5;

			}

			else if (((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 1) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 1 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 2) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 2 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 3) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 3 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 4) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 4 + 56))
				|| ((iArmArmorIndex >= DEF_SPRID_BERK_W + 15 * 5) && (iArmArmorIndex < DEF_SPRID_BERK_W + 15 * 5 + 56))) //wsw3
			{
				*iArmGlare = 5;

			}
			break;

		default:
			*iArmGlare = 0;
			break;
	}

}
////////////////////////////////////////////////////////////////////////////
void CGame::BootsGlare(short iBootsColor, int iBootsIndex, short *iBootsGlare)
{
	switch (iBootsColor)
	{
		case 12:
			if (((iBootsIndex >= DEF_SPRID_BOOT_M + 15 * 1) && (iBootsIndex < DEF_SPRID_BOOT_M + 15 * 1 + 56))
				|| ((iBootsIndex >= DEF_SPRID_BOOT_M + 15 * 2) && (iBootsIndex < DEF_SPRID_BOOT_M + 15 * 2 + 56)))
			{
				*iBootsGlare = 3;

			}
			else if (((iBootsIndex >= DEF_SPRID_BOOT_W + 15 * 1) && (iBootsIndex < DEF_SPRID_BOOT_W + 15 * 1 + 56))
				|| ((iBootsIndex >= DEF_SPRID_BOOT_W + 15 * 2) && (iBootsIndex < DEF_SPRID_BOOT_W + 15 * 2 + 56)))
			{
				*iBootsGlare = 3;

			}
			break;

		case 15:
			if (((iBootsIndex >= DEF_SPRID_BOOT_M + 15 * 1) && (iBootsIndex < DEF_SPRID_BOOT_M + 15 * 1 + 56))
				|| ((iBootsIndex >= DEF_SPRID_BOOT_M + 15 * 2) && (iBootsIndex < DEF_SPRID_BOOT_M + 15 * 2 + 56)))
			{
				*iBootsGlare = 4;

			}
			else if (((iBootsIndex >= DEF_SPRID_BOOT_W + 15 * 1) && (iBootsIndex < DEF_SPRID_BOOT_W + 15 * 1 + 56))
				|| ((iBootsIndex >= DEF_SPRID_BOOT_W + 15 * 2) && (iBootsIndex < DEF_SPRID_BOOT_W + 15 * 2 + 56)))
			{
				*iBootsGlare = 4;

			}
			break;

		case 30:
			if (((iBootsIndex >= DEF_SPRID_BOOT_M + 15 * 1) && (iBootsIndex < DEF_SPRID_BOOT_M + 15 * 1 + 56))
				|| ((iBootsIndex >= DEF_SPRID_BOOT_M + 15 * 2) && (iBootsIndex < DEF_SPRID_BOOT_M + 15 * 2 + 56)))
			{
				*iBootsGlare = 5;

			}
			else if (((iBootsIndex >= DEF_SPRID_BOOT_W + 15 * 1) && (iBootsIndex < DEF_SPRID_BOOT_W + 15 * 1 + 56))
				|| ((iBootsIndex >= DEF_SPRID_BOOT_W + 15 * 2) && (iBootsIndex < DEF_SPRID_BOOT_W + 15 * 2 + 56)))
			{
				*iBootsGlare = 5;

			}
			break;

		default:
			*iBootsGlare = 0;
			break;
	}
}

void CGame::MantleGlare(short iMantleColor, int iMantleIndex, short *iMantleGlare)
{
	switch (iMantleColor)
	{
		case 12:
			if (((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 1) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 1 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 2) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 2 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 3) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 3 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 4) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 4 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 5) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 5 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 6) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 6 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 7) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 7 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 8) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 8 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 9) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 9 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 10) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 10 + 56)))
			{
				*iMantleGlare = 3;

			}
			else if (((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 1) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 1 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 2) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 2 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 3) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 3 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 4) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 4 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 5) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 5 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 6) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 6 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 7) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 7 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 8) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 8 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 9) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 9 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 10) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 10 + 56)))
			{
				*iMantleGlare = 3;

			}
			break;

		case 15:
			if (((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 1) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 1 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 2) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 2 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 3) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 3 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 4) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 4 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 5) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 5 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 6) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 6 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 7) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 7 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 8) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 8 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 9) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 9 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 10) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 10 + 56)))
			{
				*iMantleGlare = 4;

			}
			else if (((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 1) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 1 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 2) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 2 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 3) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 3 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 4) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 4 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 5) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 5 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 6) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 6 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 7) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 7 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 8) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 8 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 9) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 9 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 10) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 10 + 56)))
			{
				*iMantleGlare = 4;
			}
			break;

		case 30:
			if (((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 1) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 1 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 2) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 2 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 3) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 3 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 4) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 4 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 5) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 5 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 6) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 6 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 7) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 7 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 8) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 8 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 9) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 9 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_M + 15 * 10) && (iMantleIndex < DEF_SPRID_MANTLE_M + 15 * 10 + 56)))
			{
				*iMantleGlare = 5;

			}
			else if (((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 1) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 1 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 2) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 2 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 3) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 3 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 4) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 4 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 5) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 5 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 6) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 6 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 7) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 7 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 8) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 8 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 9) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 9 + 56))
				|| ((iMantleIndex >= DEF_SPRID_MANTLE_W + 15 * 10) && (iMantleIndex < DEF_SPRID_MANTLE_W + 15 * 10 + 56)))
			{
				*iMantleGlare = 5;
			}
			break;

		default:
			*iMantleGlare = 0;
			break;
	}
}

void CGame::LegginsGlare(short iPantsColor, int iPantsIndex, short *iPantsGlare)
{
	switch (iPantsColor)
	{

		case 12:
			if (((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 1) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 1 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 2) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 2 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 3) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 3 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 4) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 4 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 5) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 5 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 6) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 6 + 56)))
			{
				*iPantsGlare = 3;

			}
			else if (((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 1) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 1 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 2) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 2 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 3) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 3 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 4) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 4 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 5) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 5 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 6) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 6 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 7) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 7 + 56)))
			{
				*iPantsGlare = 3;

			}
			break;

		case 15:
			if (((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 1) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 1 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 2) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 2 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 3) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 3 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 4) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 4 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 5) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 5 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 6) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 6 + 56)))
			{
				*iPantsGlare = 4;

			}
			else if (((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 1) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 1 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 2) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 2 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 3) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 3 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 4) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 4 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 5) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 5 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 6) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 6 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 7) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 7 + 56)))
			{
				*iPantsGlare = 4;

			}
			break;

		case 30:
			if (((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 1) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 1 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 2) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 2 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 3) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 3 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 4) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 4 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 5) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 5 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_M + 15 * 6) && (iPantsIndex < DEF_SPRID_LEGG_M + 15 * 6 + 56)))
			{
				*iPantsGlare = 5;

			}
			else if (((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 1) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 1 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 2) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 2 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 3) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 3 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 4) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 4 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 5) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 5 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 6) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 6 + 56))
				|| ((iPantsIndex >= DEF_SPRID_LEGG_W + 15 * 7) && (iPantsIndex < DEF_SPRID_LEGG_W + 15 * 7 + 56)))
			{
				*iPantsGlare = 5;

			}
			break;

		default:
			*iPantsGlare = 0;
			break;
	}
}

////////////////////////////////////////////////////////////////////////////
void CGame::ArmorGlare(short iArmorColor, int iBodyArmorIndex, short *iArmorGlare)
{
	switch (iArmorColor)
	{

		case 12:
			if (((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 1) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 1 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 2) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 2 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 3) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 3 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 4) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 4 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 5) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 5 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 6) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 6 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 7) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 7 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 8) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 8 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 9) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 9 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 10) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 10 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 11) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 11 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 12) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 12 + 56)))
			{
				*iArmorGlare = 3;

			}

			else if (((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 1) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 1 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 2) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 2 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 3) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 3 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 4) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 4 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 5) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 5 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 6) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 6 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 7) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 7 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 8) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 8 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 9) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 9 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 10) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 10 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 11) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 11 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 12) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 12 + 56)))
			{
				*iArmorGlare = 3;

			}
			break;
		case 15:
			if (((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 1) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 1 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 2) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 2 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 3) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 3 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 4) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 4 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 5) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 5 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 6) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 6 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 7) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 7 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 8) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 8 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 9) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 9 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 10) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 10 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 11) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 11 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 12) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 12 + 56)))
			{
				*iArmorGlare = 4;

			}

			else if (((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 1) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 1 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 2) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 2 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 3) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 3 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 4) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 4 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 5) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 5 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 6) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 6 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 7) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 7 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 8) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 8 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 9) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 9 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 10) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 10 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 11) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 11 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 12) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 12 + 56)))
			{
				*iArmorGlare = 4;

			}
			break;

		case 30:
			if (((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 1) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 1 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 2) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 2 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 3) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 3 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 4) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 4 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 5) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 5 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 6) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 6 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 7) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 7 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 8) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 8 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 9) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 9 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 10) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 10 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 11) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 11 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_M + 15 * 12) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_M + 15 * 12 + 56)))
			{
				*iArmorGlare = 5;

			}

			else if (((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 1) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 1 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 2) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 2 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 3) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 3 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 4) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 4 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 5) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 5 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 6) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 6 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 7) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 7 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 8) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 8 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 9) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 9 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 10) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 10 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 11) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 11 + 56))
				|| ((iBodyArmorIndex >= DEF_SPRID_BODYARMOR_W + 15 * 12) && (iBodyArmorIndex < DEF_SPRID_BODYARMOR_W + 15 * 12 + 56)))
			{
				*iArmorGlare = 5;

			}
			break;

		default:
			*iArmorGlare = 0;
			break;
	}
}

////////////////////////////////////////////////////////////////////////////
void CGame::HelmGlare(short iHelmColor, int iHelmIndex, short *iHelmGlare)
{
	switch (iHelmColor)
	{


		case 12:
			if (((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 1) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 1 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 2) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 2 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 3) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 3 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 4) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 4 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 5) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 5 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 6) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 6 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 7) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 7 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 8) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 8 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 9) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 9 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 10) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 10 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 11) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 11 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 12) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 12 + 56)))
			{
				*iHelmGlare = 3;

			}
			else if (((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 1) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 1 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 2) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 2 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 3) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 3 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 4) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 4 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 5) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 5 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 6) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 6 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 7) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 7 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 8) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 8 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 9) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 9 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 10) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 10 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 11) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 11 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 12) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 12 + 56)))
			{
				*iHelmGlare = 3;

			}
			break;

		case 15:
			if (((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 1) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 1 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 2) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 2 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 3) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 3 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 4) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 4 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 5) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 5 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 6) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 6 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 7) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 7 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 8) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 8 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 9) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 9 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 10) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 10 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 11) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 11 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 12) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 12 + 56)))
			{
				*iHelmGlare = 4;

			}
			else if (((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 1) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 1 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 2) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 2 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 3) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 3 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 4) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 4 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 5) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 5 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 6) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 6 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 7) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 7 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 8) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 8 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 9) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 9 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 10) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 10 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 11) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 11 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 12) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 12 + 56)))
			{
				*iHelmGlare = 4;

			}
			break;

		case 30:
			if (((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 1) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 1 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 2) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 2 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 3) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 3 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 4) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 4 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 5) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 5 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 6) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 6 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 7) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 7 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 8) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 8 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 9) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 9 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 10) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 10 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 11) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 11 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_M + 15 * 12) && (iHelmIndex < DEF_SPRID_HEAD_M + 15 * 12 + 56)))
			{
				*iHelmGlare = 5;

			}
			else if (((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 1) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 1 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 2) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 2 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 3) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 3 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 4) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 4 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 5) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 5 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 6) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 6 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 7) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 7 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 8) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 8 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 9) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 9 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 10) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 10 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 11) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 11 + 56))
				|| ((iHelmIndex >= DEF_SPRID_HEAD_W + 15 * 12) && (iHelmIndex < DEF_SPRID_HEAD_W + 15 * 12 + 56)))
			{
				*iHelmGlare = 5;

			}
			break;

		default:
			*iHelmGlare = 0;
			break;
	}
}

//ShieldGlare - Fix bugs - ZeroEoyPnk
void CGame::ShieldGlare(short iShieldColor, int iShieldIndex, short *iShieldGlare)
{
	switch (iShieldColor)
	{
		case 2:
			if (((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 1) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 1 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 2) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 2 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 3) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 3 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 4) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 4 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 5) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 5 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 6) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 6 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 7) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 7 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 8) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 8 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_M + 8 * 9) && (iShieldIndex < DEF_SPRID_SHIELD_M + 8 * 9 + 7)))
			{
				*iShieldGlare = 2;

			}

			else if (((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 1) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 1 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 2) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 2 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 3) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 3 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 4) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 4 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 5) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 5 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 6) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 6 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 7) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 7 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 8) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 8 + 7))
				|| ((iShieldIndex >= DEF_SPRID_SHIELD_W + 8 * 9) && (iShieldIndex < DEF_SPRID_SHIELD_W + 8 * 9 + 7)))
			{
				*iShieldGlare = 2;

			}
			break;
		default:
			*iShieldGlare = 0;
			break;
	}
}

void CGame::CreateSettingsCFG()
{
	char * cp, cTxt[256], cFn[256], cTemp[2048];
	FILE * pFile;
	char Temp;

	ZeroMemory(cFn, sizeof(cFn));
	strcat(cFn, "DATA");
	strcat(cFn, "\\");
	strcat(cFn, "\\");

	//DecriptString(m_cPlayerName);
	strcat(cFn, m_cPlayerName);
	//EncriptString(m_cPlayerName);
		
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "Settings.cfg");

	pFile = fopen(cFn, "w");

	ZeroMemory(cTemp, sizeof(cTemp));

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bSetting)	wsprintf(cTxt, "SettingM = %d\n", 1);
	else wsprintf(cTxt, "SettingM = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bIsDialogEnabled[9])	wsprintf(cTxt, "GuideMap = %d\n", 1);
	else wsprintf(cTxt, "GuideMap = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bZoomMap)	wsprintf(cTxt, "Zoom = %d\n", 1);
	else wsprintf(cTxt, "Zoom = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (AutoSSEK) wsprintf(cTxt, "AutoSS = %d\n", 1);
	else wsprintf(cTxt, "AutoSS = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bSoundStat) wsprintf(cTxt, "Sound = %d\n", 1);
	else wsprintf(cTxt, "Sound = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bMusicStat) wsprintf(cTxt, "Music = %d\n", 1);
	else wsprintf(cTxt, "Music = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	wsprintf(cTxt, "SoundLevel = %d\n", m_cSoundVolume);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	wsprintf(cTxt, "MusicLevel = %d\n", m_cMusicVolume);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bShout) wsprintf(cTxt, "Shout = %d\n", 1);
	else wsprintf(cTxt, "Shout = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bWhisper) wsprintf(cTxt, "Whisper = %d\n", 1);
	else wsprintf(cTxt, "Whisper = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	wsprintf(cTxt, "BarType = %d\n", BigBar);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bGrid) wsprintf(cTxt, "ShowGrid = %d\n", 1);
	else wsprintf(cTxt, "ShowGrid = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	wsprintf(cTxt, "GridColor = %d\n", m_sGrid);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bGridTrans) wsprintf(cTxt, "GridTransparency = %d\n", 1);
	else wsprintf(cTxt, "GridTransparency = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bDialogTrans) wsprintf(cTxt, "Transparency = %d\n", 1);
	else wsprintf(cTxt, "Transparency = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	wsprintf(cTxt, "Detail = %d\n", m_cDetailLevel);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (ItemGround == DEF_SPRID_ITEMGROUND_PIVOTPOINT) Temp = 1;
	else Temp = 0;
	wsprintf(cTxt, "Item-Grounds = %d\n", Temp);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_windowsKey) Temp = 1;
	else Temp = 0;
	wsprintf(cTxt, "Windows-Key = %d\n", Temp);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (Glares) wsprintf(cTxt, "Glares = %d\n", 1);
	else wsprintf(cTxt, "Glares = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (Stars) wsprintf(cTxt, "Stars = %d\n", 1);
	else wsprintf(cTxt, "Stars = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (Shadows) wsprintf(cTxt, "Shadows = %d\n", 1);
	else wsprintf(cTxt, "Shadows = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (Colors) wsprintf(cTxt, "Colors = %d\n", 1);
	else wsprintf(cTxt, "Colors = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (Trees) wsprintf(cTxt, "Trees = %d\n", 1);
	else wsprintf(cTxt, "Trees = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (Steeps) wsprintf(cTxt, "Steeps = %d\n", 1);
	else wsprintf(cTxt, "Steeps = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (Afks) wsprintf(cTxt, "Afks = %d\n", 1);
	else wsprintf(cTxt, "Afks = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (RedSteeps) wsprintf(cTxt, "RedSteeps = %d\n", 1);
	else wsprintf(cTxt, "RedSteeps = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (BarraNpc) wsprintf(cTxt, "BarraNpc = %d\n", 1);
	else wsprintf(cTxt, "BarraNpc = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (LowSprites) wsprintf(cTxt, "LowSprites = %d\n", 1);
	else wsprintf(cTxt, "LowSprites = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	wsprintf(cTxt, "Resolution = %d\n", Resolution);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (Roofs) wsprintf(cTxt, "Roofs = %d\n", 1);
	else wsprintf(cTxt, "Roofs = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (bPlayerShines) wsprintf(cTxt, "TransBag = %d\n", 1);
	else wsprintf(cTxt, "TransBag = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (StaggerDmg) wsprintf(cTxt, "StaggerDmg = %d\n", 1);
	else wsprintf(cTxt, "StaggerDmg = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (CandySize) wsprintf(cTxt, "CandySize = %d\n", 1);
	else wsprintf(cTxt, "CandySize = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (ShowShin) wsprintf(cTxt, "ShowShin = %d\n", 1);
	else wsprintf(cTxt, "ShowShin = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_DInput.m_bModernMouse) wsprintf(cTxt, "ModernMouse = %d\n", 1);
	else wsprintf(cTxt, "ModernMouse = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bOldCamera) wsprintf(cTxt, "OldCamera = %d\n", 1);
	else wsprintf(cTxt, "OldCamera = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bShowTiming) wsprintf(cTxt, "NetGraph = %d\n", 1);
	else wsprintf(cTxt, "NetGraph = %d\n", 0);
	strcat(cTemp, cTxt);

	ZeroMemory(cTxt, sizeof(cTxt));
	if (m_bShowTiming) wsprintf(cTxt, "QuestHelper = %d\n", 1);
	else wsprintf(cTxt, "QuestHelper = %d\n", 0);
	strcat(cTemp, cTxt);

	cp = (char *)cTemp;
	fwrite(cp, strlen(cp), 1, pFile);

	fclose(pFile);
}

void CGame::ReadSettingsCFG()
{
	FILE * pFile;
	HANDLE hFile;
	DWORD dwFileSize;
	char * cp, *token, cReadMode, cFn[256];
	char seps[] = "= \t\n";
	class CStrTok * pStrTok;

	ZeroMemory(cFn, sizeof(cFn));

	strcat(cFn, "DATA");
	mkdir(cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");

	strcat(cFn, m_cPlayerName);

	mkdir(cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "Settings.cfg");

	cReadMode = 0;

	hFile = CreateFile(cFn, GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);

	pFile = fopen(cFn, "rt");
	if (pFile == NULL) {
		m_cDetailLevel = 2;
		m_bSetting = FALSE;
		EnableDialogBox(9, 0, 0, 0, NULL);
		m_bDialogTrans = FALSE;
		m_bZoomMap = TRUE;
		m_bSoundStat = TRUE;
		m_bMusicStat = TRUE;
		m_cSoundVolume = 100;
		m_cMusicVolume = 100;
		m_bWhisper = TRUE;
		m_bShout = TRUE;
		BigBar = 0;
		m_bGrid = FALSE;
		m_bGridTrans = FALSE;
		m_sGrid = 0;
		AutoSSEK = FALSE;
		ItemGround = DEF_SPRID_ITEMGROUND_PIVOTPOINT;
		m_windowsKey = FALSE;
		Glares = TRUE;
		Stars = TRUE;
		Shadows = TRUE;
		Colors = TRUE;
		Trees = FALSE;
		Steeps = TRUE;
		Afks = TRUE;
		ShadowsBox = TRUE;

		RedSteeps = false;
		BarraNpc = false;
		LowSprites = false;
		Resolution = 0;
		Roofs = false;
		bPlayerShines = true;
		StaggerDmg = false;
		CandySize = false;
		ShowShin = false;
		m_DInput.m_bModernMouse = false;
		m_bOldCamera = false;
		m_bShowTiming = true;
		m_bQuestHelper = true;
	}
	else {
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);

		pStrTok = new class CStrTok(cp, seps);
		token = pStrTok->pGet();

		while (token != NULL) {
			if (cReadMode != 0) {
				switch (cReadMode) {
					case 0:
						if (atoi(token) == 1) m_bSetting = true;
						else m_bSetting = false;
						cReadMode = 0;
						break;

					case 1:
						if (atoi(token) == 1) EnableDialogBox(9, 0, 0, 0, NULL);
						cReadMode = 0;
						break;

					case 2:
						if (atoi(token) == 1) m_bZoomMap = TRUE;
						else m_bZoomMap = FALSE;
						cReadMode = 0;
						break;

					case 3:
						if (atoi(token) == 1) AutoSSEK = TRUE;
						else AutoSSEK = FALSE;
						cReadMode = 0;
						break;

					case 4:
						if (atoi(token) == 1) m_bSoundStat = TRUE;
						else m_bSoundStat = FALSE;
						cReadMode = 0;
						break;

					case 5:
						if (atoi(token) == 1) m_bMusicStat = TRUE;
						else m_bMusicStat = FALSE;
						cReadMode = 0;
						break;

					case 6:
						m_cSoundVolume = atoi(token);
						if (m_cSoundVolume < 0 || m_cSoundVolume > 100)
							m_cSoundVolume = 100;
						cReadMode = 0;
						break;

					case 7:
						m_cMusicVolume = atoi(token);
						if (m_cMusicVolume < 0 || m_cMusicVolume > 100)
							m_cMusicVolume = 100;
						cReadMode = 0;
						break;

					case 8:
						if (atoi(token) == 1) m_bShout = TRUE;
						else m_bShout = FALSE;
						cReadMode = 0;
						break;

					case 9:
						if (atoi(token) == 1) m_bWhisper = TRUE;
						else m_bWhisper = FALSE;
						cReadMode = 0;
						break;

					case 10:
						BigBar = atoi(token);
						if (BigBar < 0 || BigBar > 2)
							BigBar = 0;

						switch (BigBar)
						{
							case 0:
								EnableDialogBox(30, NULL, NULL, NULL);
								break;
							case 1:
								DisableDialogBox(30);
								EnableDialogBox(44, NULL, NULL, NULL);
								break;
							case 2:
								DisableDialogBox(44);
								break;

						}
						cReadMode = 0;
						break;

					case 11:
						if (atoi(token) == 1) m_bGrid = TRUE;
						else m_bGrid = FALSE;
						cReadMode = 0;
						break;

					case 12:
						m_sGrid = atoi(token);
						if (m_sGrid < 0 || m_sGrid > 9)
						{
							if (m_bGridTrans == TRUE)
								m_sGrid = 1;
							else
								m_sGrid = 0;
						}
						else {
							if ((m_sGrid % 2 == 0) && (m_bGridTrans))
								m_sGrid++;
							else if ((m_sGrid % 2 != 0) && (m_bGridTrans == FALSE))
								m_sGrid--;
						}

						cReadMode = 0;
						break;

					case 13:
						if (atoi(token) == 1) m_bGridTrans = TRUE;
						else m_bGridTrans = FALSE;
						cReadMode = 0;
						break;

					case 14:
						if (atoi(token) == 1) m_bDialogTrans = TRUE;
						else m_bDialogTrans = FALSE;
						cReadMode = 0;
						break;

					case 15:
						if (atoi(token) == 1) m_windowsKey = TRUE;
						else m_windowsKey = FALSE;
						SetKeyboardHook(!m_windowsKey);
						cReadMode = 0;
						break;

					case 16:
						m_cDetailLevel = atoi(token);
						if (m_cDetailLevel < 0 || m_cDetailLevel > 3)
							m_cDetailLevel = 3;
						cReadMode = 0;
						break;

					case 17:
						if (atoi(token) == 1) ItemGround = DEF_SPRID_ITEMGROUND_PIVOTPOINT;
						else ItemGround = DEF_SPRID_ITEMPACK_PIVOTPOINT;
						cReadMode = 0;
						break;

					case 18:
						if (atoi(token) == 1) Glares = TRUE;
						else Glares = FALSE;
						cReadMode = 0;
						break;

					case 19:
						if (atoi(token) == 1) Stars = TRUE;
						else Stars = FALSE;
						cReadMode = 0;
						break;

					case 20:
						if (atoi(token) == 1) Shadows = TRUE;
						else Shadows = FALSE;
						cReadMode = 0;
						break;

					case 21:
						if (atoi(token) == 1) Colors = TRUE;
						else Colors = FALSE;
						cReadMode = 0;
						break;

					case 22:
						if (atoi(token) == 1) Trees = TRUE;
						else Trees = FALSE;
						cReadMode = 0;
						break;

					case 23:
						if (atoi(token) == 1) Steeps = TRUE;
						else Steeps = FALSE;
						cReadMode = 0;
						break;

					case 24:
						if (atoi(token) == 1) Afks = TRUE;
						else Afks = FALSE;
						cReadMode = 0;
						break;

					case 25:
						if (atoi(token) == 1)
						{
							RedSteeps = true;
							MakeEffectSpr("effect2b", 10, 3, FALSE);
						}
						else
						{
							RedSteeps = false;
							MakeEffectSpr("effect2", 10, 3, FALSE);
						}
						cReadMode = 0;
						break;

					case 26:
						if (atoi(token) == 1) BarraNpc = true;
						else BarraNpc = false;
						cReadMode = 0;
						break;

					case 27:
						//if (atoi(token) == 1) LowSprites = true;
						//else LowSprites = false;
						if (atoi(token) == 1)
						{
							LowSprites = true;
							MakeEffectSpr("effect7b", 45, 12, FALSE);
							MakeEffectSpr("effect11b", 89, 14, FALSE);
							MakeEffectSpr("Magic-Effectb", 168, 5, FALSE, FALSE);
						}
						else
						{
							LowSprites = false;
							MakeEffectSpr("effect7", 45, 12, FALSE);
							MakeEffectSpr("effect11", 89, 14, FALSE);
							MakeEffectSpr("Magic-Effect", 168, 5, FALSE, FALSE);
						}
						cReadMode = 0;
						break;

					case 28:
						Resolution = atoi(token);
						if (Resolution < 0 || Resolution > 2)
							Resolution = 0;

						switch (Resolution)
						{
						case 0:
							C1024x768;
							break;
						case 1:
							C800x600;
							break;
						case 2:
							C640x480;
							break;

						}
						cReadMode = 0;
						break;

					case 29:
					//	if (atoi(token) == 1) Roofs = true;
					//	else Roofs = false;
						if (atoi(token) == 1)
						{
							Roofs = true;
							MakeTileSpr("Tile422-429b", 422, 8, TRUE);
							MakeTileSpr("Tile382-387b", 382, 6, TRUE);
							MakeTileSpr("Tile370-381b", 370, 12, TRUE);
							MakeTileSpr("objects7b", 242, 7, TRUE);
						}
						else
						{
							Roofs = false;
							MakeTileSpr("Tile422-429", 422, 8, TRUE);
							MakeTileSpr("Tile382-387", 382, 6, TRUE);
							MakeTileSpr("Tile370-381", 370, 12, TRUE);
							MakeTileSpr("objects7", 242, 7, TRUE);
						}
						cReadMode = 0;
						break;

					case 30:
					//	if (atoi(token) == 1) TransBag = true;
					//	else TransBag = false;
						if (atoi(token) == 1)
						{
							bPlayerShines = true;
							/*m_hPakFile = CreateFile("sprites\\GameDialog.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
							if (m_hPakFile != INVALID_HANDLE_VALUE) {
								m_pSprite[DEF_SPRID_INTERFACE_ND_INVENTORY] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 7, FALSE);
								CloseHandle(m_hPakFile);
							}*/
						}
						else
						{
							bPlayerShines = false;
							/*m_hPakFile = CreateFile("sprites\\GameDialog.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
							if (m_hPakFile != INVALID_HANDLE_VALUE) {
								m_pSprite[DEF_SPRID_INTERFACE_ND_INVENTORY] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 7, FALSE);
								CloseHandle(m_hPakFile);
							}*/
						}
						cReadMode = 0;
						break;

					case 31:
						if (atoi(token) == 1) StaggerDmg = true;
						else StaggerDmg = false;
						cReadMode = 0;
						break;

					case 32:
					//	if (atoi(token) == 1) CandySize = true;
					//	else CandySize = false;
						if (atoi(token) == 1)
						{
							CandySize = true;
							MakeSprite("item-packb", DEF_SPRID_ITEMPACK_PIVOTPOINT + 1, 6, FALSE);
						}
						else
						{
							CandySize = false;
							MakeSprite("item-pack", DEF_SPRID_ITEMPACK_PIVOTPOINT + 1, 6, FALSE);
						}
						cReadMode = 0;
						break;

					case 33:
						if (atoi(token) == 1) ShowShin = true;
						else ShowShin = false;
						cReadMode = 0;

						break;
					case 34:
						if (atoi(token) == 1) m_DInput.m_bModernMouse = true;
						else m_DInput.m_bModernMouse = false;
						cReadMode = 0;
						break;

					case 35:
						if (atoi(token) == 1) m_bOldCamera = true;
						else m_bOldCamera = false;
						cReadMode = 0;
						break;

					case 36:
						if (atoi(token) == 1) m_bShowTiming = true;
						else m_bShowTiming = false;
						cReadMode = 0;
						break;
					case 37:
						if (atoi(token) == 1) m_bQuestHelper = true;
						else m_bQuestHelper = false;
						cReadMode = 0;
						break;
				}
			}
			else {
				if (memcmp(token, "SettingM", 8) == 0) cReadMode = 0;
				if (memcmp(token, "GuideMap", 8) == 0) cReadMode = 1;
				if (memcmp(token, "Zoom", 4) == 0) cReadMode = 2;
				if (memcmp(token, "AutoSS", 6) == 0) cReadMode = 3;
				if (memcmp(token, "Sound", 5) == 0) cReadMode = 4;
				if (memcmp(token, "Music", 5) == 0) cReadMode = 5;
				if (memcmp(token, "SoundLevel", 10) == 0) cReadMode = 6;
				if (memcmp(token, "MusicLevel", 10) == 0) cReadMode = 7;
				if (memcmp(token, "Shout", 5) == 0) cReadMode = 8;
				if (memcmp(token, "Whisper", 7) == 0) cReadMode = 9;
				if (memcmp(token, "BarType", 7) == 0) cReadMode = 10;
				if (memcmp(token, "ShowGrid", 8) == 0) cReadMode = 11;
				if (memcmp(token, "GridColor", 9) == 0) cReadMode = 12;
				if (memcmp(token, "GridTransparency", 16) == 0) cReadMode = 13;
				if (memcmp(token, "Transparency", 12) == 0) cReadMode = 14;
				if (memcmp(token, "Windows-Key", 11) == 0) cReadMode = 15;
				if (memcmp(token, "Detail", 6) == 0) cReadMode = 16;
				if (memcmp(token, "Item-Grounds", 12) == 0) cReadMode = 17;
				if (memcmp(token, "Glares", 6) == 0) cReadMode = 18;
				if (memcmp(token, "Stars", 5) == 0) cReadMode = 19;
				if (memcmp(token, "Shadows", 7) == 0) cReadMode = 20;
				if (memcmp(token, "Colors", 6) == 0) cReadMode = 21;
				if (memcmp(token, "Trees", 5) == 0) cReadMode = 22;
				if (memcmp(token, "Steeps", 5) == 0) cReadMode = 23;
				if (memcmp(token, "Afks", 4) == 0) cReadMode = 24;
				if (memcmp(token, "RedSteeps", 9) == 0) cReadMode = 25;
				if (memcmp(token, "BarraNpc", 8) == 0) cReadMode = 26;
				if (memcmp(token, "LowSprites", 10) == 0) cReadMode = 27;
				if (memcmp(token, "Resolution", 10) == 0) cReadMode = 28;
				if (memcmp(token, "Roofs", 5) == 0) cReadMode = 29;
				if (memcmp(token, "TransBag", 8) == 0) cReadMode = 30;
				if (memcmp(token, "StaggerDmg", 10) == 0) cReadMode = 31;
				if (memcmp(token, "CandySize", 9) == 0) cReadMode = 32;
				if (memcmp(token, "ShowShin", 8) == 0) cReadMode = 33;
				if (memcmp(token, "ModernMouse", 11) == 0) cReadMode = 34;
				if (memcmp(token, "OldCamera", 9) == 0) cReadMode = 35;
				if (memcmp(token, "NetGraph", 8) == 0) cReadMode = 36;
				if (memcmp(token, "QuestHelper", 11) == 0) cReadMode = 37;
			}
			token = pStrTok->pGet();
		}

		delete pStrTok;
		delete[]cp;
	}
	if (pFile != NULL) fclose(pFile);
}

//Show Admins -> ZeroEoyPnk -> New Generation Hb Programmer (???) :P
void CGame::ShowAdmin(short sX, short sY, char Admin)
{	//Admin GM Logo GM
	if (Admin == 99) m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, m_dwCurTime);
	//else m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, m_dwCurTime);
	else return;//m_pEffectSpr[1]->PutTransSprite(sX, sY, 1, m_dwCurTime);
}

void CGame::ChargeTopList(char *pData)
{
	char *cp, temp;
	int *ip, i;

	cp = (char *)(pData + 6);

	temp = *cp;
	cp++;

	for (i = (temp * 15); i < (15 * temp) + 15; i++)
	{
		ZeroMemory(TopList[i].Name, sizeof(TopList[i].Name));
		memcpy(TopList[i].Name, cp, 11);
		cp += 11;

		if (temp != 3)
		{
			TopList[i].side = *cp;
			cp++;
		}

		ip = (int *)cp;
		TopList[i].Points = *ip;
		cp += 4;
	}
}

void CGame::LoadTextNewPanel(short sX, short sY, short msX, short msY, short msZ, char cLB)
{
	int i, iTotalLines, iPointerLoc, iMaxLines, FinScroll;
	double d1, d2, d3;

	iMaxLines = 23;

	//sX = m_stDialogBoxInfo[52].sX;
	//sY = m_stDialogBoxInfo[52].sY;

	iTotalLines = 0;
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
		if (m_pMsgTextList[i] != NULL) iTotalLines++;
	//if( iTotalLines > iMaxLines ) DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL,sX + 237, sY + 93, 8);

	if (iGetTopDialogBoxIndex() == 52 && msZ != 0)
	{
		m_stDialogBoxInfo[52].sView = m_stDialogBoxInfo[52].sView - msZ / 60;
		m_DInput.m_sZ = 0;
	}
	if (m_stDialogBoxInfo[52].sView < 0) m_stDialogBoxInfo[52].sView = 0;
	if (iTotalLines > iMaxLines && m_stDialogBoxInfo[52].sView > iTotalLines - iMaxLines) m_stDialogBoxInfo[52].sView = iTotalLines - iMaxLines;
	if (iTotalLines > iMaxLines) {
		d1 = (double)m_stDialogBoxInfo[52].sView;
		d2 = (double)(iTotalLines - iMaxLines);
		d3 = (317.0f * d1) / d2;
		iPointerLoc = (int)(d3 + 0.5);
		//if( iTotalLines > iMaxLines ) DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL,sX + 237, sY + 93, 8);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 232, sY - 20 + iPointerLoc, 7);
	}
	else iPointerLoc = 0;
	for (i = 0; i < iMaxLines; i++)
		if (m_pMsgTextList[i + m_stDialogBoxInfo[52].sView] != NULL) {
			//	if (m_bDialogTrans == FALSE) { // v2.173
			switch (m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg[0]) {
				//Blanco
				case '-': PutAlignedString(sX, sX + 235, sY + i * 13, (m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg + 1), 255, 255, 255); break;
					//Amarillo
				case ';': PutAlignedString(sX, sX + 235, sY + i * 13, (m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg + 1), 244, 173, 1); break;
					//Rojo
				case '@': PutAlignedString(sX, sX + 235, sY + i * 13, (m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg + 1), 218, 43, 43); break;
					//Azul
				case '&': PutAlignedString(sX, sX + 235, sY + i * 13, (m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg + 1), 23, 132, 163); break;
					//Verde
				case '$': PutAlignedString(sX, sX + 235, sY + i * 13, (m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg + 1), 92, 163, 23); break;
					//Marron
				case '<': PutAlignedString(sX, sX + 235, sY + i * 13, (m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg + 1), 161, 120, 66); break;

				default: PutAlignedString(sX, sX + 235, sY + i * 13, m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg, 203, 197, 197); break;
			}
			//	}
			//	else PutAlignedString(sX, sX +235, sY +i*13, m_pMsgTextList[i + m_stDialogBoxInfo[52].sView]->m_pMsg, 203,197,197);
		}
	if (cLB != 0 && iTotalLines > iMaxLines) {
		if ((iGetTopDialogBoxIndex() == 52)) {
			FinScroll = 304;
			if ((msX >= sX + 225) && (msX <= sX + 239) && (msY >= sY) && (msY <= sY + FinScroll)) {
				d1 = (double)(msY - (sY + 98));
				d2 = (double)(iTotalLines - iMaxLines);
				d3 = (d1 * d2) / 321.0f;
				iPointerLoc = (int)d3;
				if (iPointerLoc > iTotalLines - iMaxLines) iPointerLoc = iTotalLines - iMaxLines;
				m_stDialogBoxInfo[52].sView = iPointerLoc;
			}
		}
	}
	else m_stDialogBoxInfo[52].bIsScrollSelected = FALSE;
}

void CGame::DrawDialogBox_NewPanelConfirmation(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[53].sX;
	sY = m_stDialogBoxInfo[53].sY;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME1, sX, sY, 2);

	if (m_stDialogBoxInfo[53].sV1 > 0)
	{
		switch (m_stDialogBoxInfo[53].sV1)
		{
			/* Command Items */
		/*	//DkSet command
			case 1:
				PutString(sX + 60, sY + 20, "Estas seguro que quieres", RGB(4,0,50));
				PutString(sX + 60, sY + 35, "usar el comando dkset?", RGB(4,0,50));
				break;*/
				//maname command
			case 2:
				PutString(sX + 60, sY + 20, "Estas seguro que quieres", RGB(4, 0, 50));
				PutString(sX + 60, sY + 35, "usar el comando maname?", RGB(4, 0, 50));
				break;
				//zerkme command
			case 3:
				PutString(sX + 60, sY + 20, "Estas seguro que quieres", RGB(4, 0, 50));
				PutString(sX + 60, sY + 35, "usar el comando zerkme?", RGB(4, 0, 50));
				break;
				//repme command
			/*	case 4:
					PutString(sX + 60, sY + 20, "�Estas seguro que quieres", RGB(4,0,50));
					PutString(sX + 66, sY + 35, "usar el comando repme?", RGB(4,0,50));
					break;*/
				//changecity command
			case 5:
				PutString(sX + 60, sY + 20, "Estas seguro que quieres", RGB(4, 0, 50));
				PutString(sX + 54, sY + 35, "usar el comando changecity?", RGB(4, 0, 50));
				break;
			/*case 6:
				PutString(sX + 60, sY + 20, "Estas seguro que quieres", RGB(4, 0, 50));
				PutString(sX + 54, sY + 35, "usar el comando Reset Rank?", RGB(4, 0, 50));
				break;*/
				//NetBox(Big)
			case 2600:
				PutString(sX + 60, sY + 20, "Estas seguro que quieres la", RGB(4, 0, 50));
				PutString(sX + 100, sY + 35, "PandoraBox(Big)?", RGB(4, 0, 50));
				break;
				//NetBox(Medium)
			case 2601:
				PutString(sX + 60, sY + 20, "Estas seguro que quieres la", RGB(4, 0, 50));
				PutString(sX + 92, sY + 35, "PandoraBox(Medium)?", RGB(4, 0, 50));
				break;
				//NetBox(Small)
			case 2602:
				PutString(sX + 60, sY + 20, "Estas seguro que quieres la", RGB(4, 0, 50));
				PutString(sX + 93, sY + 35, "PandoraBox(Small)?", RGB(4, 0, 50));
				break;
				//Angelics
			case 911:	//AngelicPandent(STR)
				PutString(sX + 60, sY + 20, "Estas seguro que quieres el", RGB(4, 0, 50));
				PutString(sX + 92, sY + 35, "Angelic(STR)?", RGB(4, 0, 50));
				break;
			case 912:	//AngelicPandent(DEX)
				PutString(sX + 60, sY + 20, "Estas seguro que quieres el", RGB(4, 0, 50));
				PutString(sX + 92, sY + 35, "Angelic(DEX)?", RGB(4, 0, 50));
				break;
			case 913:	//AngelicPandent(INT)
				PutString(sX + 60, sY + 20, "Estas seguro que quieres el", RGB(4, 0, 50));
				PutString(sX + 92, sY + 35, "Angelic(INT)?", RGB(4, 0, 50));
				break;
			case 914:	//AngelicPandent(MAG)
				PutString(sX + 60, sY + 20, "Estas seguro que quieres el", RGB(4, 0, 50));
				PutString(sX + 92, sY + 35, "Angelic(MAG)?", RGB(4, 0, 50));
				break;
			default:
				break;
		}
	}
	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 55, 19);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 55, 18);

	if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 55, 3);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 170, sY + 55, 2);
}

void CGame::DlgBoxClick_NewPanelConfirmation(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[53].sX;
	sY = m_stDialogBoxInfo[53].sY;
	DWORD dwTime = timeGetTime();

	if (m_stDialogBoxInfo[53].sV1 > 0)
	{
		switch (m_stDialogBoxInfo[53].sV1)
		{
			/* Command Items */
			//DkSet command
			/*case 1:
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					ZeroMemory(m_cChatMsg, sizeof(m_cChatMsg) );
					strcpy(m_cChatMsg, "/dkset");
					bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, m_cChatMsg);
					DisableDialogBox(53);
				}else if ((msX >= sX + 170 ) && (msX <= sX + 170 + DEF_BTNSZX ) && (msY >= sY + 55 ) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;*/
				//maname command
			case 2:
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					ZeroMemory(m_cChatMsg, sizeof(m_cChatMsg));
					strcpy(m_cChatMsg, "/maname");
					bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, m_cChatMsg);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
				//zerkme command
			case 3:
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					ZeroMemory(m_cChatMsg, sizeof(m_cChatMsg));
					strcpy(m_cChatMsg, "/zerkme");
					bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, m_cChatMsg);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
				//repme command
			/*	case 4:
					if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
					{   // yes
						ZeroMemory(m_cChatMsg, sizeof(m_cChatMsg) );
						strcpy(m_cChatMsg, "/repme");
						bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, m_cChatMsg);
						DisableDialogBox(53);
					}else if ((msX >= sX + 170 ) && (msX <= sX + 170 + DEF_BTNSZX ) && (msY >= sY + 55 ) && (msY <= sY + 55 + DEF_BTNSZY))
					{	// no
						DisableDialogBox(53);
					}
					break;*/
					//changecity command
			case 5:
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					if (ConteoChangeCity == -1) ConteoChangeCity = 11;
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;

			/*case 6:
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					ZeroMemory(m_cChatMsg, sizeof(m_cChatMsg));
					strcpy(m_cChatMsg, "/resetrank");
					bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, m_cChatMsg);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;*/

				//NetBox(Big)
			case 2600:
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_MAJESTICS_ITEMS, NULL, m_stDialogBoxInfo[53].sV1, NULL, NULL, NULL);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
				//NetBox(Medium)
			case 2601:
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_MAJESTICS_ITEMS, NULL, m_stDialogBoxInfo[53].sV1, NULL, NULL, NULL);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
				//NetBox(Small)
			case 2602:
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_MAJESTICS_ITEMS, NULL, m_stDialogBoxInfo[53].sV1, NULL, NULL, NULL);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
				//Angelics
			case 911:	//AngelicPandent(STR)
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_MAJESTICS_ITEMS, NULL, m_stDialogBoxInfo[53].sV1, NULL, NULL, NULL);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
			case 912:	//AngelicPandent(DEX)
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_MAJESTICS_ITEMS, NULL, m_stDialogBoxInfo[53].sV1, NULL, NULL, NULL);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
			case 913:	//AngelicPandent(INT)
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_MAJESTICS_ITEMS, NULL, m_stDialogBoxInfo[53].sV1, NULL, NULL, NULL);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
			case 914:	//AngelicPandent(MAG)
				if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{   // yes
					bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_MAJESTICS_ITEMS, NULL, m_stDialogBoxInfo[53].sV1, NULL, NULL, NULL);
					DisableDialogBox(53);
				}
				else if ((msX >= sX + 170) && (msX <= sX + 170 + DEF_BTNSZX) && (msY >= sY + 55) && (msY <= sY + 55 + DEF_BTNSZY))
				{	// no
					DisableDialogBox(53);
				}
				break;
			default:
				break;
		}
	}
}

int CGame::iDice(int iThrow, int iRange)
{
	register int i, iRet;

	if (iRange <= 0) return 0;

	iRet = 0;
	for (i = 1; i <= iThrow; i++) {

		iRet += (rand() % iRange) + 1;
	}

	return iRet;
}

void CGame::PartyBar(short sX, short sY, short i, DWORD dwTime)
{
	int iMaxPoint, iBarWidth;
	iMaxPoint = 100;

	iBarWidth = (PartyStruct[i].iPartyHp * 54) / iMaxPoint;

	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 54) iBarWidth = 54;

	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX - 25, sY + 14, 1, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX - 25, sY + 14, 0, iBarWidth, dwTime);
}

void CGame::MyBar(short sX, short sY, DWORD dwTime)
{
	int iMaxPoint, iBarWidth;
	iMaxPoint = 100;

	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) / 2;
	else				   iMaxPoint = m_iVit * 3 + DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) / 2;
	if (DecriptInt(m_iHP) > iMaxPoint) m_iHP = EncriptInt(iMaxPoint);
	iBarWidth = (DecriptInt(m_iHP) * 54) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 54) iBarWidth = 54;
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX - 25, sY + 14, 1, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX - 25, sY + 14, 0, iBarWidth, dwTime);

	//MP bar
	iMaxPoint = (m_iMag + DecriptInt(m_iAngelicMag)) * 2 + DecriptInt(m_iLevel) * 2 + (m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) / 2;
	if (DecriptInt(m_iMP) > iMaxPoint) m_iMP = EncriptInt(iMaxPoint);
	iBarWidth = (DecriptInt(m_iMP) * 54) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 54) iBarWidth = 54;
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX - 25, sY + 17, 1, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX - 25, sY + 17, 2, iBarWidth, dwTime);
	// SP bar
	if (DecriptInt(m_iAngelicStr) != 0) iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) * 2;
	else				   iMaxPoint = DecriptInt(m_iLevel) * 2 + (m_iStr + m_sRankAddStr) * 2;
	if (DecriptInt(m_iSP) > iMaxPoint) m_iSP = EncriptInt(iMaxPoint);
	iBarWidth = (DecriptInt(m_iSP) * 54) / iMaxPoint;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > 54) iBarWidth = 54;
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX - 25, sY + 20, 1, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX - 25, sY + 20, 3, iBarWidth, dwTime);
}

/* New Trade Items System */
void CGame::DrawDialogBox_TradeItems(short msX, short msY, short msZ, char cLB)
{
	short sX, sY, PosX;

	sX = m_stDialogBoxInfo[58].sX;
	sY = m_stDialogBoxInfo[58].sY;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);
	//	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_EVENT, sX, sY, 1);

	wsprintf(G_cTxt, "%s Trade", TradeType);
	PosX = strlen(TradeType);
	if (PosX < 10) PosX -= 13;
	else PosX *= 2;
	PutString_SprFont(sX + 79 - (PosX), sY + 12, G_cTxt, 0, 0, 0);
	PutString_SprFont(sX + 80 - (PosX), sY + 13, G_cTxt, 255, 200, 0);

	switch (m_stDialogBoxInfo[58].cMode) {
			case 0:
				ShowItemList(58, sX, sY, msX, msY, msZ, cLB);
				break;

			case -1:
				ShowMenuItems(sX, sY, msX, msY);
				break;

			default:
				ShowItemDetail(58, sX, sY, msX, msY, msZ);
				break;
	}
}

void CGame::DlgBoxClick_TradeItems(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[58].sX;
	sY = m_stDialogBoxInfo[58].sY;

	switch (m_stDialogBoxInfo[58].cMode) {
		case 0:
			ClicItemList(58, sX, sY, msX, msY);
			break;

		case -1:
			ClicMenuItems(58, sX, sY, msX, msY);
			break;

		default:
			ClicItemDetail(58, sX, sY, msX, msY);
			break;
	}
}

void CGame::ShowItemDetail(short Dialog, short sX, short sY, short msX, short msY, short msZ)
{
	DWORD dwTime = m_dwCurTime;
	int  iTemp;
	char cTemp[255], cStr2[255], cStr3[255];

	int  iCost, iDiscountCost, iDiscountRatio;
	double dTmp1, dTmp2, dTmp3;
	BOOL bFlagStatLow = FALSE;
	BOOL bFlagRedShown = FALSE;

	m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sSprite]->PutSpriteFast(sX + 62 + 30 - 35, sY + 84 + 30 - 10,
		m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sSpriteFrame, dwTime);

	ZeroMemory(cTemp, sizeof(cTemp));
	GetItemName(m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1], cTemp, cStr2, cStr3);

	PutAlignedString(sX + 25, sX + 240, sY + 50, cTemp, 255, 255, 255);
	PutAlignedString(sX + 26, sX + 241, sY + 50, cTemp, 255, 255, 255);

	strcpy(cTemp, DRAW_DIALOGBOX_SHOP3); //"PRICE"
	PutString(sX + 90, sY + 78 + 30 - 10, cTemp, RGB(255, 255, 255));
	PutString(sX + 91, sY + 78 + 30 - 10, cTemp, RGB(255, 255, 255));
	strcpy(cTemp, DRAW_DIALOGBOX_SHOP6); // "Weight"
	PutString(sX + 90, sY + 93 + 30 - 10, cTemp, RGB(255, 255, 255));
	PutString(sX + 91, sY + 93 + 30 - 10, cTemp, RGB(255, 255, 255));

	iCost = m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_wPrice;

	if (ListType > 0)
	{
		wsprintf(cTemp, "%d %s", iCost, TradeType);
		PutString(sX + 129, sY + 97, cTemp, RGB(0, 0, 0));
	}
	switch (ListType)
	{
		case 1:
			if (m_iEnemyKillCount >= iCost) PutString(sX + 130, sY + 98, cTemp, RGB(255, 255, 255));
			else PutString(sX + 130, sY + 98, cTemp, RGB(255, 200, 0));
			break;
		case 2:
			if (m_iContribution >= iCost) PutString(sX + 130, sY + 98, cTemp, RGB(255, 255, 255));
			else PutString(sX + 130, sY + 98, cTemp, RGB(255, 200, 0));
			break;
		case 3: // Reserved for coins
			//if (Coins >= iCost) PutString(sX + 130, sY + 98, cTemp, RGB(255, 255, 255));
			if (m_iCoins >= iCost) PutString(sX + 130, sY + 98, cTemp, RGB(255, 255, 255));
			else PutString(sX + 130, sY + 98, cTemp, RGB(255, 200, 0));
			break;
		case 4:
			if (DecriptInt(m_iPKCount) >= iCost)  PutString(sX + 130, sY + 98, cTemp, RGB(255, 255, 255));
			else PutString(sX + 130, sY + 98, cTemp, RGB(255, 200, 0));
			break;
		default:
			iDiscountRatio = ((m_iCharisma - 10) / 4);
			dTmp1 = (double)iDiscountRatio;
			dTmp2 = dTmp1 / 100.0f;
			dTmp1 = (double)m_pItemForSaleList[m_stDialogBoxInfo[11].cMode - 1]->m_wPrice;
			dTmp3 = dTmp1 * dTmp2;
			iDiscountCost = (int)dTmp3;
			iCost = (int)(m_pItemForSaleList[m_stDialogBoxInfo[11].cMode - 1]->m_wPrice * ((100 + m_cDiscount) / 100.));
			iCost = iCost - iDiscountCost;

			if (iCost < (m_pItemForSaleList[m_stDialogBoxInfo[11].cMode - 1]->m_wPrice / 2))
				iCost = (m_pItemForSaleList[m_stDialogBoxInfo[11].cMode - 1]->m_wPrice / 2) - 1;

			wsprintf(cTemp, DRAW_DIALOGBOX_SHOP7, iCost);
			PutString(sX + 140, sY + 98, cTemp, RGB(255, 255, 255));
			break;
	}

	iTemp = m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_wWeight / 100;
	wsprintf(cTemp, DRAW_DIALOGBOX_SHOP8, iTemp);
	PutString(sX + 140, sY + 113, cTemp, RGB(255, 255, 255));

	switch (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_cEquipPos)
	{
		case DEF_EQUIPPOS_RHAND:
		case DEF_EQUIPPOS_TWOHAND:
			strcpy(cTemp, DRAW_DIALOGBOX_SHOP9);  // Damage
			PutString(sX + 90, sY + 145, cTemp, RGB(255, 255, 255));
			PutString(sX + 91, sY + 145, cTemp, RGB(255, 255, 255));
			strcpy(cTemp, DRAW_DIALOGBOX_SHOP10); //"Speed(Min.~Max.)"
			PutString(sX + 40, sY + 175, cTemp, RGB(255, 255, 255));
			PutString(sX + 41, sY + 175, cTemp, RGB(255, 255, 255));

			if (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue3 != 0)
			{
				wsprintf(cTemp, ": %dD%d+%d (S-M)", m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue1,
					m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue2,
					m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue3);
			}
			else
			{
				wsprintf(cTemp, ": %dD%d (S-M)", m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue1,
					m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue2);
			}
			PutString(sX + 140, sY + 145, cTemp, RGB(255, 255, 255));
			if (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue6 != 0)
			{
				wsprintf(cTemp, ": %dD%d+%d (L)", m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue4,
					m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5,
					m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue6);
			}
			else
			{
				wsprintf(cTemp, ": %dD%d (L)", m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue4,
					m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5);
			}
			PutString(sX + 140, sY + 160, cTemp, RGB(255, 255, 255));
			if (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_cSpeed == 0)   wsprintf(cTemp, ": 0(10~10)");
			else wsprintf(cTemp, ": %d(%d ~ %d)", m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_cSpeed, iTemp, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_cSpeed * 13);
			PutString(sX + 140, sY + 175, cTemp, RGB(255, 255, 255));

			if ((m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_wWeight / 100) > m_iStr)
			{
				wsprintf(cTemp, DRAW_DIALOGBOX_SHOP11, (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_wWeight / 100));
				PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25);
				PutAlignedString(sX + 26, sX + 241, sY + 258, cTemp, 195, 25, 25); // *Your STR should be at least %d to use this item."
				bFlagRedShown = TRUE;
			}
			break;

		case DEF_EQUIPPOS_LHAND:
			strcpy(cTemp, DRAW_DIALOGBOX_SHOP12); // "Defence"
			PutString(sX + 90, sY + 145, cTemp, RGB(255, 255, 255));
			PutString(sX + 91, sY + 145, cTemp, RGB(255, 255, 255));
			wsprintf(cTemp, ": +%d%", m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue1);
			PutString(sX + 140, sY + 145, cTemp, RGB(255, 255, 255));
			if ((m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_wWeight / 100) > m_iStr)
			{
				wsprintf(cTemp, DRAW_DIALOGBOX_SHOP11, (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_wWeight / 100));
				PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25); // "*Your STR should be at least %d to use this item."
				PutAlignedString(sX + 26, sX + 241, sY + 258, cTemp, 195, 25, 25);
				bFlagRedShown = TRUE;
			}
			break;

		case DEF_EQUIPPOS_HEAD:
		case DEF_EQUIPPOS_BODY:
		case DEF_EQUIPPOS_BOOTS:
		case DEF_EQUIPPOS_ARMS:
		case DEF_EQUIPPOS_PANTS:
			strcpy(cTemp, DRAW_DIALOGBOX_SHOP12); // "Defence"
			PutString(sX + 90, sY + 145, cTemp, RGB(255, 255, 255));
			PutString(sX + 91, sY + 145, cTemp, RGB(255, 255, 255));
			wsprintf(cTemp, ": +%d%", m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue1);
			PutString(sX + 140, sY + 145, cTemp, RGB(255, 255, 255));
			bFlagStatLow = FALSE;
			switch (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue4) {
				case 10://"Available for above Str %d"
					wsprintf(cTemp, DRAW_DIALOGBOX_SHOP15, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5);
					if (m_iStr >= m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5)
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
					}
					else
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
						bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
					}
					break;
				case 11: // "Available for above Dex %d"
					wsprintf(cTemp, DRAW_DIALOGBOX_SHOP16, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5);
					if (m_iDex >= m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5)
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
					}
					else
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
						bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
					}
					break;
				case 12: // "Available for above Vit %d"
					wsprintf(cTemp, DRAW_DIALOGBOX_SHOP17, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5);
					if (m_iVit >= m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5)
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
					}
					else
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
						bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
					}
					break;
				case 13: // "Available for above Int %d"
					wsprintf(cTemp, DRAW_DIALOGBOX_SHOP18, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5);
					if (m_iInt >= m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5)
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
					}
					else
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
						bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
					}
					break;
				case 14: // "Available for above Mag %d"
					wsprintf(cTemp, DRAW_DIALOGBOX_SHOP19, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5);
					if (m_iMag >= m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5)
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
					}
					else
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
						bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
					}
					break;
				case 15: // "Available for above Chr %d"
					wsprintf(cTemp, DRAW_DIALOGBOX_SHOP20, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5);
					if (m_iCharisma >= m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sItemEffectValue5)
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
					}
					else
					{
						PutAlignedString(sX + 25, sX + 240, sY + 160, cTemp, 255, 255, 255);
						PutAlignedString(sX + 26, sX + 241, sY + 160, cTemp, 255, 255, 255);
						bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
					}
					break;

				default:
					break;
			}
			if ((m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_wWeight / 100) > m_iStr)
			{
				wsprintf(cTemp, DRAW_DIALOGBOX_SHOP11, (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_wWeight / 100));
				PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25);
				PutAlignedString(sX + 26, sX + 241, sY + 258, cTemp, 195, 25, 25); // "*Your STR should be at least %d to use this item."
				bFlagRedShown = TRUE;
			}
			else if (bFlagStatLow == TRUE) // Means some stat is too low
			{
				strcpy(cTemp, DRAW_DIALOGBOX_SHOP21); // "(Warning!) Your stat is too low for this item."
				PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25);
				PutAlignedString(sX + 26, sX + 241, sY + 258, cTemp, 195, 25, 25);
				bFlagRedShown = TRUE;
			}
			else if ((strstr(m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_cName, "(M)") != NULL) && (m_sPlayerType > 3))
			{
				strcpy(cTemp, DRAW_DIALOGBOX_SHOP22); // "(Warning!) only for male."
				PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25);
				PutAlignedString(sX + 26, sX + 241, sY + 258, cTemp, 195, 25, 25);
				bFlagRedShown = TRUE;
			}
			else if ((strstr(m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_cName, "(W)") != NULL) && (m_sPlayerType <= 3))
			{
				strcpy(cTemp, DRAW_DIALOGBOX_SHOP23); // "(Warning!) only for female."
				PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25);
				PutAlignedString(sX + 26, sX + 241, sY + 258, cTemp, 195, 25, 25);
				bFlagRedShown = TRUE;
			}
			break;

		case DEF_EQUIPPOS_NONE:
			break;
	}

	if (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sLevelLimit != 0)
	{
		strcpy(cTemp, DRAW_DIALOGBOX_SHOP24); // "Level"
		if (DecriptInt(m_iLevel) >= m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sLevelLimit)
		{
			PutString(sX + 90, sY + 190, cTemp, RGB(255, 255, 255));
			PutString(sX + 91, sY + 190, cTemp, RGB(255, 255, 255));
			wsprintf(cTemp, DRAW_DIALOGBOX_SHOP25, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sLevelLimit);
			PutString(sX + 140, sY + 190, cTemp, RGB(255, 255, 255));// ": above %d"
		}
		else
		{
			PutString(sX + 90, sY + 190, cTemp, RGB(255, 255, 255));
			PutString(sX + 91, sY + 190, cTemp, RGB(255, 255, 255));
			wsprintf(cTemp, DRAW_DIALOGBOX_SHOP25, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_sLevelLimit);
			PutString(sX + 140, sY + 190, cTemp, RGB(255, 255, 255));// ": above %d"
			if (bFlagRedShown == FALSE)
			{
				strcpy(cTemp, DRAW_DIALOGBOX_SHOP26); // "(Warning!) Your level is too low for this item."
				PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25);
				PutAlignedString(sX + 25 + 1, sX + 240 + 1, sY + 258, cTemp, 195, 25, 25);
				bFlagRedShown = TRUE;
			}
		}
	}

	m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutSpriteFast(sX + 156, sY + 219, 19, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutSpriteFast(sX + 170, sY + 219, 19, dwTime);
	PutString(sX + 123 - 35, sY + 237 - 10, DRAW_DIALOGBOX_SHOP27, RGB(255, 255, 255)); // "Quantity:"
	PutString(sX + 124 - 35, sY + 237 - 10, DRAW_DIALOGBOX_SHOP27, RGB(255, 255, 255));
	if (iGetTopDialogBoxIndex() == Dialog && msZ != 0)
	{
		m_stDialogBoxInfo[Dialog].sV3 = m_stDialogBoxInfo[Dialog].sV3 + msZ / 60;
		m_DInput.m_sZ = 0;
	}
	if (m_stDialogBoxInfo[Dialog].sV3 > (50 - _iGetTotalItemNum())) m_stDialogBoxInfo[Dialog].sV3 = (50 - _iGetTotalItemNum());
	if (m_stDialogBoxInfo[Dialog].sV3 < 1) m_stDialogBoxInfo[Dialog].sV3 = 1;

	if (m_stDialogBoxInfo[Dialog].sV3 >= 10)
	{
		ZeroMemory(cTemp, sizeof(cTemp));
		_itoa(m_stDialogBoxInfo[Dialog].sV3, cTemp, 10);
		cTemp[1] = NULL;
		PutString(sX - 35 + 186, sY - 10 + 237, cTemp, RGB(255, 255, 255));
		PutString(sX - 35 + 187, sY - 10 + 237, cTemp, RGB(255, 255, 255));
		ZeroMemory(cTemp, sizeof(cTemp));
		_itoa(m_stDialogBoxInfo[Dialog].sV3, cTemp, 10);
		PutString(sX - 35 + 200, sY - 10 + 237, (cTemp + 1), RGB(255, 255, 255));
		PutString(sX - 35 + 201, sY - 10 + 237, (cTemp + 1), RGB(255, 255, 255));
	}
	else
	{
		PutString(sX - 35 + 186, sY - 10 + 237, "0", RGB(255, 255, 255));
		PutString(sX - 35 + 187, sY - 10 + 237, "0", RGB(255, 255, 255));
		ZeroMemory(cTemp, sizeof(cTemp));
		_itoa(m_stDialogBoxInfo[Dialog].sV3, cTemp, 10);
		PutString(sX - 35 + 200, sY - 10 + 237, (cTemp), RGB(255, 255, 255));
		PutString(sX - 35 + 201, sY - 10 + 237, (cTemp), RGB(255, 255, 255));
	}
	m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutSpriteFast(sX + 156, sY + 244, 20, dwTime);
	m_pSprite[DEF_SPRID_INTERFACE_ND_GAME2]->PutSpriteFast(sX + 170, sY + 244, 20, dwTime);

	if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 31);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 30);

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
}

void CGame::ClicItemDetail(short Dialog, short sX, short sY, short msX, short msY)
{
	char cTemp[21];

	if ((msX >= sX + 145) && (msX <= sX + 162) && (msY >= sY + 209) && (msY <= sY + 230))
	{
		m_stDialogBoxInfo[Dialog].sV3 += 10;
		if (m_stDialogBoxInfo[Dialog].sV3 >= (50 - _iGetTotalItemNum()))
			m_stDialogBoxInfo[Dialog].sV3 = (50 - _iGetTotalItemNum());
	}

	if ((msX >= sX + 145) && (msX <= sX + 162) && (msY >= sY + 234) && (msY <= sY + 251))
	{
		m_stDialogBoxInfo[Dialog].sV3 -= 10;
		if (m_stDialogBoxInfo[Dialog].sV3 <= 1)
			m_stDialogBoxInfo[Dialog].sV3 = 1;
	}

	if ((msX >= sX + 163) && (msX <= sX + 180) && (msY >= sY + 209) && (msY <= sY + 230))
	{
		m_stDialogBoxInfo[Dialog].sV3++;
		if (m_stDialogBoxInfo[Dialog].sV3 >= (50 - _iGetTotalItemNum()))
			m_stDialogBoxInfo[Dialog].sV3 = (50 - _iGetTotalItemNum());
	}

	if ((msX >= sX + 163) && (msX <= sX + 180) && (msY >= sY + 234) && (msY <= sY + 251))
	{
		m_stDialogBoxInfo[Dialog].sV3--;
		if (m_stDialogBoxInfo[Dialog].sV3 <= 1)
			m_stDialogBoxInfo[Dialog].sV3 = 1;
	}

	if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
	{	// Purchase Click
		if ((50 - _iGetTotalItemNum()) < m_stDialogBoxInfo[Dialog].sV3)
		{
			AddEventList(DLGBOX_CLICK_SHOP1, 10);//"ou cannot buy anything because your bag is full."
		}
		else
		{
			ZeroMemory(cTemp, sizeof(cTemp));
			strcpy(cTemp, m_pItemForSaleList[m_stDialogBoxInfo[Dialog].cMode - 1]->m_cName);
			if (Dialog == 11) bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_PURCHASEITEM, NULL, m_stDialogBoxInfo[Dialog].sV3, NULL, NULL, cTemp);
			else bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_RESQUEST_TRADEITEM, NULL, m_stDialogBoxInfo[Dialog].sV3, (m_stDialogBoxInfo[Dialog].sV6 * -1) - 1, NULL, cTemp);
		}
		m_stDialogBoxInfo[Dialog].cMode = 0;
		m_stDialogBoxInfo[Dialog].sV3 = 1;
		PlaySound('E', 14, 5);
	}

	if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
	{	// Cancel Click
		m_stDialogBoxInfo[Dialog].cMode = 0;
		m_stDialogBoxInfo[Dialog].sV3 = 1;
		PlaySound('E', 14, 5);
	}
}

void CGame::ShowItemList(short Dialog, short sX, short sY, short msX, short msY, short msZ, char cLB, BOOL Bar)
{
	DWORD dwTime = m_dwCurTime;
	int  i, Init, Finish;
	char cTemp[255], cStr2[255], cStr3[255];

	int  iCost;
	int  iTotalLines, iPointerLoc;
	BOOL bFlagStatLow = FALSE;
	BOOL bFlagRedShown = FALSE;
	double d1, d2, d3;
	char MaxItems;
	short Temp = 0;

	if (Dialog == 52) Temp = 50;

	if (ListType > 0)
	{
		Init = TitleShop[m_stDialogBoxInfo[Dialog].sV1].Init;
		Finish = TitleShop[m_stDialogBoxInfo[Dialog].sV1].Finish;
		if (Dialog == 52) MaxItems = 16;
		else MaxItems = 13;
	}
	else
	{
		Init = 0;
		Finish = DEF_MAXMENUITEMS;
		if (Dialog == 52) MaxItems = 18;
		else MaxItems = 15;
	}

	iTotalLines = 0;

	for (i = Init; i <= Finish; i++)
		if (m_pItemForSaleList[i] != NULL) iTotalLines++;
	if (iTotalLines > MaxItems) {
		d1 = (double)m_stDialogBoxInfo[Dialog].sView;
		d2 = (double)(iTotalLines - MaxItems);
		if (Bar) d3 = ((274.0f + Temp)* d1) / d2;
		else d3 = ((250.0f + Temp) * d1) / d2;
		iPointerLoc = (int)(d3);
		/*if (Bar)
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 3);*/
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 242, sY + iPointerLoc + 35, 7);
	}
	else iPointerLoc = 0;

	if (cLB != 0 && iTotalLines >= MaxItems)
	{
		if ((iGetTopDialogBoxIndex() == Dialog))
		{
			if ((msX >= sX + 235) && (msX <= sX + 260) && (msY >= sY + 10) && (msY <= sY + 330))
			{
				d1 = (double)(msY - (sY + 35));
				d2 = (double)(iTotalLines - MaxItems);
				d3 = (d1 * d2) / (274.0f + Temp);
				m_stDialogBoxInfo[Dialog].sView = (int)(d3 + 0.5);
			}
		}
	}
	else m_stDialogBoxInfo[Dialog].bIsScrollSelected = FALSE;
	if (iGetTopDialogBoxIndex() == Dialog && msZ != 0)
	{
		m_stDialogBoxInfo[Dialog].sView = m_stDialogBoxInfo[Dialog].sView - msZ / 60;
		m_DInput.m_sZ = 0;
	}
	if (iTotalLines >= MaxItems && m_stDialogBoxInfo[Dialog].sView > (iTotalLines - MaxItems)) m_stDialogBoxInfo[Dialog].sView = (iTotalLines - MaxItems);
	if (m_stDialogBoxInfo[Dialog].sView < 0 || iTotalLines < MaxItems) m_stDialogBoxInfo[Dialog].sView = 0;
	PutAlignedString(sX + 22, sX + 165, sY + 35, DRAW_DIALOGBOX_SHOP1, 255, 255, 255);
	PutAlignedString(sX + 23, sX + 166, sY + 35, DRAW_DIALOGBOX_SHOP1, 255, 255, 255);
	PutAlignedString(sX + 153, sX + 250, sY + 35, DRAW_DIALOGBOX_SHOP3, 255, 255, 255);
	PutAlignedString(sX + 154, sX + 251, sY + 35, DRAW_DIALOGBOX_SHOP3, 255, 255, 255);

	for (i = 0; i < MaxItems; i++)
		if (i + Init + m_stDialogBoxInfo[Dialog].sView <= Finish)
		{
			if (((i + m_stDialogBoxInfo[Dialog].sView + Init) < DEF_MAXMENUITEMS) && (m_pItemForSaleList[i + m_stDialogBoxInfo[Dialog].sView + Init] != NULL))
			{
				ZeroMemory(cTemp, sizeof(cTemp));
				GetItemName(m_pItemForSaleList[i + m_stDialogBoxInfo[Dialog].sView + Init], cTemp, cStr2, cStr3);
				if ((msX >= sX + 20) && (msX <= sX + 220) && (msY >= sY + i * 18 + 50) && (msY <= sY + i * 18 + 64))
				{
					PutAlignedString(sX + 10, sX + 190, sY + i * 18 + 50, cTemp, 255, 255, 255);
				}
				else PutAlignedString(sX + 10, sX + 190, sY + i * 18 + 50, cTemp, 255, 200, 0);
			}
		}

	for (i = 0; i < MaxItems; i++)
		if (i + Init + m_stDialogBoxInfo[Dialog].sView <= Finish)
		{
			if (((i + m_stDialogBoxInfo[Dialog].sView + Init) < DEF_MAXMENUITEMS) && (m_pItemForSaleList[i + m_stDialogBoxInfo[Dialog].sView + Init] != NULL))
			{
				iCost = m_pItemForSaleList[i + m_stDialogBoxInfo[Dialog].sView + Init]->m_wPrice;
				ZeroMemory(cTemp, sizeof(cTemp));
				wsprintf(cTemp, "%6d", iCost);
				if ((msX >= sX + 20) && (msX <= sX + 220) && (msY >= sY + i * 18 + 50) && (msY <= sY + i * 18 + 64))
					PutAlignedString(sX + 148, sX + 260, sY + i * 18 + 50, cTemp, 255, 255, 255);
				else PutAlignedString(sX + 148, sX + 260, sY + i * 18 + 50, cTemp, 255, 200, 0);
			}
		}
	if (ListType > 0)
	{
		if ((msX > sX + 174) && (msX < sX + 217) && (msY > sY + 293 + Temp) && (msY < sY + 310 + Temp))
			PutString_SprFont2(sX + 174, sY + 293 + Temp, "Back", 255, 200, 0);
		else PutString_SprFont2(sX + 174, sY + 293 + Temp, "Back", 250, 250, 250);
	}
}

void CGame::ClicItemList(short Dialog, short sX, short sY, short msX, short msY)
{
	int  i, Init, Finish;
	char MaxItems;
	short Temp = 0;

	if (Dialog == 52) Temp = 50;

	if (ListType > 0)
	{
		Init = TitleShop[m_stDialogBoxInfo[Dialog].sV1].Init;
		Finish = TitleShop[m_stDialogBoxInfo[Dialog].sV1].Finish;
		if (Dialog == 52) MaxItems = 16;
		else MaxItems = 13;
	}
	else
	{
		Init = 0;
		Finish = DEF_MAXMENUITEMS;
		if (Dialog == 52) MaxItems = 18;
		else MaxItems = 15;
	}

	for (i = 0; i < MaxItems; i++)
		if (m_stDialogBoxInfo[Dialog].sView + i + Init <= Finish)
		{
			if ((msX >= sX + 20) && (msX <= sX + 220) && (msY >= sY + i * 18 + 50) && (msY <= sY + i * 18 + 64)) {
				if (_iGetTotalItemNum() >= 50) {
					AddEventList(DLGBOX_CLICK_SHOP1, 10);//"You cannot buy anything because your bag is full."
					return;
				}
				PlaySound('E', 14, 5);
				if (m_pItemForSaleList[m_stDialogBoxInfo[Dialog].sView + i + Init] != NULL)
					m_stDialogBoxInfo[Dialog].cMode = m_stDialogBoxInfo[Dialog].sView + i + Init + 1;
				return;
			}
		}
	if (TitleShop[0].Init != -1)
		if ((msX > sX + 174) && (msX < sX + 217) && (msY > sY + 293 + Temp) && (msY < sY + 310 + Temp))
			m_stDialogBoxInfo[Dialog].cMode = -1;
}

void CGame::ShowMenuItems(short sX, short sY, short msX, short msY)
{
	for (int i = 0; i < DEF_MAXITEMS; i++)
	{
		if (TitleShop[i].Init != -1)
		{
			if ((msX >= sX + 20) && (msX <= sX + 220) && (msY >= sY + i * 30 + 65) && (msY <= sY + i * 30 + 79))
				PutAlignedString(sX + 10, sX + 248, sY + i * 30 + 65, TitleShop[i].Title, 255, 255, 255);
			else PutAlignedString(sX + 10, sX + 248, sY + i * 30 + 65, TitleShop[i].Title, 255, 200, 0);
		}
	}
}

void CGame::ClicMenuItems(short Dialog, short sX, short sY, short msX, short msY)
{
	for (int i = 0; i < DEF_MAXITEMS; i++)
	{
		if (TitleShop[i].Init != -1)
		{
			if ((msX >= sX + 20) && (msX <= sX + 220) && (msY >= sY + i * 30 + 65) && (msY <= sY + i * 30 + 79))
			{
				m_stDialogBoxInfo[Dialog].sV1 = i;
				m_stDialogBoxInfo[Dialog].cMode = 0;
			}
		}
	}
}
/*

//Helbreath Argentina Panel v4.0
void CGame::DrawDialogBox_NewPanel(short msX, short msY, short msZ, char cLB)
{
	short sX, sY, szX;
	DWORD dwTime = m_dwCurTime;
	int z = 0, len = 0;
	short sY1 = 0, sY2 = 0, DownTemp = 0;
	BOOL Down = FALSE;

	sX = m_stDialogBoxInfo[52].sX;
	sY = m_stDialogBoxInfo[52].sY;
	szX = m_stDialogBoxInfo[52].sSizeX;

	if (dwPanel != -1)
	{
		if (SubePanel)
		{
			if (dwTime - dwPanel > 15)
			{
				iBarEight -= 31;
				dwPanel = dwTime;
			}
			if (iBarEight == 2)
			{
				iBarEight = 0;
				dwPanel = dwTime;
				SubePanel = FALSE;
			}
		}
		else
		{
			if (dwTime - dwPanel > 15)
			{
				iBarEight += 31;
				dwPanel = dwTime;
			}
			if (iBarEight == 310)
			{
				iBarEight = 312;
				dwPanel = -1;
			}
		}
	}
	m_pSprite[DEF_SPRID_INTERFACE_NEWPANEL]->PutSpriteFastEight(sX, sY + 61, 2, iBarEight, dwTime);

	switch (m_stDialogBoxInfo[52].sV5)
	{
		case -1: // Trade ek
		case 0:  // Trade ek
		case 1: // Noticias
		case 4: // Eventos
			m_stDialogBoxInfo[52].sSizeY = 420;
			DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY, 0);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY + 61 + iBarEight, 1);
			Down = TRUE;
			if (SubePanel) OpenUpper = FALSE;
			else
			{
				OpenUpper = TRUE;
				OpenDown = FALSE;
			}
			break;
		case 3: // Tops
		case 5: // Trade MP
		case 6: // Settings
		case 7: // Comands
		case 8: // Angelics Pandent
		case 9: // Pandoras Box
			m_stDialogBoxInfo[52].sSizeY = 420;
			DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY, 0);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY + 61 + iBarEight, 1);
			//DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY, 2);
			Down = FALSE;
			if (SubePanel) OpenDown = FALSE;
			else
			{
				OpenUpper = FALSE;
				OpenDown = TRUE;
			}
			break;
		default:
			m_stDialogBoxInfo[52].sSizeY = 108;
			DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY, 0);
			DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY + 39, 1);
			Down = FALSE;
			OpenUpper = FALSE;
			OpenDown = FALSE;
			break;
	}
	if (iBarEight != 0)
	{
		if (OpenDown)
		{
			if (SubePanel) m_pSprite[DEF_SPRID_INTERFACE_NEWPANEL]->PutSpriteFastEight(sX + 24, sY + 71, 3, iBarEight + 20, dwTime);
			else m_pSprite[DEF_SPRID_INTERFACE_NEWPANEL]->PutSpriteFastEight(sX + 24, sY + 71, 3, iBarEight + 20, dwTime);

		}
		else if (OpenUpper)
		{
			if (SubePanel) m_pSprite[DEF_SPRID_INTERFACE_NEWPANEL]->PutSpriteFastEight(sX + 24, sY + 44, 3, iBarEight + 20, dwTime);
			else m_pSprite[DEF_SPRID_INTERFACE_NEWPANEL]->PutSpriteFastEight(sX + 24, sY + 44, 3, iBarEight + 20, dwTime);
		}

	}

	if (!SubePanel && iBarEight == 312)
	{
		switch (m_stDialogBoxInfo[52].cMode) {
			case 0:
				ShowItemList(52, sX + 15, sY + 10, msX, msY, msZ, cLB, FALSE);
				break;
			case -1:
				ShowMenuItems(sX + 15, sY + 44, msX, msY);
				break;
			default:
				switch (m_stDialogBoxInfo[52].sV5)
				{
					case -1:
						ShowItemDetail(52, sX + 15, sY + 44, msX, msY, msZ);
						break;
					case 1: // Noticias
						wsprintf(G_cTxt, "Noticias");
						PutString_SprFont(sX + 115 - 1, sY + 50 - 1, G_cTxt, 0, 0, 0);
						PutString_SprFont(sX + 115, sY + 50, G_cTxt, 255, 200, 0);
						_LoadTextDlgContents(1000);
						LoadTextNewPanel(sX + 24, sY + 70, msX, msY, msZ, cLB);
						break;
					case 2:
						break;
					case 3:
						ShowTopEk(52, sX, sY, msX, msY, msZ);
						break;
					case 4:
						wsprintf(G_cTxt, "Eventos");
						PutString_SprFont(sX + 115 - 1, sY + 50 - 1, G_cTxt, 0, 0, 0);
						PutString_SprFont(sX + 115, sY + 50, G_cTxt, 255, 200, 0);
						_LoadTextDlgContents(2000);
						LoadTextNewPanel(sX + 24, sY + 70, msX, msY, msZ, cLB);
						break;
					case 5:
						wsprintf(G_cTxt, "Trade Magestics Points");
						PutString_SprFont(sX + 60 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);
						PutString_SprFont(sX + 60, sY + 75, G_cTxt, 255, 200, 0);

						PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 110 - 1, DRAW_DIALOGBOX_CITYHALL_MENU80, 0, 0, 0);//"Please select..."
						PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 110, DRAW_DIALOGBOX_CITYHALL_MENU80, 250, 250, 250);//"Please select..."

						//Trade Items MPS
						// Trade Mps
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 145) && (msY < sY + 160))
							PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 145, DRAW_DIALOGBOX_CITYHALL_MENU87, 255, 255, 255);
						else PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 145, DRAW_DIALOGBOX_CITYHALL_MENU87, 249, 255, 45);

						// Angelics
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 185) && (msY < sY + 210))
							PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 185, DRAW_DIALOGBOX_CITYHALL_MENU88, 255, 255, 255);
						else PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 185, DRAW_DIALOGBOX_CITYHALL_MENU88, 249, 255, 45);

						//Pandoras Box
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 225) && (msY < sY + 240))
							PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 225, DRAW_DIALOGBOX_CITYHALL_MENU89, 255, 255, 255);
						else PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 225, DRAW_DIALOGBOX_CITYHALL_MENU89, 249, 255, 45);
						break;

					case 6:
						/ *ShowSetting(52, msX, msY, cLB);
						break;* /
						if (m_bSetting)
						{
							ShowSetting(52, msX, msY, cLB);
						}
						else
						{
							ShowSetting2(52, msX, msY, cLB);
						}
						break;

					case 7: //Comandos
						wsprintf(G_cTxt, "Commands");
						PutString_SprFont(sX + 105 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);//217
						PutString_SprFont(sX + 105, sY + 75, G_cTxt, 255, 200, 0);//217

						//ListCommand
						PutString(sX + 30 - 1, sY + 100 - 1, "Commands                           Costo", RGB(0, 0, 0));
						PutString(sX + 30, sY + 100, "Commands                           Costo", RGB(255, 255, 255));

						//EspaceBar N� 1
						PutString(sX + 30 - 1, sY + 90 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
						PutString(sX + 30, sY + 90, "--------------------------------------------------------", RGB(255, 255, 255));

						//EspaceBar N� 2
						PutString(sX + 30 - 1, sY + 110 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
						PutString(sX + 30, sY + 110, "--------------------------------------------------------", RGB(255, 255, 255));

						PutString(sX + 30 - 1, sY + 320 - 1, "Descripcion:", RGB(0, 0, 0));
						PutString(sX + 30, sY + 320, "Descripcion:", RGB(255, 200, 0));

						//Command maname
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
						{
							PutString(sX + 35, sY + 335, "maname: Con este comando tendras", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "mana ilimitado por 5 minutos, a", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "cambio de 300 magestics points.", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
								PutString(sX + 35, sY + 120, "maname                  300 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 120, "maname                  300 Magestics", RGB(165, 165, 165));
						}
						else {
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
								PutString(sX + 35, sY + 120, "maname                  300 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 120, "maname                  300 Magestics", RGB(165, 165, 165));
						}
						//Command zerkme
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
						{
							PutString(sX + 35, sY + 335, "zerkme: Con este comando tendras", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "berserk por 10 minutos, a cambio", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "de 300 magestics points.", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
								PutString(sX + 35, sY + 140, "zerkme                   300 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 140, "zerkme                   300 Magestics", RGB(165, 165, 165));
						}
						else {
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
								PutString(sX + 35, sY + 140, "zerkme                   300 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 140, "zerkme                   300 Magestics", RGB(165, 165, 165));
						}
						//Command changecity
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
						{
							PutString(sX + 35, sY + 335, "changecity: Con este comando", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "podras cambiar de ciudad, a", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "cambio de: 1000 Coins.", RGB(255, 255, 255));
							PutString(sX + 35, sY + 380, "te dara log out para actualizar", RGB(255, 255, 255));
							if (DecriptInt(m_iCoins) >= 1000)
								PutString(sX + 35, sY + 160, "changecity             1000 Coins", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 160, "changecity             1000 Coins", RGB(165, 165, 165));
						}
						else
						{
							if (DecriptInt(m_iCoins) >= 1000)
								PutString(sX + 35, sY + 160, "changecity             1000 Coins", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 160, "changecity             1000 Coins", RGB(165, 165, 165));
						}
					/ *	if ((DecriptInt(m_iGizonItemUpgradeLeft) >= 1000) && (m_iEnemyKillCount >= 1000) && (m_iCoins >= 1000))
								PutString(sX + 35, sY + 160, "changecity             1000 MP/Coins/Ek", RGB(249, 255, 45));
						else PutString(sX + 35, sY + 160, "changecity             1000 MP/Coins/Ek", RGB(165, 165, 165));
						}
						else
						{
						if ((DecriptInt(m_iGizonItemUpgradeLeft) >= 1000) && (m_iEnemyKillCount >= 1000) && (m_iCoins >= 1000))
								PutString(sX + 35, sY + 160, "changecity             1000 MP/Coins/Ek", RGB(255, 255, 255));
						else PutString(sX + 35, sY + 160, "changecity             1000 MP/Coins/Ek", RGB(165, 165, 165));
						}* /

						/ *if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 180) && (msY < sY + 195))
						{
							PutString(sX + 35, sY + 335, "Reset Rank: Con este comando", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "podras resetear tus", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "puntos de RankLvl.", RGB(255, 255, 255));
							PutString(sX + 35, sY + 380, "a cambio de 50k contrib", RGB(255, 255, 255));
							if (m_iContribution >= 50000)
								PutString(sX + 35, sY + 180, "ResetRank             50000 Contrib", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 180, "ResetRank             50000 Contrib", RGB(165, 165, 165));
						}
						else
						{
							if (m_iContribution >= 50000)
								PutString(sX + 35, sY + 180, "ResetRank             50000 Contrib", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 180, "ResetRank             50000 Contrib", RGB(165, 165, 165));
						}* /

						//"Back to Main" Button
						if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
							PutString_SprFont(sX + 215, sY + 380, "Menu", 250, 250, 250);
						else PutString_SprFont(sX + 215, sY + 380, "Menu", 255, 200, 0);
						break;

					case 8:
						wsprintf(G_cTxt, "Angelics Pandent");
						PutString_SprFont(sX + 85 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);//217
						PutString_SprFont(sX + 85, sY + 75, G_cTxt, 255, 200, 0);//217

						//ListCommand
						PutString(sX + 30 - 1, sY + 100 - 1, "Item                               Costo", RGB(0, 0, 0));
						PutString(sX + 30, sY + 100, "Item                               Costo", RGB(255, 255, 255));

						//EspaceBar N� 1
						PutString(sX + 30 - 1, sY + 90 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
						PutString(sX + 30, sY + 90, "--------------------------------------------------------", RGB(255, 255, 255));

						//EspaceBar N� 2
						PutString(sX + 30 - 1, sY + 110 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
						PutString(sX + 30, sY + 110, "--------------------------------------------------------", RGB(255, 255, 255));

						PutString(sX + 30 - 1, sY + 320 - 1, "Descripcion:", RGB(0, 0, 0));
						PutString(sX + 30, sY + 320, "Descripcion:", RGB(255, 200, 0));

						//Angelic STR
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
						{
							PutString(sX + 35, sY + 335, "Angelic Pandent (STR)", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "Con este angel puedes", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "Subir el Stat STR", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
								PutString(sX + 35, sY + 120, "Angelic(STR)                   5 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 120, "Angelic(STR)                   5 Magestics", RGB(165, 165, 165));
						}
						else {
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
								PutString(sX + 35, sY + 120, "Angelic(STR)                   5 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 120, "Angelic(STR)                   5 Magestics", RGB(165, 165, 165));
						}

						//Angelic DEX
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
						{
							PutString(sX + 35, sY + 335, "Angelic Pandent (DEX)", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "Con este angel puedes", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "Subir el Stat DEX", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
								PutString(sX + 35, sY + 140, "Angelic(DEX)                   5 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 140, "Angelic(DEX)                   5 Magestics", RGB(165, 165, 165));
						}
						else {
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
								PutString(sX + 35, sY + 140, "Angelic(DEX)                   5 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 140, "Angelic(DEX)                   5 Magestics", RGB(165, 165, 165));
						}

						//Angelic INT
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
						{
							PutString(sX + 35, sY + 335, "Angelic Pandent (INT)", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "Con este angel puedes", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "Subir el Stat INT", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
								PutString(sX + 35, sY + 160, "Angelic(INT)                   5 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 160, "Angelic(INT)                   5 Magestics", RGB(165, 165, 165));
						}
						else {
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
								PutString(sX + 35, sY + 160, "Angelic(INT)                   5 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 160, "Angelic(INT)                   5 Magestics", RGB(165, 165, 165));
						}

						//Angelic MAG
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 180) && (msY < sY + 195))
						{
							PutString(sX + 35, sY + 335, "Angelic Pandent (MAG)", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "Con este angel puedes", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "Subir el Stat MAG", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
								PutString(sX + 35, sY + 180, "Angelic(MAG)                   5 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 180, "Angelic(MAG)                   5 Magestics", RGB(165, 165, 165));
						}
						else {
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
								PutString(sX + 35, sY + 180, "Angelic(MAG)                   5 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 180, "Angelic(MAG)                   5 Magestics", RGB(165, 165, 165));
						}

						//"Back to Main" Button
						if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
							PutString_SprFont(sX + 215, sY + 380, "Menu", 250, 250, 250);
						else PutString_SprFont(sX + 215, sY + 380, "Menu", 255, 200, 0);
						break;

					case 9:
						wsprintf(G_cTxt, "Pandoras Box");
						PutString_SprFont(sX + 95 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);//217
						PutString_SprFont(sX + 95, sY + 75, G_cTxt, 255, 200, 0);//217

						//ListCommand
						PutString(sX + 30 - 1, sY + 100 - 1, "Item                               Costo", RGB(0, 0, 0));
						PutString(sX + 30, sY + 100, "Item                               Costo", RGB(255, 255, 255));

						//EspaceBar N� 1
						PutString(sX + 30 - 1, sY + 90 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
						PutString(sX + 30, sY + 90, "--------------------------------------------------------", RGB(255, 255, 255));

						//EspaceBar N� 2
						PutString(sX + 30 - 1, sY + 110 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
						PutString(sX + 30, sY + 110, "--------------------------------------------------------", RGB(255, 255, 255));

						PutString(sX + 30 - 1, sY + 320 - 1, "Descripcion:", RGB(0, 0, 0));
						PutString(sX + 30, sY + 320, "Descripcion:", RGB(255, 200, 0));

						//Command NetBox(Small)
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
						{
							PutString(sX + 35, sY + 335, "Con esta caja obtendras un ", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "item totalmente al azar.", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 100)
								PutString(sX + 35, sY + 120, "PandoraBox(Small)       100 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 120, "PandoraBox(Small)       100 Magestics", RGB(165, 165, 165));
						}
						else
						{
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 100)
								PutString(sX + 35, sY + 120, "PandoraBox(Small)       100 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 120, "PandoraBox(Small)       100 Magestics", RGB(165, 165, 165));
						}

						//Command NetBox(Medium)
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
						{
							PutString(sX + 35, sY + 335, "Con esta caja obtendras un ", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "item totalmente al azar.", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 250)
								PutString(sX + 35, sY + 140, "PandoraBox(Medium)   250 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 140, "PandoraBox(Medium)   250 Magestics", RGB(165, 165, 165));
						}
						else
						{
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 250)
								PutString(sX + 35, sY + 140, "PandoraBox(Medium)   250 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 140, "PandoraBox(Medium)   250 Magestics", RGB(165, 165, 165));
						}

						//Command NetBox(Big)
						if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
						{
							PutString(sX + 35, sY + 335, "Con esta caja obtendras un ", RGB(255, 255, 255));
							PutString(sX + 35, sY + 350, "item totalmente al azar.", RGB(255, 255, 255));
							PutString(sX + 35, sY + 365, "", RGB(255, 255, 255));
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 500)
								PutString(sX + 35, sY + 160, "PandoraBox(Big)           500 Magestics", RGB(249, 255, 45));
							else PutString(sX + 35, sY + 160, "PandoraBox(Big)           500 Magestics", RGB(165, 165, 165));
						}
						else
						{
							if (DecriptInt(m_iGizonItemUpgradeLeft) >= 500)
								PutString(sX + 35, sY + 160, "PandoraBox(Big)           500 Magestics", RGB(255, 255, 255));
							else PutString(sX + 35, sY + 160, "PandoraBox(Big)           500 Magestics", RGB(165, 165, 165));
						}

						//"Back to Main" Button
						if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
							PutString_SprFont(sX + 215, sY + 380, "Menu", 250, 250, 250);
						else PutString_SprFont(sX + 215, sY + 380, "Menu", 255, 200, 0);
						break;

					default:
						break;
				}
				break;
		}
	}
	ViewPanelButtons(sX, sY, msX, msY, Down);
}*/

//Helbreath Argentina Panel v4.0
void CGame::DrawDialogBox_NewPanel(short msX, short msY, short msZ, char cLB)
{
	short sX, sY, szX;
	DWORD dwTime = m_dwCurTime;
	int z = 0, len = 0;
	short sY1 = 0, sY2 = 0, DownTemp = 0;
	BOOL Down = FALSE;

	sX = m_stDialogBoxInfo[52].sX;
	sY = m_stDialogBoxInfo[52].sY;
	szX = m_stDialogBoxInfo[52].sSizeX;

	if (dwPanel != -1)
	{
		if (SubePanel)
		{
			if (dwTime - dwPanel > 15)
			{
				iBarEight -= 31;
				dwPanel = dwTime;
			}
			if (iBarEight == 2)
			{
				iBarEight = 0;
				dwPanel = dwTime;
				SubePanel = FALSE;
			}
		}
		else
		{
			if (dwTime - dwPanel > 15)
			{
				iBarEight += 31;
				dwPanel = dwTime;
			}
			if (iBarEight == 310)
			{
				iBarEight = 312;
				dwPanel = -1;
			}
		}
	}
	m_pSprite[DEF_SPRID_INTERFACE_NEWPANEL]->PutShadowSpriteEight(sX, sY + 62, 2, iBarEight, dwTime);	

	switch (m_stDialogBoxInfo[52].sV5)
	{
	case -1: // Trade ek
	case 0:  // Trade ek
	case 1: // Noticias
	case 4: // Eventos
		m_stDialogBoxInfo[52].sSizeY = 420;
		DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY, 0, FALSE, TRUE);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY + 62 + iBarEight, 1, FALSE, TRUE);
		Down = TRUE;
		if (SubePanel) OpenUpper = FALSE;
		else
		{
			OpenUpper = TRUE;
			OpenDown = FALSE;
		}
		break;
	case 3: // Tops
	case 5: // Trade MP
	case 6: // Settings
	case 7: // Comands
	case 8: // Angelics Pandent
	case 9: // Pandoras Box
		m_stDialogBoxInfo[52].sSizeY = 420;
		DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY, 0, FALSE, TRUE);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY + 62 + iBarEight, 1, FALSE, TRUE);
		//DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY, 2);
		Down = FALSE;
		if (SubePanel) OpenDown = FALSE;
		else
		{
			OpenUpper = FALSE;
			OpenDown = TRUE;
		}
		break;
	default:
		m_stDialogBoxInfo[52].sSizeY = 108;
		DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY, 0, FALSE, TRUE);

		m_pSprite[DEF_SPRID_INTERFACE_NEWPANEL]->PutShadowSpriteEight(sX, sY + 62, 1, 20, dwTime);
	//	DrawNewDialogBox(DEF_SPRID_INTERFACE_NEWPANEL, sX, sY + 49, 1, FALSE, TRUE);
		Down = FALSE;
		OpenUpper = FALSE;
		OpenDown = FALSE;
		break;
	}
	
	if (!SubePanel && iBarEight == 312)
	{
		switch (m_stDialogBoxInfo[52].cMode) {
		case 0:
			//ShowItemList(52, sX + 15, sY + 10, msX, msY, msZ, cLB, FALSE);
			break;
		case -1:
			//ShowMenuItems(sX + 15, sY + 44, msX, msY);
			break;
		default:
			switch (m_stDialogBoxInfo[52].sV5)
			{
			case -1:
				ShowItemDetail(52, sX + 15, sY + 44, msX, msY, msZ);
				break;
			case 1: // Noticias
				wsprintf(G_cTxt, "Noticias");
				PutCenterString_SpriteFont(sX, sX + szX, sY + 50 - 1, G_cTxt, 0, 0, 0);
				PutCenterString_SpriteFont(sX, sX + szX, sY + 50, G_cTxt, 255, 200, 0);
				_LoadTextDlgContents(1000);
				LoadTextNewPanel(sX + 24, sY + 70, msX, msY, msZ, cLB);
				break;
			case 2:
				break;
			case 3:
				ShowTopEk(52, sX, sY, msX, msY, msZ);
				break;
			case 4:
				wsprintf(G_cTxt, "Information");
				PutCenterString_SpriteFont(sX, sX + szX, sY + 50 - 1, G_cTxt, 0, 0, 0);
				PutCenterString_SpriteFont(sX, sX + szX, sY + 50, G_cTxt, 255, 200, 0);
				_LoadTextDlgContents(2000);
				LoadTextNewPanel(sX + 24, sY + 70, msX, msY, msZ, cLB);
				break;
			case 5:
				wsprintf(G_cTxt, "Commands");
				PutCenterString_SpriteFont(sX, sX + szX, sY + 75 - 1, G_cTxt, 0, 0, 0);//217
				PutCenterString_SpriteFont(sX, sX + szX, sY + 75, G_cTxt, 255, 200, 0);//217

				PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 110 - 1, DRAW_DIALOGBOX_CITYHALL_MENU80B, 0, 0, 0);//"Please select..."
				PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 110, DRAW_DIALOGBOX_CITYHALL_MENU80B, 250, 250, 250);//"Please select..."

				// Trade Mps
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 145) && (msY < sY + 160))
					PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 145, DRAW_DIALOGBOX_CITYHALL_MENU87, 255, 255, 255);
				else PutAlignedString(sX, sX + m_stDialogBoxInfo[52].sSizeX, sY + 145, DRAW_DIALOGBOX_CITYHALL_MENU87, 249, 255, 45);

	
				break;

			case 6:
				
				if (showsetts)
				{
					ShowSetting(52, msX, msY, cLB);
				}
				else
				{
					ShowSetting2(52, msX, msY, cLB);
				}
				break;

			case 7: //Comandos
				wsprintf(G_cTxt, "Commands");
				PutCenterString_SpriteFont(sX, sX + szX, sY + 75 - 1, G_cTxt, 0, 0, 0);//217
				PutCenterString_SpriteFont(sX, sX + szX, sY + 75, G_cTxt, 255, 200, 0);//217

				//ListCommand
				PutString(sX + 30 - 1, sY + 100 - 1, "Commands                           Costo", RGB(0, 0, 0));
				PutString(sX + 30, sY + 100, "Commands                           Costo", RGB(255, 255, 255));

				//EspaceBar N� 1
				PutString(sX + 30 - 1, sY + 90 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
				PutString(sX + 30, sY + 90, "--------------------------------------------------------", RGB(255, 255, 255));

				//EspaceBar N� 2
				PutString(sX + 30 - 1, sY + 110 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
				PutString(sX + 30, sY + 110, "--------------------------------------------------------", RGB(255, 255, 255));

				PutString(sX + 30 - 1, sY + 320 - 1, "Descripcion:", RGB(0, 0, 0));
				PutString(sX + 30, sY + 320, "Descripcion:", RGB(255, 200, 0));

				//Command maname
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
				{
					PutString(sX + 35, sY + 335, "maname: Con este comando tendras", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "mana ilimitado por 5 minutos, a", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "cambio de 300 magestics points.", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
						PutString(sX + 35, sY + 120, "maname                  300 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 120, "maname                  300 Magestics", RGB(165, 165, 165));
				}
				else {
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
						PutString(sX + 35, sY + 120, "maname                  300 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 120, "maname                  300 Magestics", RGB(165, 165, 165));
				}
				//Command zerkme
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
				{
					PutString(sX + 35, sY + 335, "zerkme: Con este comando tendras", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "berserk por 10 minutos, a cambio", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "de 300 magestics points.", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
						PutString(sX + 35, sY + 140, "zerkme                   300 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 140, "zerkme                   300 Magestics", RGB(165, 165, 165));
				}
				else {
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
						PutString(sX + 35, sY + 140, "zerkme                   300 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 140, "zerkme                   300 Magestics", RGB(165, 165, 165));
				}
				//Command changecity
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
				{
					PutString(sX + 35, sY + 335, "changecity: Con este comando", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "podras cambiar de ciudad, a", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "cambio de: 300 majestics.", RGB(255, 255, 255));
					PutString(sX + 35, sY + 380, "te dara log out para actualizar", RGB(255, 255, 255));
					if (DecriptInt(m_iCoins) >= 1000)
						PutString(sX + 35, sY + 160, "changecity             300 majestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 160, "changecity             300 majestics", RGB(165, 165, 165));
				}
				else
				{
					if (DecriptInt(m_iCoins) >= 1000)
						PutString(sX + 35, sY + 160, "changecity             300 majestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 160, "changecity             300 majestics", RGB(165, 165, 165));
				}
				
				//"Back to Main" Button
				if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
					PutString_SprFont2(sX + 217, sY + 380, "Back", 255, 200, 0);
				else PutString_SprFont2(sX + 217, sY + 380, "Back", 250, 250, 250);
				break;

			case 8:
				wsprintf(G_cTxt, "Angelics Pandent");
				PutString_SprFont2(sX + 85 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);//217
				PutString_SprFont2(sX + 85, sY + 75, G_cTxt, 255, 200, 0);//217

				//ListCommand
				PutString(sX + 30 - 1, sY + 100 - 1, "Item                               Costo", RGB(0, 0, 0));
				PutString(sX + 30, sY + 100, "Item                               Costo", RGB(255, 255, 255));

				//EspaceBar N� 1
				PutString(sX + 30 - 1, sY + 90 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
				PutString(sX + 30, sY + 90, "--------------------------------------------------------", RGB(255, 255, 255));

				//EspaceBar N� 2
				PutString(sX + 30 - 1, sY + 110 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
				PutString(sX + 30, sY + 110, "--------------------------------------------------------", RGB(255, 255, 255));

				PutString(sX + 30 - 1, sY + 320 - 1, "Descripcion:", RGB(0, 0, 0));
				PutString(sX + 30, sY + 320, "Descripcion:", RGB(255, 200, 0));

				//Angelic STR
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
				{
					PutString(sX + 35, sY + 335, "Angelic Pandent (STR)", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "Con este angel puedes", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "Subir el Stat STR", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
						PutString(sX + 35, sY + 120, "Angelic(STR)                   5 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 120, "Angelic(STR)                   5 Magestics", RGB(165, 165, 165));
				}
				else {
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
						PutString(sX + 35, sY + 120, "Angelic(STR)                   5 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 120, "Angelic(STR)                   5 Magestics", RGB(165, 165, 165));
				}

				//Angelic DEX
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
				{
					PutString(sX + 35, sY + 335, "Angelic Pandent (DEX)", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "Con este angel puedes", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "Subir el Stat DEX", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
						PutString(sX + 35, sY + 140, "Angelic(DEX)                   5 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 140, "Angelic(DEX)                   5 Magestics", RGB(165, 165, 165));
				}
				else {
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
						PutString(sX + 35, sY + 140, "Angelic(DEX)                   5 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 140, "Angelic(DEX)                   5 Magestics", RGB(165, 165, 165));
				}

				//Angelic INT
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
				{
					PutString(sX + 35, sY + 335, "Angelic Pandent (INT)", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "Con este angel puedes", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "Subir el Stat INT", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
						PutString(sX + 35, sY + 160, "Angelic(INT)                   5 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 160, "Angelic(INT)                   5 Magestics", RGB(165, 165, 165));
				}
				else {
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
						PutString(sX + 35, sY + 160, "Angelic(INT)                   5 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 160, "Angelic(INT)                   5 Magestics", RGB(165, 165, 165));
				}

				//Angelic MAG
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 180) && (msY < sY + 195))
				{
					PutString(sX + 35, sY + 335, "Angelic Pandent (MAG)", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "Con este angel puedes", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "Subir el Stat MAG", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
						PutString(sX + 35, sY + 180, "Angelic(MAG)                   5 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 180, "Angelic(MAG)                   5 Magestics", RGB(165, 165, 165));
				}
				else {
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
						PutString(sX + 35, sY + 180, "Angelic(MAG)                   5 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 180, "Angelic(MAG)                   5 Magestics", RGB(165, 165, 165));
				}

				//"Back to Main" Button
				if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
					PutString_SprFont2(sX + 217, sY + 380, "Back", 255, 200, 0);
				else PutString_SprFont2(sX + 217, sY + 380, "Back", 250, 250, 250);
				break;

			case 9:
				wsprintf(G_cTxt, "Pandoras Box");
				PutString_SprFont2(sX + 95 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);//217
				PutString_SprFont2(sX + 95, sY + 75, G_cTxt, 255, 200, 0);//217

				//ListCommand
				PutString(sX + 30 - 1, sY + 100 - 1, "Item                               Costo", RGB(0, 0, 0));
				PutString(sX + 30, sY + 100, "Item                               Costo", RGB(255, 255, 255));

				//EspaceBar N� 1
				PutString(sX + 30 - 1, sY + 90 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
				PutString(sX + 30, sY + 90, "--------------------------------------------------------", RGB(255, 255, 255));

				//EspaceBar N� 2
				PutString(sX + 30 - 1, sY + 110 - 1, "--------------------------------------------------------", RGB(0, 0, 0));
				PutString(sX + 30, sY + 110, "--------------------------------------------------------", RGB(255, 255, 255));

				PutString(sX + 30 - 1, sY + 320 - 1, "Descripcion:", RGB(0, 0, 0));
				PutString(sX + 30, sY + 320, "Descripcion:", RGB(255, 200, 0));

				//Command NetBox(Small)
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
				{
					PutString(sX + 35, sY + 335, "Con esta caja obtendras un ", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "item totalmente al azar.", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 100)
						PutString(sX + 35, sY + 120, "PandoraBox(Small)       100 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 120, "PandoraBox(Small)       100 Magestics", RGB(165, 165, 165));
				}
				else
				{
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 100)
						PutString(sX + 35, sY + 120, "PandoraBox(Small)       100 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 120, "PandoraBox(Small)       100 Magestics", RGB(165, 165, 165));
				}

				//Command NetBox(Medium)
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
				{
					PutString(sX + 35, sY + 335, "Con esta caja obtendras un ", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "item totalmente al azar.", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 250)
						PutString(sX + 35, sY + 140, "PandoraBox(Medium)   250 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 140, "PandoraBox(Medium)   250 Magestics", RGB(165, 165, 165));
				}
				else
				{
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 250)
						PutString(sX + 35, sY + 140, "PandoraBox(Medium)   250 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 140, "PandoraBox(Medium)   250 Magestics", RGB(165, 165, 165));
				}

				//Command NetBox(Big)
				if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
				{
					PutString(sX + 35, sY + 335, "Con esta caja obtendras un ", RGB(255, 255, 255));
					PutString(sX + 35, sY + 350, "item totalmente al azar.", RGB(255, 255, 255));
					PutString(sX + 35, sY + 365, "", RGB(255, 255, 255));
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 500)
						PutString(sX + 35, sY + 160, "PandoraBox(Big)           500 Magestics", RGB(249, 255, 45));
					else PutString(sX + 35, sY + 160, "PandoraBox(Big)           500 Magestics", RGB(165, 165, 165));
				}
				else
				{
					if (DecriptInt(m_iGizonItemUpgradeLeft) >= 500)
						PutString(sX + 35, sY + 160, "PandoraBox(Big)           500 Magestics", RGB(255, 255, 255));
					else PutString(sX + 35, sY + 160, "PandoraBox(Big)           500 Magestics", RGB(165, 165, 165));
				}

				//"Back to Main" Button
				if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
					PutString_SprFont2(sX + 217, sY + 380, "Back", 255, 200, 0);
				else PutString_SprFont2(sX + 217, sY + 380, "Back", 250, 250, 250);
				break;

			default:
				break;
			}
			break;
		}
	}

	ViewPanelButtons(sX, sY, msX, msY, Down);

	if (dwPanel == -1 && iBarEight == 0 || dwPanel == -1 && iBarEight == 312) {
		// Panel no está en movimiento y está completamente desplegado
		if (!OpenDown && !OpenUpper)
			DrawShadowMenu_DialogBordersNoTile(sX, sY, szX, m_stDialogBoxInfo[52].sSizeY - 26);
		else
			DrawShadowMenu_DialogBordersNoTile(sX, sY, szX, m_stDialogBoxInfo[52].sSizeY);
	}
}

void CGame::ViewPanelButtons(short sX, short sY, short msX, short msY, BOOL Down)
{
	DWORD dwTime = m_dwCurTime;
	short PixelDown = 0;

	if (Down) PixelDown = iBarEight + 23;
	if (SubePanel)
	{
		if (OpenDown) PixelDown = 0;
		else PixelDown = iBarEight;
	}

	DrawNewPanelButton(sX, sY, msX, msY, 12, 18, m_sLang == LANG_ESP ? "Noticias" : "News", m_stDialogBoxInfo[52].sV5 == 1);
	
	DrawNewPanelButton(sX, sY, msX, msY, 99, 18, m_sLang == LANG_ESP ? "Drop List" : "Drop List", m_stDialogBoxInfo[52].sV5 == 0 || m_stDialogBoxInfo[52].sV5 == -1);
	//bool v2/*/*
	DrawNewPanelButton(sX, sY, msX, msY, 186, 18, m_sLang == LANG_ESP ? "Informacion" : "Information", m_stDialogBoxInfo[52].sV5 == 4);
	DrawNewPanelButton(sX, sY, msX, msY, 12, 44 + +PixelDown, m_sLang == LANG_ESP ? "Comandos" : "Commands", m_stDialogBoxInfo[52].sV5 == 5 || m_stDialogBoxInfo[52].sV5 == 7 || m_stDialogBoxInfo[52].sV5 == 8 || m_stDialogBoxInfo[52].sV5 == 9);
	DrawNewPanelButton(sX, sY, msX, msY, 99, 44 + PixelDown, m_sLang == LANG_ESP ? "Mejores 15" : "Top 15", m_stDialogBoxInfo[52].sV5 == 3);
	DrawNewPanelButton(sX, sY, msX, msY, 186, 44 + PixelDown, m_sLang == LANG_ESP ? "Configuracion" : "Settings", m_stDialogBoxInfo[52].sV5 == 6);
	
}

void CGame::DlgBoxClick_NewPanel(short msX, short msY)
{
	short sX, sY, szX;
	DWORD dwTime = m_dwCurTime;
	int Commando = 0;
	BOOL Down = FALSE;

	sX = m_stDialogBoxInfo[52].sX;
	sY = m_stDialogBoxInfo[52].sY;
	szX = m_stDialogBoxInfo[52].sSizeX;

	DisableDialogBox(53);

	switch (m_stDialogBoxInfo[52].sV5)
	{
	case -1: // Trade ek
	case 0:  // Trade ek
	case 1: // Noticias
	case 4: // Eventos
		Down = TRUE;
		break;
	case 3: // Tops
	case 5: // Trade MP
	case 6: // Settings
		Down = FALSE;
		break;
	default:
		Down = FALSE;
		break;
	}

	switch (m_stDialogBoxInfo[52].cMode) {
	case 0:
		ClicItemList(52, sX + 15, sY + 10, msX, msY);
		break;
	case -1:
		ClicMenuItems(52, sX + 24, sY + 44, msX, msY);
		break;
	default:
		switch (m_stDialogBoxInfo[52].sV5)
		{
		case -1:
			ClicItemDetail(52, sX + 24, sY + 44, msX, msY);
			break;

		case 0: // Principal
			break;
		case 1: // Noticias
			break;
		case 2:
			break;
		case 3:
			ClicTopEk(52, sX, sY, msX, msY);
			break;
		case 4:
			break;
		case 5:
			//Comandos
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 145) && (msY < sY + 160))
			{
				m_stDialogBoxInfo[52].sV5 = 7;
				PlaySound('E', 14, 5);
			}
		/*	//Angelics Pandent
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 185) && (msY < sY + 210))
			{
				m_stDialogBoxInfo[52].sV5 = 8;
				PlaySound('E', 14, 5);
			}
			//Pandoras Boxs
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 225) && (msY < sY + 240))
			{
				m_stDialogBoxInfo[52].sV5 = 9;
				PlaySound('E', 14, 5);
			}*/
			break;

		case 6:
			/*	ClicSetting(52, msX, msY);
			break;*/
			if (showsetts)
			{
				ClicSetting(52, msX, msY);
			}
			else
			{
				ClicSetting2(52, msX, msY);
			}
			break;

		case 7:
			//Command maname
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
				{
					EnableDialogBox(53, 2, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//Command zerkme
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 300)
				{
					EnableDialogBox(53, 3, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//Command changecity
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
			{
				//if (DecriptInt(m_iGizonItemUpgradeLeft) >= 50)aca
				//	if ((DecriptInt(m_iGizonItemUpgradeLeft) >= 1000) && (m_iEnemyKillCount >= 1000) && (Coins >= 1000))
				if (DecriptInt(m_iCoins) >= 1000)
				{
					EnableDialogBox(53, 5, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//Command Reset Rank
			/*if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 180) && (msY < sY + 195))
			{
			//if (DecriptInt(m_iGizonItemUpgradeLeft) >= 50)aca
			if (m_iContribution >= 50000)
			{
			EnableDialogBox(53, 6, NULL, NULL);
			PlaySound('E', 14, 5);
			}
			}*/

			//"Back to Main" Button
			if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
			{
				m_stDialogBoxInfo[52].sV5 = 5;
				PlaySound('E', 14, 5);
			}
			break;

		case 8://Angelics Pandent
			//Angelic Str
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
				{
					EnableDialogBox(53, 911, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//Angelic Dex
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
				{
					EnableDialogBox(53, 912, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//Angelic Int
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
				{
					EnableDialogBox(53, 913, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//Angelic MAG
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 180) && (msY < sY + 195))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 5)
				{
					EnableDialogBox(53, 914, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//"Back to Main" Button
			if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
			{
				m_stDialogBoxInfo[52].sV5 = 5;
				PlaySound('E', 14, 5);
			}
			break;

		case 9:
			//Command NetBox(Small)
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 120) && (msY < sY + 135))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 100)
				{
					EnableDialogBox(53, 2602, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//Command NetBox(Medium)
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 140) && (msY < sY + 155))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 250)
				{
					EnableDialogBox(53, 2601, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}

			//Command NetBox(Big)
			if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 160) && (msY < sY + 175))
			{
				if (DecriptInt(m_iGizonItemUpgradeLeft) >= 500)
				{
					EnableDialogBox(53, 2600, NULL, NULL);
					PlaySound('E', 14, 5);
				}
			}
			//"Back to Main" Button
			if ((msX > sX + 215) && (msX < sX + 257) && (msY > sY + 380) && (msY < sY + 400))
			{
				m_stDialogBoxInfo[52].sV5 = 5;
				PlaySound('E', 14, 5);
			}
			break;

		default:
			break;
		}
		break;
	}
	ClicPanelButtons(52, sX, sY, msX, msY, Down);
}

void CGame::ClicPanelButtons(short Dialog, short sX, short sY, short msX, short msY, BOOL Down)
{
	short PixelDown = 0;
	if (Down) PixelDown = iBarEight + 23;
	if (SubePanel)
	{
		if (OpenDown) PixelDown = 0;
		else PixelDown = iBarEight;
	}

	if ((msX > sX + 12) && (msX < sX + 96) && (msY > sY + 18) && (msY < sY + 41))
	{	//Notice - Contents15.txt
		if (!OpenUpper)
		{
			if (OpenDown)
			{
				dwPanel = m_dwCurTime;
				SubePanel = TRUE;
			}
			else
			{
				dwPanel = m_dwCurTime;
				iBarEight = 0;
			}
		}
		OpenNoticement();
		m_stDialogBoxInfo[Dialog].cMode = 1;
		m_stDialogBoxInfo[Dialog].sV5 = 1;
		PlaySound('E', 14, 5);
	}

	if ((msX > sX + 99) && (msX < sX + 183) && (msY > sY + 18) && (msY < sY + 41))
	{	// Trade Ek
		if (!OpenUpper)
		{
			if (OpenDown)
			{
				dwPanel = m_dwCurTime;
				SubePanel = TRUE;
			}
			else
			{
				dwPanel = m_dwCurTime;
				iBarEight = 0;
			}
		}
		ListType = -1;
		_LoadShopMenuContents(-1); // -1 = TradeEk.cfg
		m_stDialogBoxInfo[Dialog].sV6 = -1;
		if (TitleShop[0].Init != -1)
			m_stDialogBoxInfo[Dialog].cMode = -1;
		else
			m_stDialogBoxInfo[Dialog].cMode = 0;
		m_stDialogBoxInfo[Dialog].sV5 = -1;
		PlaySound('E', 14, 5);
	}

	if ((msX > sX + 186) && (msX < sX + 270) && (msY > sY + 18) && (msY < sY + 41))
	{	// Eventos
		if (!OpenUpper)
		{
			if (OpenDown)
			{
				dwPanel = m_dwCurTime;
				SubePanel = TRUE;
			}
			else
			{
				dwPanel = m_dwCurTime;
				iBarEight = 0;
			}
		}
		m_stDialogBoxInfo[Dialog].cMode = 1;
		m_stDialogBoxInfo[Dialog].sV5 = 4;
		PlaySound('E', 14, 5);
	}
	if ((msX > sX + 12) && (msX < sX + 96) && (msY > sY + 44 + PixelDown) && (msY < sY + 67 + PixelDown))
	{	// Trade MP
		if (!OpenDown)
		{
			if (OpenUpper)
			{
				dwPanel = m_dwCurTime;
				SubePanel = TRUE;
			}
			else
			{
				dwPanel = m_dwCurTime;
				iBarEight = 0;
			}
		}
		m_stDialogBoxInfo[Dialog].cMode = 1;
		m_stDialogBoxInfo[Dialog].sV5 = 5;
		PlaySound('E', 14, 5);
	}

	if ((msX > sX + 99) && (msX < sX + 183) && (msY > sY + 44 + PixelDown) && (msY < sY + 67 + PixelDown))
	{	// Tops 10
		if (!OpenDown)
		{
			if (OpenUpper)
			{
				dwPanel = m_dwCurTime;
				SubePanel = TRUE;
			}
			else
			{
				dwPanel = m_dwCurTime;
				iBarEight = 0;
			}
		}
		m_stDialogBoxInfo[Dialog].cMode = 1;
		m_stDialogBoxInfo[Dialog].sV5 = 3;
		m_stDialogBoxInfo[Dialog].sV4 = -1;
		PlaySound('E', 14, 5);
	}

	if ((msX > sX + 186) && (msX < sX + 270) && (msY > sY + 44 + PixelDown) && (msY < sY + 67 + PixelDown))
	{	// Settings
		if (!OpenDown)
		{
			if (OpenUpper)
			{
				dwPanel = m_dwCurTime;
				SubePanel = TRUE;
			}
			else
			{
				dwPanel = m_dwCurTime;
				iBarEight = 0;
			}
		}
		m_stDialogBoxInfo[Dialog].cMode = 1;
		m_stDialogBoxInfo[Dialog].sV5 = 6;
		m_stDialogBoxInfo[Dialog].sV4 = -1;
		PlaySound('E', 14, 5);
	}


}

void CGame::ShowTopEk(short Dialog, short sX, short sY, short msX, short msY, short msZ)
{
	int k;
	short sY1 = 0, Temp, Pos;
	short sizeX = m_stDialogBoxInfo[Dialog].sSizeX;

	switch (m_stDialogBoxInfo[Dialog].sV4)
	{
		case 0:
			wsprintf(G_cTxt, "Top Ek");
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75 - 1, G_cTxt, 0, 0, 0);
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75, G_cTxt, 255, 200, 0);
			PutAlignedString(sX, sX + m_stDialogBoxInfo[Dialog].sSizeX - 1, sY + 95 - 1, DRAW_DIALOGBOX_CITYHALL_MENU92, 0, 0, 0);//killed total count
			PutAlignedString(sX, sX + m_stDialogBoxInfo[Dialog].sSizeX, sY + 95, DRAW_DIALOGBOX_CITYHALL_MENU92, 255, 200, 0);//killed total count
			break;
		case 1:
			wsprintf(G_cTxt, "Top Enemy Killed");
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75 - 1, G_cTxt, 0, 0, 0);
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75, G_cTxt, 255, 200, 0);
			PutAlignedString(sX, sX + m_stDialogBoxInfo[Dialog].sSizeX - 1, sY + 95 - 1, DRAW_DIALOGBOX_CITYHALL_MENU93, 0, 0, 0);//killed total count x 1 
			PutAlignedString(sX, sX + m_stDialogBoxInfo[Dialog].sSizeX, sY + 95, DRAW_DIALOGBOX_CITYHALL_MENU93, 255, 200, 0);//killed total count x 1 
			break;
		case 2:
			wsprintf(G_cTxt, "Top City Killed");
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75 - 1, G_cTxt, 0, 0, 0);
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75, G_cTxt, 255, 200, 0);
			PutAlignedString(sX, sX + m_stDialogBoxInfo[Dialog].sSizeX - 1, sY + 95 - 1, DRAW_DIALOGBOX_CITYHALL_MENU94, 0, 0, 0);//killed total friend count x 1
			PutAlignedString(sX, sX + m_stDialogBoxInfo[Dialog].sSizeX, sY + 95, DRAW_DIALOGBOX_CITYHALL_MENU94, 255, 200, 0);//killed total friend count x 1
			break;
		case 3:
			wsprintf(G_cTxt, "Assassin Top");
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75 - 1, G_cTxt, 0, 0, 0);
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75, G_cTxt, 255, 200, 0);
			PutAlignedString(sX, sX + 4 + m_stDialogBoxInfo[Dialog].sSizeX, sY + 95 - 1, "***********The Most Wanted************", 0, 0, 0);
			PutAlignedString(sX, sX + 5 + m_stDialogBoxInfo[Dialog].sSizeX, sY + 95, "***********The Most Wanted************", 255, 0, 0);
			PutAlignedString(sX, sX + 4 + m_stDialogBoxInfo[Dialog].sSizeX, sY + 105 - 1, "*                                                                         *", 0, 0, 0);
			PutAlignedString(sX, sX + 5 + m_stDialogBoxInfo[Dialog].sSizeX, sY + 105, "*                                                                         *", 255, 0, 0);
			PutAlignedString(sX, sX + 4 + m_stDialogBoxInfo[Dialog].sSizeX, sY + 120 - 1, "**************************************", 0, 0, 0);
			PutAlignedString(sX, sX + 5 + m_stDialogBoxInfo[Dialog].sSizeX, sY + 120, "**************************************", 255, 0, 0);
			break;
		case 4:
			wsprintf(G_cTxt, "Top Players Deaths");
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75 - 1, G_cTxt, 0, 0, 0);
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75, G_cTxt, 255, 200, 0);
			break;
		case 5:
			wsprintf(G_cTxt, "Top Players Killeds");
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75 - 1, G_cTxt, 0, 0, 0);
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75, G_cTxt, 255, 200, 0);
			PutAlignedString(sX, sX + m_stDialogBoxInfo[Dialog].sSizeX - 1, sY + 95 - 1, DRAW_DIALOGBOX_CITYHALL_MENU93, 0, 0, 0);//killed total friend count x 1
			PutAlignedString(sX, sX + m_stDialogBoxInfo[Dialog].sSizeX, sY + 95, DRAW_DIALOGBOX_CITYHALL_MENU93, 255, 200, 0);//killed total friend count x 1
			break;
		default:
			break;
	}

	if (m_stDialogBoxInfo[Dialog].sV4 != -1)
	{
		if (m_stDialogBoxInfo[Dialog].sV4 == 3)	sY1 = 15;

		PutString(sX + 35 - 1, sY + sY1 + 115 - 1, DRAW_DIALOGBOX_TOPEKLITS0, RGB(0, 0, 0)); // "Pos."
		PutString(sX + 35, sY + sY1 + 115, DRAW_DIALOGBOX_TOPEKLITS0, RGB(0, 255, 0)); // "Pos."
		PutString(sX + 75 - 1, sY + sY1 + 115 - 1, DRAW_DIALOGBOX_TOPEKLITS1, RGB(0, 0, 0)); // "Nombre"
		PutString(sX + 75, sY + sY1 + 115, DRAW_DIALOGBOX_TOPEKLITS1, RGB(0, 255, 0)); // "Nombre"
		if (m_stDialogBoxInfo[Dialog].sV4 != 3)
		{
			PutString(sX + 165 - 1, sY + 115 - 1, DRAW_DIALOGBOX_TOPEKLITS2, RGB(0, 0, 0)); // "Ciudad"
			PutString(sX + 165, sY + 115, DRAW_DIALOGBOX_TOPEKLITS2, RGB(0, 255, 0)); // "Ciudad"
		}
		PutString(sX + 230 - 1, sY + sY1 + 115 - 1, DRAW_DIALOGBOX_TOPEKLITS3, RGB(0, 0, 0)); // "Eks"
		PutString(sX + 230, sY + sY1 + 115, DRAW_DIALOGBOX_TOPEKLITS3, RGB(0, 255, 0)); // "Eks"

		sY1 = sY + 110;

		Temp = m_stDialogBoxInfo[Dialog].sV4 * 15;

		// Top Sites
		Pos = 0;
		for (k = Temp; k < Temp + 15; k++)
		{
			if (TopList[k].Name != NULL)
			{
				sY1 += 18;

				if (m_stDialogBoxInfo[Dialog].sV4 != 3)
				{
					if (TopList[k].side == 1)
						strcpy(TopList[k].City, "Aresden");
					else if (TopList[k].side == 2)
						strcpy(TopList[k].City, "Elvine");
					else strcpy(TopList[k].City, "NONE");
				}

				if (Pos == 0)
				{
					if (m_stDialogBoxInfo[Dialog].sV4 == 3)
					{

						wsprintf(G_cTxt, "%d", Pos + 1); // Position
						PutString(sX + 37 - 1, sY + 105 - 1, G_cTxt, RGB(0, 0, 0));//-5
						PutString(sX + 37, sY + 105, G_cTxt, RGB(249, 255, 45));//-5
						PutString(sX + 70 - 1, sY + 105 - 1, TopList[k].Name, RGB(0, 0, 0)); // CharName//-5
						PutString(sX + 70, sY + 105, TopList[k].Name, RGB(249, 255, 45)); // CharName//-5
						wsprintf(G_cTxt, "%d", TopList[k].Points); // Eks
						PutString(sX + 220 - 1, sY + 105 - 1, G_cTxt, RGB(0, 0, 0)); // Eks +5
						PutString(sX + 220, sY + 105, G_cTxt, RGB(249, 255, 45)); // Eks +5						
					}
					else
					{
						wsprintf(G_cTxt, "%d", Pos + 1); // Position
						PutString(sX + 37 - 1, sY1 - 1, G_cTxt, RGB(0, 0, 0));
						PutString(sX + 37, sY1, G_cTxt, RGB(249, 255, 45));
						PutString(sX + 70 - 1, sY1 - 1, TopList[k].Name, RGB(0, 0, 0)); // CharName
						PutString(sX + 70, sY1, TopList[k].Name, RGB(249, 255, 45)); // CharName
						PutString(sX + 160 - 1, sY1 - 1, TopList[k].City, RGB(0, 0, 0)); // City
						PutString(sX + 160, sY1, TopList[k].City, RGB(249, 255, 45)); // City
						wsprintf(G_cTxt, "%d", TopList[k].Points); // Eks
						PutString(sX + 220 - 1, sY1 - 1, G_cTxt, RGB(0, 0, 0)); // Eks
						PutString(sX + 220, sY1, G_cTxt, RGB(249, 255, 45)); // Eks
					}
				}
				else
				{
					wsprintf(G_cTxt, "%d", Pos + 1); // Position
					PutString(sX + 37 - 1, sY1 - 1, G_cTxt, RGB(0, 0, 0));
					PutString(sX + 37, sY1, G_cTxt, RGB(255, 255, 255));
					PutString(sX + 70 - 1, sY1 - 1, TopList[k].Name, RGB(0, 0, 0)); // CharName
					PutString(sX + 70, sY1, TopList[k].Name, RGB(255, 255, 255)); // CharName
					PutString(sX + 160 - 1, sY1 - 1, TopList[k].City, RGB(0, 0, 0)); // City
					PutString(sX + 160, sY1, TopList[k].City, RGB(255, 255, 255)); // City
					wsprintf(G_cTxt, "%d", TopList[k].Points); // Eks
					PutString(sX + 220 - 1, sY1 - 1, G_cTxt, RGB(0, 0, 0)); // Eks
					PutString(sX + 220, sY1, G_cTxt, RGB(255, 255, 255)); // Eks
				}
			}
			Pos++;
		}
	}
	else
	{
		PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75 - 1, "Select the Top", 0, 0, 0);
		PutCenterString_SpriteFont(sX, sX + sizeX, sY + 75, "Select the Top", 255, 200, 0);

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 125) && (msY < sY + 145))
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 125, "Players Killed Top 15", 255, 200, 0);
		else PutCenterString_SpriteFont(sX, sX + sizeX, sY + 125, "Players Killed Top 15", 250, 250, 250);

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 175) && (msY < sY + 195))
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 175, "Enemy Killed Top 15", 255, 200, 0);
		else PutCenterString_SpriteFont(sX, sX + sizeX, sY + 175, "Enemy Killed Top 15", 250, 250, 250);

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 225) && (msY < sY + 245))
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 225, "Enemy Kill Top 15", 255, 200, 0);
		else PutCenterString_SpriteFont(sX, sX + sizeX, sY + 225, "Enemy Kill Top 15", 250, 250, 250);

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 275) && (msY < sY + 295))
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 275, "City Friend Killed Top 15", 255, 200, 0);
		else PutCenterString_SpriteFont(sX, sX + sizeX, sY + 275, "City Friend Killed Top 15", 250, 250, 250);

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 325) && (msY < sY + 345))
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 325, "Assassin Top 15", 255, 200, 0);
		else PutCenterString_SpriteFont(sX, sX + sizeX, sY + 325, "Assassin Top 15", 250, 250, 250);

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 375) && (msY < sY + 395))
			PutCenterString_SpriteFont(sX, sX + sizeX, sY + 375, "Players Death Top 15", 255, 200, 0);
		else PutCenterString_SpriteFont(sX, sX + sizeX, sY + 375, "Players Death Top 15", 250, 250, 250);
	}
}

void CGame::ClicTopEk(short Dialog, short sX, short sY, short msX, short msY)
{
	if (m_stDialogBoxInfo[Dialog].sV4 == -1)
	{
		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 125) && (msY < sY + 145))
			m_stDialogBoxInfo[Dialog].sV4 = 5;

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 175) && (msY < sY + 195))
			m_stDialogBoxInfo[Dialog].sV4 = 1;

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 225) && (msY < sY + 245))
			m_stDialogBoxInfo[Dialog].sV4 = 0;

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 275) && (msY < sY + 295))
			m_stDialogBoxInfo[Dialog].sV4 = 2;

		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 325) && (msY < sY + 345))
			m_stDialogBoxInfo[Dialog].sV4 = 3;
		//deaths!
		if ((msX > sX + 24) && (msX < sX + 259) && (msY > sY + 375) && (msY < sY + 395))
			m_stDialogBoxInfo[Dialog].sV4 = 4;
	}
}

void CGame::DeleteItems()
{
	int i;
	for (i = 0; i < DEF_MAXITEMS; i++)
	{
		TitleShop[i].Init = -1;
		TitleShop[i].Finish = -1;
		ZeroMemory(TitleShop[i].Title, sizeof(TitleShop[i].Title));
	}
	for (i = 0; i < DEF_MAXMENUITEMS; i++)
		if (m_pItemForSaleList[i] != NULL) {
			delete m_pItemForSaleList[i];
			m_pItemForSaleList[i] = NULL;
		}
}

/* New exchange system */
void CGame::RemoveItemExchange(short ItemPosition)
{
	int i;
	BOOL Propio = TRUE;

	if (ItemPosition < 20)
	{
		if (m_bIsItemDisabled[m_stDialogBoxExchangeInfo[ItemPosition].sItemID] == TRUE)
			m_bIsItemDisabled[m_stDialogBoxExchangeInfo[ItemPosition].sItemID] = FALSE;
	}
	else
		Propio = FALSE;

	if (Propio)
	{
		FExchangeLog(TRUE, FALSE, ItemPosition);
		for (i = ItemPosition; i <= DecriptInt(ItemsInExchange); i++)
		{
			m_stDialogBoxExchangeInfo[i].sV1 = m_stDialogBoxExchangeInfo[i + 1].sV1;
			m_stDialogBoxExchangeInfo[i].sV2 = m_stDialogBoxExchangeInfo[i + 1].sV2;
			m_stDialogBoxExchangeInfo[i].sV3 = m_stDialogBoxExchangeInfo[i + 1].sV3;
			m_stDialogBoxExchangeInfo[i].sV4 = m_stDialogBoxExchangeInfo[i + 1].sV4;
			m_stDialogBoxExchangeInfo[i].sV5 = m_stDialogBoxExchangeInfo[i + 1].sV5;
			m_stDialogBoxExchangeInfo[i].sV6 = m_stDialogBoxExchangeInfo[i + 1].sV6;
			m_stDialogBoxExchangeInfo[i].sV7 = m_stDialogBoxExchangeInfo[i + 1].sV7;
			m_stDialogBoxExchangeInfo[i].sItemID = m_stDialogBoxExchangeInfo[i + 1].sItemID;
			memcpy(m_stDialogBoxExchangeInfo[i].cStr1, m_stDialogBoxExchangeInfo[i + 1].cStr1, 20);
			memcpy(m_stDialogBoxExchangeInfo[i].cStr2, m_stDialogBoxExchangeInfo[i + 1].cStr2, 10);
			m_stDialogBoxExchangeInfo[i].dwV1 = m_stDialogBoxExchangeInfo[i + 1].dwV1;
			m_stDialogBoxExchangeInfo[i].cValueA = m_stDialogBoxExchangeInfo[i + 1].cValueA;

			m_stDialogBoxExchangeInfo[i + 1].sItemID = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV1 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV2 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV3 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV4 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV5 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV6 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV7 = -1;
			m_stDialogBoxExchangeInfo[i + 1].dwV1 = 0;
			m_stDialogBoxExchangeInfo[i + 1].cValueA = 0;
			ZeroMemory(m_stDialogBoxExchangeInfo[i + 1].cStr1, sizeof(m_stDialogBoxExchangeInfo[i + 1].cStr1));
			ZeroMemory(m_stDialogBoxExchangeInfo[i + 1].cStr2, sizeof(m_stDialogBoxExchangeInfo[i + 1].cStr2));
		}
		ItemsInExchange = EncriptInt(DecriptInt(ItemsInExchange) - 1);
	}
	else
	{
		FExchangeLog(FALSE, FALSE, ItemPosition);
		for (i = ItemPosition; i <= DecriptInt(ItemsInExchange2) + 20; i++)
		{
			m_stDialogBoxExchangeInfo[i].sV1 = m_stDialogBoxExchangeInfo[i + 1].sV1;
			m_stDialogBoxExchangeInfo[i].sV2 = m_stDialogBoxExchangeInfo[i + 1].sV2;
			m_stDialogBoxExchangeInfo[i].sV3 = m_stDialogBoxExchangeInfo[i + 1].sV3;
			m_stDialogBoxExchangeInfo[i].sV4 = m_stDialogBoxExchangeInfo[i + 1].sV4;
			m_stDialogBoxExchangeInfo[i].sV5 = m_stDialogBoxExchangeInfo[i + 1].sV5;
			m_stDialogBoxExchangeInfo[i].sV6 = m_stDialogBoxExchangeInfo[i + 1].sV6;
			m_stDialogBoxExchangeInfo[i].sV7 = m_stDialogBoxExchangeInfo[i + 1].sV7;
			m_stDialogBoxExchangeInfo[i].sItemID = m_stDialogBoxExchangeInfo[i + 1].sItemID;
			memcpy(m_stDialogBoxExchangeInfo[i].cStr1, m_stDialogBoxExchangeInfo[i + 1].cStr1, 20);
			memcpy(m_stDialogBoxExchangeInfo[i].cStr2, m_stDialogBoxExchangeInfo[i + 1].cStr2, 10);
			m_stDialogBoxExchangeInfo[i].dwV1 = m_stDialogBoxExchangeInfo[i + 1].dwV1;
			m_stDialogBoxExchangeInfo[i].cValueA = m_stDialogBoxExchangeInfo[i + 1].cValueA;

			m_stDialogBoxExchangeInfo[i + 1].sItemID = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV1 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV2 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV3 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV4 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV5 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV6 = -1;
			m_stDialogBoxExchangeInfo[i + 1].sV7 = -1;
			m_stDialogBoxExchangeInfo[i + 1].dwV1 = 0;
			m_stDialogBoxExchangeInfo[i + 1].cValueA = 0;
			ZeroMemory(m_stDialogBoxExchangeInfo[i + 1].cStr1, sizeof(m_stDialogBoxExchangeInfo[i + 1].cStr1));
			ZeroMemory(m_stDialogBoxExchangeInfo[i + 1].cStr2, sizeof(m_stDialogBoxExchangeInfo[i + 1].cStr2));
		}
		ItemsInExchange2 = EncriptInt(DecriptInt(ItemsInExchange2) - 1);
	}
}

void CGame::ReadSettings()
{
	m_sMagicShortCut = -1;
	m_sRecentShortCut = -1;
	for (int i = 0; i < 5; i++) m_sShortCut[i] = -1;

	HKEY key;
	DWORD dwDisp;
	UINT Result;
	DWORD Size = sizeof(LONG);

	if (RegCreateKeyEx(HKEY_CURRENT_USER, "Software\\Siementech\\Helbreath\\Settings", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, &dwDisp) != ERROR_SUCCESS) return;

	if (RegQueryValueEx(key, "Magic", 0, NULL, (LPBYTE)&Result, &Size) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}
	if (Result > 0 && Result < 101) m_sMagicShortCut = Result - 1;
	else m_sMagicShortCut = -1;

	if (RegQueryValueEx(key, "ShortCut0", 0, NULL, (LPBYTE)&Result, &Size) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}
	if (Result > 0 && Result < 201) m_sShortCut[0] = Result - 1;
	else m_sShortCut[0] = -1;

	if (RegQueryValueEx(key, "ShortCut1", 0, NULL, (LPBYTE)&Result, &Size) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}
	if (Result > 0 && Result < 201) m_sShortCut[1] = Result - 1;
	else m_sShortCut[1] = -1;

	if (RegQueryValueEx(key, "ShortCut2", 0, NULL, (LPBYTE)&Result, &Size) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}
	if (Result > 0 && Result < 201) m_sShortCut[2] = Result - 1;
	else m_sShortCut[2] = -1;

	if (RegQueryValueEx(key, "ShortCut3", 0, NULL, (LPBYTE)&Result, &Size) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}
	if (Result > 0 && Result < 201) m_sShortCut[3] = Result - 1;
	else m_sShortCut[3] = -1;

	if (RegQueryValueEx(key, "ShortCut4", 0, NULL, (LPBYTE)&Result, &Size) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}
	if (Result > 0 && Result < 201) m_sShortCut[4] = Result - 1;
	else m_sShortCut[4] = -1;

	RegCloseKey(key);
}

void CGame::WriteSettings()
{
	HKEY key;
	DWORD dwDisp;
	UINT nData;

	if (RegCreateKeyEx(HKEY_CURRENT_USER, "Software\\Siementech\\Helbreath\\Settings", 0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, &dwDisp) != ERROR_SUCCESS) return;

	if (m_sMagicShortCut >= 0 && m_sMagicShortCut < 100) nData = m_sMagicShortCut + 1;
	else nData = 0;
	if (RegSetValueEx(key, "Magic", 0, REG_DWORD, (LPBYTE)&nData, sizeof(UINT)) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}

	if (m_sShortCut[0] >= 0 && m_sShortCut[0] < 200) nData = m_sShortCut[0] + 1;
	else nData = 0;
	if (RegSetValueEx(key, "ShortCut0", 0, REG_DWORD, (LPBYTE)&nData, sizeof(UINT)) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}

	if (m_sShortCut[1] >= 0 && m_sShortCut[1] < 200) nData = m_sShortCut[1] + 1;
	else nData = 0;
	if (RegSetValueEx(key, "ShortCut1", 0, REG_DWORD, (LPBYTE)&nData, sizeof(UINT)) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}

	if (m_sShortCut[2] >= 0 && m_sShortCut[2] < 200) nData = m_sShortCut[2] + 1;
	else nData = 0;
	if (RegSetValueEx(key, "ShortCut2", 0, REG_DWORD, (LPBYTE)&nData, sizeof(UINT)) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}

	if (m_sShortCut[3] >= 0 && m_sShortCut[3] < 200) nData = m_sShortCut[3] + 1;
	else nData = 0;
	if (RegSetValueEx(key, "ShortCut3", 0, REG_DWORD, (LPBYTE)&nData, sizeof(UINT)) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}

	if (m_sShortCut[4] >= 0 && m_sShortCut[4] < 200) nData = m_sShortCut[4] + 1;
	else nData = 0;
	if (RegSetValueEx(key, "ShortCut4", 0, REG_DWORD, (LPBYTE)&nData, sizeof(UINT)) != ERROR_SUCCESS)
	{
		RegCloseKey(key);
		return;
	}
	RegCloseKey(key);
}

void CGame::FExchangeLog(BOOL Client, BOOL Add, short Position)
{
	short Temp, i;
	char cNameStr[80], cSubStr1[120], cSubStr2[120];

	Temp = -1;
	for (i = 0; i <= 2; i++)
	{
		if (ExchangeLog[i].ItemName == NULL)
			Temp = i;
	}

	if (Temp == -1)
	{
		for (i = 0; i <= 2; i++)
		{
			if (ExchangeLog[i].ItemName != NULL)
			{
				memcpy(ExchangeLog[i].ItemName, ExchangeLog[i + 1].ItemName, 80);
				ExchangeLog[i].Me = ExchangeLog[i + 1].Me;
				ExchangeLog[i].Added = ExchangeLog[i + 1].Added;
			}
		}
		Temp = 2;
	}

	GetItemName(m_stDialogBoxExchangeInfo[Position].cStr1, m_stDialogBoxExchangeInfo[Position].dwV1, cNameStr, cSubStr1, cSubStr2, m_stDialogBoxExchangeInfo[Position].cValueA);
	memcpy(ExchangeLog[Temp].ItemName, cNameStr, 80);
	ExchangeLog[Temp].Me = Client;
	ExchangeLog[Temp].Added = Add;
}

void CGame::DrawDialogBox_Achivements(short msX, short msY)
{
	short sX, sY;
	DWORD dwTime = m_dwCurTime;
	short iBarWidth, MaxBarWidth;
	short LengthWidth;

	sX = m_stDialogBoxInfo[47].sX;
	sY = m_stDialogBoxInfo[47].sY;
	short sizeX = m_stDialogBoxInfo[47].sSizeX;

	MaxBarWidth = 32;

	/*DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_CRUSADE, sX, sY - 6, 0, FALSE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_EVENT, sX, sY, 2);*/

	DrawShadowDialog2(sX, sY, 47);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "Achivements", 255, 255, 255);

	wsprintf(G_cTxt, "Achivements %d / 28", AchivementsComplete);
	PutString(sX + 18, sY + 36, G_cTxt, RGB(255, 255, 255));

	if (Achivement[25].Active && Achivement[26].Active && Achivement[27].Active)
		if (!Achivement[29].Active)
		{
			PutString(sX + 195 - 1, sY + 36 - 1, "Achivement Price", RGB(0, 0, 0));
			PutString(sX + 195, sY + 36, "Achivement Price", RGB(0, 255, 0));
		}

	/********** First Line **********/
	if (Achivement[0].Active == FALSE)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 12, sY + 56, 3 + 44, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 45, sY + 72, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 88, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 122, 5, dwTime); // 5 Red // 4 Green -> Vertical		
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 12, sY + 56, 3, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 45, sY + 72, 7, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 88, 4, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 122, 4, dwTime); // 5 Red // 4 Green -> Vertical
	}

	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 12, sY + 56 + 30, 8, dwTime); // Red Bar
	iBarWidth = (Achivement[0].Porcent*MaxBarWidth) / 100;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 12, sY + 56 + 30, 9, iBarWidth, dwTime); // Green Bar

	if (Achivement[1].Active == FALSE)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 61, sY + 72, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 76, sY + 56, 2 + 44, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 109, sY + 72, 6, dwTime); // 6 Red // 7 Green -> Horizontal
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 61, sY + 72, 7, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 76, sY + 56, 2, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 109, sY + 72, 7, dwTime); // 6 Red // 7 Green -> Horizontal
	}

	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 76, sY + 56 + 30, 8, dwTime); // Red Bar
	iBarWidth = (Achivement[1].Porcent*MaxBarWidth) / 100;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 76, sY + 56 + 30, 9, iBarWidth, dwTime); // Green Bar

	if (Achivement[2].Active == FALSE)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 125, sY + 72, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 140, sY + 56, 19 + 44, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 173, sY + 72, 6, dwTime); // 6 Red // 7 Green -> Horizontal
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 125, sY + 72, 7, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 140, sY + 56, 19, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 173, sY + 72, 7, dwTime); // 6 Red // 7 Green -> Horizontal
	}

	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 140, sY + 56 + 30, 8, dwTime); // Red Bar
	iBarWidth = (Achivement[2].Porcent*MaxBarWidth) / 100;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 140, sY + 56 + 30, 9, iBarWidth, dwTime); // Green Bar

	if (Achivement[3].Active == FALSE)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 189, sY + 72, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 204, sY + 56, 29 + 44, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 237, sY + 72, 6, dwTime); // 6 Red // 7 Green -> Horizontal
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 189, sY + 72, 7, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 204, sY + 56, 29, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 237, sY + 72, 7, dwTime); // 6 Red // 7 Green -> Horizontal
	}

	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 204, sY + 56 + 30, 8, dwTime); // Red Bar
	iBarWidth = (Achivement[3].Porcent*MaxBarWidth) / 100;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 204, sY + 56 + 30, 9, iBarWidth, dwTime); // Green Bar

	if (Achivement[4].Active == FALSE)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 253, sY + 72, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 268, sY + 56, 39 + 44, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 88, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 122, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 253, sY + 72, 7, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 268, sY + 56, 39, dwTime);
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 88, 4, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 122, 4, dwTime); // 5 Red // 4 Green -> Vertical
	}

	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 268, sY + 56 + 30, 8, dwTime); // Red Bar
	iBarWidth = (Achivement[4].Porcent*MaxBarWidth) / 100;
	if (iBarWidth < 0) iBarWidth = 0;
	if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
	m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 268, sY + 56 + 30, 9, iBarWidth, dwTime); // Green Bar

	/********** Second Line **********/
	if (Achivement[0].Active && Achivement[1].Active)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 61, sY + 72, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[5].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 44, sY + 106, 15 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 77, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 44, sY + 106, 15, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 77, sY + 122, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 44, sY + 106 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[5].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 44, sY + 106 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 44, sY + 106, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 77, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 61, sY + 72, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[1].Active && Achivement[2].Active)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 125, sY + 72, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[6].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 108, sY + 106, 20 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 122, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 108, sY + 106, 20, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 122, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 108, sY + 106 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[6].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 108, sY + 106 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 108, sY + 106, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 125, sY + 72, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[2].Active && Achivement[3].Active)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 189, sY + 72, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[7].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 172, sY + 106, 32 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 205, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 122, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 172, sY + 106, 32, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 205, sY + 122, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 172, sY + 106 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[7].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 172, sY + 106 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 172, sY + 106, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 205, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 189, sY + 72, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[3].Active && Achivement[4].Active)
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 253, sY + 72, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[8].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 220, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 236, sY + 106, 10 + 44, dwTime);
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 220, sY + 122, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 236, sY + 106, 10, dwTime);
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 236, sY + 106 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[8].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 236, sY + 106 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 220, sY + 122, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 236, sY + 106, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 253, sY + 72, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}


	/********** Thirt Line **********/
	if (Achivement[0].Active) // First Line
	{
		if (Achivement[9].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 12, sY + 156, 0 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 188, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 222, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 238, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 272, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 288, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 322, 5, dwTime); // 5 Red // 4 Green -> Vertical
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 12, sY + 156, 0, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 188, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 222, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 238, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 272, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 288, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 322, 4, dwTime); // 5 Red // 4 Green -> Vertical
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 12, sY + 156 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[9].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 12, sY + 156 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 12, sY + 156, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 188, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 222, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 238, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 272, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 288, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 28, sY + 322, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[5].Active && Achivement[6].Active) // Second Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 122, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[10].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 76, sY + 156, 14 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 109, sY + 172, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 76, sY + 156, 14, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 109, sY + 172, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 76, sY + 156 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[10].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 76, sY + 156 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 76, sY + 156, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 109, sY + 172, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 122, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[6].Active && Achivement[7].Active) // Second Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 122, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[11].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 172, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 140, sY + 156, 30 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 173, sY + 172, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 172, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 140, sY + 156, 30, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 173, sY + 172, 7, dwTime); // 6 Red // 7 Green -> Horizontal
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 140, sY + 156 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[11].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 140, sY + 156 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 172, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 140, sY + 156, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 173, sY + 172, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 122, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[7].Active && Achivement[8].Active) // Second Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 220, sY + 122, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[12].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 172, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 204, sY + 156, 31 + 44, dwTime);
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 172, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 204, sY + 156, 31, dwTime);
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 204, sY + 156 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[12].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 204, sY + 156 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 172, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 204, sY + 156, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 220, sY + 122, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[4].Active) // First Line
	{
		if (Achivement[13].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 268, sY + 156, 34 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 188, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 222, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 238, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 272, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 288, 5, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 322, 5, dwTime); // 5 Red // 4 Green -> Vertical
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 268, sY + 156, 34, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 188, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 222, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 238, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 272, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 288, 4, dwTime); // 5 Red // 4 Green -> Vertical
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 322, 4, dwTime); // 5 Red // 4 Green -> Vertical
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 268, sY + 156 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[13].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 268, sY + 156 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 268, sY + 156, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 188, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 222, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 238, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 272, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 288, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 284, sY + 322, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	/********** Four Line **********/
	if (Achivement[5].Active) // Second Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 60, sY + 138, 4, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 60, sY + 172, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[14].Active == FALSE)
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 44, sY + 206, 18 + 44, dwTime);
		else
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 44, sY + 206, 18, dwTime);

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 44, sY + 206 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[14].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 44, sY + 206 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 44, sY + 206, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 60, sY + 138, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 60, sY + 172, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[10].Active && Achivement[11].Active) // Thirt Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 172, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[15].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 222, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 108, sY + 206, 1 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 222, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 222, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 108, sY + 206, 1, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 222, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 108, sY + 206 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[15].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 108, sY + 206 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 222, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 108, sY + 206, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 222, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 172, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[11].Active && Achivement[12].Active) // Thirt Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 172, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[16].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 222, 6, dwTime); // 6 Red // 7 Green -> Horizontal
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 172, sY + 206, 28 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 205, sY + 222, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 222, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 172, sY + 206, 28, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 205, sY + 222, 7, dwTime); // 6 Red // 7 Green -> Horizontal
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 172, sY + 206 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[16].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 172, sY + 206 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 222, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 172, sY + 206, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 205, sY + 222, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 172, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[8].Active) // Second Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 252, sY + 138, 4, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 252, sY + 172, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[17].Active == FALSE)
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 236, sY + 206, 41 + 44, dwTime);
		else
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 236, sY + 206, 41, dwTime);

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 236, sY + 206 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[17].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 236, sY + 206 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 236, sY + 206, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 252, sY + 138, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 252, sY + 172, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	/********** Five Line **********/
	if (Achivement[15].Active) // Four Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 222, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[18].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 76, sY + 256, 12 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 109, sY + 272, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 76, sY + 256, 12, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 109, sY + 272, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 76, sY + 256 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[18].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 76, sY + 256 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 76, sY + 256, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 109, sY + 272, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 92, sY + 222, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[15].Active && Achivement[16].Active) // Four Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 222, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[19].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 272, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 140, sY + 256, 36 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 173, sY + 272, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 272, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 140, sY + 256, 36, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 173, sY + 272, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 140, sY + 256 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[19].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 140, sY + 256 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 272, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 140, sY + 256, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 173, sY + 272, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 222, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[16].Active) // Four Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 220, sY + 222, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[20].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 272, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 204, sY + 256, 42 + 44, dwTime);
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 272, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 204, sY + 256, 42, dwTime);
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 204, sY + 256 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[20].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 204, sY + 256 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 272, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 204, sY + 256, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 220, sY + 222, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	/********** Six Line **********/
	if (Achivement[14].Active) // Four Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 60, sY + 238, 4, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 60, sY + 272, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[21].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 44, sY + 306, 24 + 44, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 322, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 44, sY + 306, 24, dwTime);
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 322, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 44, sY + 306 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[21].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 44, sY + 306 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 44, sY + 306, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 141, sY + 322, 6, dwTime); // 6 Red // 7 Green -> Horizontal
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 60, sY + 238, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 60, sY + 272, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[18].Active && Achivement[19].Active) // Five Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 272, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[22].Active == FALSE)
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 322, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 108, sY + 306, 35 + 44, dwTime);
		}
		else
		{
			m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 322, 7, dwTime); // 6 Red // 7 Green -> Horizontal	
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 108, sY + 306, 35, dwTime);
		}

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 108, sY + 306 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[22].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 108, sY + 306 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 156, sY + 322, 6, dwTime); // 6 Red // 7 Green -> Horizontal	
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 108, sY + 306, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 124, sY + 272, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[19].Active && Achivement[20].Active) // Five Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 272, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[23].Active == FALSE)
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 172, sY + 306, 21 + 44, dwTime);
		else
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 172, sY + 306, 21, dwTime);

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 172, sY + 306 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[23].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 172, sY + 306 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 172, sY + 306, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 188, sY + 272, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[17].Active) // Four Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 252, sY + 238, 4, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 252, sY + 272, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[24].Active == FALSE)
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 236, sY + 306, 8 + 44, dwTime);
		else
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 236, sY + 306, 8, dwTime);

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 236, sY + 306 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[24].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 236, sY + 306 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 236, sY + 306, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 252, sY + 238, 5, dwTime); // 5 Red // 4 Green -> Vertical
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 252, sY + 272, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	/********** Seven Line **********/
	if (Achivement[9].Active) // Thirht Line
	{
		if (Achivement[25].Active == FALSE)
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 12, sY + 356, 5 + 44, dwTime);
		else
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 12, sY + 356, 5, dwTime);

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 12, sY + 356 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[25].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 12, sY + 356 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 12, sY + 356, 0, dwTime); // Unknow

	if (Achivement[22].Active && Achivement[23].Active) // Six Line
	{
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 155, sY + 322, 4, dwTime); // 5 Red // 4 Green -> Vertical
		if (Achivement[26].Active == FALSE)
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 140, sY + 356, 27 + 44, dwTime);
		else
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 140, sY + 356, 27, dwTime);

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 140, sY + 356 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[26].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 140, sY + 356 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
	{
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 140, sY + 356, 0, dwTime); // Unknow
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 155, sY + 322, 5, dwTime); // 5 Red // 4 Green -> Vertical
	}

	if (Achivement[13].Active) // Thirt Line
	{
		if (Achivement[27].Active == FALSE)
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 268, sY + 356, 43 + 44, dwTime);
		else
			m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS]->PutSpriteFast(sX + 268, sY + 356, 43, dwTime);

		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFast(sX + 268, sY + 356 + 30, 8, dwTime); // Red Bar
		iBarWidth = (Achivement[27].Porcent*MaxBarWidth) / 100;
		if (iBarWidth < 0) iBarWidth = 0;
		if (iBarWidth > MaxBarWidth) iBarWidth = MaxBarWidth;
		m_pSprite[DEF_SPRID_INTERFACE_ND_PARTY]->PutSpriteFastWidth(sX + 268, sY + 356 + 30, 9, iBarWidth, dwTime); // Green Bar
	}
	else
		m_pSprite[DEF_SPRID_INTERFACE_ACHIVEMENTS2]->PutSpriteFast(sX + 268, sY + 356, 0, dwTime); // Unknow


	/********* Boxs y Titles **********/
	/********** First Line **********/
	if ((msX >= sX + 12) && (msX <= sX + 12 + 32) && (msY >= sY + 56) && (msY <= sY + 56 + 32))
	{
		LengthWidth = SpaceChar(Achivement[0].Description);
		m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
		PutString(msX + 5, msY + 25, Achivement[0].Title, RGB(255, 200, 0));
		PutString(msX + 5, msY + 40, Achivement[0].Description, RGB(255, 255, 255));
		PutString(msX + 5, msY + 55, Achivement[0].Reward, RGB(255, 255, 255));
		wsprintf(G_cTxt, "Complete: %d%%", Achivement[0].Porcent);
		PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
	}
	else if ((msX >= sX + 76) && (msX <= sX + 76 + 32) && (msY >= sY + 56) && (msY <= sY + 56 + 32))
	{
		LengthWidth = SpaceChar(Achivement[1].Description);
		m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
		PutString(msX + 5, msY + 25, Achivement[1].Title, RGB(255, 200, 0));
		PutString(msX + 5, msY + 40, Achivement[1].Description, RGB(255, 255, 255));
		PutString(msX + 5, msY + 55, Achivement[1].Reward, RGB(255, 255, 255));
		wsprintf(G_cTxt, "Complete: %d%%", Achivement[1].Porcent);
		PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
	}
	else if ((msX >= sX + 140) && (msX <= sX + 140 + 32) && (msY >= sY + 56) && (msY <= sY + 56 + 32))
	{
		LengthWidth = SpaceChar(Achivement[2].Description);
		m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
		PutString(msX + 5, msY + 25, Achivement[2].Title, RGB(255, 200, 0));
		PutString(msX + 5, msY + 40, Achivement[2].Description, RGB(255, 255, 255));
		PutString(msX + 5, msY + 55, Achivement[2].Reward, RGB(255, 255, 255));
		wsprintf(G_cTxt, "Complete: %d%%", Achivement[2].Porcent);
		PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
	}
	else if ((msX >= sX + 204) && (msX <= sX + 204 + 32) && (msY >= sY + 56) && (msY <= sY + 56 + 32))
	{
		LengthWidth = SpaceChar(Achivement[3].Description);
		m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
		PutString(msX + 5, msY + 25, Achivement[3].Title, RGB(255, 200, 0));
		PutString(msX + 5, msY + 40, Achivement[3].Description, RGB(255, 255, 255));
		PutString(msX + 5, msY + 55, Achivement[3].Reward, RGB(255, 255, 255));
		wsprintf(G_cTxt, "Complete: %d%%", Achivement[3].Porcent);
		PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
	}
	else if ((msX >= sX + 268) && (msX <= sX + 268 + 32) && (msY >= sY + 56) && (msY <= sY + 56 + 32))
	{
		LengthWidth = SpaceChar(Achivement[4].Description);
		m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
		PutString(msX + 5, msY + 25, Achivement[4].Title, RGB(255, 200, 0));
		PutString(msX + 5, msY + 40, Achivement[4].Description, RGB(255, 255, 255));
		PutString(msX + 5, msY + 55, Achivement[4].Reward, RGB(255, 255, 255));
		wsprintf(G_cTxt, "Complete: %d%%", Achivement[4].Porcent);
		PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
	}
	/********** Second Line **********/
	else if ((msX >= sX + 44) && (msX <= sX + 44 + 32) && (msY >= sY + 106) && (msY <= sY + 106 + 32))
	{
		if (Achivement[0].Active && Achivement[1].Active)
		{
			LengthWidth = SpaceChar(Achivement[5].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[5].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[5].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[5].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[5].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 108) && (msX <= sX + 108 + 32) && (msY >= sY + 106) && (msY <= sY + 106 + 32))
	{
		if (Achivement[1].Active && Achivement[2].Active)
		{
			LengthWidth = SpaceChar(Achivement[6].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[6].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[6].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[6].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[6].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 172) && (msX <= sX + 172 + 32) && (msY >= sY + 106) && (msY <= sY + 106 + 32))
	{
		if (Achivement[2].Active && Achivement[3].Active)
		{
			LengthWidth = SpaceChar(Achivement[7].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[7].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[7].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[7].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[7].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 236) && (msX <= sX + 236 + 32) && (msY >= sY + 106) && (msY <= sY + 106 + 32))
	{
		if (Achivement[3].Active && Achivement[4].Active)
		{
			LengthWidth = SpaceChar(Achivement[8].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[8].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[8].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[8].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[8].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	/********** Thirt Line **********/
	else if ((msX >= sX + 12) && (msX <= sX + 12 + 32) && (msY >= sY + 156) && (msY <= sY + 156 + 32))
	{
		if (Achivement[0].Active)
		{
			LengthWidth = SpaceChar(Achivement[9].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[9].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[9].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[9].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[9].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 76) && (msX <= sX + 76 + 32) && (msY >= sY + 156) && (msY <= sY + 156 + 32))
	{
		if (Achivement[5].Active && Achivement[6].Active) // Second Line
		{
			LengthWidth = SpaceChar(Achivement[10].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[10].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[10].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[10].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[10].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 140) && (msX <= sX + 140 + 32) && (msY >= sY + 156) && (msY <= sY + 156 + 32))
	{
		if (Achivement[6].Active && Achivement[7].Active)
		{
			LengthWidth = SpaceChar(Achivement[11].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[11].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[11].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[11].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[11].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 204) && (msX <= sX + 204 + 32) && (msY >= sY + 156) && (msY <= sY + 156 + 32))
	{
		if (Achivement[7].Active && Achivement[8].Active)
		{
			LengthWidth = SpaceChar(Achivement[12].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[12].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[12].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[12].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[12].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 268) && (msX <= sX + 268 + 32) && (msY >= sY + 156) && (msY <= sY + 156 + 32))
	{
		if (Achivement[4].Active)
		{
			LengthWidth = SpaceChar(Achivement[13].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[13].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[13].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[13].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[0].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	/********** Four Line **********/
	else if ((msX >= sX + 44) && (msX <= sX + 44 + 32) && (msY >= sY + 206) && (msY <= sY + 206 + 32))
	{
		if (Achivement[5].Active)
		{
			LengthWidth = SpaceChar(Achivement[14].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[14].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[14].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[14].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[14].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 108) && (msX <= sX + 108 + 32) && (msY >= sY + 206) && (msY <= sY + 206 + 32))
	{
		if (Achivement[10].Active && Achivement[11].Active)
		{
			LengthWidth = SpaceChar(Achivement[15].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[15].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[15].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[15].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[15].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 172) && (msX <= sX + 172 + 32) && (msY >= sY + 206) && (msY <= sY + 206 + 32))
	{
		if (Achivement[11].Active && Achivement[12].Active)
		{
			LengthWidth = SpaceChar(Achivement[16].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[16].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[16].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[16].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[16].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 236) && (msX <= sX + 236 + 32) && (msY >= sY + 206) && (msY <= sY + 206 + 32))
	{
		if (Achivement[8].Active)
		{
			LengthWidth = SpaceChar(Achivement[17].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[17].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[17].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[17].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[17].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	/********** Five Line **********/
	else if ((msX >= sX + 76) && (msX <= sX + 76 + 32) && (msY >= sY + 256) && (msY <= sY + 256 + 32))
	{
		if (Achivement[15].Active)
		{
			LengthWidth = SpaceChar(Achivement[18].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[18].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[18].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[18].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[18].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 140) && (msX <= sX + 140 + 32) && (msY >= sY + 256) && (msY <= sY + 256 + 32))
	{
		if (Achivement[15].Active && Achivement[16].Active)
		{
			LengthWidth = SpaceChar(Achivement[19].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[19].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[19].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[19].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[19].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 204) && (msX <= sX + 204 + 32) && (msY >= sY + 256) && (msY <= sY + 256 + 32))
	{
		if (Achivement[16].Active)
		{
			LengthWidth = SpaceChar(Achivement[20].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[20].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[20].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[20].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[20].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	/********** Six Line **********/
	else if ((msX >= sX + 44) && (msX <= sX + 44 + 32) && (msY >= sY + 306) && (msY <= sY + 306 + 32))
	{
		if (Achivement[14].Active)
		{
			LengthWidth = SpaceChar(Achivement[21].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[21].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[21].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[21].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[21].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 108) && (msX <= sX + 108 + 32) && (msY >= sY + 306) && (msY <= sY + 306 + 32))
	{
		if (Achivement[18].Active && Achivement[19].Active)
		{
			LengthWidth = SpaceChar(Achivement[22].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[22].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[22].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[22].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[22].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 172) && (msX <= sX + 172 + 32) && (msY >= sY + 306) && (msY <= sY + 306 + 32))
	{
		if (Achivement[19].Active && Achivement[20].Active)
		{
			LengthWidth = SpaceChar(Achivement[23].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[23].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[23].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[23].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[23].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 236) && (msX <= sX + 236 + 32) && (msY >= sY + 306) && (msY <= sY + 306 + 32))
	{
		if (Achivement[17].Active)
		{
			LengthWidth = SpaceChar(Achivement[24].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[24].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[24].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[24].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[24].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	/********** Seven Line **********/
	else if ((msX >= sX + 12) && (msX <= sX + 12 + 32) && (msY >= sY + 356) && (msY <= sY + 356 + 32))
	{
		if (Achivement[9].Active)
		{
			LengthWidth = SpaceChar(Achivement[25].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[25].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[25].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[25].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[25].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 140) && (msX <= sX + 140 + 32) && (msY >= sY + 356) && (msY <= sY + 356 + 32))
	{
		if (Achivement[22].Active && Achivement[23].Active)
		{
			LengthWidth = SpaceChar(Achivement[26].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[26].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[26].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[26].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[26].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
	else if ((msX >= sX + 268) && (msX <= sX + 268 + 32) && (msY >= sY + 356) && (msY <= sY + 356 + 32))
	{
		if (Achivement[13].Active)
		{
			LengthWidth = SpaceChar(Achivement[27].Description);
			m_DDraw.DrawShadowBox(msX, msY + 25, msX + LengthWidth, msY + 85);
			PutString(msX + 5, msY + 25, Achivement[27].Title, RGB(255, 200, 0));
			PutString(msX + 5, msY + 40, Achivement[27].Description, RGB(255, 255, 255));
			PutString(msX + 5, msY + 55, Achivement[27].Reward, RGB(255, 255, 255));
			wsprintf(G_cTxt, "Complete: %d%%", Achivement[27].Porcent);
			PutString(msX + 5, msY + 70, G_cTxt, RGB(255, 255, 255));
		}
	}
}

void CGame::DlgBoxClick_Achivements(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[47].sX;
	sY = m_stDialogBoxInfo[47].sY;

	if (Achivement[25].Active && Achivement[26].Active && Achivement[27].Active)
	{
		if (!Achivement[29].Active)
		{
			if ((msX >= sX + 195) && (msX <= sX + 290) && (msY >= sY + 36) && (msY <= sY + 51))
				bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_LISTCOMPLETE, NULL, NULL, NULL, NULL, NULL);
		}
	}
}

BOOL CGame::bReadAchivements()
{
	FILE * pFile;
	HANDLE hFile;
	DWORD  dwFileSize;
	char * cp, *token, cReadModeA;
	char seps[] = "=\n";
	short ID;

	cReadModeA = 0;
	ID = 0;

	hFile = CreateFile("contents\\Achivements.txt", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
	dwFileSize = GetFileSize(hFile, NULL);
	if (hFile != INVALID_HANDLE_VALUE) CloseHandle(hFile);
	pFile = fopen("contents\\Achivements.txt", "rt");
	if (pFile == NULL) return FALSE;
	else {
		cp = new char[dwFileSize + 2];
		ZeroMemory(cp, dwFileSize + 2);
		fread(cp, dwFileSize, 1, pFile);

		token = strtok(cp, seps);
		while (token != NULL) {
			if (cReadModeA != 0) {
				switch (cReadModeA) {
					case 1:
						ZeroMemory(Achivement[ID].Title, sizeof(Achivement[ID].Title));
						memcpy(Achivement[ID].Title, token, strlen(token));
						cReadModeA = 0;
						break;
					case 2:
						ZeroMemory(Achivement[ID].Description, sizeof(Achivement[ID].Description));
						memcpy(Achivement[ID].Description, token, strlen(token));
						cReadModeA = 0;
						break;
					case 3:
						ZeroMemory(Achivement[ID].Reward, sizeof(Achivement[ID].Reward));
						memcpy(Achivement[ID].Reward, token, strlen(token));
						cReadModeA = 0;
						ID++;
						break;
				}
			}
			else {
				if (memcmp(token, "Title", 5) == 0)
				{
					if (ID >= DEF_MAXACHIVEMENTS)
						return FALSE;
					cReadModeA = 1;
				}
				else if (memcmp(token, "Description", 11) == 0)
				{
					if (ID >= DEF_MAXACHIVEMENTS)
						return FALSE;
					cReadModeA = 2;
				}
				else if (memcmp(token, "Reward", 6) == 0)
				{
					if (ID >= DEF_MAXACHIVEMENTS)
						return FALSE;
					cReadModeA = 3;
				}
			}
			token = strtok(NULL, seps);
		}
		delete[] cp;
	}
	if (pFile != NULL) fclose(pFile);

	return TRUE;
}

int CGame::SpaceChar(char String[])
{
	char Width[] = { 2,4,10,7,9,7,3,2,2,6,6,3,4,2,6,6,4,6,6,7,6,6,7,6,6,3,3,4,5,4,6,10,9,6,8,8,7,5,9,7,6,8,7,5,11,
		9,9,6,10,7,7,8,8,6,12,8,7,8,3,6,4,5,7,6,6,6,6,6,6,6,6,6,3,6,6,3,8,6,6,6,7,5,5,5,6,6,8,7,7,5,4,3,5,7 };

	short StringWidth = 0;
	int i;

	for (i = 0; i < strlen(String); i++)
	{
		if (String[i] != NULL)
		{
			if ((String[i] >= 33) && (String[i] <= 126)) StringWidth += Width[String[i] - 33];
			else StringWidth += 5;
		}
	}
	return StringWidth += 5;
}

void CGame::DrawDialogBox_Barrita(short msX, short msY)
{
	short sX, sY;
	char Show;
	DWORD dwTime = timeGetTime();
	int i, iManaCost;
	char cTxt[80], cStr1[64], cStr2[64], cStr3[64], cItemColor;
	sX = m_stDialogBoxInfo[48].sX;
	sY = m_stDialogBoxInfo[48].sY;

	switch (ShowBarTotal)
	{
		case 3:
			m_stDialogBoxInfo[48].sSizeX = 154;
			Show = 0;
			break;
		case 5:
			m_stDialogBoxInfo[48].sSizeX = 238;
			Show = 1;
			break;
		case 7:
			m_stDialogBoxInfo[48].sSizeX = 322;
			Show = 2;
			break;
		case 9:
			m_stDialogBoxInfo[48].sSizeX = 406;
			Show = 3;
			break;
	}

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ITEMS, sX, sY, Show, FALSE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ITEMS, sX + m_stDialogBoxInfo[48].sSizeX - 55, sY, 4, FALSE, m_bDialogTrans);

	for (i = 0; i < ShowBarTotal; i++)
	{
		if (NewShortcuts[i] != -1)
		{
			if (NewShortcuts[i] > 99)
			{
				iManaCost = iGetManaCost(NewShortcuts[i] - 100);
				if ((msX >= sX + 17 + (i * 42)) && (msX < sX + 54 + (i * 42)) && (msY >= sY + 15) && (msY < sY + 53) && (iManaCost <= DecriptInt(m_iMP)))
				{
					m_pSprite[DEF_SPRID_INTERFACE_ND_ICONOS]->PutSpriteFast(sX + 17 + (i * 42), sY + 15, NewShortcuts[i] - 100, dwTime);
					wsprintf(cTxt, "%s", m_pMagicCfgList[NewShortcuts[i] - 100]->m_cName);
					PutString_SprFont3(msX + 5, msY + 25, cTxt, 100, 100, 0, FALSE, 2);
				}
				else if (iManaCost <= DecriptInt(m_iMP))
					m_pSprite[DEF_SPRID_INTERFACE_ND_ICONOS]->PutTransSprite(sX + 17 + (i * 42), sY + 15, NewShortcuts[i] - 100, dwTime);
				else
					m_pSprite[DEF_SPRID_INTERFACE_ND_ICONOS]->PutTransSpriteRGB(sX + 17 + (i * 42), sY + 15, NewShortcuts[i] - 100, 30, 0, 0, dwTime);
			}
			else
			{
				if (m_pItemList[NewShortcuts[i]] != NULL)
				{
					cItemColor = m_pItemList[NewShortcuts[i]]->m_cItemColor;
					if (cItemColor == 0)
						m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + m_pItemList[NewShortcuts[i]]->m_sSprite]->PutSpriteFast(sX + 37 + (i * 42), sY + 36, m_pItemList[NewShortcuts[i]]->m_sSpriteFrame, dwTime);
					else
					{
						switch (m_pItemList[NewShortcuts[i]]->m_sSprite) {
							case 1:
							case 2:
							case 3:
							case 15:
								m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + m_pItemList[NewShortcuts[i]]->m_sSprite]->PutSpriteRGB(sX + 37 + (i * 42), sY + 36, m_pItemList[NewShortcuts[i]]->m_sSpriteFrame, m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], dwTime);
								break;
							default:
								m_pSprite[DEF_SPRID_ITEMGROUND_PIVOTPOINT + m_pItemList[NewShortcuts[i]]->m_sSprite]->PutSpriteRGB(sX + 37 + (i * 42), sY + 36, m_pItemList[NewShortcuts[i]]->m_sSpriteFrame, m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], dwTime);
								break;
						}
					}
					if ((msX >= sX + 17 + (i * 42)) && (msX < sX + 54 + (i * 42)) && (msY >= sY + 15) && (msY < sY + 53))
					{
						GetItemName(m_pItemList[NewShortcuts[i]], cStr1, cStr2, cStr3);
						PutString_SprFont3(msX + 5, msY + 25, cStr1, 100, 100, 0, FALSE, 2);
					}
				}
			}
		}
	}
}

void CGame::DlgBoxClick_Barrita(short msX, short msY)
{
	short sX, sY;
	int i;
	char cItemID, cStr1[80], cTxt[80];
	sX = m_stDialogBoxInfo[48].sX;
	sY = m_stDialogBoxInfo[48].sY;

	for (i = 0; i < ShowBarTotal; i++)
	{
		if ((msX >= sX + 17 + (i * 42)) && (msX < sX + 54 + (i * 42)) && (msY >= sY + 15) && (msY < sY + 53))
		{
			if (NewShortcuts[i] != -1)
			{
				if (NewShortcuts[i] < 100)
				{
					if (m_bItemUsingStatus == TRUE)
					{
						AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY1, 10);
						return;
					}
					cItemID = NewShortcuts[i];
					if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_PERM)
						|| (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_ARROW) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EAT))
					{
						if (bCheckItemOperationEnabled(cItemID) == FALSE) return;
						if ((timeGetTime() - m_dwDamagedTime) < 10000)
						{
							if ((m_pItemList[cItemID]->m_sSprite == 6) && (m_pItemList[cItemID]->m_sSpriteFrame == 9))
							{
								wsprintf(G_cTxt, BDLBBOX_DOUBLE_CLICK_INVENTORY3, cStr1);//"Item %s: Scrolls cannot be used until 10 seconds after taking damage."
								AddEventList(G_cTxt, 10);
								return;
							}
							if ((m_pItemList[cItemID]->m_sSprite == 6) && (m_pItemList[cItemID]->m_sSpriteFrame == 89))
							{
								wsprintf(G_cTxt, BDLBBOX_DOUBLE_CLICK_INVENTORY3, cStr1);//"Item %s: Scrolls cannot be used until 10 seconds after taking damage."
								AddEventList(G_cTxt, 10);
								return;
							}
						}
						bSendCommand(CLIENT_REQUEST_COMMAND_COMMON, CLIENT_REQUEST_TOMOEAT, NULL, cItemID, NULL, NULL, NULL);

						if ((m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE) || (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EAT))
						{
							m_bIsItemDisabled[cItemID] = TRUE;
							m_bItemUsingStatus = TRUE;
						}
					}

					if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_SKILL)
					{
						if (_bIsItemOnHand() == TRUE)
						{
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY4, 10);//"Your hands should be free to use this item."
							return;
						}
						if (m_bSkillUsingStatus == TRUE)
						{
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY5, 10);//"You are already using another skill."
							return;
						}
						if (m_pItemList[cItemID]->m_wCurLifeSpan == 0)
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY6, 10);//"You can't use this item because it is exhausted."
						else
						{
							m_bIsGetPointingMode = TRUE;
							m_iPointCommandType = EncriptInt(cItemID);
							wsprintf(cTxt, BDLBBOX_DOUBLE_CLICK_INVENTORY7, cStr1);//"Item %s: Select a position which you want to use."
							AddEventList(cTxt, 10);
						}
					}

					if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_DEPLETE_DEST)
					{
						if (_bIsItemOnHand() == TRUE)
						{
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY4, 10);//"Your hands should be free to use this item."
							return;
						}
						if (m_bSkillUsingStatus == TRUE)
						{
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY13, 10);//"You are already using another skill."
							return;
						}
						if (m_pItemList[cItemID]->m_wCurLifeSpan == 0)
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY6, 10);//"You can't use this item because it is exhausted."
						else
						{
							m_bIsGetPointingMode = TRUE;
							m_iPointCommandType = EncriptInt(cItemID);
							wsprintf(cTxt, BDLBBOX_DOUBLE_CLICK_INVENTORY8, cStr1);//"Item %s: Select an item which you want to use."
							AddEventList(cTxt, 10);
						}
					}

					if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_USE_SKILL_ENABLEDIALOGBOX)
					{
						if (_bIsItemOnHand() == TRUE)
						{
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY4, 10);//"Your hands should be free to use this item."
							return;
						}
						if (m_bSkillUsingStatus == TRUE)
						{
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY5, 10);//"You are already using another skill."
							return;
						}

						if (m_pItemList[cItemID]->m_wCurLifeSpan == 0)
							AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY6, 10);//"You can't use this item because it is exhausted."
						else
						{
							switch (m_pItemList[cItemID]->m_sSpriteFrame) {
								case 55: // Alchemy pot
									if (m_cSkillMastery[12] == 0)
										AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY9, 10);//"You should learn alchemy skill to use this item."
									else {
										EnableDialogBox(26, 1, NULL, NULL, NULL);
										AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY10, 10);//"Using alchemy skill..."
									}
									break;
								case 113: // Smith's Anvil
									if (m_cSkillMastery[13] == 0)
										AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY11, 10);//"You should learn manufacturing skill to use this item.."
									else
									{
										EnableDialogBox(26, 3, NULL, NULL, NULL);
										AddEventList(BDLBBOX_DOUBLE_CLICK_INVENTORY12, 10);//"Using a manufacturing skill..."
									}
									break;
								case 151:
								case 152:
								case 153:
								case 154:
									EnableDialogBox(40, 1, NULL, NULL, NULL);
									break;
							}
						}
					}
					// Dblclick Alchemy bowl
					if ((m_bIsDialogEnabled[26] == TRUE) && (m_stDialogBoxInfo[26].cMode == 1))
					{
						bItemDrop_SkillDialog();
						bItemDrop_ExternalScreen(cItemID, m_stDialogBoxInfo[26].sX + 50, m_stDialogBoxInfo[26].sY + 50);
					}
					// Dblclick Manuf screen
					if ((m_bIsDialogEnabled[26] == TRUE) && (m_stDialogBoxInfo[26].cMode == 4))
					{
						bItemDrop_SkillDialog();
						bItemDrop_ExternalScreen(cItemID, m_stDialogBoxInfo[26].sX + 50, m_stDialogBoxInfo[26].sY + 50);
					}
					if (m_pItemList[cItemID]->m_cItemType == DEF_ITEMTYPE_EQUIP)
					{
						m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
						m_stMCursor.sSelectedObjectID = (short)cItemID;
						bItemDrop_Character();
						m_stMCursor.cSelectedObjectType = NULL;
						m_stMCursor.sSelectedObjectID = NULL;
					}
					return;
				}
				else
				{
					if ((m_cMagicMastery[NewShortcuts[i] - 100] != NULL) && (m_pMagicCfgList[NewShortcuts[i] - 100] != NULL))
					{
						UseMagic(NewShortcuts[i] - 100);
						m_stMCursor.cSelectedObjectType = NULL;
						m_stMCursor.sSelectedObjectID = NULL;
						PlaySound('E', 14, 5);
					}
				}
			}
			else return;
		}
	}
}

BOOL CGame::bDlgBoxPress_Barrita(short msX, short msY)
{
	short sX, sY;
	int i;
	sX = m_stDialogBoxInfo[48].sX;
	sY = m_stDialogBoxInfo[48].sY;

	if (!m_bCtrlPressed) return FALSE;

	for (i = 0; i < ShowBarTotal; i++)
	{
		if ((msX >= sX + 17 + (i * 42)) && (msX < sX + 54 + (i * 42)) && (msY >= sY + 15) && (msY < sY + 53))
		{
			if (NewShortcuts[i] != NULL)
			{
				m_stMCursor.sSelectedObjectID = NewShortcuts[i];
				if (NewShortcuts[i] > 99)
				{
					m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_MAGIC;
					m_stMCursor.sDistX = 20;
					m_stMCursor.sDistY = 15;
					TimeMagicSelected = timeGetTime() - 200;
				}
				else
				{
					m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_ITEM;
					m_stMCursor.sDistX = 0;
					m_stMCursor.sDistY = 0;
					LostShortCut = TRUE;
				}
				NewShortcuts[i] = -1;
				SaveShortCutsList();
				return TRUE;
			}
			else return FALSE;
		}
	}
	return FALSE;
}

BOOL CGame::bDlgBoxPress_MagicWindow(short msX, short msY)
{
	short sX, sY;
	int i, iYloc, iCPivot;
	sX = m_stDialogBoxInfo[3].sX;
	sY = m_stDialogBoxInfo[3].sY;
	iCPivot = m_stDialogBoxInfo[3].sView * 10;
	iYloc = 0;
	for (i = 0; i <= 9; i++)
	{
		if ((m_cMagicMastery[iCPivot + i] != NULL) && (m_pMagicCfgList[iCPivot + i] != NULL))
		{
			if ((msX >= sX + 30) && (msX <= sX + 240) && (msY >= sY + 70 + iYloc) && (msY <= sY + 70 + 18 + iYloc))
			{
				TimeMagicSelected = timeGetTime();
				m_stMCursor.cSelectedObjectType = DEF_SELECTEDOBJTYPE_MAGIC;
				m_stMCursor.sSelectedObjectID = iCPivot + i + 100; //+100 para diferenciarlo de los objetos
				m_stMCursor.sDistX = 20;
				m_stMCursor.sDistY = 15;
				return TRUE;
			}
			iYloc += 18;
		}
	}
	return FALSE;
}

BOOL CGame::_bCheckDraggingMagicRelease(short msX, short msY)
{
	int i;
	char cDlgID;
	for (i = 0; i < DEF_MAXDIALOGBOX; i++)
		if (m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i] != NULL) {
			cDlgID = m_cDialogBoxOrder[DEF_MAXDIALOGBOX - 1 - i];
			if ((m_stDialogBoxInfo[cDlgID].sX < msX) && ((m_stDialogBoxInfo[cDlgID].sX + m_stDialogBoxInfo[cDlgID].sSizeX) > msX) &&
				(m_stDialogBoxInfo[cDlgID].sY < msY) && ((m_stDialogBoxInfo[cDlgID].sY + m_stDialogBoxInfo[cDlgID].sSizeY) > msY)) {
				EnableDialogBox(cDlgID, NULL, NULL, NULL);

				switch (cDlgID) {
					case 48:
						bMagicDrop_Panel(msX, msY);
						break;
				}
				return TRUE;
			}
		}
	return FALSE;
}

void CGame::bMagicDrop_Panel(short msX, short msY)
{
	short sX, sY;
	int i, iResultado;
	if (m_cCommand < 0) return;
	if (m_cMagicMastery[m_stMCursor.sSelectedObjectID - 100] == NULL) return;
	if (m_pMagicCfgList[m_stMCursor.sSelectedObjectID - 100] == NULL) return;

	sX = m_stDialogBoxInfo[48].sX;
	sY = m_stDialogBoxInfo[48].sY;

	for (i = 0; i < ShowBarTotal; i++) if ((msX >= sX + 17 + (i * 42)) && (msX < sX + 54 + (i * 42)) && (msY >= sY + 15) && (msY < sY + 53)) iResultado = i;

	NewShortcuts[iResultado] = m_stMCursor.sSelectedObjectID;
	SaveShortCutsList();
}

void CGame::bItemDrop_Shortcut(short msX, short msY)
{
	short sX, sY;
	int i, iResultado;
	if (m_cCommand < 0) return;

	sX = m_stDialogBoxInfo[48].sX;
	sY = m_stDialogBoxInfo[48].sY;

	for (i = 0; i < ShowBarTotal; i++) if ((msX >= sX + 17 + (i * 42)) && (msX < sX + 54 + (i * 42)) && (msY >= sY + 15) && (msY < sY + 53)) iResultado = i;

	NewShortcuts[iResultado] = m_stMCursor.sSelectedObjectID;
	SaveShortCutsList();

}

void CGame::ShowSetting(short Dialog, short msX, short msY, char cLB)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[Dialog].sX;
	sY = m_stDialogBoxInfo[Dialog].sY;

	wsprintf(G_cTxt, "Settings - Page 1");
	PutString_SprFont2(sX + 35 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);
	PutString_SprFont2(sX + 35, sY + 75, G_cTxt, 255, 255, 255);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 221, sY + 78, 12, TRUE, m_bDialogTrans);
	if (showsetts) PutAlignedString(sX + 221, sX + 255, sY + 78, DRAW_DIALOGBOX_SYSMENU_ON1, 255, 255, 255);
	else PutAlignedString(sX + 221, sX + 255, sY + 78, DRAW_DIALOGBOX_SYSMENU_OFF1, 255, 255, 255);

	// Guide Map
	PutString(sX + 35 - 1, sY + 100, "Mapa", RGB(255, 200, 0));
	PutString(sX + 35, sY + 100, "Mapa", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 67, sY + 100, 12, TRUE, m_bDialogTrans);
	if (m_bIsDialogEnabled[9]) PutAlignedString(sX + 67, sX + 101, sY + 100, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 67, sX + 101, sY + 100, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Zoom
	PutString(sX + 107 - 1, sY + 100, "Zoom", RGB(255, 200, 0));
	PutString(sX + 107, sY + 100, "Zoom", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 137, sY + 100, 12, TRUE, m_bDialogTrans);
	if (m_bZoomMap) PutAlignedString(sX + 137, sX + 171, sY + 100, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 137, sX + 171, sY + 100, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Auto SS EK
	PutString(sX + 176 - 1, sY + 100, "Auto SS", RGB(255, 200, 0));
	PutString(sX + 176, sY + 100, "Auto SS", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 221, sY + 100, 12, TRUE, m_bDialogTrans);
	if (AutoSSEK) PutAlignedString(sX + 221, sX + 255, sY + 100, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 221, sX + 255, sY + 100, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Sound
	PutString(sX + 34 - 1, sY + 120, DRAW_DIALOGBOX_SYSMENU_SOUND, RGB(255, 200, 0));
	PutString(sX + 34, sY + 120, DRAW_DIALOGBOX_SYSMENU_SOUND, RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 184, sY + 122, 12, TRUE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 71, sY + 127, 11, TRUE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 71 + m_cSoundVolume, sY + 127, 8);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 221, sY + 122, 12, TRUE, m_bDialogTrans);
	wsprintf(G_cTxt, "%d", m_cSoundVolume);
	PutAlignedString(sX + 184, sX + 218, sY + 122, G_cTxt, 255, 255, 255);

	if (m_bSoundFlag) {
		if (m_bSoundStat) PutAlignedString(sX + 221, sX + 255, sY + 122, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
		else PutAlignedString(sX + 221, sX + 255, sY + 122, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);
	}
	else PutString(sX + 221, sY + 122, DRAW_DIALOGBOX_SYSMENU_DISABLED, RGB(100, 100, 100));

	// Music
	PutString(sX + 35 - 1, sY + 140, DRAW_DIALOGBOX_SYSMENU_MUSIC, RGB(255, 200, 0));
	PutString(sX + 35, sY + 140, DRAW_DIALOGBOX_SYSMENU_MUSIC, RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 184, sY + 142, 12, TRUE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 71, sY + 147, 11, TRUE, m_bDialogTrans);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 71 + m_cMusicVolume, sY + 147, 8);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 221, sY + 142, 12, TRUE, m_bDialogTrans);
	wsprintf(G_cTxt, "%d", m_cMusicVolume);
	PutAlignedString(sX + 184, sX + 218, sY + 142, G_cTxt, 255, 255, 255);

	if (m_bSoundFlag) {
		if (m_bMusicStat) PutAlignedString(sX + 221, sX + 255, sY + 142, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
		else PutAlignedString(sX + 221, sX + 255, sY + 142, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);
	}
	else PutString(sX + 221, sY + 142, DRAW_DIALOGBOX_SYSMENU_DISABLED, RGB(100, 100, 100));

	// General chat
	PutString(sX + 35 - 1, sY + 160, "General chat", RGB(255, 200, 0));
	PutString(sX + 35, sY + 160, "General chat", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 105, sY + 160, 10, TRUE, m_bDialogTrans);
	if (m_bShout) PutAlignedString(sX + 105, sX + 154, sY + 160, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 105, sX + 154, sY + 160, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Wisper
	PutString(sX + 160 - 1, sY + 160, DRAW_DIALOGBOX_SYSMENU_WHISPER, RGB(255, 200, 0));
	PutString(sX + 160, sY + 160, DRAW_DIALOGBOX_SYSMENU_WHISPER, RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 206, sY + 160, 10, TRUE, m_bDialogTrans);
	if (m_bWhisper) PutAlignedString(sX + 206, sX + 255, sY + 160, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 206, sX + 255, sY + 160, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Barra Grande / Chica
	PutString(sX + 35 - 1, sY + 180, "Icon Bar Type", RGB(255, 200, 0));
	PutString(sX + 35, sY + 180, "Icon Bar Type", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 110, sY + 180, 10, TRUE, m_bDialogTrans);

	switch (BigBar)
	{
		case 0:
			PutAlignedString(sX + 110, sX + 159, sY + 180, "Big", 255, 255, 255);
			break;
		case 1:
			PutAlignedString(sX + 110, sX + 159, sY + 180, "Small", 255, 255, 255);
			break;
		case 2:
			PutAlignedString(sX + 110, sX + 159, sY + 180, "Off", 255, 255, 255);
			break;
	}

	// Grid
	PutString(sX + 165 - 1, sY + 180, "Show Grid", RGB(255, 200, 0));
	PutString(sX + 165, sY + 180, "Show Grid", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 220, sY + 180, 12, TRUE, m_bDialogTrans);
	if (m_bGrid) PutAlignedString(sX + 220, sX + 254, sY + 180, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 220, sX + 254, sY + 180, DRAW_DIALOGBOX_SYSMENU_OFF, 255, 255, 255);

	// Grid Color
	PutString(sX + 35 - 1, sY + 200, "Grid Color", RGB(255, 200, 0));
	PutString(sX + 35, sY + 200, "Grid Color", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 90, sY + 200, 10, TRUE, m_bDialogTrans);
	if ((m_sGrid == 0) || (m_sGrid == 1)) PutAlignedString(sX + 90, sX + 139, sY + 200, "Black", 0, 0, 0);
	if ((m_sGrid == 2) || (m_sGrid == 3)) PutAlignedString(sX + 90, sX + 139, sY + 200, "Red", 255, 0, 0);
	if ((m_sGrid == 4) || (m_sGrid == 5)) PutAlignedString(sX + 90, sX + 139, sY + 200, "Green", 0, 255, 0);
	if ((m_sGrid == 6) || (m_sGrid == 7)) PutAlignedString(sX + 90, sX + 139, sY + 200, "Blue", 0, 0, 255);
	if ((m_sGrid == 8) || (m_sGrid == 9)) PutAlignedString(sX + 90, sX + 139, sY + 200, "White", 255, 255, 255);

	// Grid Transparency
	PutString(sX + 155 - 1, sY + 200, "Grid Transp.", RGB(255, 200, 0));
	PutString(sX + 155, sY + 200, "Grid Transp.", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 220, sY + 200, 12, TRUE, m_bDialogTrans);
	if (m_bGridTrans) PutAlignedString(sX + 220, sX + 254, sY + 200, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 220, sX + 254, sY + 200, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Transparency
	PutString(sX + 35 - 1, sY + 220, DRAW_DIALOGBOX_SYSMENU_TRANSPARENCY, RGB(255, 200, 0));
	PutString(sX + 35, sY + 220, DRAW_DIALOGBOX_SYSMENU_TRANSPARENCY, RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 100, sY + 220, 12, TRUE, m_bDialogTrans);
	if (m_bDialogTrans) PutAlignedString(sX + 100, sX + 134, sY + 220, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 100, sX + 134, sY + 220, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Detail level
	PutString(sX + 140 - 1, sY + 220, DRAW_DIALOGBOX_SYSMENU_DETAILLEVEL, RGB(255, 200, 0));
	PutString(sX + 140, sY + 220, DRAW_DIALOGBOX_SYSMENU_DETAILLEVEL, RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 206, sY + 220, 10, TRUE, m_bDialogTrans);
	switch (m_cDetailLevel)
	{
		case 0:
			PutAlignedString(sX + 206, sX + 255, sY + 220, DRAW_DIALOGBOX_SYSMENU_LOW, 255, 255, 255);
			break;
		case 1:
			PutAlignedString(sX + 206, sX + 255, sY + 220, DRAW_DIALOGBOX_SYSMENU_NORMAL, 255, 255, 255);
			break;
		case 2:
			PutAlignedString(sX + 206, sX + 255, sY + 220, DRAW_DIALOGBOX_SYSMENU_HIGH, 255, 255, 255);
			break;
		default:
			PutAlignedString(sX + 206, sX + 255, sY + 220, "USER", 255, 255, 255);
			break;
	}

	// Show Item Ground
	PutString(sX + 35 - 1, sY + 240, "Item Ground", RGB(255, 200, 0));
	PutString(sX + 35, sY + 240, "Item Ground", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 100, sY + 240, 10, TRUE, m_bDialogTrans);
	if (DEF_SPRID_ITEMGROUND_PIVOTPOINT == ItemGround) PutAlignedString(sX + 100, sX + 149, sY + 240, "Small", 255, 255, 255);
	else PutAlignedString(sX + 100, sX + 149, sY + 240, "Big", 200, 200, 200);

	// Windows Key
	PutString(sX + 165 - 1, sY + 240, "Win Key", RGB(255, 200, 0));
	PutString(sX + 165, sY + 240, "Win Key.", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 220, sY + 240, 12, TRUE, m_bDialogTrans);
	if (m_windowsKey) PutAlignedString(sX + 220, sX + 254, sY + 240, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 220, sX + 254, sY + 240, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	PutString(sX + 26, sY + 250, "_________________________________", RGB(255, 255, 255));

	wsprintf(G_cTxt, "Detail Setting");
	PutString_SprFont2(sX + 35 - 1, sY + 270 - 1, G_cTxt, 0, 0, 0);
	PutString_SprFont2(sX + 35, sY + 270, G_cTxt, 255, 255, 255);

	// Glares
	PutString(sX + 35 - 1, sY + 290, "Show Glares", RGB(255, 200, 0));
	PutString(sX + 35, sY + 290, "Show Glares", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 105, sY + 290, 12, TRUE, m_bDialogTrans);
	if (Glares) PutAlignedString(sX + 105, sX + 139, sY + 290, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 105, sX + 139, sY + 290, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Stars
	PutString(sX + 155 - 1, sY + 290, "Show Stars", RGB(255, 200, 0));
	PutString(sX + 155, sY + 290, "Show Stars", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 220, sY + 290, 12, TRUE, m_bDialogTrans);
	if (Stars) PutAlignedString(sX + 220, sX + 255, sY + 290, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 220, sX + 255, sY + 290, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Shadows
	PutString(sX + 35 - 1, sY + 310, "Show Shadows", RGB(255, 200, 0));
	PutString(sX + 35, sY + 310, "Show Shadows", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 105, sY + 310, 12, TRUE, m_bDialogTrans);
	if (Shadows) PutAlignedString(sX + 105, sX + 139, sY + 310, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 105, sX + 139, sY + 310, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Colors
	PutString(sX + 155 - 1, sY + 310, "Show Colors", RGB(255, 200, 0));
	PutString(sX + 155, sY + 310, "Show Colors", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 220, sY + 310, 12, TRUE, m_bDialogTrans);
	if (Colors) PutAlignedString(sX + 220, sX + 255, sY + 310, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 220, sX + 255, sY + 310, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Trees
	PutString(sX + 35 - 1, sY + 330, "Show Trees", RGB(255, 200, 0));
	PutString(sX + 35, sY + 330, "Show Trees", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 105, sY + 330, 12, TRUE, m_bDialogTrans);
	if (Trees) PutAlignedString(sX + 105, sX + 139, sY + 330, DRAW_DIALOGBOX_SYSMENU_OFF, 255, 255, 255);
	else PutAlignedString(sX + 105, sX + 139, sY + 330, DRAW_DIALOGBOX_SYSMENU_ON, 200, 200, 200);

	// Steps
	PutString(sX + 155 - 1, sY + 330, "Show Steeps", RGB(255, 200, 0));
	PutString(sX + 155, sY + 330, "Show Steeps", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 220, sY + 330, 12, TRUE, m_bDialogTrans);
	if (Steeps) PutAlignedString(sX + 220, sX + 255, sY + 330, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 220, sX + 255, sY + 330, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Afks
	PutString(sX + 35 - 1, sY + 350, "Show Afks", RGB(255, 200, 0));
	PutString(sX + 35, sY + 350, "Show Afks", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 105, sY + 350, 12, TRUE, m_bDialogTrans);
	if (Afks) PutAlignedString(sX + 105, sX + 139, sY + 350, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 105, sX + 139, sY + 350, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	// Shadows Box
	PutString(sX + 155 - 1, sY + 350, "Items Boxs", RGB(255, 200, 0));
	PutString(sX + 155, sY + 350, "Items Boxs", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 220, sY + 350, 12, TRUE, m_bDialogTrans);
	if (ShadowsBox) PutAlignedString(sX + 220, sX + 255, sY + 350, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 220, sX + 255, sY + 350, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	PutString(sX + 26, sY + 360, "_________________________________", RGB(255, 255, 255));

	if ((msX > sX + 35) && (msX < sX + 109) && (msY > sY + 378) && (msY < sY + 398))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 35, sY + 378, 7);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 35, sY + 378, 6);

	if ((msX > sX + 175) && (msX < sX + 249) && (msY > sY + 378) && (msY < sY + 398))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 175, sY + 378, 17);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 175, sY + 378, 16);


	if ((cLB != 0) && (iGetTopDialogBoxIndex() == Dialog))
	{
		if ((msX >= sX + 66) && (msX <= sX + 178) && (msY >= sY + 122) && (msY <= sY + 136))
		{
			m_cSoundVolume = msX - (sX + 77);
			if (m_cSoundVolume > 100) m_cSoundVolume = 100;
			if (m_cSoundVolume < 0) m_cSoundVolume = 0;
		}
		if ((msX >= sX + 66) && (msX <= sX + 178) && (msY >= sY + 142) && (msY <= sY + 156))
		{
			m_cMusicVolume = msX - (sX + 77);
			if (m_cMusicVolume > 100) m_cMusicVolume = 100;
			if (m_cMusicVolume < 0) m_cMusicVolume = 0;
			if (m_bSoundFlag)
			{
				int iVol;
				iVol = (m_cMusicVolume - 100) * 20;
				if (iVol > 0) iVol = 0;
				if (iVol < -10000) iVol = -10000;
				if (m_pBGM != NULL)
				{
					m_pBGM->bStop(TRUE);
					m_pBGM->Play(FALSE, 0, iVol);
				}
			}
		}
	}
	else m_stDialogBoxInfo[Dialog].bIsScrollSelected = FALSE;
}

void CGame::ClicSetting(short Dialog, short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[Dialog].sX;
	sY = m_stDialogBoxInfo[Dialog].sY;

	// m_bSetting
	if ((msX >= sX + 221) && (msX <= sX + 255) && (msY >= sY + 78) && (msY <= sY + 92)) showsetts = !showsetts;

	// Guide Map
	if ((msX >= sX + 34) && (msX <= sX + 101) && (msY >= sY + 101) && (msY <= sY + 115))
	{
		if (m_bIsDialogEnabled[9]) DisableDialogBox(9);
		else EnableDialogBox(9, 0, 0, 0, NULL);
	}

	// Zoom Map
	if ((msX >= sX + 106) && (msX <= sX + 171) && (msY >= sY + 100) && (msY <= sY + 115)) m_bZoomMap = !m_bZoomMap;

	// Auto SS EK
	if ((msX >= sX + 175) && (msX <= sX + 255) && (msY >= sY + 100) && (msY <= sY + 115)) AutoSSEK = !AutoSSEK;

	// Sound
	if ((msX >= sX + 221) && (msX <= sX + 255) && (msY >= sY + 122) && (msY <= sY + 137))
	{
		if (m_bSoundFlag)
		{
			if (m_bSoundStat == TRUE)
			{
				m_pESound[38]->bStop();
				m_bSoundStat = FALSE;
				AddEventList(NOTIFY_MSG_SOUND_OFF, 10);
			}
			else
			{
				m_bSoundStat = TRUE;
				AddEventList(NOTIFY_MSG_SOUND_ON, 10);
			}
		}
	}

	// Music
	if ((msX >= sX + 221) && (msX <= sX + 255) && (msY >= sY + 142) && (msY <= sY + 157))
	{
		if (m_bSoundFlag)
		{
			if (m_bMusicStat == TRUE) 	// Music Off
			{
				m_bMusicStat = FALSE;
				AddEventList(NOTIFY_MSG_MUSIC_OFF, 10);
				if (m_bSoundFlag)
				{
					if (m_pBGM != NULL)
					{
						m_pBGM->bStop();
						delete m_pBGM;
						m_pBGM = NULL;
					}
				}
			}
			else // Music On
			{
				if (m_bSoundFlag)
				{
					m_bMusicStat = TRUE;
					AddEventList(NOTIFY_MSG_MUSIC_ON, 10);
					StartBGM(false);
				}
			}
		}
	}

	// Shout
	if ((msX >= sX + 34) && (msX <= sX + 154) && (msY >= sY + 160) && (msY <= sY + 175))
	{
		if (m_bShout == TRUE)
		{
			m_bShout = FALSE;
			AddEventList(BCHECK_LOCAL_CHAT_COMMAND9, 10);
		}
		else
		{
			m_bShout = TRUE;
			AddEventList(BCHECK_LOCAL_CHAT_COMMAND8, 10);
		}
	}

	// Wispers
	if ((msX >= sX + 159) && (msX <= sX + 255) && (msY >= sY + 160) && (msY <= sY + 175))
	{
		if (m_bWhisper == TRUE)
		{
			m_bWhisper = FALSE;
			AddEventList(BCHECK_LOCAL_CHAT_COMMAND7, 10);
		}
		else
		{
			m_bWhisper = TRUE;
			AddEventList(BCHECK_LOCAL_CHAT_COMMAND6, 10);
		}
	}

	// Bar Type
	if ((msX >= sX + 34) && (msX <= sX + 159) && (msY >= sY + 180) && (msY <= sY + 195))
	{
		switch (BigBar)
		{
			case 0:
				BigBar = 1;
				DisableDialogBox(30);
				EnableDialogBox(44, NULL, NULL, NULL);
				break;
			case 1:
				BigBar = 2;
				DisableDialogBox(44);
				break;
			case 2:
				BigBar = 0;
				EnableDialogBox(30, NULL, NULL, NULL);
				break;
		}
	}


	// Show Grid
	if ((msX >= sX + 165) && (msX <= sX + 254) && (msY >= sY + 180) && (msY <= sY + 195)) m_bGrid = !m_bGrid;

	// Grid Color
	if ((msX >= sX + 34) && (msX <= sX + 139) && (msY >= sY + 200) && (msY <= sY + 215))
	{
		if (m_sGrid >= 8)
			if (m_bGridTrans)
				m_sGrid = 1;
			else
				m_sGrid = 0;
		else
			m_sGrid += 2;
	}

	// Grid Transparency
	if ((msX >= sX + 154) && (msX <= sX + 254) && (msY >= sY + 200) && (msY <= sY + 215))
	{
		if (m_bGridTrans)
		{
			m_sGrid--;
			m_bGridTrans = FALSE;
		}
		else
		{
			m_sGrid++;
			m_bGridTrans = TRUE;
		}
	}

	// Transparency Change
	if ((msX >= sX + 34) && (msX <= sX + 134) && (msY >= sY + 220) && (msY <= sY + 235)) m_bDialogTrans = !m_bDialogTrans;


	// Detail Level
	if ((msX >= sX + 140) && (msX <= sX + 255) && (msY >= sY + 220) && (msY <= sY + 235))
	{
		if (m_cDetailLevel == 3)
			m_cDetailLevel = 0;
		else
			m_cDetailLevel++;

		switch (m_cDetailLevel)
		{
			case 0:
				AddEventList(NOTIFY_MSG_DETAIL_LEVEL_LOW, 10);
				break;
			case 1:
				AddEventList(NOTIFY_MSG_DETAIL_LEVEL_MEDIUM, 10);
				break;
			case 2:
				AddEventList(NOTIFY_MSG_DETAIL_LEVEL_HIGH, 10);
				break;
			case 3:
				AddEventList(NOTIFY_MSG_DETAIL_LEVEL_USER, 10);
				break;
		}
		PlaySound('E', 14, 5);
	}

	// Item Grounds
	if ((msX >= sX + 35) && (msX <= sX + 149) && (msY >= sY + 240) && (msY <= sY + 255))
		if (DEF_SPRID_ITEMGROUND_PIVOTPOINT == ItemGround) ItemGround = DEF_SPRID_ITEMPACK_PIVOTPOINT;
		else ItemGround = DEF_SPRID_ITEMGROUND_PIVOTPOINT;

		// Windows Key
		if ((msX >= sX + 154) && (msX <= sX + 254) && (msY >= sY + 240) && (msY <= sY + 255))
			if (m_windowsKey) m_windowsKey = false;
			else m_windowsKey = true;

			/* Effects Settings */

			// Glares
			if ((msX >= sX + 35) && (msX <= sX + 139) && (msY >= sY + 290) && (msY <= sY + 305))
			{
				if (Glares) Glares = FALSE;
				else Glares = TRUE;
				m_cDetailLevel = 3;
			}

			// Stars 
			if ((msX >= sX + 155) && (msX <= sX + 254) && (msY >= sY + 290) && (msY <= sY + 305))
			{
				if (Stars) Stars = FALSE;
				else Stars = TRUE;
				m_cDetailLevel = 3;
			}

			// Shadows
			if ((msX >= sX + 35) && (msX <= sX + 139) && (msY >= sY + 310) && (msY <= sY + 325))
			{
				if (Shadows) Shadows = FALSE;
				else Shadows = TRUE;
				m_cDetailLevel = 3;
			}

			// Colors
			if ((msX >= sX + 155) && (msX <= sX + 254) && (msY >= sY + 310) && (msY <= sY + 325))
			{
				if (Colors) Colors = FALSE;
				else Colors = TRUE;
				m_cDetailLevel = 3;
			}

			// Trees
			if ((msX >= sX + 35) && (msX <= sX + 139) && (msY >= sY + 330) && (msY <= sY + 345))
			{
				if (Trees) Trees = FALSE;
				else Trees = TRUE;
				m_cDetailLevel = 3;
			}

			// Steeps
			if ((msX >= sX + 155) && (msX <= sX + 254) && (msY >= sY + 330) && (msY <= sY + 345))
			{
				if (Steeps) Steeps = FALSE;
				else Steeps = TRUE;
				m_cDetailLevel = 3;
			}

			// Afks
			if ((msX >= sX + 35) && (msX <= sX + 139) && (msY >= sY + 350) && (msY <= sY + 365))
			{
				if (Afks) Afks = FALSE;
				else Afks = TRUE;
				m_cDetailLevel = 3;
			}

			// ShadowsBox
			if ((msX >= sX + 155) && (msX <= sX + 254) && (msY >= sY + 350) && (msY <= sY + 365))
			{
				if (ShadowsBox) ShadowsBox = FALSE;
				else ShadowsBox = TRUE;
				m_cDetailLevel = 3;
			}

			if ((msX > sX + 35) && (msX < sX + 109) && (msY > sY + 378) && (msY < sY + 398))
			{
				CreateSettingsCFG();
				AddEventList("Settings Saved");
				ReadSettingsCFG();
			}

			if ((msX > sX + 175) && (msX < sX + 249) && (msY > sY + 378) && (msY < sY + 398))
			{
				ReadSettingsCFG();
				DisableDialogBox(Dialog);
				return;
			}
}
/*

void CGame::ShowSetting2(short Dialog, short msX, short msY, char cLB)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[Dialog].sX;
	sY = m_stDialogBoxInfo[Dialog].sY;

	m_stDialogBoxInfo[Dialog].bIsScrollSelected = FALSE;

	wsprintf(G_cTxt, "More Setting");
	PutString_SprFont(sX + 90 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);
	PutString_SprFont(sX + 90, sY + 75, G_cTxt, 255, 200, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 221, sY + 78, 12, TRUE, m_bDialogTrans);
	if (m_bSetting) PutAlignedString(sX + 221, sX + 255, sY + 78, DRAW_DIALOGBOX_SYSMENU_ON1, 255, 255, 255);
	else PutAlignedString(sX + 221, sX + 255, sY + 78, DRAW_DIALOGBOX_SYSMENU_OFF1, 200, 200, 200);

	PutString(sX + 26, sY + 95, "_________________________________", RGB(255, 255, 255));

	//Colors steeps
	PutString(sX + 86 - 1, sY + 120, "Red Steps", RGB(255, 200, 0));
	PutString(sX + 86, sY + 120, "Red Steps", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 120, 12, TRUE, m_bDialogTrans);
	if (RedSteeps) PutAlignedString(sX + 167, sX + 201, sY + 120, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201, sY + 120, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);;


	//CandyGrandes
	PutString(sX + 86 - 1, sY + 140, "Candy Size", RGB(255, 200, 0));
	PutString(sX + 86, sY + 140, "Candy Size", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 140, 12, TRUE, m_bDialogTrans);
	if (CandySize) PutAlignedString(sX + 167, sX + 201, sY + 140, DRAW_DIALOGBOX_SYSMENU_ON2, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201, sY + 140, DRAW_DIALOGBOX_SYSMENU_OFF2, 200, 200, 200);

	//Low Fps Sprite
	PutString(sX + 86 - 1, sY + 160, "Magics Low Fps", RGB(255, 200, 0));
	PutString(sX + 86, sY + 160, "Magics Low Fps", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 160, 12, TRUE, m_bDialogTrans);
	if (LowSprites) PutAlignedString(sX + 167, sX + 201, sY + 160, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201, sY + 160, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	//Daño Escalonado
	PutString(sX + 86 - 1, sY + 180, "Stagger Dmg", RGB(255, 200, 0));
	PutString(sX + 86, sY + 180, "Stagger Dmg", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 180, 12, TRUE, m_bDialogTrans);
	if (StaggerDmg) PutAlignedString(sX + 167, sX + 201, sY + 180, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201, sY + 180, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	//Techos Off
	PutString(sX + 86 - 1, sY + 200, "Roofs", RGB(255, 200, 0));
	PutString(sX + 86, sY + 200, "Roofs", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 200, 12, TRUE, m_bDialogTrans);
	if (Roofs) PutAlignedString(sX + 167, sX + 201, sY + 200, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201, sY + 200, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	//TransBag
	PutString(sX + 86 - 1, sY + 220, "Transp Bag", RGB(255, 200, 0));
	PutString(sX + 86, sY + 220, "Transp Bag", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 220, 12, TRUE, m_bDialogTrans);
	if (TransBag) PutAlignedString(sX + 167, sX + 201, sY + 220, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201, sY + 220, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	//Npc Healt Bar
	PutString(sX + 86 - 1, sY + 240, "Npc Healt Bar", RGB(255, 200, 0));
	PutString(sX + 86, sY + 240, "Npc Healt Bar", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 240, 12, TRUE, m_bDialogTrans);
	if (BarraNpc) PutAlignedString(sX + 167, sX + 201, sY + 240, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201, sY + 240, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	//Show shinning
	PutString(sX + 86 - 1, sY + 260, "Show Shinning", RGB(255, 200, 0));
	PutString(sX + 86, sY + 260, "Show Shinning", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167 + 40, sY + 260, 12, TRUE, m_bDialogTrans);
	if (ShowShin) PutAlignedString(sX + 167 + 40, sX + 201 + 40, sY + 260, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201 + 40, sY + 260, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	//Show shinning
	PutString(sX + 86 - 1, sY + 280, "New Mouse Movement", RGB(255, 200, 0));
	PutString(sX + 86, sY + 280, "New Mouse Movement", RGB(255, 200, 0));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 280, 12, TRUE, m_bDialogTrans);
	if (m_DInput.m_bModernMouse) PutAlignedString(sX + 167, sX + 201, sY + 280, DRAW_DIALOGBOX_SYSMENU_ON, 255, 255, 255);
	else PutAlignedString(sX + 167, sX + 201, sY + 280, DRAW_DIALOGBOX_SYSMENU_OFF, 200, 200, 200);

	/ *PutString(sX + 26, sY + 255, "_________________________________", RGB(255, 255, 255));

	wsprintf(G_cTxt, "Resolution Setting");
	PutString_SprFont(sX + 75 - 1, sY + 270 - 1, G_cTxt, 0, 0, 0);
	PutString_SprFont(sX + 75, sY + 270, G_cTxt, 255, 200, 0);

	// Resolution
	PutString(sX + 86 - 1, sY + 300, "Resolution", RGB(45, 25, 25));
	PutString(sX + 86, sY + 300, "Resolution", RGB(45, 25, 25));
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167, sY + 300, 12, TRUE, m_bDialogTrans);

	switch (Resolution)
	{
	case 0:
	PutAlignedString(sX + 167, sX + 205, sY + 300, "1024", 255, 255, 255);
	break;
	case 1:
	PutAlignedString(sX + 167, sX + 201, sY + 300, "800", 255, 255, 255);
	break;
	case 2:
	PutAlignedString(sX + 167, sX + 201, sY + 300, "640", 255, 255, 255);
	break;
	}* /


	PutString(sX + 26, sY + 360, "_________________________________", RGB(255, 255, 255));

	if ((msX > sX + 35) && (msX < sX + 109) && (msY > sY + 378) && (msY < sY + 398))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 35, sY + 378, 7);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 35, sY + 378, 6);

	if ((msX > sX + 175) && (msX < sX + 249) && (msY > sY + 378) && (msY < sY + 398))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 175, sY + 378, 17);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 175, sY + 378, 16);

}*/

void CGame::ShowSetting2(short Dialog, short msX, short msY, char cLB)
{
	short sX = m_stDialogBoxInfo[Dialog].sX;
	short sY = m_stDialogBoxInfo[Dialog].sY;

	m_stDialogBoxInfo[Dialog].bIsScrollSelected = FALSE;

	wsprintf(G_cTxt, "Settings - Page 2");
	PutString_SprFont2(sX + 35 - 1, sY + 75 - 1, G_cTxt, 0, 0, 0);
	PutString_SprFont2(sX + 35, sY + 75, G_cTxt, 255, 255, 255);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 221, sY + 78, 12, TRUE, TRUE);
	if (showsetts) PutAlignedString(sX + 221, sX + 255, sY + 78, DRAW_DIALOGBOX_SYSMENU_ON1, 255, 255, 255);
	else PutAlignedString(sX + 221, sX + 255, sY + 78, DRAW_DIALOGBOX_SYSMENU_OFF1, 255, 255, 255);

	// Setting options
	struct SettingOption {
		const char* label;
		short offsetY;
		bool* state;
		const char* onStyle;
		const char* offStyle;
	};

	SettingOption options[] = {
		{ "Red Steps", 120, &RedSteeps, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Candy Size", 140, &CandySize, DRAW_DIALOGBOX_SYSMENU_ON2, DRAW_DIALOGBOX_SYSMENU_OFF2 },
		{ "Magics Low Fps", 160, &LowSprites, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Stagger Dmg", 180, &StaggerDmg, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Roofs", 200, &Roofs, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Character Shines", 220, &bPlayerShines, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Npc Healt Bar", 240, &BarraNpc, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Show Shinning", 260, &ShowShin, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Modern Mouse Movement", 280, &m_DInput.m_bModernMouse, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Old Camera", 300, &m_bOldCamera, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Ping / Fps / Time", 320, &m_bShowTiming, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
		{ "Quest Helper", 340, &m_bQuestHelper, DRAW_DIALOGBOX_SYSMENU_ON, DRAW_DIALOGBOX_SYSMENU_OFF },
	};

	for (const auto& option : options) {
		PutString(sX + 85 - 45, sY + option.offsetY, (char*)option.label, RGB(255, 200, 0));
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GRID, sX + 167 + 40, sY + option.offsetY, 12, TRUE, TRUE);

		if (*(option.state)) {
			PutAlignedString(sX + 167 + 40, sX + 201 + 40, sY + option.offsetY, (char*)option.onStyle, 255, 255, 255);
		}
		else {
			PutAlignedString(sX + 167 + 40, sX + 201 + 40, sY + option.offsetY, (char*)option.offStyle, 200, 200, 200);
		}
	}


	// Divider lines
	PutString(sX + 26, sY + 95, "_________________________________", RGB(255, 255, 255));
	PutString(sX + 26, sY + 360, "_________________________________", RGB(255, 255, 255));

	if ((msX > sX + 35) && (msX < sX + 109) && (msY > sY + 378) && (msY < sY + 398))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 35, sY + 378, 7);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 35, sY + 378, 6);

	if ((msX > sX + 175) && (msX < sX + 249) && (msY > sY + 378) && (msY < sY + 398))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 175, sY + 378, 17);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 175, sY + 378, 16);
}

void CGame::ClicSetting2(short Dialog, short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[Dialog].sX;
	sY = m_stDialogBoxInfo[Dialog].sY;

	// m_bSetting
	if ((msX >= sX + 221) && (msX <= sX + 255) && (msY >= sY + 78) && (msY <= sY + 92)) showsetts = !showsetts;

	//Colors steeps
	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 120) && (msY <= sY + 135))
	{
		if (RedSteeps)
		{
			RedSteeps = false;
			MakeEffectSpr("effect2", 10, 3, FALSE);
		}
		else
		{
			RedSteeps = true;
			MakeEffectSpr("effect2b", 10, 3, FALSE);
		}
	}

	//CandySize
	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 140) && (msY <= sY + 155))
	{
		if (CandySize)
		{
			CandySize = false;
			MakeSprite("item-pack", DEF_SPRID_ITEMPACK_PIVOTPOINT + 1, 6, FALSE);
		}
		else
		{
			CandySize = true;
			MakeSprite("item-packb", DEF_SPRID_ITEMPACK_PIVOTPOINT + 1, 6, FALSE);
		}
	}

	//Low Fps Sprite
	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 160) && (msY <= sY + 175))
	{
		if (LowSprites)
		{
			LowSprites = false;
			MakeEffectSpr("effect7", 45, 12, FALSE);
			MakeEffectSpr("effect11", 89, 14, FALSE);
			MakeEffectSpr("Magic-Effect", 168, 5, FALSE, FALSE);
		}
		else
		{
			LowSprites = true;
			MakeEffectSpr("effect7b", 45, 12, FALSE);
			MakeEffectSpr("effect11b", 89, 14, FALSE);
			MakeEffectSpr("Magic-Effectb", 168, 5, FALSE, FALSE);
		}
	}

	//Daño Escalonado
	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 180) && (msY <= sY + 195))
	{
		StaggerDmg = !StaggerDmg;
	}

	//Roofs
	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 200) && (msY <= sY + 215))
	{
		if (Roofs)
		{
			Roofs = false;
			MakeTileSpr("Tile422-429", 422, 8, TRUE);
			MakeTileSpr("Tile382-387", 382, 6, TRUE);
			MakeTileSpr("Tile370-381", 370, 12, TRUE);
			MakeTileSpr("objects7", 242, 7, TRUE);
		}
		else
		{
			Roofs = true;
			MakeTileSpr("Tile422-429b", 422, 8, TRUE);
			MakeTileSpr("Tile382-387b", 382, 6, TRUE);
			MakeTileSpr("Tile370-381b", 370, 12, TRUE);
			MakeTileSpr("objects7b", 242, 7, TRUE);
		}
	}

	//TransBag
	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 220) && (msY <= sY + 235))
	{
		if (bPlayerShines)
		{
			bPlayerShines = false;
			m_hPakFile = CreateFile("sprites\\GameDialog.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_INVENTORY] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialog", 7, FALSE);
				CloseHandle(m_hPakFile);
			}
		}
		else
		{
			bPlayerShines = true;
			m_hPakFile = CreateFile("sprites\\GameDialogb.pak", GENERIC_READ, NULL, NULL, OPEN_EXISTING, NULL, NULL);
			if (m_hPakFile != INVALID_HANDLE_VALUE) {
				m_pSprite[DEF_SPRID_INTERFACE_ND_INVENTORY] = new class CSprite(m_hPakFile, &m_DDraw, "GameDialogb", 7, FALSE);
				CloseHandle(m_hPakFile);
			}
		}
	}

	//Npc Healt Bar
	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 240) && (msY <= sY + 255))
	{
		BarraNpc = !BarraNpc;
	}

	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 260) && (msY <= sY + 275))
	{
		ShowShin = !ShowShin;		
	}

	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 280) && (msY <= sY + 295))
	{
		m_DInput.m_bModernMouse = !m_DInput.m_bModernMouse;
	}

	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 300) && (msY <= sY + 315))
	{
		m_bOldCamera = !m_bOldCamera;
	}

	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 320) && (msY <= sY + 335))
	{
		m_bShowTiming = !m_bShowTiming;
	}

	if ((msX >= sX + 157 + 40) && (msX <= sX + 201 + 40) && (msY >= sY + 340) && (msY <= sY + 355))
	{
		m_bQuestHelper = !m_bQuestHelper;
	}

	//resolution
	/*if ((msX >= sX + 157) && (msX <= sX + 201) && (msY >= sY + 300) && (msY <= sY + 315))
	{
		switch (Resolution)
		{
		case 0:
			Resolution = 1;
			C1024x768;
			break;
		case 1:
			Resolution = 2;
			C800x600;
			break;
		case 2:
			Resolution = 0;
			C640x480;
			break;
		}
	}*/

	//Boton Save
	if ((msX > sX + 35) && (msX < sX + 109) && (msY > sY + 378) && (msY < sY + 398))
	{
		CreateSettingsCFG();
		AddEventList("Settings Saved");
		ReadSettingsCFG();
	}

	//Boton Cancel
	if ((msX > sX + 175) && (msX < sX + 249) && (msY > sY + 378) && (msY < sY + 398))
	{
		ReadSettingsCFG();
		DisableDialogBox(Dialog);
		return;
	}
}
//////

void CGame::DrawDialogBox_Coins(short msX, short msY, short msZ, char cLB)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[57].sX;
	sY = m_stDialogBoxInfo[57].sY;
	short sizeX = m_stDialogBoxInfo[57].sSizeX;

	DrawShadowDialog2(sX, sY, 57);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "Trade Coin", 255, 255, 255);

	switch (m_stDialogBoxInfo[57].cMode) {
		case 0:
			ShowItemList(57, sX, sY, msX, msY, msZ, cLB);
			break;

		case -1:
			ShowMenuItems(sX, sY, msX, msY);
			break;

		default:
			ShowItemDetail(57, sX, sY, msX, msY, msZ);
			break;
	}
}

void CGame::DlgBoxClick_Coins(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[57].sX;
	sY = m_stDialogBoxInfo[57].sY;

	switch (m_stDialogBoxInfo[57].cMode) {
		case 0:
			ClicItemList(57, sX, sY, msX, msY);
			break;
		case -1:
			ClicMenuItems(57, sX, sY, msX, msY);
			break;

		default:
			ClicItemDetail(57, sX, sY, msX, msY);
			break;
	}
}

void CGame::NotifyMsg_EkAnnoucer(char * pData)
{
	int i;
	char * cp, cMsg[100], cType;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	memcpy(cMsg, cp, strlen(cp) + 1);
	cp += strlen(cp) + 1;

	cType = *cp;
	cp++;

	if (m_pEnemyKillList[DEF_TEXTDLGMAXLINES - 1] != NULL)
	{
		delete m_pEnemyKillList[DEF_TEXTDLGMAXLINES - 1];
		m_pEnemyKillList[DEF_TEXTDLGMAXLINES - 1] = NULL;
	}
	for (i = DEF_TEXTDLGMAXLINES - 2; i >= 0; i--)
	{
		m_pEnemyKillList[i + 1] = m_pEnemyKillList[i];
		m_pEnemyKillList[i] = NULL;
	}

	m_pEnemyKillList[0] = new class CMsg(cType, cMsg, NULL);

	AddEventList(cMsg, 12);
}

void CGame::DrawDialogBox_EKPKLog(short msX, short msY, short msZ, char cLB)
{
	short sX, sY;
	int iPointerLoc, iTotalLines;
	double d1, d2, d3;
	int i, j;
	short ShowLines = 17;

	sX = m_stDialogBoxInfo[59].sX;
	sY = m_stDialogBoxInfo[59].sY;
	short sizeX = m_stDialogBoxInfo[59].sSizeX;
	/*DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2, FALSE, m_bDialogTrans);*/

	DrawShadowDialog2(sX, sY, 59);
	PutCenterString_SpriteFont(sX, sX + sizeX, sY + 3, "List of kills", 255, 255, 255);

	if (m_stDialogBoxInfo[59].sV1 != 1)
		PutString2(sX + 40, sY + 30, "Enemy Kills", 0, 255, 0);
	else
		PutString2(sX + 40, sY + 30, "Enemy Kills", 255, 0, 0);

	if (m_stDialogBoxInfo[59].sV1 != 0)
		PutString2(sX + 130, sY + 30, "Criminals Kills", 0, 255, 0);
	else
		PutString2(sX + 130, sY + 30, "Criminals Kills", 255, 0, 0);

	iTotalLines = 0;
	for (i = 0; i < DEF_TEXTDLGMAXLINES; i++)
		if (m_pEnemyKillList[i] != NULL) iTotalLines++;

	if (iTotalLines > ShowLines) {
		if (iGetTopDialogBoxIndex() == 59 && msZ != 0)
		{
			m_stDialogBoxInfo[59].sView = m_stDialogBoxInfo[59].sView + msZ / 30;
			m_DInput.m_sZ = 0;
		}
		if (m_stDialogBoxInfo[59].sView < 0) m_stDialogBoxInfo[59].sView = 0;
		if (iTotalLines > ShowLines && m_stDialogBoxInfo[59].sView > iTotalLines - ShowLines)
			m_stDialogBoxInfo[59].sView = iTotalLines - ShowLines;

		d1 = (double)m_stDialogBoxInfo[59].sView;
		d2 = (double)274;
		d3 = (d1 * d2) / iTotalLines - ShowLines;
		iPointerLoc = (int)d3;
		iPointerLoc = 274 - iPointerLoc;
		//DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 3, FALSE, m_bDialogTrans);
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX + 242, sY + 25 + iPointerLoc, 7);
	}
	else iPointerLoc = 0;

	i = 0;
	j = 0;
	if (m_stDialogBoxInfo[59].sV1 != -1)
	{
		while (j < ShowLines)
		{
			if (m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView] != NULL)
			{
				if (m_stDialogBoxInfo[59].sV1 == 2)
				{
					if (m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView]->m_cType == 1)
						PutString2(sX + 25, sY + 57 + (16 - j) * 15, m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView]->m_pMsg, 0, 255, 0);
					else if (m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView]->m_cType == 0)
						PutString2(sX + 25, sY + 57 + (16 - j) * 15, m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView]->m_pMsg, 255, 0, 0);
					j++;
				}
				else
				{
					if (m_stDialogBoxInfo[59].sV1 == 1 && m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView]->m_cType == 1)
					{
						PutString2(sX + 25, sY + 57 + (16 - j) * 15, m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView]->m_pMsg, 0, 255, 0);
						j++;
					}
					else if (m_stDialogBoxInfo[59].sV1 == 0 && m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView]->m_cType == 0)
					{
						PutString2(sX + 25, sY + 57 + (16 - j) * 15, m_pEnemyKillList[i + m_stDialogBoxInfo[59].sView]->m_pMsg, 255, 0, 0);
						j++;
					}
				}
				i++;
			}
			else j = ShowLines;
		}
	}

	if (cLB != 0 && iTotalLines > ShowLines) {
		if ((iGetTopDialogBoxIndex() == 59)) {
			if ((msX >= sX + 237) && (msX <= sX + 251) && (msY >= sY + 32) && (msY <= sY + 336)) {
				d1 = (double)(msY - (sY + 25));
				d2 = (double)(iTotalLines - ShowLines)*d1 / 274.0f;
				m_stDialogBoxInfo[59].sView = iTotalLines - ShowLines - (int)d2;
			}
		}
	}
	else m_stDialogBoxInfo[43].bIsScrollSelected = FALSE;
}

void CGame::DlgBoxClick_EKPKLog(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[59].sX;
	sY = m_stDialogBoxInfo[59].sY;

	// Enemy Kills
	if ((msX > sX + 40) && (msX < sX + 98) && (msY > sY + 32) && (msY < sY + 42))
	{
		if (m_stDialogBoxInfo[59].sV1 != 1) m_stDialogBoxInfo[59].sV1 = 1;
		else m_stDialogBoxInfo[59].sV1 = 2;
	}

	// Criminals Kills
	if ((msX > sX + 129) && (msX < sX + 203) && (msY > sY + 32) && (msY < sY + 42))
	{
		if (m_stDialogBoxInfo[59].sV1 != 0) m_stDialogBoxInfo[59].sV1 = 0;
		else m_stDialogBoxInfo[59].sV1 = 2;
	}
}

void CGame::LoadShortCutsList()
{
	char buf[20];
	short i;
	unsigned long linie = 0;
	char cFn[100];
	short Temp = _iGetTotalItemNum();

	ZeroMemory(cFn, sizeof(cFn));

	strcat(cFn, "DATA");
	strcat(cFn, "\\");
	strcat(cFn, "\\");

	//DecriptString(m_cPlayerName);
	strcat(cFn, m_cPlayerName);
	//EncriptString(m_cPlayerName);

	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "Shortcuts.txt");

	FILE * f = fopen(cFn, "r");
	if (!f) return;

	for (i = 0; i < 9; i++)
		NewShortcuts[i] = -1;

	i = 0;

	while (fgets(buf, 20, f)) {
		if (i < 9) {
			NewShortcuts[i] = atoi(buf);
			i++;
		}
		else fclose(f);
	}
	for (i = 0; i < 9; i++)
		if (NewShortcuts[i] < 50)
			if (NewShortcuts[i] > Temp) NewShortcuts[i] = -1;

}

void CGame::SaveShortCutsList()
{
	int i;
	char wr[15];
	char cFn[100];

	ZeroMemory(cFn, sizeof(cFn));

	strcat(cFn, "DATA");
	mkdir(cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");

	//DecriptString(m_cPlayerName);
	strcat(cFn, m_cPlayerName);
	//EncriptString(m_cPlayerName);

	mkdir(cFn);
	strcat(cFn, "\\");
	strcat(cFn, "\\");
	strcat(cFn, "Shortcuts.txt");

	FILE * f = fopen(cFn, "w");

	if (!f) return;
	for (i = 0; i < 9; i++) {
		ZeroMemory(wr, sizeof(wr));
		wsprintf(wr, "%d\n", NewShortcuts[i]);
		fputs(wr, f);
	}
	fclose(f);
}

void CGame::SendProcess()
{
	HANDLE hSnapShot;
	PROCESSENTRY32 pe;
	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, 0);
	pe.dwSize = (DWORD)sizeof(PROCESSENTRY32);
	BOOL r;

	r = Process32First(hSnapShot, &pe);
	do
	{
		bSendCommand(CLIENT_REQUEST_PROCESSANDDLL, NULL, NULL, 1, NULL, NULL, pe.szExeFile);
		r = Process32Next(hSnapShot, &pe);
	} while (r);
	CloseHandle(hSnapShot);
}

//BOOL CGame::CheckHacks()
BOOL CGame::CheckPalmado()
{
	HANDLE hSnapShot;
	BOOL r;
	BOOL bFound = FALSE;
	char Temp[50];

	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPALL, 0);
	MODULEENTRY32 me;
	me.dwSize = sizeof(MODULEENTRY32);
	r = Module32First(hSnapShot, &me);

	do {
		for (short i = 0; i < 100; i++) {
			DecriptString(Dll[i]);
			if (strlen(Dll[i]) > 0) {
				if (_stricmp(me.szModule, Dll[i]) == 0) {
					bFound = TRUE;
					strcpy(Temp, Dll[i]);
				}
			}
			else i = 100;
			EncriptString(Dll[i]);
		}
		r = Module32Next(hSnapShot, &me);
	} while (r);

	CloseHandle(hSnapShot);
	if (bFound == TRUE)
	{
		//SetTopMsg("Client frozed by using cheats.", 8);
		//SendMessage(m_hWnd, WM_DESTROY, NULL, NULL);
		//wsprintf(G_cTxt, "!Soy tan pro, que estoy intentando usar cheats!");
		//bSendCommand(CLIENT_REQUEST_COMMAND_CHATMSG, NULL, NULL, NULL, NULL, NULL, G_cTxt);
		//bSendCommand(CLIENT_REQUEST_HACKDETECTED, NULL, NULL, NULL, NULL, NULL, Temp);
		bSendCommand(CLIENT_REQUEST_PACKSARPAD, NULL, NULL, NULL, NULL, NULL, Temp);
	}
	m_bPackSarpadBlock = EncriptBool(bFound);
	//m_bHackMoveBlocked = EncriptBool(bFound);
	return bFound;
}

void CGame::SendModule(DWORD PID)
{
	HANDLE hSnapShot;
	MODULEENTRY32 me;
	hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, PID);
	me.dwSize = sizeof(MODULEENTRY32);
	BOOL r;

	r = Module32First(hSnapShot, &me);
	do
	{
		bSendCommand(CLIENT_REQUEST_PROCESSANDDLL, NULL, NULL, 0, NULL, NULL, me.szModule);
		r = Module32Next(hSnapShot, &me);
	} while (r);
	CloseHandle(hSnapShot);
}

void CGame::ChargeTopEventList(char *pData)
{
	char *cp;
	short *sp, i;

	cp = (char *)(pData + 6);

	for (i = 0; i < 10; i++)
	{
		ZeroMemory(TopEvent[i].CharName, sizeof(TopEvent[i].CharName));
		TopEvent[i].Kills = -1;
		TopEvent[i].Death = -1;
		TopEvent[i].Nivel = -1;

		memcpy(TopEvent[i].CharName, cp, 11);
		cp += 11;

		sp = (short *)cp;
		TopEvent[i].Nivel = *sp;
		cp += 2;

		sp = (short *)cp;
		TopEvent[i].Kills = *sp;
		cp += 2;

		sp = (short *)cp;
		TopEvent[i].Death = *sp;
		cp += 2;
	}
}

void CGame::ChargeMyDataEvent(char *pData)
{
	char *cp;
	short *sp;

	cp = (char *)(pData + 6);

	sp = (short *)cp;
	MyNivel = *sp;
	cp += 2;

	sp = (short *)cp;
	MyKills = *sp;
	cp += 2;

	sp = (short *)cp;
	MyDeaths = *sp;
	cp += 2;
}

//void CGame::ReadBloquedProcess(char * pData)
void CGame::TeSentisSarpado(char * pData)
{
	char * cp;
	char DataRec[50];
	BOOL IsProcess = FALSE;
	short i;

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	ZeroMemory(DataRec, sizeof(DataRec));
	memcpy(DataRec, cp, strlen(cp));
	cp += strlen(cp);

	if (strstr(DataRec, ".exe") != 0) {
		for (i = 0; i < 100; i++) {
			if (strlen(Process[i]) == 0) {
				memcpy(Process[i], DataRec, strlen(DataRec));
				EncriptString(Process[i]);
				i = 100;
			}
		}
	}
	else {
		for (i = 0; i < 100; i++) {
			if (strlen(Dll[i]) == 0) {
				memcpy(Dll[i], DataRec, strlen(DataRec));
				EncriptString(Dll[i]);
				i = 100;
			}
		}
	}
}

// New System -> Market Place -> HB Arg v4.4
void CGame::DrawDialogBox_CharSell(short msX, short msY, short msZ, char cLB)
{
	short sX, sY, szX;
	int  i, iItem;
	char cTemp[255];// , cStr1[64], cStr2[64], cStr3[64];
//	char cName[51];
	short msY1 = 0, msX1 = 0, msK = 0, iLoc = 13;

	sX = m_stDialogBoxInfo[49].sX;
	sY = m_stDialogBoxInfo[49].sY;
	szX = m_stDialogBoxInfo[49].sSizeX;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_EVENT, sX, sY, 1);

	//if (DecriptBool(MarketOpen))
	if (MarketOpen)
	{
		PutString_SprFont(sX + 89, sY + 11, "Market Open", 0, 0, 0);//sX+61, sY+11
		PutString_SprFont(sX + 90, sY + 12, "Market Open", 255, 200, 0);//sX+62, sY+12
	}
	else
	{
		PutString_SprFont(sX + 76, sY + 11, "Creating Market", 0, 0, 0);//sX+61, sY+11
		PutString_SprFont(sX + 77, sY + 12, "Creating Market", 255, 200, 0);//sX+62, sY+12
	}

	PutString(sX + 22, sY + 35, DRAW_DIALOGBOX_SHOP1, RGB(0, 0, 0)); // "ITEM"
	PutString(sX + 23, sY + 35, DRAW_DIALOGBOX_SHOP1, RGB(0, 0, 0));
	PutString(sX + 203, sY + 35, DRAW_DIALOGBOX_SHOP3, RGB(0, 0, 0));
	PutString(sX + 204, sY + 35, DRAW_DIALOGBOX_SHOP3, RGB(0, 0, 0));

	iItem = 0;
	for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
		if (m_stItemListToSell[i].iIndex != -1)
		{
			ZeroMemory(cTemp, sizeof(cTemp));
			if (m_stItemListToSell[i].uiPrice == -1)
			{
				PutString(sX + 20 - 1, sY + 50 - 1 + i * 15, m_stItemListToSell[i].cStr1, RGB(0, 0, 0));
				PutString(sX + 20, sY + 50 + i * 15, m_stItemListToSell[i].cStr1, RGB(255, 0, 0));
				PutString(sX + 203 - 1, sY + 50 - 1 + i * 15, "SOLD!", RGB(0, 0, 0));
				PutString(sX + 203, sY + 50 + i * 15, "SOLD!", RGB(255, 0, 0));
			}
			else
			{
				PutString(sX + 20 - 1, sY + 50 - 1 + i * 15, m_stItemListToSell[i].cStr1, RGB(0, 0, 0));
				PutString(sX + 20, sY + 50 + i * 15, m_stItemListToSell[i].cStr1, RGB(0, 255, 50));
				wsprintf(cTemp, "%d", m_stItemListToSell[i].uiPrice);
				PutString(sX + 203 - 1, sY + 50 - 1 + i * 15, cTemp, RGB(0, 0, 0));
				PutString(sX + 203, sY + 50 + i * 15, cTemp, RGB(0, 255, 50));
			}
		}
		else iItem++;

		if (iItem == DEF_MAXSELLITEMSLIST) {
			PutAlignedString(sX, sX + szX, sY + 55 + 30 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST2);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 45 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST3);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 60 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST4);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 75 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST5);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 95 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST6);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 110 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST7);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 125 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST8);//"
			PutAlignedString(sX, sX + szX, sY + 55 + 155 + 282 - 117 - 170, DRAW_DIALOGBOX_SELL_LIST9);//"
		}

		//if (!DecriptBool(MarketOpen))
		if (!MarketOpen)
		{
			if ((msX >= sX + 22) && (msX <= sX + 22 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY) && (iItem < DEF_MAXSELLITEMSLIST))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 22, sY + 339, 9);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 22, sY + 339, 8);

			if ((msX >= sX + 98) && (msX <= sX + 98 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY) && (iItem < DEF_MAXSELLITEMSLIST))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 98, sY + 339, 11);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTONS, sX + 98, sY + 339, 10);
		}

		if ((msX >= sX + 174) && (msX <= sX + 174 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY))
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 174, sY + 339, 17);
		else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 174, sY + 339, 16);

		for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
			if (m_stItemListToSell[i].iIndex != -1)
			{
				ZeroMemory(cTemp, sizeof(cTemp));
				if ((msX > sX + 20) && (msX < sX + 250) && (msY >= sY + 50 + i * 15) && (msY <= sY + 50 + 14 + i * 15))
				{
					if (m_stItemListToSell[i].uiPrice == -1)
					{
						PutString(sX + 20 - 1, sY + 50 - 1 + i * 15, m_stItemListToSell[i].cStr1, RGB(0, 0, 0));
						PutString(sX + 20, sY + 50 + i * 15, m_stItemListToSell[i].cStr1, RGB(255, 0, 0));
						PutString(sX + 203 - 1, sY + 50 - 1 + i * 15, "SOLD!", RGB(0, 0, 0));
						PutString(sX + 203, sY + 50 + i * 15, "SOLD!", RGB(255, 0, 0));
					}
					else
					{
						PutString(sX + 20 - 1, sY + 50 - 1 + i * 15, m_stItemListToSell[i].cStr1, RGB(0, 0, 0));
						PutString(sX + 20, sY + 50 + i * 15, m_stItemListToSell[i].cStr1, RGB(0, 255, 50));
						wsprintf(cTemp, "%d", m_stItemListToSell[i].uiPrice);
						PutString(sX + 203 - 1, sY + 50 - 1 + i * 15, cTemp, RGB(0, 0, 0));
						PutString(sX + 203, sY + 50 + i * 15, cTemp, RGB(0, 255, 50));
					}
					/*PutString(sX+ 20, sY + 50 + i*15, m_stItemListToSell[i].cStr1, RGB(255,255,255));
					wsprintf(cTemp, "%d", m_stItemListToSell[i].uiPrice);
					PutString(sX +203, sY + 50 + i*15, cTemp, RGB(255,255,255));*/

					msK = SpaceChar(m_stItemListToSell[i].cStr1);
					if (strlen(m_stItemListToSell[i].cStr2) != 0)
					{
						if (msK < SpaceChar(m_stItemListToSell[i].cStr2)) msK = SpaceChar(m_stItemListToSell[i].cStr2);
						iLoc += 15;
					}
					if (strlen(m_stItemListToSell[i].cStr3) != 0)
					{
						if (msK < SpaceChar(m_stItemListToSell[i].cStr3)) msK = SpaceChar(m_stItemListToSell[i].cStr3);
						iLoc += 15;
					}

					msX1 = msX + msK;
					if (msX1 > 639) msX1 = 639;

					if ((msY + iLoc + 28) > 479) msY1 = 479;
					else msY1 = msY + iLoc + 28;
					iLoc = 0;

					m_DDraw.DrawShadowBox(msX, msY + 25, msX1, msY1, 1);
					PutAlignedString(msX, msX + msK, msY + 25, m_stItemListToSell[i].cStr1, 0, 255, 0);
					if (strlen(m_stItemListToSell[i].cStr2) != 0)
					{
						iLoc += 15;
						PutAlignedString(msX, msX + msK, msY + 25 + iLoc, m_stItemListToSell[i].cStr2, 255, 200, 0);
					}
					if (strlen(m_stItemListToSell[i].cStr3) != 0)
					{
						iLoc += 15,
							PutAlignedString(msX, msX + msK, msY + 25 + iLoc, m_stItemListToSell[i].cStr3, 255, 200, 0);
					}
				}
			}
}

void CGame::DlgBoxClick_CharSell(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[49].sX;
	sY = m_stDialogBoxInfo[49].sY;
	int i, x;

	//if (!DecriptBool(MarketOpen))
	if (!MarketOpen)
	{
		for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
		{
			if ((msX > sX + 20) && (msX < sX + 250) && (msY >= sY + 50 + i * 15) && (msY <= sY + 50 + 14 + i * 15))
			{
				if (m_pItemList[m_stItemListToSell[i].iIndex] != NULL)
				{
					m_bIsItemDisabled[m_stItemListToSell[i].iIndex] = FALSE;
					m_stItemListToSell[i].iIndex = -1;
					m_stItemListToSell[i].uiPrice = 0;
					PlaySound('E', 14, 5);

					for (x = 0; x < DEF_MAXSELLITEMSLIST - 1; x++)
					{
						if (m_stItemListToSell[x].iIndex == -1) {
							m_stItemListToSell[x].iIndex = m_stItemListToSell[x + 1].iIndex;
							m_stItemListToSell[x].iAmount = m_stItemListToSell[x + 1].iAmount;
							m_stItemListToSell[x].uiPrice = m_stItemListToSell[x + 1].uiPrice;

							m_stItemListToSell[x + 1].iIndex = -1;
							m_stItemListToSell[x + 1].iAmount = 0;
							m_stItemListToSell[x + 1].uiPrice = 0;
							ZeroMemory(m_stItemListToSell[x + 1].cStr1, sizeof(m_stItemListToSell[x + 1].cStr1));
							ZeroMemory(m_stItemListToSell[x + 1].cStr2, sizeof(m_stItemListToSell[x + 1].cStr2));
							ZeroMemory(m_stItemListToSell[x + 1].cStr3, sizeof(m_stItemListToSell[x + 1].cStr3));
						}
					}
				}
				return;
			}
		}

		if ((msX >= sX + 22) && (msX <= sX + 22 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY)) {
			bSendCommand(CLIENT_REQUEST_TIPESELLLIST, NULL, NULL, 1, NULL, NULL, NULL);
			SendItemToSellList();
			PlaySound('E', 14, 5);
		}

		if ((msX >= sX + 98) && (msX <= sX + 98 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY)) {
			bSendCommand(CLIENT_REQUEST_TIPESELLLIST, NULL, NULL, 2, NULL, NULL, NULL);
			SendItemToSellList();
			PlaySound('E', 14, 5);
		}
	}

	if ((msX >= sX + 174) && (msX <= sX + 174 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY)) {
		PlaySound('E', 14, 5);
		DisableDialogBox(49);
	}
}



void CGame::SendItemToSellList()
{
	short i;
	for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
	{
		if (m_stItemListToSell[i].iIndex != -1)
		{
			bSendCommand(CLIENT_REQUEST_ITEMTOSELLLIST, NULL, NULL, m_stItemListToSell[i].iIndex, m_stItemListToSell[i].uiPrice, NULL, NULL);
		}
	}
}

void CGame::LoadItemList(char *pData)
{
	char * cp;
	DWORD * dwp, dwCount, dwAttribute;
	char  cName[21], cItemType, cEquipPos, cGenderLimit, cItemColor;
	BOOL  bIsEquipped;
	short cIndex;
	short * sp, sSprite, sSpriteFrame, sLevelLimit, sItemEffectValue2, sItemSpecEffectValue2, sItemSpecEffectValue3;
	short m_sItemEffectValue1, m_sItemEffectValue2, m_sItemEffectValue3, m_sItemEffectValue4, m_sItemEffectValue5, m_sItemEffectValue6;
	char m_cSpeed;
	WORD  * wp, wWeight, wCurLifeSpan;
//	char  cTxt[120];
	int * ip;
	unsigned int Price;

	cp = (pData + DEF_INDEX2_MSGTYPE + 2);

	sp = (short *)cp;
	cIndex = *sp;
	cp += 2;

	sp = (short *)cp;
	TotalItemsSell = EncriptInt(*sp);
	cp += 2;

	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;

	dwp = (DWORD *)cp;
	dwCount = *dwp;
	cp += 4;

	cItemType = *cp;
	cp++;

	cEquipPos = *cp;
	cp++;

	bIsEquipped = (BOOL)*cp;
	cp++;

	sp = (short *)cp;
	sLevelLimit = *sp;
	cp += 2;

	cGenderLimit = *cp;
	cp++;

	wp = (WORD *)cp;
	wCurLifeSpan = *wp;
	cp += 2;

	wp = (WORD *)cp;
	wWeight = *wp;
	cp += 2;

	sp = (short *)cp;
	sSprite = *sp;
	cp += 2;

	sp = (short *)cp;
	sSpriteFrame = *sp;
	cp += 2;

	cItemColor = *cp;
	cp++;

	sp = (short *)cp;
	sItemEffectValue2 = *sp;
	cp += 2;

	dwp = (DWORD *)cp;
	dwAttribute = *dwp;
	cp += 4;

	//sItemSpecEffectValue2 = (short)*cp;
	//cp++;
	//Lalomanu
	sp = (short *)cp;
	sItemSpecEffectValue2 = *sp;
	cp += 2;

	sItemSpecEffectValue3 = (short)*cp;
	cp++;

	m_sItemEffectValue1 = (short)*cp;
	cp++;

	m_sItemEffectValue2 = (short)*cp;
	cp++;

	m_sItemEffectValue3 = (short)*cp;
	cp++;

	m_sItemEffectValue4 = (short)*cp;
	cp++;

	m_sItemEffectValue5 = (short)*cp;
	cp++;

	m_sItemEffectValue6 = (short)*cp;
	cp++;

	m_cSpeed = *cp;
	cp++;

	ip = (int *)cp;
	Price = *ip;
	cp += 4;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(cName, dwAttribute, cStr1, cStr2, cStr3, sItemSpecEffectValue3);

	if (m_pItemSellList[cIndex] != NULL) {
		delete m_pItemSellList[cIndex];
	}

	m_pItemSellList[cIndex] = new class CItem;

	memcpy(m_pItemSellList[cIndex]->m_cName, cName, 20);
	m_pItemSellList[cIndex]->m_cItemType = cItemType;
	m_pItemSellList[cIndex]->m_cEquipPos = cEquipPos;

	m_pItemSellList[cIndex]->m_sLevelLimit = sLevelLimit;
	m_pItemSellList[cIndex]->m_cGenderLimit = cGenderLimit;
	m_pItemSellList[cIndex]->m_wCurLifeSpan = wCurLifeSpan;
	m_pItemSellList[cIndex]->m_wWeight = wWeight;
	m_pItemSellList[cIndex]->m_sSprite = sSprite;
	m_pItemSellList[cIndex]->m_sSpriteFrame = sSpriteFrame;
	m_pItemSellList[cIndex]->m_cItemColor = cItemColor;
	m_pItemSellList[cIndex]->m_sItemEffectValue2 = sItemEffectValue2;
	m_pItemSellList[cIndex]->m_dwAttribute = dwAttribute;
	m_pItemSellList[cIndex]->m_sItemSpecEffectValue2 = sItemSpecEffectValue2;
	m_pItemSellList[cIndex]->m_sItemSpecEffectValue3 = sItemSpecEffectValue3;
	m_pItemSellList[cIndex]->m_sItemEffectValue1 = m_sItemEffectValue1;
	m_pItemSellList[cIndex]->m_sItemEffectValue2 = m_sItemEffectValue2;
	m_pItemSellList[cIndex]->m_sItemEffectValue3 = m_sItemEffectValue3;
	m_pItemSellList[cIndex]->m_sItemEffectValue4 = m_sItemEffectValue4;
	m_pItemSellList[cIndex]->m_sItemEffectValue5 = m_sItemEffectValue5;
	m_pItemSellList[cIndex]->m_sItemEffectValue6 = m_sItemEffectValue6;
	m_pItemSellList[cIndex]->m_cSpeed = m_cSpeed;
	m_pItemSellList[cIndex]->m_wPrice = Price;
}

void CGame::DrawDialogBox_OpenCharSell(short msX, short msY, short msZ, char cLB)
{
	short sX, sY, szX;
	int  i, iItem;
	char cTemp[255], cStr1[64], cStr2[64], cStr3[64];
//	char cName[51];
	short msY1 = 0, msX1 = 0, msK = 0, iLoc = 13;
	DWORD dwTime = m_dwCurTime;
	int  iTemp;
	unsigned int  iCost;
//	double dTmp1, dTmp2, dTmp3;
	BOOL bFlagStatLow = FALSE;
	BOOL bFlagRedShown = FALSE;

	sX = m_stDialogBoxInfo[54].sX;
	sY = m_stDialogBoxInfo[54].sY;
	szX = m_stDialogBoxInfo[54].sSizeX;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME3, sX, sY, 0);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_EVENT, sX, sY, 1);

	switch (DecriptInt(SellType))
	{
		case -1:
			ZeroMemory(OpenSellName, sizeof(OpenSellName));
			DisableDialogBox(54);
			break;
		case 1:
			PutString_SprFont(sX + 61, sY + 11, "Contribution Trade", 0, 0, 0);
			PutString_SprFont(sX + 62, sY + 12, "Contribution Trade", 255, 200, 0);
			break;
		case 2:
			PutString_SprFont(sX + 86, sY + 11, "Coin Trade", 0, 0, 0);
			PutString_SprFont(sX + 87, sY + 12, "Coin Trade", 255, 200, 0);
			break;
	}


	switch (m_stDialogBoxInfo[54].sView)
	{
		case 1: // Item List
			PutString(sX + 22, sY + 35, DRAW_DIALOGBOX_SHOP1, RGB(0, 0, 0)); // "ITEM"
			PutString(sX + 23, sY + 35, DRAW_DIALOGBOX_SHOP1, RGB(0, 0, 0));
			PutString(sX + 203, sY + 35, DRAW_DIALOGBOX_SHOP3, RGB(0, 0, 0));
			PutString(sX + 204, sY + 35, DRAW_DIALOGBOX_SHOP3, RGB(0, 0, 0));

			iItem = 0;
			for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
				if (m_pItemSellList[i] != NULL)
				{
					ZeroMemory(cTemp, sizeof(cTemp));
					GetItemName(m_pItemSellList[i]->m_cName, m_pItemSellList[i]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemSellList[i]->m_sItemSpecEffectValue3);
					PutString(sX + 20 - 1, sY + 50 - 1 + i * 15, cStr1, RGB(0, 0, 0));
					PutString(sX + 20, sY + 50 + i * 15, cStr1, RGB(0, 255, 50));
					wsprintf(cTemp, "%d", m_pItemSellList[i]->m_wPrice);
					PutString(sX + 203 - 1, sY + 50 - 1 + i * 15, cTemp, RGB(0, 0, 0));
					PutString(sX + 203, sY + 50 + i * 15, cTemp, RGB(0, 255, 50));
				}
				else iItem++;

				for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
					if (m_pItemSellList[i] != NULL)
					{
						ZeroMemory(cTemp, sizeof(cTemp));
						GetItemName(m_pItemSellList[i]->m_cName, m_pItemSellList[i]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemSellList[i]->m_sItemSpecEffectValue3);
						if ((msX > sX + 20) && (msX < sX + 250) && (msY >= sY + 50 + i * 15) && (msY <= sY + 50 + 14 + i * 15))
						{
							PutString(sX + 20, sY + 50 + i * 15, cStr1, RGB(255, 255, 255));
							wsprintf(cTemp, "%d", m_pItemSellList[i]->m_wPrice);
							PutString(sX + 203, sY + 50 + i * 15, cTemp, RGB(255, 255, 255));

							msK = SpaceChar(cStr1);
							if (strlen(cStr2) != 0)
							{
								if (msK < SpaceChar(cStr2)) msK = SpaceChar(cStr2);
								iLoc += 15;
							}
							if (strlen(cStr3) != 0)
							{
								if (msK < SpaceChar(cStr3)) msK = SpaceChar(cStr3);
								iLoc += 15;
							}

							msX1 = msX + msK;
							if (msX1 > 639) msX1 = 639;

							if ((msY + iLoc + 28) > 479) msY1 = 479;
							else msY1 = msY + iLoc + 28;
							iLoc = 0;

							m_DDraw.DrawShadowBox(msX, msY + 25, msX1, msY1, 1);
							PutAlignedString(msX, msX + msK, msY + 25, cStr1, 0, 255, 0);
							if (strlen(cStr2) != 0)
							{
								iLoc += 15;
								PutAlignedString(msX, msX + msK, msY + 25 + iLoc, cStr2, 255, 200, 0);
							}
							if (strlen(cStr3) != 0)
							{
								iLoc += 15,
									PutAlignedString(msX, msX + msK, msY + 25 + iLoc, cStr3, 255, 200, 0);
							}
						}
					}
				break;

		case 2: // Item Detail
			if (m_pItemSellList[m_stDialogBoxInfo[54].cMode] == NULL) m_stDialogBoxInfo[54].sView = 1;
			m_pSprite[DEF_SPRID_ITEMPACK_PIVOTPOINT + m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sSprite]->PutSpriteFast(sX + 62 + 30 - 35, sY + 84 + 30 - 10,
				m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sSpriteFrame, dwTime);

			ZeroMemory(cTemp, sizeof(cTemp));
			GetItemName(m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_cName, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_dwAttribute,
				cStr1, cStr2, cStr3, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemSpecEffectValue3);

			PutAlignedString(sX + 25, sX + 240, sY + 50, cStr1, 0, 255, 0);
			PutAlignedString(sX + 26, sX + 241, sY + 50, cStr1, 0, 255, 0);

			PutString(sX + 90, sY + 78 + 30 - 10, DRAW_DIALOGBOX_SHOP3, RGB(40, 10, 10));
			PutString(sX + 91, sY + 78 + 30 - 10, DRAW_DIALOGBOX_SHOP3, RGB(40, 10, 10));
			PutString(sX + 90, sY + 93 + 30 - 10, DRAW_DIALOGBOX_SHOP6, RGB(40, 10, 10));
			PutString(sX + 91, sY + 93 + 30 - 10, DRAW_DIALOGBOX_SHOP6, RGB(40, 10, 10));

			iCost = (unsigned int)m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wPrice;

			switch (DecriptInt(SellType))
			{
				case 1:
					wsprintf(cTemp, "%d %s", iCost, "Contributions");
					if (m_iContribution >= iCost) PutString(sX + 130, sY + 98, cTemp, RGB(255, 255, 255));
					else PutString(sX + 130, sY + 98, cTemp, RGB(195, 25, 25));
					break;
				case 2:
					wsprintf(cTemp, "%d %s", iCost, "Coins");
					//if (Coins >= iCost) PutString(sX + 130, sY + 98, cTemp, RGB(255, 255, 255));
					if (m_iCoins >= iCost) PutString(sX + 130, sY + 98, cTemp, RGB(255, 255, 255));
					else PutString(sX + 130, sY + 98, cTemp, RGB(195, 25, 25));
					break;
			}

			iTemp = m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wWeight / 100;
			wsprintf(cTemp, DRAW_DIALOGBOX_SHOP8, iTemp);
			PutString(sX + 140, sY + 113, cTemp, RGB(255, 255, 255));

			switch (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_cEquipPos)
			{
				case DEF_EQUIPPOS_RHAND:
				case DEF_EQUIPPOS_TWOHAND:
					strcpy(cTemp, DRAW_DIALOGBOX_SHOP9);  // Damage
					PutString(sX + 90, sY + 145, cTemp, RGB(40, 10, 10));
					PutString(sX + 91, sY + 145, cTemp, RGB(40, 10, 10));
					strcpy(cTemp, DRAW_DIALOGBOX_SHOP10); //"Speed(Min.~Max.)"
					PutString(sX + 40, sY + 175, cTemp, RGB(40, 10, 10));
					PutString(sX + 41, sY + 175, cTemp, RGB(40, 10, 10));

					if (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue3 != 0)
					{
						wsprintf(cTemp, ": %dD%d+%d (S-M)", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue1,
							m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue2,
							m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue3);
					}
					else
					{
						wsprintf(cTemp, ": %dD%d (S-M)", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue1,
							m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue2);
					}
					PutString(sX + 140, sY + 145, cTemp, RGB(255, 255, 255));
					if (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue6 != 0)
					{
						wsprintf(cTemp, ": %dD%d+%d (L)", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue4,
							m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5,
							m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue6);
					}
					else
					{
						wsprintf(cTemp, ": %dD%d (L)", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue4,
							m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5);
					}
					PutString(sX + 140, sY + 160, cTemp, RGB(255, 255, 255));
					if (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_cSpeed == 0)   wsprintf(cTemp, ": 0(10~10)");
					else wsprintf(cTemp, ": %d(%d ~ %d)", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_cSpeed, iTemp, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_cSpeed * 13);
					PutString(sX + 140, sY + 175, cTemp, RGB(255, 255, 255));

					if ((m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wWeight / 100) > m_iStr)
					{
						wsprintf(cTemp, DRAW_DIALOGBOX_SHOP11, (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wWeight / 100));
						PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25);
						PutAlignedString(sX + 26, sX + 241, sY + 258, cTemp, 195, 25, 25); // *Your STR should be at least %d to use this item."
						bFlagRedShown = TRUE;
					}

					strcpy(cTemp, "Endurance:");  // Attributes
					PutString(sX + 80, sY + 225, cTemp, RGB(40, 10, 10));
					PutString(sX + 81, sY + 225, cTemp, RGB(40, 10, 10));
					wsprintf(cTemp, " %d", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wCurLifeSpan);
					PutString(sX + 140, sY + 225, cTemp, RGB(255, 255, 255));

					if (strlen(cStr2) > 0 || strlen(cStr3) > 0)
					{
						strcpy(cTemp, "Attributes:");  // Attributes
						PutString(sX + 25, sY + 250, cTemp, RGB(40, 10, 10));
						PutString(sX + 26, sY + 250, cTemp, RGB(40, 10, 10));
						iLoc = 0;
						if (strlen(cStr2) > 0)
						{
							PutString(sX + 85, sY + 250, cStr2, RGB(255, 255, 255));
							iLoc += 15;
						}
						if (strlen(cStr3) > 0)
						{
							PutString(sX + 85, sY + 250 + iLoc, cStr3, RGB(255, 255, 255));
						}
					}
					break;

				case DEF_EQUIPPOS_LHAND:
					strcpy(cTemp, DRAW_DIALOGBOX_SHOP12); // "Defence"
					PutString(sX + 90, sY + 145, cTemp, RGB(40, 10, 10));
					PutString(sX + 91, sY + 145, cTemp, RGB(40, 10, 10));
					wsprintf(cTemp, ": +%d%", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue1);
					PutString(sX + 140, sY + 145, cTemp, RGB(255, 255, 255));
					if ((m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wWeight / 100) > m_iStr)
					{
						wsprintf(cTemp, DRAW_DIALOGBOX_SHOP11, (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wWeight / 100));
						PutAlignedString(sX + 25, sX + 240, sY + 258, cTemp, 195, 25, 25); // "*Your STR should be at least %d to use this item."
						PutAlignedString(sX + 26, sX + 241, sY + 258, cTemp, 195, 25, 25);
						bFlagRedShown = TRUE;
					}
					strcpy(cTemp, "Endurance:");  // Attributes
					PutString(sX + 80, sY + 225, cTemp, RGB(40, 10, 10));
					PutString(sX + 81, sY + 225, cTemp, RGB(40, 10, 10));
					wsprintf(cTemp, " %d", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wCurLifeSpan);
					PutString(sX + 140, sY + 225, cTemp, RGB(255, 255, 255));

					if (strlen(cStr2) > 0 || strlen(cStr3) > 0)
					{
						strcpy(cTemp, "Attributes:");  // Attributes
						PutString(sX + 25, sY + 250, cTemp, RGB(40, 10, 10));
						PutString(sX + 26, sY + 250, cTemp, RGB(40, 10, 10));
						iLoc = 0;
						if (strlen(cStr2) > 0)
						{
							PutString(sX + 85, sY + 250, cStr2, RGB(255, 255, 255));
							iLoc += 15;
						}
						if (strlen(cStr3) > 0)
						{
							PutString(sX + 85, sY + 250 + iLoc, cStr3, RGB(255, 255, 255));
						}
					}
					break;

				case DEF_EQUIPPOS_HEAD:
				case DEF_EQUIPPOS_BODY:
				case DEF_EQUIPPOS_BOOTS:
				case DEF_EQUIPPOS_ARMS:
				case DEF_EQUIPPOS_PANTS:
					strcpy(cTemp, DRAW_DIALOGBOX_SHOP12); // "Defence"
					PutString(sX + 90, sY + 145, cTemp, RGB(40, 10, 10));
					PutString(sX + 91, sY + 145, cTemp, RGB(40, 10, 10));
					wsprintf(cTemp, ": +%d%", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue1);
					PutString(sX + 140, sY + 145, cTemp, RGB(255, 255, 255));
					bFlagStatLow = FALSE;
					strcpy(cTemp, "Endurance:");  // Attributes
					PutString(sX + 80, sY + 225, cTemp, RGB(40, 10, 10));
					PutString(sX + 81, sY + 225, cTemp, RGB(40, 10, 10));
					wsprintf(cTemp, " %d", m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wCurLifeSpan);
					PutString(sX + 140, sY + 225, cTemp, RGB(255, 255, 255));

					if (strlen(cStr2) > 0 || strlen(cStr3) > 0)
					{
						strcpy(cTemp, "Attributes:");  // Attributes
						PutString(sX + 25, sY + 250, cTemp, RGB(40, 10, 10));
						PutString(sX + 26, sY + 250, cTemp, RGB(40, 10, 10));
						iLoc = 0;
						if (strlen(cStr2) > 0)
						{
							PutString(sX + 85, sY + 250, cStr2, RGB(255, 255, 255));
							iLoc += 15;
						}
						if (strlen(cStr3) > 0)
						{
							PutString(sX + 85, sY + 250 + iLoc, cStr3, RGB(255, 255, 255));
						}
					}

					switch (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue4) {
						case 10://"Available for above Str %d"
							wsprintf(cTemp, DRAW_DIALOGBOX_SHOP15, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5);
							if (m_iStr >= m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5)
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
							}
							else
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
								bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
							}
							break;
						case 11: // "Available for above Dex %d"
							wsprintf(cTemp, DRAW_DIALOGBOX_SHOP16, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5);
							if (m_iDex >= m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5)
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
							}
							else
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
								bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
							}
							break;
						case 12: // "Available for above Vit %d"
							wsprintf(cTemp, DRAW_DIALOGBOX_SHOP17, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5);
							if (m_iVit >= m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5)
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
							}
							else
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
								bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
							}
							break;
						case 13: // "Available for above Int %d"
							wsprintf(cTemp, DRAW_DIALOGBOX_SHOP18, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5);
							if (m_iInt >= m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5)
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
							}
							else
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
								bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
							}
							break;
						case 14: // "Available for above Mag %d"
							wsprintf(cTemp, DRAW_DIALOGBOX_SHOP19, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5);
							if (m_iMag >= m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5)
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
							}
							else
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
								bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
							}
							break;
						case 15: // "Available for above Chr %d"
							wsprintf(cTemp, DRAW_DIALOGBOX_SHOP20, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5);
							if (m_iCharisma >= m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sItemEffectValue5)
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
							}
							else
							{
								PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 40, 10, 10);
								PutAlignedString(sX + 26, sX + 241, sY + 290, cTemp, 40, 10, 10);
								bFlagStatLow = TRUE; // Means some red msg need to be shown at the bottom
							}
							break;

						default:
							break;
					}
					if ((m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wWeight / 100) > m_iStr)
					{
						wsprintf(cTemp, DRAW_DIALOGBOX_SHOP11, (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_wWeight / 100));
						PutAlignedString(sX + 25, sX + 240, sY + 310, cTemp, 195, 25, 25);
						PutAlignedString(sX + 26, sX + 241, sY + 310, cTemp, 195, 25, 25); // "*Your STR should be at least %d to use this item."
						bFlagRedShown = TRUE;
					}
					else if (bFlagStatLow == TRUE) // Means some stat is too low
					{
						strcpy(cTemp, DRAW_DIALOGBOX_SHOP21); // "(Warning!) Your stat is too low for this item."
						PutAlignedString(sX + 25, sX + 240, sY + 310, cTemp, 195, 25, 25);
						PutAlignedString(sX + 26, sX + 241, sY + 310, cTemp, 195, 25, 25);
						bFlagRedShown = TRUE;
					}
					else if ((strstr(m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_cName, "(M)") != NULL) && (m_sPlayerType > 3))
					{
						strcpy(cTemp, DRAW_DIALOGBOX_SHOP22); // "(Warning!) only for male."
						PutAlignedString(sX + 25, sX + 240, sY + 310, cTemp, 195, 25, 25);
						PutAlignedString(sX + 26, sX + 241, sY + 310, cTemp, 195, 25, 25);
						bFlagRedShown = TRUE;
					}
					else if ((strstr(m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_cName, "(W)") != NULL) && (m_sPlayerType <= 3))
					{
						strcpy(cTemp, DRAW_DIALOGBOX_SHOP23); // "(Warning!) only for female."
						PutAlignedString(sX + 25, sX + 240, sY + 310, cTemp, 195, 25, 25);
						PutAlignedString(sX + 26, sX + 241, sY + 310, cTemp, 195, 25, 25);
						bFlagRedShown = TRUE;
					}
					break;

				case DEF_EQUIPPOS_NONE:
					break;
			}

			if (m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sLevelLimit != 0)
			{
				strcpy(cTemp, DRAW_DIALOGBOX_SHOP24); // "Level"
				if (DecriptInt(m_iLevel) >= m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sLevelLimit)
				{
					PutString(sX + 90, sY + 290, cTemp, RGB(40, 10, 10));
					PutString(sX + 91, sY + 290, cTemp, RGB(40, 10, 10));
					wsprintf(cTemp, DRAW_DIALOGBOX_SHOP25, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sLevelLimit);
					PutString(sX + 140, sY + 290, cTemp, RGB(255, 255, 255));// ": above %d"
				}
				else
				{
					PutString(sX + 90, sY + 290, cTemp, RGB(40, 10, 10));
					PutString(sX + 91, sY + 290, cTemp, RGB(40, 10, 10));
					wsprintf(cTemp, DRAW_DIALOGBOX_SHOP25, m_pItemSellList[m_stDialogBoxInfo[54].cMode]->m_sLevelLimit);
					PutString(sX + 140, sY + 290, cTemp, RGB(255, 255, 255));// ": above %d"
					if (bFlagRedShown == FALSE)
					{
						strcpy(cTemp, DRAW_DIALOGBOX_SHOP26); // "(Warning!) Your level is too low for this item."
						PutAlignedString(sX + 25, sX + 240, sY + 290, cTemp, 195, 25, 25);
						PutAlignedString(sX + 25 + 1, sX + 240 + 1, sY + 290, cTemp, 195, 25, 25);
						bFlagRedShown = TRUE;
					}
				}
			}

			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 339, 31);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 30, sY + 339, 30);

			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY))
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 154, sY + 339, 17);
			else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 154, sY + 339, 16);
	}
}

void CGame::DlgBoxClick_OpenCharSell(short msX, short msY)
{
	short sX, sY;
	sX = m_stDialogBoxInfo[54].sX;
	sY = m_stDialogBoxInfo[54].sY;
	int i;// , x;

	switch (m_stDialogBoxInfo[54].sView)
	{
		case 1:
			for (i = 0; i < DEF_MAXSELLITEMSLIST; i++)
			{
				if ((msX > sX + 20) && (msX < sX + 250) && (msY >= sY + 50 + i * 15) && (msY <= sY + 50 + 14 + i * 15))
				{
					if (m_pItemSellList[i] != NULL)
					{
						m_stDialogBoxInfo[54].sView = 2;
						m_stDialogBoxInfo[54].cMode = i;
					}
					return;
				}
			}
			break;
		case 2:
			if ((msX >= sX + 30) && (msX <= sX + 30 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY))
			{
				if ((50 - _iGetTotalItemNum()) < 1) AddEventList(DLGBOX_CLICK_SHOP1, 10);
				else {
					DecriptString(OpenSellName);
					bSendCommand(CLIENT_REQUEST_PURCHASE, NULL, NULL, m_stDialogBoxInfo[54].cMode, DecriptInt(TotalItemsSell), NULL, OpenSellName);
					EncriptString(OpenSellName);

					m_stDialogBoxInfo[54].cMode = 0;
					m_stDialogBoxInfo[54].sView = 1;
					PlaySound('E', 14, 5);
				}
			}

			if ((msX >= sX + 154) && (msX <= sX + 154 + DEF_BTNSZX) && (msY >= sY + 339) && (msY <= sY + 339 + DEF_BTNSZY))
			{
				PlaySound('E', 14, 5);
				m_stDialogBoxInfo[54].sView = 1;
			}
			break;
	}
}
//error market
BOOL CGame::bCheckOpenMarket()
{
	short PlayerX, PlayerY;

	PlayerX = m_sPlayerX;
	PlayerY = m_sPlayerY;

	// First Line
	if (((PlayerX == 88) && (PlayerY == 92)) ||
		((PlayerX == 85) && (PlayerY == 94)) ||
		((PlayerX == 82) && (PlayerY == 96)) ||
		((PlayerX == 79) && (PlayerY == 98)) ||
		((PlayerX == 76) && (PlayerY == 100)) ||
		((PlayerX == 73) && (PlayerY == 102)) ||
		((PlayerX == 70) && (PlayerY == 104)) ||
		((PlayerX == 67) && (PlayerY == 106)) ||
		((PlayerX == 64) && (PlayerY == 108)) ||
		((PlayerX == 61) && (PlayerY == 110)) ||
		// Second Line
		((PlayerX == 67) && (PlayerY == 115)) ||
		((PlayerX == 70) && (PlayerY == 113)) ||
		((PlayerX == 73) && (PlayerY == 111)) ||
		((PlayerX == 76) && (PlayerY == 109)) ||
		((PlayerX == 79) && (PlayerY == 107)) ||
		((PlayerX == 82) && (PlayerY == 105)) ||
		((PlayerX == 85) && (PlayerY == 103)) ||
		((PlayerX == 88) && (PlayerY == 101)) ||
		((PlayerX == 91) && (PlayerY == 99)) ||
		((PlayerX == 94) && (PlayerY == 97)) ||
		// Thirth Line
		((PlayerX == 95) && (PlayerY == 99)) ||
		((PlayerX == 92) && (PlayerY == 101)) ||
		((PlayerX == 89) && (PlayerY == 103)) ||
		((PlayerX == 86) && (PlayerY == 105)) ||
		((PlayerX == 83) && (PlayerY == 107)) ||
		((PlayerX == 80) && (PlayerY == 109)) ||
		((PlayerX == 77) && (PlayerY == 111)) ||
		((PlayerX == 74) && (PlayerY == 113)) ||
		((PlayerX == 71) && (PlayerY == 115)) ||
		((PlayerX == 68) && (PlayerY == 117)) ||
		// Four Line
		((PlayerX == 76) && (PlayerY == 121)) ||
		((PlayerX == 79) && (PlayerY == 119)) ||
		((PlayerX == 82) && (PlayerY == 117)) ||
		((PlayerX == 85) && (PlayerY == 115)) ||
		((PlayerX == 88) && (PlayerY == 113)) ||
		((PlayerX == 91) && (PlayerY == 111)) ||
		((PlayerX == 94) && (PlayerY == 109)) ||
		((PlayerX == 97) && (PlayerY == 107)) ||
		((PlayerX == 100) && (PlayerY == 105)) ||
		((PlayerX == 103) && (PlayerY == 103)) ||
		// Five Line
		((PlayerX == 104) && (PlayerY == 105)) ||
		((PlayerX == 101) && (PlayerY == 107)) ||
		((PlayerX == 98) && (PlayerY == 109)) ||
		((PlayerX == 95) && (PlayerY == 111)) ||
		((PlayerX == 92) && (PlayerY == 113)) ||
		((PlayerX == 89) && (PlayerY == 115)) ||
		((PlayerX == 86) && (PlayerY == 117)) ||
		((PlayerX == 83) && (PlayerY == 119)) ||
		((PlayerX == 80) && (PlayerY == 121)) ||
		((PlayerX == 77) && (PlayerY == 123)) ||
		// Six Line
		((PlayerX == 85) && (PlayerY == 127)) ||
		((PlayerX == 88) && (PlayerY == 125)) ||
		((PlayerX == 91) && (PlayerY == 123)) ||
		((PlayerX == 94) && (PlayerY == 121)) ||
		((PlayerX == 97) && (PlayerY == 119)) ||
		((PlayerX == 100) && (PlayerY == 117)) ||
		((PlayerX == 103) && (PlayerY == 115)) ||
		((PlayerX == 106) && (PlayerY == 113)) ||
		((PlayerX == 109) && (PlayerY == 111)) ||
		((PlayerX == 112) && (PlayerY == 109)))
		return TRUE;
	else
		return FALSE;
}

BOOL CGame::CheckItemStatReq(char iItemID)
{
	DecriptString(m_cCurLocation);
	if ((memcmp(m_cCurLocation, "EventDk", 7) == 0) || (memcmp(m_cCurLocation, "evento14", 8) == 0))
	{

		bool itemAllowed = false;

		const char* allowedItems[] = {
			"DarkKnightHauberk", "DarkKnightFullHelm", "DarkKnightLeggings",
			"DarkKnightPlateMail", "DarkMageHauberk", "DarkMageChainMail",
			"DarkMageLeggings", "DarkMageRobe", "DarkMageLedderArmor",
			"DarkMageScaleMail", "DarkKnightHauberkW", "DarkKnightFullHelmW",
			"DarkKnightLeggingsW", "DarkKnightPlateMailW", "DarkMageHauberkW",
			"DarkMageChainMailW", "DarkMageLeggingsW", "DarkMageRobeW",
			"SangAhFlameberge", "DarkKnightFlameberge", "DarkKnightGreatSword",
			"DarkKnightFlamebergW", "SangAhGiantSword", "DarkKnightGiantSword",
			"BlackKnightTemple", "DarkKnightHammer", "DarkKnightBHammer",
			"DarkKnightBBHammer", "DarkMageMagicStaff", "DarkMageMagicStaffW",
			"DarkMageMagicWand", "BlackMageTemple", "DarkKnightRapier",
			"DarkMageHat(W)", "DarkMageHat(M)"
		};
		int numAllowedItems = sizeof(allowedItems) / sizeof(allowedItems[0]);

		for (int i = 0; i < numAllowedItems; i++)
		{
			if (strcmp(m_pItemList[iItemID]->m_cName, allowedItems[i]) == 0)
			{
				itemAllowed = true;
				EncriptString(m_cCurLocation);
				break;
			}
		}

		if (!itemAllowed)
		{
			AddEventList("En este mapa solo puedes usar Items DK", 10);
			EncriptString(m_cCurLocation);
			return false;
		}
	}	

	if (strcmp(m_pItemList[iItemID]->m_cName, "StormBringer") == 0) {
		if ((m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) < 65 || (m_iDex + m_sRankAddDex + DecriptInt(m_iAngelicDex)) < 200) {
			AddEventList("You need 65 int and 200 dex to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "ResurWand(MS.30)") == 0 || strcmp(m_pItemList[iItemID]->m_cName, "ResurWand(MS.10)") == 0) {
		if ((m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) < 99 || (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) < 99) {
			AddEventList("You need 99 int and 99 mag to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "PowerHeroSword") == 0 || strcmp(m_pItemList[iItemID]->m_cName, "StripIceHammer") == 0) {
		if ((m_iStr + m_sRankAddStr + DecriptInt(m_iAngelicStr)) < 200 || (m_iDex + m_sRankAddDex + DecriptInt(m_iAngelicDex)) < 200) {
			AddEventList("You need 200 str and 200 dex to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "AresdenStormBringer") == 0 || strcmp(m_pItemList[iItemID]->m_cName, "ElvineStormBringer") == 0) {
		if ((m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) < 65 || (m_iDex + m_sRankAddDex + DecriptInt(m_iAngelicDex)) < 200) {
			AddEventList("You need 65 int and 200 dex to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "PowerHeroWand") == 0 || 		
		strcmp(m_pItemList[iItemID]->m_cName, "BerserkWand(MS.30)") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "BerserkWand(MS.10)") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "PkssWand(MS.40)") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "BlackZWand(MS.32)") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "PkssWand(MS.20)") == 0) {
		if ((m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) < 200 || (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) < 200) {
			AddEventList("You need 200 int and 200 mag to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "KlonessWand(MS.30)") == 0 || strcmp(m_pItemList[iItemID]->m_cName, "KlonessWand(MS.10)") == 0) {
		if ((m_iInt + m_sRankAddInt + DecriptInt(m_iAngelicInt)) < 100 || (m_iMag + m_sRankAddMag + DecriptInt(m_iAngelicMag)) < 200) {
			AddEventList("You need 100 int and 200 mag to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "PkssBarbarian") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "PkssBlade") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "PkssAxe") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "KlonessBlade") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "KlonessAxe") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "BlackHammer") == 0) {
		if ((m_iDex + m_sRankAddDex + DecriptInt(m_iAngelicDex)) < 200) {
			AddEventList("You need 200 dex to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "BlackDevastator") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "The_Devastator") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "AresElfBow") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "ElvinElfBow") == 0) {
		if ((m_iDex + m_sRankAddDex + DecriptInt(m_iAngelicDex)) < 100) {
			AddEventList("You need 100 dex to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "DarkElfBow") == 0 || strcmp(m_pItemList[iItemID]->m_cName, "DarkExecutor") == 0) {
		if ((m_iDex + m_sRankAddDex + DecriptInt(m_iAngelicDex)) < 100) {
			AddEventList("You need 100 dex to equip", 10);
			return false;
		}
	}
	else if (strcmp(m_pItemList[iItemID]->m_cName, "LightingBlade") == 0 || strcmp(m_pItemList[iItemID]->m_cName, "DemonSlayer") == 0 ||
		strcmp(m_pItemList[iItemID]->m_cName, "GiantBattleHammer") == 0) {
		if ((m_iDex + m_sRankAddDex + DecriptInt(m_iAngelicDex)) < 150) {
			AddEventList("You need 150 dex to equip", 10);
			return false;
		}
	}
	//EncriptString(m_cCurLocation);
	//EncriptString(m_cMapName);
	return true;
}

//heaton rebirth changed
void CGame::notifyLevelChange()
{
	switch (m_sPlayerType) {
	case 1:
	case 2:
	case 3:
		PlaySound('C', 21, 0);
		break;

	case 4:
	case 5:
	case 6:
		PlaySound('C', 22, 0);
		break;
	}

	_RemoveChatMsgListByObjectID(m_sPlayerObjectID);

	for (int i = 1; i < DEF_MAXCHATMSGS; i++)
		if (m_pChatMsgList[i] == NULL) {
			ZeroMemory(G_cTxt, sizeof(G_cTxt));
			strcpy(G_cTxt, "Rebirth!");
			m_pChatMsgList[i] = new class CMsg(23, G_cTxt, m_dwCurTime);
			m_pChatMsgList[i]->m_iObjectID = m_sPlayerObjectID;

			if (m_pMapData->bSetChatMsgOwner(m_sPlayerObjectID, -10, -10, i) == FALSE) {
				delete m_pChatMsgList[i];
				m_pChatMsgList[i] = NULL;
			}
			return;
		}
}

void CGame::GameRecvMsgHandler(DWORD dwMsgSize, char * pData)
{
	DWORD * dwpMsgID;
	dwpMsgID = (DWORD *)(pData + DEF_INDEX4_MSGID);
	switch (*dwpMsgID) {

	case REQUEST_MARKETITEMS:
		MarketItems(pData + 6);
		break;

	case REQUEST_MARKETNAMES:
		MarketNames(pData + 6);
		break;

	case NOTIFY_PING:
	//	endTime = std::chrono::high_resolution_clock::now();
		break;

	case NOT_CHARQUESTS:
		get_charquests(pData + 6);
		break;
	case NOT_CHARQUESTS2:
		get_charquests_byindex(pData + 6);
		break;

	case NOT_QUESTLIST:
		get_questlist(pData + 6);
		break;

	case NOT_TRADE_EK:
		get_trade_ek(pData + 6);
		break;

	case NOT_TRADE_CONTRIB:
		get_trade_contrib(pData + 6);
		break;

	case NOT_TRADE_COIN:
		get_trade_coin(pData + 6);
		break;

	case NOT_TRADE_MAJS:
		get_trade_majs(pData + 6);
		break;

		case CLIENT_RESPONSE_CHARGED_TELEPORT:
			ResponseChargedTeleport(pData);
			break;

		case NOT_COMMAND:
			getCommandHandler(pData + 6);
			break;

		case NOT_ITEMDATA:
			n_flooitem((pData + 6));	
			break;

		case NOT_RANKEXP:
			getrankexp((pData + 6));
			break;
		case NOTIFY_LEVELCHANGE:
			notifyLevelChange();
			break;
		case NOT_SHINNING_UPDATE:
			shinning_update((pData + 6));
			break;
		case NOT_DMTOP:
			get_top_deathmatch(pData + 6);
			break;
		case NOT_NEWWEIGHT:
			getNewItemWeight(pData + 6);
			break;

		case NOT_NEWENDURANCE:
			getNewItemEndurance(pData + 6);
			break;

		case NOT_DMPOINTS:
			get_dm_points(pData + 6);
			break;

		case NOT_SHINNINGSTATUS:
			shinning_status((pData + 6));
			break;

		case NOT_SHINNINGSTATUS_ONLYCLIENT:
			shinning_status_onlyclient((pData + 6));
			break;

		case NOT_SHINNING_CLEAR:
			shinning_clear((pData + 6));
			break;

		case NOT_OBJECTS_DATA:
			GetObjectsData(pData + 6);
			break;

		case NOT_NPC_HEALTH:
			getNpcHealth(pData + 6);
			break;
		case NOT_RANKSTATS:
			getrankstats(pData + 6);
			break;

		case NOT_CINSERT:
			getcinsertstatus(pData + 6);
			break;

		case NOT_CDELETE:
			getcdeletestatus(pData + 6);
			break;

		case NOT_RANKLEVELUP:
			ranklevelup((pData + 6));
			break;

		case CLIENT_RESPONSE_TELEPORT_LIST:
			ResponseTeleportList(pData);
			break;

			/*case MSGID_RESPONSE_HELDENIAN_TP_LIST: // Snoopy Heldenian TP
				ResponseHeldenianTeleportList(pData);
				break;*/

		case CLIENT_RESPONSE_NOTICEMENT:
			NoticementHandler(pData);
			break;

		case CLIENT_COMMON_DYNAMICOBJECT:
			DynamicObjectHandler(pData);
			break;

		case CLIENT_RESPONSE_INITPLAYER:
			InitPlayerResponseHandler(pData);
			break;

		case CLIENT_RESPONSE_INITDATA:
			InitDataResponseHandler(pData);
			break;

		case CLIENT_RESPONSE_COMMAND_MOTION:
			MotionResponseHandler(pData);
			break;

		case CLIENT_COMMON_EVENT:
			CommonEventHandler(pData);
			break;

		case CLIENT_COMMON_EVENT_MOTION:
			MotionEventHandler(pData);
			break;

		case CLIENT_COMMON_COMMAND_LOG:
			LogEventHandler(pData);
			break;

		case CLIENT_REQUEST_COMMAND_CHATMSG:
			ChatMsgHandler(pData);
			break;

		case CLIENT_RESPONSE_PLAYERITEMLISTCONTENTS:
			InitItemList(pData);
			break;

		case CLIENT_NOTIFY:
			NotifyMsgHandler(pData);
			break;

		case CLIENT_RESPONSE_CREATENEWGUILD:
			CreateNewGuildResponseHandler(pData);
			break;

		case CLIENT_RESPONSE_DISBANDGUILD:
			DisbandGuildResponseHandler(pData);
			break;

		case CLIENT_RESPONSE_PLAYERCHARACTERCONTENTS:
			InitPlayerCharacteristics(pData);
			ReadSettingsCFG();
			break;

		case CLIENT_RESPONSE_CIVILRIGHT:
			CivilRightAdmissionHandler(pData);
			break;

		case CLIENT_RESPONSE_RETRIEVEITEM:
			RetrieveItemHandler(pData);
			break;

		case CLIENT_RESPONSE_PANNING:
			ResponsePanningHandler(pData);
			break;

		case CLIENT_RESPONSE_FIGHTZONE_RESERVE:
			ReserveFightzoneResponseHandler(pData);
			break;
	}
}

void CGame::NotifyMsg_GiveItemFin_EraseItem(char *pData)
{
	char * cp;
	WORD * wp;
	int  * ip, iAmount;
	short  sItemIndex;
	char cName[21], cTxt[250];

	cp = (char *)(pData + DEF_INDEX2_MSGTYPE + 2);

	wp = (WORD *)cp;
	sItemIndex = *wp;
	cp += 2;

	ip = (int *)cp;
	iAmount = *ip;
	cp += 4;

	ZeroMemory(cName, sizeof(cName));
	memcpy(cName, cp, 20);
	cp += 20;

	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[sItemIndex]->m_cName, m_pItemList[sItemIndex]->m_dwAttribute, cStr1, cStr2, cStr3, m_pItemList[sItemIndex]->m_sItemSpecEffectValue3);

	if (m_bIsItemEquipped[sItemIndex] == TRUE) {
		wsprintf(cTxt, ITEM_EQUIPMENT_RELEASED, cStr1);
		AddEventList(cTxt, 10);

		m_sItemEquipmentStatus[m_pItemList[sItemIndex]->m_cEquipPos] = -1;
		m_bIsItemEquipped[sItemIndex] = FALSE;
	}

	//if (DecriptBool(MarketOpen) && m_bIsDialogEnabled[49])
	if (MarketOpen && m_bIsDialogEnabled[49])
	{
		for (short i = 0; i < DEF_MAXSELLITEMSLIST; i++)
		{
			if (m_stItemListToSell[i].iIndex == -1) break;
			else
			{
				if (m_stItemListToSell[i].iIndex == sItemIndex)
					m_stItemListToSell[i].uiPrice = -1;
			}
		}
	}

	if (strlen(cName) == 0) wsprintf(cTxt, NOTIFYMSG_GIVEITEMFIN_ERASEITEM2, iAmount, cStr1);
	else
	{
		if (strcmp(cName, "Howard") == 0)
			wsprintf(cTxt, NOTIFYMSG_GIVEITEMFIN_ERASEITEM3, iAmount, cStr1);
		else if (strcmp(cName, "William") == 0)
			wsprintf(cTxt, NOTIFYMSG_GIVEITEMFIN_ERASEITEM4, iAmount, cStr1);
		else if (strcmp(cName, "Kennedy") == 0)
			wsprintf(cTxt, NOTIFYMSG_GIVEITEMFIN_ERASEITEM5, iAmount, cStr1);
		else if (strcmp(cName, "Tom") == 0)
			wsprintf(cTxt, NOTIFYMSG_GIVEITEMFIN_ERASEITEM7, iAmount, cStr1);
		else wsprintf(cTxt, NOTIFYMSG_GIVEITEMFIN_ERASEITEM8, iAmount, cStr1, cName);
	}
	AddEventList(cTxt, 10);

	EraseItem((char)sItemIndex);
	_bCheckBuildItemStatus();
}

void CGame::UpdateScreen_OnSelectCharacter(short sX, short sY, short msX, short msY, BOOL bIgnoreFocus)
{
	int i;
	int iYear, iMonth, iDay, iHour, iMinute;
	__int64 iTemp1, iTemp2;
	char cTotalChar = 0;

	int add_x = 0;
	int add_y = 0;

	if (c_reso->IsResolution() == C800x600)
	{
		add_x = 80;
		add_y = 60;
	}
	else if (c_reso->IsResolution() == C1024x768)
	{
		add_x = 192;
		add_y = 144;
	}

	m_DDraw.ClearBackB4();
	DWORD dwTime = timeGetTime();
	sY = 10;
	/*//DrawNewDialogBox(SPRID_INTERFACE_ND_SELECTCHAR, add_x, add_y, 0);
	if (!bOnGame)
	{
		if (c_reso->IsResolution() == C640x480)	DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND640, 0, 0, 0, TRUE); else if (c_reso->IsResolution() == C800x600) DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND800, 0, 0, 0, TRUE); else if (c_reso->IsResolution() == C1024x768) DrawNewDialogBox(SPRID_INTERFACE_BACKGROUND1024, 0, 0, 0, TRUE);
	}*/
	if (c_reso->IsResolution() == C640x480)
		m_pSprite[SPRID_BACKGROUND]->PutSpriteFast(0, 0, 0, dwTime);
	else if (c_reso->IsResolution() == C800x600)
		m_pSprite[SPRID_BACKGROUND + 1]->PutSpriteFast(0, 0, 0, dwTime);
	else if (c_reso->IsResolution() == C1024x768)
		m_pSprite[SPRID_BACKGROUND + 2]->PutSpriteFast(0, 0, 0, dwTime);

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 50);



	iTemp1 = 0;
	iTemp2 = 0;
	iYear = iMonth = iDay = iHour = iMinute = 0;
	for (i = 0; i < 4; i++)
	{
		if ((m_cCurFocus - 1 == i) && (bIgnoreFocus == FALSE))
			m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(sX + add_x + 110 + i * 109 - 7, 63 - 9 + add_y, 62, dwTime);
		else m_pSprite[DEF_SPRID_INTERFACE_ND_BUTTON]->PutSpriteFast(sX + add_x + 110 + i * 109 - 7, 63 - 9 + add_y, 61, dwTime);

		if (m_pCharList[i] != NULL)
		{
			cTotalChar++;
			switch (m_pCharList[i]->m_sSex) {
			case 1:	_tmp_sOwnerType = 1; break;
			case 2:	_tmp_sOwnerType = 4; break;
			}
			_tmp_sOwnerType += m_pCharList[i]->m_sSkinCol - 1;
			_tmp_cDir = m_cMenuDir;
			_tmp_sAppr1 = m_pCharList[i]->m_sAppr1;
			_tmp_sAppr2 = m_pCharList[i]->m_sAppr2;
			_tmp_sAppr3 = m_pCharList[i]->m_sAppr3;
			_tmp_sAppr4 = m_pCharList[i]->m_sAppr4;
			_tmp_iApprColor = m_pCharList[i]->m_iApprColor; // v1.4

			ZeroMemory(_tmp_cName, sizeof(_tmp_cName));
			memcpy(_tmp_cName, m_pCharList[i]->m_cName, 10);
			// CLEROTH - NO USE
			_tmp_cAction = DEF_OBJECTMOVE;
			_tmp_cFrame = m_cMenuFrame;

			if (m_pCharList[i]->m_sSex != NULL)
			{
				if (m_Misc.bCheckValidString(m_pCharList[i]->m_cName) == TRUE)
				{
					m_pEffectSpr[0]->PutTransSprite(sX + add_x + 157 + i * 109, sY + add_y + 138, 1, dwTime);
					DrawObject_OnMove_ForMenu(0, 0, sX + add_x + 157 + i * 109, sY + add_y + 138, FALSE, dwTime, 0, 0);
					PutString(sX + add_x + 112 + i * 109, sY + 179 - 9 + add_y, m_pCharList[i]->m_cName, RGB(51, 0, 51));//25,35,25);
					int	_sLevel = m_pCharList[i]->m_sLevel;
					wsprintf(G_cTxt, "%d", _sLevel);
					PutString(sX + add_x + 138 + i * 109, sY + add_y + 196 - 10, G_cTxt, RGB(51, 0, 51)); //25,35,25);

					wsprintf(G_cTxt, "%d", m_pCharList[i]->m_iExp);
					PutString(sX + add_x + 138 + i * 109, sY + add_y + 211 - 10, G_cTxt, RGB(51, 0, 51)); //25,35,25);
				}
				iTemp2 = m_pCharList[i]->m_iYear * 1000000 + m_pCharList[i]->m_iMonth * 60000 + m_pCharList[i]->m_iDay * 1700 + m_pCharList[i]->m_iHour * 70 + m_pCharList[i]->m_iMinute;
				if (iTemp1 < iTemp2)
				{
					iYear = m_pCharList[i]->m_iYear;
					iMonth = m_pCharList[i]->m_iMonth;
					iDay = m_pCharList[i]->m_iDay;
					iHour = m_pCharList[i]->m_iHour;
					iMinute = m_pCharList[i]->m_iMinute;
					iTemp1 = iTemp2;
				}
			}
		}
	}
	i = 0;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 51);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 52);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 53);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 54);
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 55);

	if ((msX > 360 + add_x) && (msY >= 283 + add_y) && (msX < 545 + add_x) & (msY <= 315 + add_y)) {
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 56);
		PutAlignedString(98 + add_x, 357 + add_x, 290 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER1, 255, 255, 255);//"
		PutAlignedString(98 + add_x, 357 + add_x, 305 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER2, 255, 255, 255);//"
		PutAlignedString(98 + add_x, 357 + add_x, 320 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER3, 255, 255, 255);//"
		PutAlignedString(98 + add_x, 357 + add_x, 335 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER4, 255, 255, 255);//"
	}
	else
		if ((msX > 360 + add_x) && (msY >= 316 + add_y) && (msX < 545 + add_x) & (msY <= 345 + add_y)) {
			DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 57);
			PutAlignedString(98 + add_x, 357 + add_x, 305 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER5, 255, 255, 255);//"

		}
		else
			if ((msX > 360 + add_x) && (msY >= 346 + add_y) && (msX < 545 + add_x) & (msY <= 375 + add_y)) {

				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 58);
				PutAlignedString(98 + add_x, 357 + add_x, 275 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER6, 255, 255, 255);//"
				PutAlignedString(98 + add_x, 357 + add_x, 290 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER7, 255, 255, 255);//"
				PutAlignedString(98 + add_x, 357 + add_x, 305 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER8, 255, 255, 255);//"
				PutAlignedString(98 + add_x, 357 + add_x, 320 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER9, 255, 255, 255);//"
				PutAlignedString(98 + add_x, 357 + add_x, 335 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER10, 255, 255, 255);//"
				PutAlignedString(98 + add_x, 357 + add_x, 350 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER11, 255, 255, 255);//"

			}
			else if ((msX > 360 + add_x) && (msY >= 376 + add_y) && (msX < 545 + add_x) & (msY <= 405 + add_y))
			{
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 59);
				PutAlignedString(98 + add_x, 357 + add_x, 305 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER12, 255, 255, 255);//"
			}
			else if ((msX > 360 + add_x) && (msY >= 406 + add_y) && (msX < 545 + add_x) & (msY <= 435 + add_y)) {
				DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, add_x, add_y, 60);
				PutAlignedString(98 + add_x, 357 + add_x, 305 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER13, 255, 255, 255);//"
			}
			else
			{
				if (cTotalChar == 0)
				{
					PutAlignedString(98 + add_x, 357 + add_x, 275 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER14, 255, 255, 255);//"
					PutAlignedString(98 + add_x, 357 + add_x, 290 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER15, 255, 255, 255);//"
					PutAlignedString(98 + add_x, 357 + add_x, 305 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER16, 255, 255, 255);//"
					PutAlignedString(98 + add_x, 357 + add_x, 320 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER17, 255, 255, 255);//"New Character
					PutAlignedString(98 + add_x, 357 + add_x, 335 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER18, 255, 255, 255);//"
				}
				else if (cTotalChar < 4)
				{
					PutAlignedString(98 + add_x, 357 + add_x, 275 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER19, 255, 255, 255);//"
					PutAlignedString(98 + add_x, 357 + add_x, 290 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER20, 255, 255, 255);//"Play¹
					PutAlignedString(98 + add_x, 357 + add_x, 305 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER21, 255, 255, 255);//"
					PutAlignedString(98 + add_x, 357 + add_x, 320 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER22, 255, 255, 255);//"
					PutAlignedString(98 + add_x, 357 + add_x, 335 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER23, 255, 255, 255);//"Delete Character
					PutAlignedString(98 + add_x, 357 + add_x, 350 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER24, 255, 255, 255);//"
				}
				if (cTotalChar == 4)
				{
					PutAlignedString(98 + add_x, 357 + add_x, 290 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER25, 255, 255, 255);//"
					PutAlignedString(98 + add_x, 357 + add_x, 305 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER26, 255, 255, 255);//"Play
					PutAlignedString(98 + add_x, 357 + add_x, 320 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER27, 255, 255, 255);//"Delete Character
					PutAlignedString(98 + add_x, 357 + add_x, 335 + 15 + add_y, UPDATE_SCREEN_ON_SELECT_CHARACTER28, 255, 255, 255);//"
				}
			}
}

void CGame::DrawDialogBox_PurchaseAssasainsPoints(short msX, short msY)
{
	short sX, sY;
	int temp;

	sX = m_stDialogBoxInfo[60].sX;
	sY = m_stDialogBoxInfo[60].sY;
	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_GAME2, sX, sY, 2);

	PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 29, "Purchase Assassin's Points", 45, 25, 25);
	PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 30, "Purchase Assassin's Points", 255, 255, 255);

	wsprintf(G_cTxt, "To purchase %d Assassin's points", DEF_PURCHASE_ASSASAINPOINTS);
	PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 64, G_cTxt, 45, 25, 25);
	PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 65, G_cTxt, 255, 255, 255);

	PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 94, "You need:", 45, 25, 25);
	PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 95, "You need:", 255, 255, 255);

	temp = 0;
	if (DEF_AP_EKNEED != 0) {
		wsprintf(G_cTxt, "%d Enemy Kill Points", DEF_AP_EKNEED);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 114 + temp, G_cTxt, 45, 25, 25);
		if (m_iEnemyKillCount >= DEF_AP_EKNEED) {
			if (m_stDialogBoxInfo[60].sV1 == 1)
				PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 200, 0);
			else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 0, 255, 0);
		}
		else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 0, 0);
		temp += 30;
	}

	if (DEF_AP_CONTRIBNEED != 0) {
		wsprintf(G_cTxt, "%d Contribution Points", DEF_AP_CONTRIBNEED);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 114 + temp, G_cTxt, 45, 25, 25);

		if (m_iContribution >= DEF_AP_CONTRIBNEED) {
			if (m_stDialogBoxInfo[60].sV1 == 2)
				PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 200, 0);
			else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 0, 255, 0);
		}
		else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 0, 0);
		temp += 30;
	}

	if (DEF_AP_COINSNEED != 0) {
		wsprintf(G_cTxt, "%d Coins Points", DEF_AP_COINSNEED);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 114 + temp, G_cTxt, 45, 25, 25);
		//if (Coins >= DEF_AP_COINSNEED) {
		if (m_iCoins >= DEF_AP_COINSNEED) {
			if (m_stDialogBoxInfo[60].sV1 == 3)
				PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 200, 0);
			else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 0, 255, 0);
		}
		else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 0, 0);
		temp += 30;
	}

	if (DEF_AP_EXPRANKNEED != 0) {
		wsprintf(G_cTxt, "%d RankExp Points", DEF_AP_EXPRANKNEED);
		PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 114 + temp, G_cTxt, 45, 25, 25);
		if (m_iRankExp >= DEF_AP_EXPRANKNEED) {
			if (m_stDialogBoxInfo[60].sV1 == 4)
				PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 200, 0);
			else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 0, 255, 0);
		}
		else PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 0, 0);
		temp += 30;
	}

	wsprintf(G_cTxt, "So far has %d Assassin's points.", DecriptInt(AssasainPoints));
	PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 114 + temp, G_cTxt, 45, 25, 25);
	PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 115 + temp, G_cTxt, 255, 255, 255);

	wsprintf(G_cTxt, "You still need %d Assassin's points to convert in Assassin.", DEF_ASSASAINPOINTS - DecriptInt(AssasainPoints));
	PutAlignedString(sX + 19, sX + m_stDialogBoxInfo[60].sSizeX - 21, sY + 144 + temp, G_cTxt, 45, 25, 25);
	PutAlignedString(sX + 20, sX + m_stDialogBoxInfo[60].sSizeX - 20, sY + 145 + temp, G_cTxt, 255, 255, 255);

	if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 31);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_LBTNPOSX, sY + DEF_BTNPOSY, 30);

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 17);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + DEF_BTNPOSY, 16);
}

void CGame::DlgBoxClick_PurchaseAssasainsPoints(short msX, short msY) {
	short sX, sY;
	int temp;

	sX = m_stDialogBoxInfo[60].sX;
	sY = m_stDialogBoxInfo[60].sY;

	temp = 0;
	if (DEF_AP_EKNEED != 0) {
		if ((msX >= sX + 20) && (msX <= sX + m_stDialogBoxInfo[21].sSizeX - 20) && (msY >= sY + 115 + temp) && (msY <= sY + 140 + temp)) {
			m_stDialogBoxInfo[60].sV1 = 1;
		}
		temp += 30;
	}

	if (DEF_AP_CONTRIBNEED != 0) {
		if ((msX >= sX + 20) && (msX <= sX + m_stDialogBoxInfo[21].sSizeX - 20) && (msY >= sY + 115 + temp) && (msY <= sY + 140 + temp)) {
			m_stDialogBoxInfo[60].sV1 = 2;
		}
		temp += 30;
	}

	if (DEF_AP_COINSNEED != 0) {
		if ((msX >= sX + 20) && (msX <= sX + m_stDialogBoxInfo[21].sSizeX - 20) && (msY >= sY + 115 + temp) && (msY <= sY + 140 + temp)) {
			m_stDialogBoxInfo[60].sV1 = 3;
		}
		temp += 30;
	}

	if (DEF_AP_EXPRANKNEED != 0) {
		if ((msX >= sX + 20) && (msX <= sX + m_stDialogBoxInfo[21].sSizeX - 20) && (msY >= sY + 115 + temp) && (msY <= sY + 140 + temp)) {
			m_stDialogBoxInfo[60].sV1 = 4;
		}
		temp += 30;
	}

	if ((msX >= sX + DEF_LBTNPOSX) && (msX <= sX + DEF_LBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		if (m_stDialogBoxInfo[60].sV1 != 0) {
			bSendCommand(CLIENT_REQUEST_BUY_ASSAPOINTS, NULL, NULL, m_stDialogBoxInfo[60].sV1, NULL, NULL, NULL);
			DisableDialogBox(60);
			PlaySound('E', 14, 5);
		}
	}

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY >= sY + DEF_BTNPOSY) && (msY <= sY + DEF_BTNPOSY + DEF_BTNSZY)) {
		DisableDialogBox(60);
		PlaySound('E', 14, 5);
	}
}

/*int CGame::EncriptInt(int var) {
	short encript;
	encript = (var + 64623);

	return encript;
}

int CGame::DecriptInt(int var) {
	short decript;
	decript = (var - 64623);

	return decript;
}

void CGame::EncriptString(char var[]) {

	char KeyS[19] = { 89, 66, 78, 110, 53, 90, 87, 115, 43, 77, 49, 64, 69, 106, 80, 73, 120, 54, 102 };


	int z = 0;
	bool reverse = false;
	short len = strlen(var);

	for (int i = 0; i < len; i++) {
		if (z == 19) reverse = true;
		if (z == 0) reverse = false;

		var[i] += (i ^ KeyS[z]);
		var[i] = (char)(var[i] ^ (KeyS[z] ^ (len - i)));

		if (!reverse) z++;
		else z--;
	}
}

void CGame::DecriptString(char var[]) {

	char KeyS[19] = { 89, 66, 78, 110, 53, 90, 87, 115, 43, 77, 49, 64, 69, 106, 80, 73, 120, 54, 102 };


	int z = 0;
	bool reverse = false;
	short len = strlen(var);

	for (int i = 0; i < len; i++) {
		if (z == 19) reverse = true;
		if (z == 0) reverse = false;

		var[i] = (char)(var[i] ^ (KeyS[z] ^ (len - i)));
		var[i] -= (i ^ KeyS[z]);

		if (!reverse) z++;
		else z--;
	}
}

char CGame::EncriptBool(bool var) {
	char encript;

	if (var) encript = 23;
	else  encript = 17;

	return encript;
}

BOOL CGame::DecriptBool(char var) {
	bool decript;

	if (var == 23) decript = true;
	else decript = false;

	return decript;
}*/

int CGame::EncriptInt(int var) {
	return var;
}

int CGame::DecriptInt(int var) {
	return var;
}

void CGame::EncriptString(char var[]) {
}

void CGame::DecriptString(char var[]) {
}

char CGame::EncriptBool(bool var) {
	return var;
}

BOOL CGame::DecriptBool(char var) {
	return var;
}

void CGame::InitDialogs()
{
	//Confirm Menu
	m_stDialogBoxInfo[80].sX = 100;
	m_stDialogBoxInfo[80].sY = 50;
	m_stDialogBoxInfo[80].sSizeX = 252;
	m_stDialogBoxInfo[80].sSizeY = 130;

	//trade ek
	m_stDialogBoxInfo[79].sX = 20;
	m_stDialogBoxInfo[79].sY = 65;
	m_stDialogBoxInfo[79].sSizeX = 258; // 238
	m_stDialogBoxInfo[79].sSizeY = 339; // 274

	//quest list
	m_stDialogBoxInfo[77].sX = 100;
	m_stDialogBoxInfo[77].sY = 50;
	m_stDialogBoxInfo[77].sSizeX = 353; // 238
	m_stDialogBoxInfo[77].sSizeY = 339; // 274

	//char quests
	m_stDialogBoxInfo[78].sX = 100;
	m_stDialogBoxInfo[78].sY = 50;
	m_stDialogBoxInfo[78].sSizeX = 353; // 238
	m_stDialogBoxInfo[78].sSizeY = 339; // 274

	//Market
	m_stDialogBoxInfo[76].sX = 50; //337
	m_stDialogBoxInfo[76].sY = 30;
	m_stDialogBoxInfo[76].sSizeX = 269;
	m_stDialogBoxInfo[76].sSizeY = 380;

	//Top10 Dialog
	m_stDialogBoxInfo[75].sX = 20;
	m_stDialogBoxInfo[75].sY = 65;
	m_stDialogBoxInfo[75].sSizeX = 258; // 238
	m_stDialogBoxInfo[75].sSizeY = 339; // 274

	//request revive
	m_stDialogBoxInfo[74].sX = 237;
	m_stDialogBoxInfo[74].sY = 57;
	m_stDialogBoxInfo[74].sSizeX = 252;
	m_stDialogBoxInfo[74].sSizeY = 87;

	//Rebirth Menu
	m_stDialogBoxInfo[73].sX = 100;
	m_stDialogBoxInfo[73].sY = 50;
	m_stDialogBoxInfo[73].sSizeX = 353; // 238
	m_stDialogBoxInfo[73].sSizeY = 414; // 274

	// Enchanting Window
	m_stDialogBoxInfo[72].sX = 60;
	m_stDialogBoxInfo[72].sY = 50;
	m_stDialogBoxInfo[72].sSizeX = 353; // 238
	m_stDialogBoxInfo[72].sSizeY = 414; // 274

	if (c_reso->IsResolution() == C640x480)
	{
		//Character-Info Dialog(F5)
		m_stDialogBoxInfo[1].sX = 32;
		m_stDialogBoxInfo[1].sY = 0;
		m_stDialogBoxInfo[1].sSizeX = 270;
		m_stDialogBoxInfo[1].sSizeY = 376;

		//Inventory Dialog(F6)
		m_stDialogBoxInfo[2].sX = 380;
		m_stDialogBoxInfo[2].sY = 210;
		m_stDialogBoxInfo[2].sSizeX = 225;
		m_stDialogBoxInfo[2].sSizeY = 185;

		//Magic Circle Dialog(F7)
		m_stDialogBoxInfo[3].sX = 337;
		m_stDialogBoxInfo[3].sY = 57;
		m_stDialogBoxInfo[3].sSizeX = 258;//280;
		m_stDialogBoxInfo[3].sSizeY = 328;//346;

		//Guild Menu Dialog
		m_stDialogBoxInfo[7].sX = 337;
		m_stDialogBoxInfo[7].sY = 57;
		m_stDialogBoxInfo[7].sSizeX = 258;
		m_stDialogBoxInfo[7].sSizeY = 339;

		//Guild Operation Dialog
		m_stDialogBoxInfo[8].sX = 337;
		m_stDialogBoxInfo[8].sY = 57;
		m_stDialogBoxInfo[8].sSizeX = 295;
		m_stDialogBoxInfo[8].sSizeY = 346;

		//Guide Map Dialog
		m_stDialogBoxInfo[9].sX = 512;
		m_stDialogBoxInfo[9].sY = 0;
		m_stDialogBoxInfo[9].sSizeX = 128;
		m_stDialogBoxInfo[9].sSizeY = 128;

		//Chatting History Dialog(F9)
		m_stDialogBoxInfo[10].sX = 135;
		m_stDialogBoxInfo[10].sY = 273;
		m_stDialogBoxInfo[10].sSizeX = 364;
		m_stDialogBoxInfo[10].sSizeY = 162;

		//City Hall Menu Dialog
		m_stDialogBoxInfo[13].sX = 337;
		m_stDialogBoxInfo[13].sY = 57;
		m_stDialogBoxInfo[13].sSizeX = 258;
		m_stDialogBoxInfo[13].sSizeY = 339;

		//Skill Menu(F8)
		m_stDialogBoxInfo[15].sX = 337;
		m_stDialogBoxInfo[15].sY = 57;
		m_stDialogBoxInfo[15].sSizeX = 258;
		m_stDialogBoxInfo[15].sSizeY = 339;

		//Text Dialog
		m_stDialogBoxInfo[18].sX = 20;
		m_stDialogBoxInfo[18].sY = 65;
		m_stDialogBoxInfo[18].sSizeX = 258; // 238
		m_stDialogBoxInfo[18].sSizeY = 339; // 274

		//System Menu Dialog(F12)
		m_stDialogBoxInfo[19].sX = 360; //337;
		m_stDialogBoxInfo[19].sY = 320;
		m_stDialogBoxInfo[19].sSizeX = 269;
		m_stDialogBoxInfo[19].sSizeY = 103;

		//NpcTalk Dialog
		m_stDialogBoxInfo[21].sX = 337;
		m_stDialogBoxInfo[21].sY = 57;
		m_stDialogBoxInfo[21].sSizeX = 258;
		m_stDialogBoxInfo[21].sSizeY = 339;

		//ItemSellorRepair Dialog
		m_stDialogBoxInfo[23].sX = 337;
		m_stDialogBoxInfo[23].sY = 57;
		m_stDialogBoxInfo[23].sSizeX = 258;
		m_stDialogBoxInfo[23].sSizeY = 339;

		//Icon Pannel Barra Grande
		m_stDialogBoxInfo[30].sX = 0;
		m_stDialogBoxInfo[30].sY = 427;
		m_stDialogBoxInfo[30].sSizeX = 640;
		m_stDialogBoxInfo[30].sSizeY = 53;

		//Crusade Job Dialog
		m_stDialogBoxInfo[33].sX = 360;
		m_stDialogBoxInfo[33].sY = 65;
		m_stDialogBoxInfo[33].sSizeX = 258;
		m_stDialogBoxInfo[33].sSizeY = 339;

		//Crusade Commander Dialog
		m_stDialogBoxInfo[36].sX = 20;
		m_stDialogBoxInfo[36].sY = 20;
		m_stDialogBoxInfo[36].sSizeX = 310;
		m_stDialogBoxInfo[36].sSizeY = 386;

		//Crusade Constructor Dialog
		m_stDialogBoxInfo[37].sX = 20;
		m_stDialogBoxInfo[37].sY = 20;
		m_stDialogBoxInfo[37].sSizeX = 310;
		m_stDialogBoxInfo[37].sSizeY = 386;

		//Crusade Soldier Dialog
		m_stDialogBoxInfo[38].sX = 20;
		m_stDialogBoxInfo[38].sY = 20;
		m_stDialogBoxInfo[38].sSizeX = 310;
		m_stDialogBoxInfo[38].sSizeY = 386;

		//Icon Pannel Barra Chica
		m_stDialogBoxInfo[44].sX = 210;
		m_stDialogBoxInfo[44].sY = 0;
		m_stDialogBoxInfo[44].sSizeX = 253;
		m_stDialogBoxInfo[44].sSizeY = 42;

		//Quest List Dialog
		m_stDialogBoxInfo[46].sX = 337;
		m_stDialogBoxInfo[46].sY = 57;
		m_stDialogBoxInfo[46].sSizeX = 258;
		m_stDialogBoxInfo[46].sSizeY = 339;

		//Event Dialog
		m_stDialogBoxInfo[55].sX = 50;
		m_stDialogBoxInfo[55].sY = 50;
		m_stDialogBoxInfo[55].sSizeX = 269;
		m_stDialogBoxInfo[55].sSizeY = 356;

		//New Ventanita
		m_stDialogBoxInfo[56].sX = 50;
		m_stDialogBoxInfo[56].sY = 50;
		m_stDialogBoxInfo[56].sSizeX = 337;
		m_stDialogBoxInfo[56].sSizeY = 201;

		//ek and pk logs
		m_stDialogBoxInfo[59].sX = 337;
		m_stDialogBoxInfo[59].sY = 57;
		m_stDialogBoxInfo[59].sSizeX = 258;
		m_stDialogBoxInfo[59].sSizeY = 339;
	}
	else if (c_reso->IsResolution() == C800x600)
	{
		//Character-Info Dialog(F5)
		m_stDialogBoxInfo[1].sX = 56;
		m_stDialogBoxInfo[1].sY = 95;
		m_stDialogBoxInfo[1].sSizeX = 270;
		m_stDialogBoxInfo[1].sSizeY = 376;

		//Inventory Dialog(F6)
		m_stDialogBoxInfo[2].sX = 490;
		m_stDialogBoxInfo[2].sY = 310;
		m_stDialogBoxInfo[2].sSizeX = 225;
		m_stDialogBoxInfo[2].sSizeY = 185;

		//Magic Circle Dialog(F7)
		m_stDialogBoxInfo[3].sX = 460;
		m_stDialogBoxInfo[3].sY = 128;
		m_stDialogBoxInfo[3].sSizeX = 258;//280;
		m_stDialogBoxInfo[3].sSizeY = 328;//346;

		//Guild Menu Dialog
		m_stDialogBoxInfo[7].sX = 460;
		m_stDialogBoxInfo[7].sY = 128;
		m_stDialogBoxInfo[7].sSizeX = 258;
		m_stDialogBoxInfo[7].sSizeY = 339;

		//Guild Operation Dialog
		m_stDialogBoxInfo[8].sX = 460;
		m_stDialogBoxInfo[8].sY = 128;
		m_stDialogBoxInfo[8].sSizeX = 295;
		m_stDialogBoxInfo[8].sSizeY = 346;

		//Guide Map Dialog
		m_stDialogBoxInfo[9].sX = 800 - 128;
		m_stDialogBoxInfo[9].sY = 0;
		m_stDialogBoxInfo[9].sSizeX = 128;
		m_stDialogBoxInfo[9].sSizeY = 128;

		//Chatting History Dialog(F9)
		m_stDialogBoxInfo[10].sX = 205;
		m_stDialogBoxInfo[10].sY = 380;
		m_stDialogBoxInfo[10].sSizeX = 364;
		m_stDialogBoxInfo[10].sSizeY = 162;

		//City Hall Menu Dialog
		m_stDialogBoxInfo[13].sX = 460;
		m_stDialogBoxInfo[13].sY = 128;
		m_stDialogBoxInfo[13].sSizeX = 258;
		m_stDialogBoxInfo[13].sSizeY = 339;

		//Skill Menu(F8)
		m_stDialogBoxInfo[15].sX = 460;
		m_stDialogBoxInfo[15].sY = 128;
		m_stDialogBoxInfo[15].sSizeX = 258;
		m_stDialogBoxInfo[15].sSizeY = 339;

		//Text Dialog
		m_stDialogBoxInfo[18].sX = 80;
		m_stDialogBoxInfo[18].sY = 120;
		m_stDialogBoxInfo[18].sSizeX = 258; // 238
		m_stDialogBoxInfo[18].sSizeY = 339; // 274

		//System Menu Dialog(F12)
		m_stDialogBoxInfo[19].sX = 510; //337;
		m_stDialogBoxInfo[19].sY = 430;
		m_stDialogBoxInfo[19].sSizeX = 269;
		m_stDialogBoxInfo[19].sSizeY = 103;

		//NpcTalk Dialog
		m_stDialogBoxInfo[21].sX = 460;
		m_stDialogBoxInfo[21].sY = 128;
		m_stDialogBoxInfo[21].sSizeX = 258;
		m_stDialogBoxInfo[21].sSizeY = 339;

		//ItemSellorRepair Dialog
		m_stDialogBoxInfo[23].sX = 460;
		m_stDialogBoxInfo[23].sY = 128;
		m_stDialogBoxInfo[23].sSizeX = 258;
		m_stDialogBoxInfo[23].sSizeY = 339;

		//Icon Pannel Barra Grande
		m_stDialogBoxInfo[30].sX = 0;
		m_stDialogBoxInfo[30].sY = 548;
		m_stDialogBoxInfo[30].sSizeX = 800;
		m_stDialogBoxInfo[30].sSizeY = 57;

		//Crusade Job Dialog
		m_stDialogBoxInfo[33].sX = 460;
		m_stDialogBoxInfo[33].sY = 120;
		m_stDialogBoxInfo[33].sSizeX = 258;
		m_stDialogBoxInfo[33].sSizeY = 339;

		//Crusade Commander Dialog
		m_stDialogBoxInfo[36].sX = 80;
		m_stDialogBoxInfo[36].sY = 120;
		m_stDialogBoxInfo[36].sSizeX = 310;
		m_stDialogBoxInfo[36].sSizeY = 386;

		//Crusade Constructor Dialog
		m_stDialogBoxInfo[37].sX = 80;
		m_stDialogBoxInfo[37].sY = 120;
		m_stDialogBoxInfo[37].sSizeX = 310;
		m_stDialogBoxInfo[37].sSizeY = 386;

		//Crusade Soldier Dialog
		m_stDialogBoxInfo[38].sX = 80;
		m_stDialogBoxInfo[38].sY = 120;
		m_stDialogBoxInfo[38].sSizeX = 310;
		m_stDialogBoxInfo[38].sSizeY = 386;

		//Icon Pannel Barra Chica
		m_stDialogBoxInfo[44].sX = 272;
		m_stDialogBoxInfo[44].sY = 0;
		m_stDialogBoxInfo[44].sSizeX = 253;
		m_stDialogBoxInfo[44].sSizeY = 42;

		//Quest List Dialog
		m_stDialogBoxInfo[46].sX = 460;
		m_stDialogBoxInfo[46].sY = 120;
		m_stDialogBoxInfo[46].sSizeX = 258;
		m_stDialogBoxInfo[46].sSizeY = 339;

		//Event Dialog
		m_stDialogBoxInfo[55].sX = 50;
		m_stDialogBoxInfo[55].sY = 97;
		m_stDialogBoxInfo[55].sSizeX = 269;
		m_stDialogBoxInfo[55].sSizeY = 356;

		//New Ventanita
		m_stDialogBoxInfo[56].sX = 330;
		m_stDialogBoxInfo[56].sY = 97;
		m_stDialogBoxInfo[56].sSizeX = 337;
		m_stDialogBoxInfo[56].sSizeY = 201;

		//ek and pk logs
		m_stDialogBoxInfo[59].sX = 460;
		m_stDialogBoxInfo[59].sY = 120;
		m_stDialogBoxInfo[59].sSizeX = 258;
		m_stDialogBoxInfo[59].sSizeY = 339;
	}	
	
	else if (c_reso->IsResolution() == C1024x768)
	{
		//Character-Info Dialog(F5)
		m_stDialogBoxInfo[1].sX = 93;
		m_stDialogBoxInfo[1].sY = 152;
		m_stDialogBoxInfo[1].sSizeX = 270;
		m_stDialogBoxInfo[1].sSizeY = 376;

		//Inventory Dialog(F6)
		m_stDialogBoxInfo[2].sX = 660;
		m_stDialogBoxInfo[2].sY = 350;
		m_stDialogBoxInfo[2].sSizeX = 225;
		m_stDialogBoxInfo[2].sSizeY = 185;

		//Magic Circle Dialog(F7)
		m_stDialogBoxInfo[3].sX = 641;
		m_stDialogBoxInfo[3].sY = 192;
		m_stDialogBoxInfo[3].sSizeX = 258;//280;
		m_stDialogBoxInfo[3].sSizeY = 328;//346;

		//Guild Menu Dialog
		m_stDialogBoxInfo[7].sX = 641;
		m_stDialogBoxInfo[7].sY = 192;
		m_stDialogBoxInfo[7].sSizeX = 258;
		m_stDialogBoxInfo[7].sSizeY = 339;

		//Guild Operation Dialog
		m_stDialogBoxInfo[8].sX = 641;
		m_stDialogBoxInfo[8].sY = 192;
		m_stDialogBoxInfo[8].sSizeX = 295;
		m_stDialogBoxInfo[8].sSizeY = 346;

		//Guide Map Dialog
		m_stDialogBoxInfo[9].sX = 1024 - 128;
		m_stDialogBoxInfo[9].sY = 0;
		m_stDialogBoxInfo[9].sSizeX = 128;
		m_stDialogBoxInfo[9].sSizeY = 128;

		//Chatting History Dialog(F9)
		m_stDialogBoxInfo[10].sX = 320;
		m_stDialogBoxInfo[10].sY = 540;
		m_stDialogBoxInfo[10].sSizeX = 364;
		m_stDialogBoxInfo[10].sSizeY = 162;

		//City Hall Menu Dialog
		m_stDialogBoxInfo[13].sX = 641;
		m_stDialogBoxInfo[13].sY = 192;
		m_stDialogBoxInfo[13].sSizeX = 258;
		m_stDialogBoxInfo[13].sSizeY = 339;

		//Skill Menu(F8)
		m_stDialogBoxInfo[15].sX = 641;
		m_stDialogBoxInfo[15].sY = 192;
		m_stDialogBoxInfo[15].sSizeX = 258;
		m_stDialogBoxInfo[15].sSizeY = 339;

		//Text Dialog
		m_stDialogBoxInfo[18].sX = 93;
		m_stDialogBoxInfo[18].sY = 152;
		m_stDialogBoxInfo[18].sSizeX = 258; // 238
		m_stDialogBoxInfo[18].sSizeY = 339; // 274

		//System Menu Dialog(F12)
		m_stDialogBoxInfo[19].sX = 755; //337;
		m_stDialogBoxInfo[19].sY = 600;
		m_stDialogBoxInfo[19].sSizeX = 269;
		m_stDialogBoxInfo[19].sSizeY = 103;

		//NpcTalk Dialog
		m_stDialogBoxInfo[21].sX = 641;
		m_stDialogBoxInfo[21].sY = 192;
		m_stDialogBoxInfo[21].sSizeX = 258;
		m_stDialogBoxInfo[21].sSizeY = 339;

		//ItemSellorRepair Dialog
		m_stDialogBoxInfo[23].sX = 641;
		m_stDialogBoxInfo[23].sY = 192;
		m_stDialogBoxInfo[23].sSizeX = 258;
		m_stDialogBoxInfo[23].sSizeY = 339;

		//Icon Pannel Barra Grande
		m_stDialogBoxInfo[30].sX = 0;
		m_stDialogBoxInfo[30].sY = 716;//718
		m_stDialogBoxInfo[30].sSizeX = 1024;
		m_stDialogBoxInfo[30].sSizeY = 52;//57

		//Crusade Job Dialog
		m_stDialogBoxInfo[33].sX = 641;
		m_stDialogBoxInfo[33].sY = 192;
		m_stDialogBoxInfo[33].sSizeX = 258;
		m_stDialogBoxInfo[33].sSizeY = 339;

		//Crusade Commander Dialog
		m_stDialogBoxInfo[36].sX = 93;
		m_stDialogBoxInfo[36].sY = 152;
		m_stDialogBoxInfo[36].sSizeX = 310;
		m_stDialogBoxInfo[36].sSizeY = 386;

		//Crusade Constructor Dialog
		m_stDialogBoxInfo[37].sX = 93;
		m_stDialogBoxInfo[37].sY = 152;
		m_stDialogBoxInfo[37].sSizeX = 310;
		m_stDialogBoxInfo[37].sSizeY = 386;

		//Crusade Soldier Dialog
		m_stDialogBoxInfo[38].sX = 93;
		m_stDialogBoxInfo[38].sY = 152;
		m_stDialogBoxInfo[38].sSizeX = 310;
		m_stDialogBoxInfo[38].sSizeY = 386;

		//Icon Pannel Barra Chica
		m_stDialogBoxInfo[44].sX = 385;
		m_stDialogBoxInfo[44].sY = 0;
		m_stDialogBoxInfo[44].sSizeX = 253;
		m_stDialogBoxInfo[44].sSizeY = 42;

		//Quest List Dialog
		m_stDialogBoxInfo[46].sX = 641;
		m_stDialogBoxInfo[46].sY = 192;
		m_stDialogBoxInfo[46].sSizeX = 258;
		m_stDialogBoxInfo[46].sSizeY = 339;

		//Event Dialog
		m_stDialogBoxInfo[55].sX = 93;
		m_stDialogBoxInfo[55].sY = 152;
		m_stDialogBoxInfo[55].sSizeX = 269;
		m_stDialogBoxInfo[55].sSizeY = 356;

		//New Ventanita
		m_stDialogBoxInfo[56].sX = 330;
		m_stDialogBoxInfo[56].sY = 97;
		m_stDialogBoxInfo[56].sSizeX = 337;
		m_stDialogBoxInfo[56].sSizeY = 201;

		//ek and pk logs
		m_stDialogBoxInfo[59].sX = 641;
		m_stDialogBoxInfo[59].sY = 192;
		m_stDialogBoxInfo[59].sSizeX = 258;
		m_stDialogBoxInfo[59].sSizeY = 339;
	}
	// Item drop confirmation
	m_stDialogBoxInfo[4].sX = 0;
	m_stDialogBoxInfo[4].sY = 0;
	m_stDialogBoxInfo[4].sSizeX = 270;
	m_stDialogBoxInfo[4].sSizeY = 105;

	// Age <15 box !?!?!?
	m_stDialogBoxInfo[5].sX = 320;
	m_stDialogBoxInfo[5].sY = 260;
	m_stDialogBoxInfo[5].sSizeX = 310;
	m_stDialogBoxInfo[5].sSizeY = 170;

	// ** This is a battle area **
	m_stDialogBoxInfo[6].sX = 0;
	m_stDialogBoxInfo[6].sY = 0;
	m_stDialogBoxInfo[6].sSizeX = 310;
	m_stDialogBoxInfo[6].sSizeY = 170;

	//Sale Menu Dialog
	m_stDialogBoxInfo[11].sX = 70;
	m_stDialogBoxInfo[11].sY = 50;
	m_stDialogBoxInfo[11].sSizeX = 258;
	m_stDialogBoxInfo[11].sSizeY = 339;

	//Level-Up Setting Dialog
	m_stDialogBoxInfo[12].sX = 0;
	m_stDialogBoxInfo[12].sY = 0;
	m_stDialogBoxInfo[12].sSizeX = 258;
	m_stDialogBoxInfo[12].sSizeY = 339;

	//Rank-Up Setting Dialog
	m_stDialogBoxInfo[61].sX = 0;
	m_stDialogBoxInfo[61].sY = 0;
	m_stDialogBoxInfo[61].sSizeX = 258;
	m_stDialogBoxInfo[61].sSizeY = 272;

	//Bank Dialog
	m_stDialogBoxInfo[14].sX = 60; //337
	m_stDialogBoxInfo[14].sY = 50;
	m_stDialogBoxInfo[14].sSizeX = 258;
	m_stDialogBoxInfo[14].sSizeY = 339;
	//m_stDialogBoxInfo[14].sV1 = 13;
	m_stDialogBoxInfo[14].sV1 = 12;

	//Magic Shop Menu
	m_stDialogBoxInfo[16].sX = 30;
	m_stDialogBoxInfo[16].sY = 30;
	m_stDialogBoxInfo[16].sSizeX = 304 + 50;
	m_stDialogBoxInfo[16].sSizeY = 328;

	//Dialog items drop external screen
	m_stDialogBoxInfo[17].sX = 0;
	m_stDialogBoxInfo[17].sY = 0;
	m_stDialogBoxInfo[17].sSizeX = 215;
	m_stDialogBoxInfo[17].sSizeY = 87;
	
	//NpcActionQuery Dialog
	m_stDialogBoxInfo[20].sX = 237;
	m_stDialogBoxInfo[20].sY = 57;
	m_stDialogBoxInfo[20].sSizeX = 252;
	m_stDialogBoxInfo[20].sSizeY = 87;

	//Map
	m_stDialogBoxInfo[22].sX = 336;
	m_stDialogBoxInfo[22].sY = 88;
	m_stDialogBoxInfo[22].sSizeX = 270;
	m_stDialogBoxInfo[22].sSizeY = 346;	

	//Fishing Dialog
	m_stDialogBoxInfo[24].sX = 193;
	m_stDialogBoxInfo[24].sY = 241;
	m_stDialogBoxInfo[24].sSizeX = 263;
	m_stDialogBoxInfo[24].sSizeY = 100;

	//Noticement Dialog
	m_stDialogBoxInfo[25].sX = 162;
	m_stDialogBoxInfo[25].sY = 40;
	m_stDialogBoxInfo[25].sSizeX = 315;
	m_stDialogBoxInfo[25].sSizeY = 171;

	//Manufacture Dialog
	m_stDialogBoxInfo[26].sX = 100;
	m_stDialogBoxInfo[26].sY = 60;
	m_stDialogBoxInfo[26].sSizeX = 258;
	m_stDialogBoxInfo[26].sSizeY = 339;

	//Exchange Dialog
	m_stDialogBoxInfo[27].sX = 100;
	m_stDialogBoxInfo[27].sY = 30;
	m_stDialogBoxInfo[27].sSizeX = 309;
	m_stDialogBoxInfo[27].sSizeY = 406;

	//Quest Dialog
	m_stDialogBoxInfo[28].sX = 0;
	m_stDialogBoxInfo[28].sY = 0;
	m_stDialogBoxInfo[28].sSizeX = 258;
	m_stDialogBoxInfo[28].sSizeY = 339;

	//Sell List Dialog
	m_stDialogBoxInfo[31].sX = 170;
	m_stDialogBoxInfo[31].sY = 70;
	m_stDialogBoxInfo[31].sSizeX = 258;
	m_stDialogBoxInfo[31].sSizeY = 339;

	//Party Dialog
	m_stDialogBoxInfo[32].sX = 0;
	m_stDialogBoxInfo[32].sY = 0;
	m_stDialogBoxInfo[32].sSizeX = 258;
	m_stDialogBoxInfo[32].sSizeY = 339;

	//Item Upgrade Dialog
	m_stDialogBoxInfo[34].sX = 60;
	m_stDialogBoxInfo[34].sY = 50;
	m_stDialogBoxInfo[34].sSizeX = 258;
	m_stDialogBoxInfo[34].sSizeY = 339;

	//Help Menu Dialog(F1)
	m_stDialogBoxInfo[35].sX = 358;
	m_stDialogBoxInfo[35].sY = 65;
	m_stDialogBoxInfo[35].sSizeX = 258;
	m_stDialogBoxInfo[35].sSizeY = 339;	
	
	// Give item ???
	m_stDialogBoxInfo[39].sX = 0;
	m_stDialogBoxInfo[39].sY = 0;
	m_stDialogBoxInfo[39].sSizeX = 291;
	m_stDialogBoxInfo[39].sSizeY = 413;

	// 3.51 Slates Dialog - Diuuude
	m_stDialogBoxInfo[40].sX = 100;
	m_stDialogBoxInfo[40].sY = 60;
	m_stDialogBoxInfo[40].sSizeX = 258;
	m_stDialogBoxInfo[40].sSizeY = 339;

	// Snoopy: Item exchange confirmation
	m_stDialogBoxInfo[41].sX = 285;
	m_stDialogBoxInfo[41].sY = 200;
	m_stDialogBoxInfo[41].sSizeX = 270;
	m_stDialogBoxInfo[41].sSizeY = 105;

	// MJ Stats Change DialogBox - Diuuude
	m_stDialogBoxInfo[42].sX = 0;
	m_stDialogBoxInfo[42].sY = 0;
	m_stDialogBoxInfo[42].sSizeX = 258;
	m_stDialogBoxInfo[42].sSizeY = 339;

	m_stDialogBoxInfo[43].sX = 310;
	m_stDialogBoxInfo[43].sY = 10;
	m_stDialogBoxInfo[43].sSizeX = 269;
	m_stDialogBoxInfo[43].sSizeY = 380;

	m_stDialogBoxInfo[45].sX = 285;
	m_stDialogBoxInfo[45].sY = 234;
	m_stDialogBoxInfo[45].sSizeX = 1;
	m_stDialogBoxInfo[45].sSizeY = 1;
	
	// Achivements
	m_stDialogBoxInfo[47].sX = 20;
	m_stDialogBoxInfo[47].sY = 20;
	m_stDialogBoxInfo[47].sSizeX = 310;
	m_stDialogBoxInfo[47].sSizeY = 405;

	m_stDialogBoxInfo[48].sX = 100;
	m_stDialogBoxInfo[48].sY = 0;
	m_stDialogBoxInfo[48].sSizeX = 407;
	m_stDialogBoxInfo[48].sSizeY = 69;

	// Sell List Menu - Hb Arg v4.4
	m_stDialogBoxInfo[49].sX = 50;
	m_stDialogBoxInfo[49].sY = 30;
	m_stDialogBoxInfo[49].sSizeX = 269;
	m_stDialogBoxInfo[49].sSizeY = 380;

	// Snoopy: Resurection
	m_stDialogBoxInfo[50].sX = 185;
	m_stDialogBoxInfo[50].sY = 100;
	m_stDialogBoxInfo[50].sSizeX = 270;
	m_stDialogBoxInfo[50].sSizeY = 105;

	// Assasain Officer Menu
	m_stDialogBoxInfo[51].sX = 337;
	m_stDialogBoxInfo[51].sY = 57;
	m_stDialogBoxInfo[51].sSizeX = 258;
	m_stDialogBoxInfo[51].sSizeY = 339;
	m_stDialogBoxInfo[51].sV1 = 0;
	m_stDialogBoxInfo[51].sV2 = 0;

	//NewPanel
	m_stDialogBoxInfo[52].sX = 30;
	m_stDialogBoxInfo[52].sY = 30;
	m_stDialogBoxInfo[52].sSizeX = 281;
	m_stDialogBoxInfo[52].sSizeY = 10;

	//NewPanel - Confirmation
	m_stDialogBoxInfo[53].sX = 185;
	m_stDialogBoxInfo[53].sY = 100;
	m_stDialogBoxInfo[53].sSizeX = 270;
	m_stDialogBoxInfo[53].sSizeY = 105;

	// Sell List Menu - Hb Arg v4.4
	m_stDialogBoxInfo[54].sX = 50;
	m_stDialogBoxInfo[54].sY = 30;
	m_stDialogBoxInfo[54].sSizeX = 269;
	m_stDialogBoxInfo[54].sSizeY = 380;

	//Sale Menu Dialog
	m_stDialogBoxInfo[57].sX = 70;
	m_stDialogBoxInfo[57].sY = 50;
	m_stDialogBoxInfo[57].sSizeX = 258;
	m_stDialogBoxInfo[57].sSizeY = 339;

	/* New Trade Items System */
	m_stDialogBoxInfo[58].sX = 70;
	m_stDialogBoxInfo[58].sY = 50;
	m_stDialogBoxInfo[58].sSizeX = 258;
	m_stDialogBoxInfo[58].sSizeY = 339;
	m_stDialogBoxInfo[58].sV1 = -1;
	m_stDialogBoxInfo[58].sV2 = -1;

	// Assasain Officer Purchase Assasains Point's Menu
	m_stDialogBoxInfo[60].sX = 337;
	m_stDialogBoxInfo[60].sY = 57;
	m_stDialogBoxInfo[60].sSizeX = 258;
	m_stDialogBoxInfo[60].sSizeY = 339;
	m_stDialogBoxInfo[60].sV1 = 0;
	m_stDialogBoxInfo[60].sV2 = 0;
}

void CGame::Drawflooritem(CItem * item, int x, int y, int mx, int my)
{
	short msX, msY, msZ;
	char cLB, cRB;// , cMB;
	auto mousex = mx;
	char cStr1[64], cStr2[64], cStr3[64], cStr4[64], cStr5[64], cStr6[64], cItemsTotal[64];
	int  iLoc, iLocStr2 = 0, iLocStr3 = 0, iLocStr4 = 0, iLocStr5 = 0, iLocStr6 = 0, ItemsTotal = 0;
	int  iStrLen1 = 0, iStrLen2 = 0, iStrLen3 = 0, iStrLen4 = 0, iStrLen5 = 0, iStrLen6 = 0;
	short msY1 = 0, msX1 = 0, msK = 0;

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);

	int posx = x == 0 ? msX - m_stMCursor.sDistX : x;
	int posy = y == 0 ? msY - m_stMCursor.sDistY : y;
	auto cItemColor = item->m_cItemColor;

	int magicspr = DEF_SPRID_ITEMPACK_PIVOTPOINT;
	
		GetItemName(item, cStr1, cStr2, cStr3);

		if (mx != 0 && my != 0)
		{
			msX = mx;
			msY = my;
		}

		iLoc = 0;
		if (strlen(cStr1) != 0)
		{
			if (m_bIsSpecial)
			{
				if (!ShadowsBox)
					PutString(msX, msY + 25, cStr1, RGB(0, 255, 50), FALSE, 1);
			}
			else {
				if (!ShadowsBox)
					PutString(msX, msY + 25, cStr1, RGB(255, 255, 255), FALSE, 1);
			}
			iLoc += 15;
		}
		if (strlen(cStr2) != 0)
		{
			if (!ShadowsBox)
			PutString(msX, msY + 25 + iLoc, cStr2, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr2 += 15;
		}
		if (strlen(cStr3) != 0)
		{
			if (!ShadowsBox)
			PutString(msX, msY + 25 + iLoc, cStr3, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr3 += 15;
		}
		if ((item->m_sLevelLimit != 0) && ((item->m_dwAttribute & 0x00000001) == 0))
		{
			wsprintf(cStr4, "%s: %d", DRAW_DIALOGBOX_SHOP24, item->m_sLevelLimit);//"���� ����: %d"
			if (!ShadowsBox)
			PutString(msX, msY + 25 + iLoc, cStr4, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr4 += 15;
		}
		if ((item->m_cEquipPos != DEF_EQUIPPOS_NONE) && (item->m_wWeight >= 1100))
		{
			int	_wWeight = 0;
			if (item->m_wWeight % 100) _wWeight = 1;
			wsprintf(cStr5, DRAW_DIALOGBOX_SHOP15, item->m_wWeight / 100 + _wWeight);
			if (!ShadowsBox)
			PutString(msX, msY + 25 + iLoc, cStr5, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr5 += 15;
		}
		if (item->m_cEquipPos != DEF_EQUIPPOS_NONE || !strcmp(item->m_cName, "ZemstoneofSacrifice"))
		{
			wsprintf(cStr6, UPDATE_SCREEN_ONGAME10, item->m_wCurLifeSpan);
			if (!ShadowsBox)
			PutString(msX, msY + 25 + iLoc, cStr6, RGB(150, 150, 150), FALSE, 1);
			iLoc += 15;
			iLocStr6 += 15;
		}

		if (iLoc == 15)
		{
			iLoc = 0;
			for (int iTmp = 0; iTmp < DEF_MAXITEMS; iTmp++)
			{
				if (item != NULL)
				{
					if (strcmp(item->m_cName, item->m_cName) == 0) iLoc++;
					ItemsTotal = 1;
				}
			}
			if (iLoc > 1)
			{
			}
		}
		//Coloco el recuadro - LaloRamos
		if (ShadowsBox)
		{
			if (ItemsTotal > 1)
				iLoc = 30;
			else if (ItemsTotal == 1)
				iLoc = 13;

			//msY1 = msY;
			if (c_reso->IsResolution() == C800x600)
			{
				if ((msY + iLoc + 28) > 599)
					msY1 = 599;
				else msY1 = msY + iLoc + 28;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				if ((msY + iLoc + 28) > 767)
					msY1 = 767;
				else msY1 = msY + iLoc + 28;
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				if ((msY + iLoc + 28) > 479)
					msY1 = 479;
				else msY1 = msY + iLoc + 28;
			}

			msK = SpaceChar(cStr1);
			if (msK < SpaceChar(cStr2)) msK = SpaceChar(cStr2);
			if (msK < SpaceChar(cStr3)) msK = SpaceChar(cStr3);
			if (msK < SpaceChar(cStr4)) msK = SpaceChar(cStr4);
			if (msK < SpaceChar(cStr5)) msK = SpaceChar(cStr5);
			if (msK < SpaceChar(cStr6)) msK = SpaceChar(cStr6);

			msX1 = msX + msK;

			if (c_reso->IsResolution() == C800x600)
			{
				if (msX1 > 799)
					msX1 = 799;
			}
			else if (c_reso->IsResolution() == C1024x768)
			{
				if (msX1 > 1023)
					msX1 = 1023;
			}
			else if (c_reso->IsResolution() == C640x480)
			{
				if (msX1 > 639)
					msX1 = 639;
			}

			m_DDraw.DrawShadowBox(msX, msY + 25, msX1, msY1);
			PutAlignedString(msX, msX + msK, msY + 25, cStr1, 234, 176, 51);

			if (ItemsTotal > 1)
				PutAlignedString(msX, msX + msK, msY + 25 + 15, cItemsTotal, 255, 255, 255);
			if (iLocStr2 > 0)
			{	//Purity
				if (memcmp(GET_ITEM_NAME1, cStr2, 6) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 255, 255); // Blanco
				//Completion
				else if (memcmp(GET_ITEM_NAME2, cStr2, 10) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 255, 255); // Blanco
				//Critical
				else if (memcmp(GET_ITEM_NAME3, cStr2, 8) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 221, 203, 49); // Amarillo
				// Poisoning
				else if (memcmp(GET_ITEM_NAME4, cStr2, 9) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 209, 61); // Verde
				// Righteous
				else if (memcmp(GET_ITEM_NAME5, cStr2, 9) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 119, 119, 119); // 
				// Agile
				else if (memcmp(GET_ITEM_NAME6, cStr2, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 137, 185, 195); // 
				// Light
				else if (memcmp(GET_ITEM_NAME7, cStr2, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 235, 104); // 
				// Sharp
				else if (memcmp(GET_ITEM_NAME8, cStr2, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 41, 70, 218); // 
				// Strong
				else if (memcmp(GET_ITEM_NAME9, cStr2, 6) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 113, 113, 113); //
				// Ancient
				else if (memcmp(GET_ITEM_NAME10, cStr2, 7) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 195, 77, 147); //
				// Special
				else if (memcmp(GET_ITEM_NAME11, cStr2, 7) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 223, 148, 3); //
				// Mana Converting
				else if (memcmp(GET_ITEM_NAME12, cStr2, 15) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 113, 169, 226); //
				// Critical
				else if (memcmp(GET_ITEM_NAME13, cStr2, 8) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 221, 203, 49); //
				// Critical Hit Damage
				else if (memcmp(GET_ITEM_NAME14, cStr2, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 221, 203, 49); //
				// Poison Damage
				else if (memcmp(GET_ITEM_NAME15, cStr2, 13) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 209, 61); // Verde
				// Attack Speed -1
				else if (memcmp(GET_ITEM_NAME16, cStr2, 15) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 137, 185, 195); //
				// light
				else if (memcmp(GET_ITEM_NAME17, cStr2, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 235, 104); //
				// Damage added
				else if (memcmp(GET_ITEM_NAME18, cStr2, 12) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 206, 18, 115); //
				// Endurance
				else if (memcmp(GET_ITEM_NAME19, cStr2, 9) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 139, 139, 139); //
				// Extra Damage added
				else if (memcmp(GET_ITEM_NAME20, cStr2, 18) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 228, 184, 67); //
				// Magic Casting Probability
				else if (memcmp(GET_ITEM_NAME21, cStr2, 25) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 214, 72, 72); //
				// Replace %d%% damage to mana
				else if (memcmp(GET_ITEM_NAME22, cStr2, 7) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 113, 169, 226); //
				// Crit Increase Chance
				else if (memcmp(GET_ITEM_NAME23, cStr2, 20) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 221, 203, 49); //
				// Poison Resistance
				else if (memcmp(GET_ITEM_NAME24, cStr2, 17) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 209, 61); // Verde
				// Hitting Probability
				else if (memcmp(GET_ITEM_NAME25, cStr2, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 200, 165, 3); //
				// Defense Ratio
				else if (memcmp(GET_ITEM_NAME26, cStr2, 13) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 170, 127, 174); //
				// HP recovery
				else if (memcmp(GET_ITEM_NAME27, cStr2, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 216, 38, 38); // Rojo
				// SP recovery
				else if (memcmp(GET_ITEM_NAME28, cStr2, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 209, 61); // Verde
				// MP recovery
				else if (memcmp(GET_ITEM_NAME29, cStr2, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 113, 169, 226); // Azul
				// Magic Resistance
				else if (memcmp(GET_ITEM_NAME30, cStr2, 16) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 145, 187, 87); // 
				// Physical Absorption
				else if (memcmp(GET_ITEM_NAME31, cStr2, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 38, 122, 118); // 
				// Magic Absorption
				else if (memcmp(GET_ITEM_NAME32, cStr2, 16) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 175, 26, 100); //
				// Consecutive Attack Damage
				else if (memcmp(GET_ITEM_NAME33, cStr2, 25) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 228, 184, 67); //
				// Experience
				else if (memcmp(GET_ITEM_NAME34, cStr2, 10) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 168, 74, 140); //
				// Gold
				else if (memcmp(GET_ITEM_NAME35, cStr2, 4) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 223, 148, 3); //
				else
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr2, cStr2, 255, 255, 255);
				if (iLocStr3 > 0)
					iLocStr3 += iLocStr2;
				else if (iLocStr4 > 0)
					iLocStr4 += iLocStr2;
				else if (iLocStr5 > 0)
					iLocStr5 += iLocStr2;
				else if (iLocStr6 > 0)
					iLocStr6 += iLocStr2;
			}
			if (iLocStr3 > 0)
			{
				//Purity
				if (memcmp(GET_ITEM_NAME1, cStr3, 6) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 255, 255, 255); // Blanco
				//Completion
				else if (memcmp(GET_ITEM_NAME2, cStr3, 10) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 255, 255, 255); // Blanco
				// Critical Hit Damage
				else if (memcmp(GET_ITEM_NAME14, cStr3, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 221, 203, 49); //
				// Poison Damage
				else if (memcmp(GET_ITEM_NAME15, cStr3, 13) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 145, 209, 61); // Verde
				// Attack Speed -1
				else if (memcmp(GET_ITEM_NAME16, cStr3, 15) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 137, 185, 195); //
				// light
				else if (memcmp(GET_ITEM_NAME17, cStr3, 5) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 255, 235, 104); //
				// Damage added
				else if (memcmp(GET_ITEM_NAME18, cStr3, 12) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 206, 18, 115); //
				// Endurance
				else if (memcmp(GET_ITEM_NAME19, cStr3, 9) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 139, 139, 139); //
				// Extra Damage added
				else if (memcmp(GET_ITEM_NAME20, cStr3, 18) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 228, 184, 67); //
				// Magic Casting Probability
				else if (memcmp(GET_ITEM_NAME21, cStr3, 25) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 214, 72, 72); //
				// Replace %d%% damage to mana
				else if (memcmp(GET_ITEM_NAME22, cStr3, 7) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 113, 169, 226); //
				// Crit Increase Chance
				else if (memcmp(GET_ITEM_NAME23, cStr3, 20) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 221, 203, 49); //
				// Poison Resistance
				else if (memcmp(GET_ITEM_NAME24, cStr3, 17) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 145, 209, 61); // Verde
				// Hitting Probability
				else if (memcmp(GET_ITEM_NAME25, cStr3, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 200, 165, 3); //
				// Defense Ratio
				else if (memcmp(GET_ITEM_NAME26, cStr3, 13) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 170, 127, 174); //
				// HP recovery
				else if (memcmp(GET_ITEM_NAME27, cStr3, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 216, 38, 38); // Rojo
				// SP recovery
				else if (memcmp(GET_ITEM_NAME28, cStr3, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 145, 209, 61); // Verde
				// MP recovery
				else if (memcmp(GET_ITEM_NAME29, cStr3, 11) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 113, 169, 226); // Azul
				// Magic Resistance
				else if (memcmp(GET_ITEM_NAME30, cStr3, 16) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 145, 187, 87); // 
				// Physical Absorption
				else if (memcmp(GET_ITEM_NAME31, cStr3, 19) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 38, 122, 118); // 
				// Magic Absorption
				else if (memcmp(GET_ITEM_NAME32, cStr3, 16) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 175, 26, 100); //
				// Consecutive Attack Damage
				else if (memcmp(GET_ITEM_NAME33, cStr3, 25) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 228, 184, 67); //
				// Experience
				else if (memcmp(GET_ITEM_NAME34, cStr3, 10) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 168, 74, 140); //
				// Gold
				else if (memcmp(GET_ITEM_NAME35, cStr3, 4) == 0)
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 223, 148, 3); //
				else
					PutAlignedString(msX, msX + msK, msY + 25 + iLocStr3, cStr3, 250, 250, 250);
				if (iLocStr4 > 0)
					iLocStr4 += iLocStr3;
				else if (iLocStr5 > 0)
					iLocStr5 += iLocStr3;
				else if (iLocStr6 > 0)
					iLocStr6 += iLocStr3;
			}
			if (iLocStr4 > 0)
			{
				PutAlignedString(msX, msX + msK, msY + 25 + iLocStr4, cStr4, 255, 255, 255);
				if (iLocStr5 > 0)
					iLocStr5 += iLocStr4;
				else if (iLocStr6 > 0)
					iLocStr6 += iLocStr4;
			}
			if (iLocStr5 > 0)
			{
				PutAlignedString(msX, msX + msK, msY + 25 + iLocStr5, cStr5, 255, 255, 255);
				if (iLocStr6 > 0)
					iLocStr6 += iLocStr5;
			}
			if (iLocStr6 > 0)
				PutAlignedString(msX, msX + msK, msY + 25 + iLocStr6, cStr6, 255, 255, 255);
		}
	}

void CGame::n_flooitem(char * data) //cambio data x pdata
{
//	short    cTotalItems;
	//int     i, iAngelValue;
	short * sp;
	DWORD * dwp;
	WORD  * wp;
//	char  * cp;

	if (!f_item.ptr)
		f_item.ptr = new CItem();

	auto it = f_item.ptr;
	ZeroMemory(it->m_cName, sizeof(it->m_cName));
	memcpy(it->m_cName, data, 20);
	data += 20;

	dwp = (DWORD *)data;
	it->m_dwCount = *dwp;
	data += 4;
	it->m_cItemType = *data;
	data++;
	it->m_cEquipPos = *data;
	data++;
	sp = (short *)data;
	it->m_sLevelLimit = *sp;
	data += 2;
	it->m_cGenderLimit = *data;
	data++;
	wp = (WORD *)data;
	it->m_wCurLifeSpan = *wp;
	data += 2;
	wp = (WORD *)data;
	it->m_wWeight = *wp;
	data += 2;
	sp = (short *)data;
	it->m_sSprite = *sp;
	data += 2;
	sp = (short *)data;
	it->m_sSpriteFrame = *data;
	data += 2;
	it->m_cItemColor = *data;
	data++;
	sp = (short *)data;
	it->m_sItemSpecEffectValue2 = *sp;
	data += 2;
	dwp = (DWORD *)data;
	it->m_dwAttribute = *dwp;
	data += 4;
	it->m_sItemSpecEffectValue3 = (short)*data;
	data++;
}

void CGame::getrankexp(char * data)
{
	Pop(data, m_iRankExp);
	Pop(data, m_iMaxRankExp);
}


void CGame::ranklevelup(char * data)
{
	Pop(data, m_sRankLevel);
	Pop(data, m_iRankPoints);

	SetTopMsg("The rank level has been increased!", 5);
	PlaySound('C', 21, 0);
}


void CGame::GetObjectsData(char* data)
{
	vObjects.clear();
	int count = 0;
	Pop(data, count);

	for (int i = 0; i < count; i++)
	{
		st_objects u;

		Pop(data, u.client);
		Pop(data, u.m_sSide);
		Pop(data, u.iLevel);
		Pop(data, u.iRebirthLevel);

		vObjects.push_back(u);
	}
}


void CGame::getrankstats(char* data)
{	
	Pop(data, m_sRankAddStr);
	Pop(data, m_sRankAddDex);
	Pop(data, m_sRankAddInt);
	Pop(data, m_sRankAddMag);
	Pop(data, m_sRankLevel);
	Pop(data, m_iRankPoints);
	Pop(data, m_iRankExp);
}



void CGame::getcinsertstatus(char* data)
{
	short status = -1;
	Pop(data, status);

	if (status == -1) m_bCandyInsert = false;
	else if (status == 0) m_bCandyInsert = false;
	else if (status == 1) m_bCandyInsert = true;
}

void CGame::getcdeletestatus(char* data)
{
	short status = -1;
	Pop(data, status);

	if (status == -1) m_bCandyDelete = false;
	else if (status == 0) m_bCandyDelete = false;
	else if (status == 1) m_bCandyDelete = true;
}


void CGame::get_object_levels(int client, int &level, int &rebirthlevel)
{
	for (int i = 0; i < vObjects.size(); i++)
	{
		if (vObjects[i].client != client)  continue;
		level = vObjects[i].iLevel;
		rebirthlevel = vObjects[i].iRebirthLevel;
		return;
	}
}

short CGame::get_object_rank(int client)
{
	for (int i = 0; i < vObjects.size(); i++)
	{
		if (vObjects[i].client == client) return vObjects[i].m_sRankLevel;
	}

	return -1;
}

short CGame::get_object_side(int client)
{
	for (int i = 0; i < vObjects.size(); i++)
	{
		if (vObjects[i].client == client) return vObjects[i].m_sSide;
	}

	return 0;
}

void CGame::DrawDialogBox_RankLevelUpSetting(short msX, short msY)
{
	short sX, sY, szX;
	DWORD dwTime = m_dwCurTime;
	char cTxt[120];
	unsigned char iStats;
	sX = m_stDialogBoxInfo[61].sX;
	sY = m_stDialogBoxInfo[61].sY;
	szX = m_stDialogBoxInfo[61].sSizeX;

	DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_RANKUP, sX, sY, 0);

	PutAlignedString(sX, sX + szX, sY + 45, DRAW_DIALOGBOX_RankUP_1);
	PutAlignedString(sX, sX + szX, sY + 60, DRAW_DIALOGBOX_RankUP_2);

	// Points Left - Display in green if > 0
	PutString(sX + 48, sY + 96, DRAW_DIALOGBOX_RankUP_3, RGB(5, 5, 5));
	
	wsprintf(cTxt, "%d", m_sTempRankPoints);
	if (m_sTempRankPoints > 0)
	{
		PutString(sX + 139, sY + 97, cTxt, RGB(255, 255, 255));
	}
	else
	{
		PutString(sX + 139, sY + 97, cTxt, RGB(5, 5, 5));
	}

	//str
	PutString(sX + 51, sY + 127, DRAW_DIALOGBOX_LEVELUP_SETTING4, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_sTmpRankAddStr);
	PutString(sX + 140, sY + 127, cTxt, RGB(5, 5, 5));

	auto strup = (msX >= sX + 167) && (msX <= sX + 177) && (msY >= sY + 130) && (msY <= sY + 136);
	auto strdown = (msX >= sX + 182) && (msX <= sX + 192) && (msY >= sY + 130) && (msY <= sY + 136);
	if (strup) m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutTransSprite(sX + 167, sY + 130, 5, dwTime);
	if (strdown) m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutTransSprite(sX + 182, sY + 130, 6, dwTime);

	//dex
	PutString(sX + 51, sY + 147, DRAW_DIALOGBOX_LEVELUP_SETTING6, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_sTmpRankAddDex);
	PutString(sX + 140, sY + 147, cTxt, RGB(5, 5, 5));

	auto dexup = (msX >= sX + 167) && (msX <= sX + 177) && (msY >= sY + 149) && (msY <= sY + 155);
	auto dexdown = (msX >= sX + 182) && (msX <= sX + 192) && (msY >= sY + 149) && (msY <= sY + 155);
	if (dexup) m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutTransSprite(sX + 167, sY + 149, 5, dwTime);
	if (dexdown) m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutTransSprite(sX + 182, sY + 149, 6, dwTime);
	
	//int
	PutString(sX + 51, sY + 167, DRAW_DIALOGBOX_LEVELUP_SETTING7, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_sTmpRankAddInt);
	PutString(sX + 140, sY + 167, cTxt, RGB(5, 5, 5));

	auto intup = (msX >= sX + 167) && (msX <= sX + 177) && (msY >= sY + 168) && (msY <= sY + 174);
	auto intdown = (msX >= sX + 182) && (msX <= sX + 192) && (msY >= sY + 168) && (msY <= sY + 174);
	if (intup) m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutTransSprite(sX + 167, sY + 168, 5, dwTime);
	if (intdown) m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutTransSprite(sX + 182, sY + 168, 6, dwTime);

	//mag
	PutString(sX + 51, sY + 187, DRAW_DIALOGBOX_LEVELUP_SETTING8, RGB(5, 5, 5));
	wsprintf(cTxt, "%d", m_sTmpRankAddMag);
	PutString(sX + 140, sY + 187, cTxt, RGB(5, 5, 5));

	auto magup = (msX >= sX + 167) && (msX <= sX + 177) && (msY >= sY + 187) && (msY <= sY + 193);
	auto magdown = (msX >= sX + 182) && (msX <= sX + 192) && (msY >= sY + 187) && (msY <= sY + 193);
	if (magup) m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutTransSprite(sX + 167, sY + 187, 5, dwTime);
	if (magdown) m_pSprite[DEF_SPRID_INTERFACE_ND_GAME4]->PutTransSprite(sX + 182, sY + 187, 6, dwTime);

	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + 225) && (msY < sY + 245))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + 225, 1);//154 292
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + DEF_RBTNPOSX, sY + 225, 0);

	if ((msX >= sX + 35) && (msX <= sX + 35 + DEF_BTNSZX) && (msY >= sY + 225) && (msY <= sY + 245))
		DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 35, sY + 225, 17);
	else DrawNewDialogBox(DEF_SPRID_INTERFACE_ND_BUTTON, sX + 35, sY + 225, 16);
}


void CGame::DlgBoxClick_RankLevelUpSettings(short msX, short msY)
{
	short sX, sY;

	sX = m_stDialogBoxInfo[61].sX;
	sY = m_stDialogBoxInfo[61].sY;


	if (msX >= sX + 167 && msX <= sX + 177 && msY <= sY + 272)
	{
		if (m_iRankPoints == 0) return;

		if (m_sTempRankPoints == 0) return;

		if ((msY >= sY + 130) && (msY <= sY + 136))
		{
			if (m_sTempRankPoints > 0)
			{
				if (m_sTmpRankAddStr == 30) return;//20
				m_sTempRankPoints--;
				m_sTmpRankAddStr++;
				PlaySound('E', 14, 5);
			}
		}
		if ((msY >= sY + 149) && (msY <= sY + 155))
		{
			if (m_sTempRankPoints > 0)
			{
				if (m_sTmpRankAddDex == 30) return;
				m_sTempRankPoints--;
				m_sTmpRankAddDex++;
				PlaySound('E', 14, 5);
			}
		}
		if ((msY >= sY + 168) && (msY <= sY + 174))
		{
			if (m_sTempRankPoints > 0)
			{
				if (m_sTmpRankAddInt == 30) return;
				m_sTempRankPoints--;
				m_sTmpRankAddInt++;
				PlaySound('E', 14, 5);
			}
		}
		if ((msY >= sY + 187) && (msY <= sY + 193))
		{
			if (m_sTempRankPoints > 0)
			{
				if (m_sTmpRankAddMag == 30) return;
				m_sTempRankPoints--;
				m_sTmpRankAddMag++;
				PlaySound('E', 14, 5);
			}
		}	
	}
	if (msX >= sX + 182 && msX <= sX + 192 && msY <= sY + 272)
	{
		if (m_iRankPoints == 0) return;
		if ((msY >= sY + 130) && (msY <= sY + 136))
		{
			if (m_sTmpRankAddStr == 0) return;

			m_sTempRankPoints++;
			m_sTmpRankAddStr--;
			PlaySound('E', 14, 5);

		}
		if ((msY >= sY + 149) && (msY <= sY + 155))
		{
			if (m_sTmpRankAddDex == 0) return;

			m_sTempRankPoints++;
			m_sTmpRankAddDex--;
			PlaySound('E', 14, 5);

		}
		if ((msY >= sY + 168) && (msY <= sY + 174))
		{
			if (m_sTmpRankAddInt == 0) return;
			m_sTempRankPoints++;
			m_sTmpRankAddInt--;
			PlaySound('E', 14, 5);

		}
		if ((msY >= sY + 187) && (msY <= sY + 193))
		{
			if (m_sTmpRankAddMag == 0) return;

			m_sTempRankPoints++;
			m_sTmpRankAddMag--;
			PlaySound('E', 14, 5);

		}		
	}
	if ((msX >= sX + DEF_RBTNPOSX) && (msX <= sX + DEF_RBTNPOSX + DEF_BTNSZX) && (msY > sY + 225) && (msY < sY + 245))
	{
		if (m_iRankPoints > 0)
		{
			char data[300];
			char * cp = data;
			Push(cp, (u32)NOT_CHANGERANKSTATS);
			Push(cp, (u16)0);

			Push(cp, m_sTmpRankAddStr);
			Push(cp, m_sTmpRankAddDex);
			Push(cp, m_sTmpRankAddInt);
			Push(cp, m_sTmpRankAddMag);

			m_pGSock->iSendMsg(data, sizeof(data));

			PlaySound('E', 14, 5);
			DisableDialogBox(61);
			return;
		}
	}
	if ((msX >= sX + 35) && (msX <= sX + 35 + DEF_BTNSZX) && (msY >= sY + 225) && (msY <= sY + 245))
	{
		DisableDialogBox(61);
		return;
	}
}

void CGame::getNpcHealth(char* data)
{
	Pop(data, m_iMobHP);
	Pop(data, m_iMobMaxHP);
	showbar = true;
}

void CGame::Minimap::Clear()
{
	list.clear();
}

#define stdremove(list, func) list.erase(remove_if(list.begin(), list.end(), func), list.end());

void CGame::Minimap::Remove(int handle) {
	stdremove(list, [&](Minimap::Unit & p)
	{
		return p.id == handle;
	});
}


void CGame::shinning_status(char * data)
{
	char tmp[100];
	short s_status;
	Pop(data, tmp, 100);
	Pop(data, s_status);

	SetTopMsg(tmp, 10);

	if (s_status == 1) m_bShinning = true; else m_bShinning = false;
}


void CGame::shinning_status_onlyclient(char * data)
{
	short s_status;
	Pop(data, s_status);
	
	if (s_status == 1) m_bShinning = true; else m_bShinning = false;
}

void CGame::shinning_update(char * cp)
{
	int * ip = (int*)cp;
	int h = *ip;
	cp += 4;

	short * sp = (short*)cp;
	short x = *sp;
	cp += 2;

	sp = (short*)cp;
	short y = *sp;
	cp += 2;

	Minimap::Unit u;
	u.id = h;
	u.x = x;
	u.y = y;
	auto t = timeGetTime();
	u.time = t;
	m_minimap.Remove(h);


	m_minimap.list.push_back(u);
}

void CGame::shinning_clear(char * cp)
{
	int h;

	int * ip = (int*)cp;
	h = *ip;
	cp += 4;

	m_minimap.Remove(h);
}

//HeatoN rebirth
int CGame::getRebirthStats()
{
	int result = 0;
	if (m_iRebirthLevel != 0)
	{
		result = m_iRebirthLevel * 3;
	}

	return result;
}


void CGame::get_dm_points(char * data)
{
	Pop(data, m_iDMKills);
	Pop(data, m_iDMDeaths);
}

void CGame::mouselog(char * log)
{
	ZeroMemory(templog, sizeof(templog));
	strcpy(templog, log);
}


//HeatoN market

void CGame::MarketNames(char* data)
{
	u16 cnt;
	Pop(data, cnt);

	market_names.clear();
	for (int i = 0; i < cnt; i++)
	{
		char name[12] = {};
		Pop(data, name, 10);
		market_names.push_back(name);
	}
}

void CGame::MarketItems(char* data)
{
	char name[12] = {};

	Pop(data, name, 10);

	market_name = name;

	u16 sz;
	Pop(data, sz);

	market_items.clear();
	for (int i = 0; i < sz; i++)
	{
		MarketItem item;
		Pop(data, item.index);
		auto* it = &item.item;

		ZeroMemory(it->m_cName, sizeof(it->m_cName));

		Pop(data, it->m_cName, 20);
		//PutLogList(it->m_cName);

		Pop(data, it->m_dwCount);
		//PutLogList((char*)to_string(it->m_dwCount).c_str());

		Pop(data, it->m_cItemType);
		//PutLogList((char*)to_string(it->m_cItemType).c_str());

		Pop(data, it->m_cEquipPos);
		//PutLogList((char*)to_string(it->m_cEquipPos).c_str());

		Pop(data, it->m_sLevelLimit);
		//PutLogList((char*)to_string(it->m_sLevelLimit).c_str());

		Pop(data, it->m_cGenderLimit);
		//PutLogList((char*)to_string(it->m_cGenderLimit).c_str());

		Pop(data, it->m_wCurLifeSpan);
		//PutLogList((char*)to_string(it->m_wCurLifeSpan).c_str());

		WORD tempweight;
		Pop(data, tempweight);
		it->m_wWeight = tempweight;
		//PutLogList((char*)to_string(tempweight).c_str());

		Pop(data, it->m_sSprite);
		//PutLogList((char*)to_string(it->m_sSprite).c_str());

		Pop(data, it->m_sSpriteFrame);
		//PutLogList((char*)to_string(it->m_sSpriteFrame).c_str());

		Pop(data, it->m_cItemColor);
		//PutLogList((char*)to_string(it->m_cItemColor).c_str());

		int tempval2;
		Pop(data, tempval2);
		it->m_sItemSpecEffectValue2 = tempval2;
		//PutLogList((char*)to_string(tempval2).c_str());

		Pop(data, (DWORD)it->m_dwAttribute);
		//PutLogList((char*)to_string(it->m_dwAttribute).c_str());

		int tempval3;
		Pop(data, tempval3);
		it->m_sItemSpecEffectValue3 = tempval3;
		//PutLogList((char*)to_string(tempval3).c_str());

		Pop(data, item.coins);
		//PutLogList((char*)to_string(item.coins).c_str());

		market_items.push_back(item);
	}
}

// drawiteminfo
void CGame::DrawItemInfo(CItem* item, int x, int y, int mx, int my)
{
	short msX, msY, msZ;
	char cLB, cRB, cMB;

	char cStr1[64], cStr2[64], cStr3[64], cStr4[64], cStr5[64], cStr6[64], cItemsTotal[64];
	int  iLoc, iLocStr2 = 0, iLocStr3 = 0, iLocStr4 = 0, iLocStr5 = 0, iLocStr6 = 0, ItemsTotal = 0;
	int  iStrLen1 = 0, iStrLen2 = 0, iStrLen3 = 0, iStrLen4 = 0, iStrLen5 = 0, iStrLen6 = 0;
	short msY1 = 0, msX1 = 0, msK = 0;

	m_DInput.UpdateMouseState(&msX, &msY, &msZ, &cLB, &cRB);

	int posx = x == 0 ? msX - m_stMCursor.sDistX : x;
	int posy = y == 0 ? msY - m_stMCursor.sDistY : y;
	auto cItemColor = item->m_cItemColor;

	int magicspr = DEF_SPRID_ITEMPACK_PIVOTPOINT;

	if (cItemColor != 0) {
		if ((item->m_cEquipPos == DEF_EQUIPPOS_LHAND) ||
			(item->m_cEquipPos == DEF_EQUIPPOS_RHAND) ||
			(item->m_cEquipPos == DEF_EQUIPPOS_TWOHAND))
		{
			m_pSprite[magicspr + item->m_sSprite]->PutSpriteRGB(posx, posy,
				item->m_sSpriteFrame,
				m_wWR[cItemColor] - m_wR[0], m_wWG[cItemColor] - m_wG[0], m_wWB[cItemColor] - m_wB[0], 1);
		}
		else
		{
			m_pSprite[magicspr + item->m_sSprite]->PutSpriteRGB(posx, posy,
				item->m_sSpriteFrame,
				m_wR[cItemColor] - m_wR[0], m_wG[cItemColor] - m_wG[0], m_wB[cItemColor] - m_wB[0], 1);
		}
	}
	else
	{
		m_pSprite[magicspr + item->m_sSprite]->PutSpriteFast(posx, posy, item->m_sSpriteFrame, 1);
	}

	GetItemName(item, cStr1, cStr2, cStr3);

	if (mx != 0 && my != 0)
	{
		msX = mx;
		msY = my;
	}

	iLoc = 0;

	if (strlen(cStr1) > 20) iLoc += 30; else iLoc += 15;

	if (strlen(cStr2) != 0) { iLoc += 15; iLocStr2 += 15; }

	if (strlen(cStr3) != 0) { iLoc += 15; iLocStr3 += 15; }

	if ((item->m_sLevelLimit != 0) && ((item->m_dwAttribute & 0x00000001) == 0)) { iLoc += 15; iLocStr4 += 15; }

	if ((item->m_cEquipPos != DEF_EQUIPPOS_NONE) && (item->m_wWeight >= 1100)) { iLoc += 15; iLocStr5 += 15; }

	if (item->m_cEquipPos != DEF_EQUIPPOS_NONE && string(item->m_cName) != "ZemstoneofSacrifice") { iLoc += 15; iLocStr6 += 15; }

	if ((msY + iLoc + 28) > 426) msY1 = 426; else msY1 = msY + iLoc + 28;

	if ((iStrLen1 > 0) && (iStrLen1 >= iStrLen2) && (iStrLen1 >= iStrLen3) && (iStrLen1 >= iStrLen4) && (iStrLen1 >= iStrLen5) && (iStrLen1 >= iStrLen6))
	{
		if (iStrLen1 < 20) msK = iStrLen1 * 5 + 40; else msK = iStrLen1 * 5 + 20;
	}
	else if ((iStrLen2 > 0) && (iStrLen2 >= iStrLen3) && (iStrLen2 >= iStrLen4) && (iStrLen2 >= iStrLen5) && (iStrLen2 >= iStrLen6))
		msK = iStrLen2 * 5 + 20;
	else if ((iStrLen3 > 0) && (iStrLen3 >= iStrLen4) && (iStrLen3 >= iStrLen5) && (iStrLen3 >= iStrLen6))
		msK = iStrLen3 * 5 + 20;
	else if ((iStrLen4 > 0) && (iStrLen4 >= iStrLen5) && (iStrLen4 >= iStrLen6))
		msK = iStrLen4 * 5 + 20;
	else if ((iStrLen5 > 0) && (iStrLen5 >= iStrLen6))
		msK = iStrLen5 * 5 + 20;
	else if (iStrLen6 > 0)
		msK = iStrLen5 * 5 + 20;


	msX1 = msX + msK;
	if (msX1 > 639)
		msX1 = 639;

	m_DDraw.DrawShadowBox(msX - 3, msY + 22, msX + 140, msY1);

	int count = msX + 140 - msX + 4;
	int count2 = msY1 - (msY + 22);

	for (int a = 0; a < count; a++)
	{
		m_DDraw.PutPixel(msX - 3 + (a), msY + 22, 152, 123, 54);
		m_DDraw.PutPixel(msX - 3 + (a), msY1, 152, 123, 54);
	}

	for (int b = 0; b < count2; b++)
	{
		m_DDraw.PutPixel(msX - 3, msY + 22 + (b), 152, 123, 54);
		m_DDraw.PutPixel(msX + 140, msY + 22 + (b), 152, 123, 54);
	}

	iLoc = 0;

	bool special = false;

	if ((item->m_dwAttribute & 0x00000001) != 0)
	{
		special = true;
	}
	else if ((item->m_dwAttribute & 0x00F0F000) != 0)
	{
		special = true;
	}
	else
	{
		special = false;
	}
	/*if (IsCommonItem(item->m_cName))
	{
		PutAlignedString(msX - 3, msX + 140, msY + 25, cStr1, 61, 212, 45); // amarillo
	}
	else if (IsRareItem(item->m_cName))
	{
		PutAlignedString(msX - 3, msX + 140, msY + 25, cStr1, 255, 200, 0); // amarillo
	}
	else if (special && !IsRareItem(item->m_cName))
	{
		PutAlignedString(msX - 3, msX + 140, msY + 25, cStr1, 255, 0, 0); // rojo
	}
	else
	{*/
	PutAlignedString(msX - 3, msX + 140, msY + 25, cStr1, 61, 212, 45);
	//}

	if (strlen(cStr1) > 20) iLoc += 30; else iLoc += 15;

	if (strlen(cStr2) != 0)
	{
		PutAlignedString(msX - 3, msX + 140, msY + 25 + iLoc, cStr2, 150, 150, 150);
		iLoc += 15;
		iLocStr2 += 15;
	}
	if (strlen(cStr3) != 0)
	{
		PutAlignedString(msX - 3, msX + 140, msY + 25 + iLoc, cStr3, 150, 150, 150);
		iLoc += 15;
		iLocStr3 += 15;
	}
	if ((item->m_sLevelLimit != 0) && ((item->m_dwAttribute & 0x00000001) == 0))
	{
		wsprintf(cStr4, "%s: %d", DRAW_DIALOGBOX_SHOP24, item->m_sLevelLimit);

		PutAlignedString(msX - 3, msX + 140, msY + 25 + iLoc, cStr4, 150, 150, 150);
		iLoc += 15;
		iLocStr4 += 15;
	}
	if ((item->m_cEquipPos != DEF_EQUIPPOS_NONE) && (item->m_wWeight >= 1100))
	{
		int	_wWeight = 0;
		if (item->m_wWeight % 100) _wWeight = 1;
		wsprintf(cStr5, DRAW_DIALOGBOX_SHOP15, item->m_wWeight / 100 + _wWeight);
		PutAlignedString(msX - 3, msX + 140, msY + 25 + iLoc, cStr5, 150, 150, 150);
		iLoc += 15;
		iLocStr5 += 15;
	}

	if (item->m_cEquipPos != DEF_EQUIPPOS_NONE && string(item->m_cName) != "ZemstoneofSacrifice")
	{
		wsprintf(cStr6, UPDATE_SCREEN_ONGAME10, item->m_wCurLifeSpan);
		PutAlignedString(msX - 3, msX + 140, msY + 25 + iLoc, cStr6, 150, 150, 150);
		iLoc += 15;
		iLocStr6 += 15;
	}
}

// draw pixels
void CGame::DrawPixelsWhite(int mode, int count, short x, short y)
{

	switch (mode)
	{
	case 1:
	{
		for (int d = 0; d < count; d++)
		{
			m_DDraw.PutPixel(x + (d), y, 255, 255, 255);
		}
		break;
	}

	case 2:
	{
		for (int d = 0; d < count; d++)
		{
			m_DDraw.PutPixel(x, y + (d), 255, 255, 255);
		}
		break;
	}
	}
}

void CGame::NotifyMsg_ItemRepaired2(char* pData)
{
	char* cp, cTxt[120];
	DWORD* dwp, dwItemID, dwLife;

	cp = (char*)(pData + DEF_INDEX2_MSGTYPE + 2);

	dwp = (DWORD*)cp;
	dwItemID = *dwp;
	cp += 4;

	dwp = (DWORD*)cp;
	dwLife = *dwp;
	cp += 4;

	m_pItemList[dwItemID]->m_wCurLifeSpan = (WORD)dwLife;
	m_bIsItemDisabled[dwItemID] = FALSE;
	char cStr1[64], cStr2[64], cStr3[64];
	GetItemName(m_pItemList[dwItemID], cStr1, cStr2, cStr3);
}

bool CGame::isInMarketMap(char* mapname)
{
	return string(mapname) == "Whouse" || string(mapname) == "cityhall_1" || string(mapname) == "cityhall_2";
}

BOOL   CGame::DrawObject(int indexX, int indexY, int sX, int sY, BOOL bTrans, DWORD dwTime, int msX, int msY, int ObjectID, char _tmp_cAction, const bool frame_omision)
{
	int cFrame, cDir, iFrame;
	int dx, dy, cFrameMoveDots, dsx, dsy, iDrawMode;
	int iBodyIndex, iHairIndex, iUndiesIndex, iArmArmorIndex, iBodyArmorIndex, iPantsIndex, iBootsIndex, iHelmIndex, iR, iG, iB;
	int iWeaponIndex, iShieldIndex, iAdd, iMantleIndex, iWeapon;
	BOOL bInv = FALSE, bDashDraw = FALSE;
	int iSkirtDraw = 0;
	short iArmorGlare, iPantsGlare, iArmGlare, iHelmGlare, iMantleGlare, iBootsGlare, iWeaponGlare, iShieldGlare;
	short iWeaponColor, iShieldColor, iArmorColor, iMantleColor, iArmColor, iPantsColor, iBootsColor, iHelmColor;
	short TempWeaponColor, TempShieldColor, TempArmorColor, TempMantleColor, TempArmColor, TempPantsColor, TempBootsColor, TempHelmColor;

	switch (_tmp_cAction)
	{
	case DEF_OBJECTMOVE:
	{	
		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 114)	bInv = TRUE; //Energy-Ball, Wyvern

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iWeaponColor = 0;
			iShieldColor = 0;
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (iWeaponColor == 0) {
				iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (iWeaponColor != 0) iWeaponColor += 15;
			}

			iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (iShieldColor == 0) {
				iShieldColor = (_tmp_iApprColor2 & 0xF0000000) >> 24;
				if (iShieldColor != 0) iShieldColor += 15;
			}

			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
			iShieldGlare = (_tmp_sAppr4 & 0x0003);

			// New Colors -> ZeroEoyPnk
			TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (TempWeaponColor == 0) {
				TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (TempWeaponColor != 0) TempWeaponColor += 15;
			}

			TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (TempShieldColor == 0) {
				TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (TempShieldColor != 0) TempShieldColor += 15;
			}

			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0)
		{
			//	DecriptString(m_cPlayerName);
			if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
			else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
			//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
			else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
			else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
			else {
				//		EncriptString(m_cPlayerName);
				return FALSE;
			}
			//	EncriptString(m_cPlayerName);
		}

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iAdd = 3;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 3 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 3;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (2 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 2;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 2;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 2;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 2;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 2;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else  iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 2 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 2;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 2;
			}
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iAdd = 3;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 3 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 3;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (2 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 2;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 2;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 2;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 2;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 2;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 2 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 2;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 2;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 2;
			}
			break;

		default:
			if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
		}
		dx = 0;
		dy = 0;
		const bool value = frame_omision;

		switch (_tmp_cDir) {
		case 1: dy = 30 - (_tmp_cFrame << 2) - value; break;
		case 2: dy = 30 - (_tmp_cFrame << 2) - value; dx = (_tmp_cFrame << 2) + value - 30; break;
		case 3: dx = (_tmp_cFrame << 2) + value - 30; break;
		case 4: dx = (_tmp_cFrame << 2) + value - 30; dy = (_tmp_cFrame << 2) + value - 30; break;
		case 5: dy = (_tmp_cFrame << 2) + value - 30; break;
		case 6: dy = (_tmp_cFrame << 2) + value - 30; dx = 30 - (_tmp_cFrame << 2) - value; break;
		case 7: dx = 30 - (_tmp_cFrame << 2) - value; break;
		case 8: dx = 30 - (_tmp_cFrame << 2) - value; dy = 30 - (_tmp_cFrame << 2) - value; break;
		}

		int fix_x = 0;
		int fix_y = 0;

		switch (_tmp_cDir) {
		case 1: fix_x = sX + dx;		 fix_y = sY + dy - value; break;//listo
		case 2: fix_x = sX + dx + value; fix_y = sY + dy - value; break;//listo
		case 3: fix_x = sX + dx + value; fix_y = sY + dy;		  break;//listo
		case 4: fix_x = sX + dx + value; fix_y = sY + dy + value; break;//listo
		case 5: fix_x = sX + dx;		 fix_y = sY + dy + value; break;//listo
		case 6: fix_x = sX + dx - value; fix_y = sY + dy + value; break;//listo
		case 7: fix_x = sX + dx - value; fix_y = sY + dy;		  break;//listo
		case 8: fix_x = sX + dx - value; fix_y = sY + dy - value; break;//listo
		}
		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:

		case 28: // Troll.
		case 29: // Orge.
		case 30: // Liche
		case 31: // DD
		case 32: // Uni
		case 33: // ww

		case 43: // LWB
		case 44: // GHK
		case 45: // GHKABS
		case 46: // TK
		case 47: // BG
		case 48: // SK
		case 49: // HC
		case 50: // TW

		case 52: // GG
		case 53: // BB
		case 54: // DE
		case 55: // Rabbit
		case 56: // Cat
		case 57: // Frog
		case 58: // MG
		case 59: // Ettin
		case 60: // Plant
		case 61: // Rudolph
		case 62: // DireBoar
		case 63: // Frost

		case 65: // Ice-Golem
		case 66: // Wyvern

		case 70: // Dragon..........Ajouts par Snoopy
		case 71: // Centaur
		case 72: // ClawTurtle
		case 73: // FireWyvern
		case 74: // GiantCrayfish
		case 75: // Gi Lizard
		case 76: // Gi Tree
		case 77: // Master Orc
		case 78: // Minaus
		case 79: // Nizie
		case 80: // Tentocle
		case 81: // Abaddon
		case 82: // Sorceress
		case 83: // ATK
		case 84: // MasterElf
		case 85: // DSK
		case 86: // HBT
		case 87: // CT
		case 88: // Barbarian
		case 89: // AGC
		case 90: // Gail
		case 108: //HellDeath
		case 109:
		case 111:
			//case 112:
		case 113:
		case 114:
			//case 115:
		case 116:
		case 117:
		case 118:
		case 119:
			//case 120:
		case 128:

			break;

		default:
			if (_tmp_cAction == DEF_OBJECTMOVE) _tmp_cFrame = _tmp_cFrame / 2;
			break;
		}

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(fix_x, fix_y, _tmp_cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		if (_tmp_iEffectType != 0)
		{
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (_tmp_sOwnerType == 65) // IceGolem
		{	/*m_pEffectSpr[77]->PutTransSprite70(sX+dx, sY+dy, _tmp_cFrame, dwTime);*/
			switch (rand() % 3) {
			case 0:	m_pEffectSpr[76]->PutTransSprite70(fix_x, fix_y, _tmp_cFrame, dwTime); break;
			case 1:	m_pEffectSpr[77]->PutTransSprite70(fix_x, fix_y, _tmp_cFrame, dwTime); break;
			case 2:	m_pEffectSpr[78]->PutTransSprite70(fix_x, fix_y, _tmp_cFrame, dwTime); break;
			}
		}
		if (bTrans == FALSE)
		{
			CheckActiveAura(fix_x, fix_y, dwTime, _tmp_sOwnerType);
			if (_cDrawingOrder[_tmp_cDir] == 1)
			{
				if (iWeaponIndex != -1)
				{
					if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(fix_x, fix_y, _tmp_cFrame, dwTime);
					else
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					}
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyv
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
					}
					break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(fix_x, fix_y, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
				}
				else if (bInv == TRUE)
					//m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite2(sX+dx, sY+dy, _tmp_cFrame, dwTime);
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
				else
				{
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
				}

				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iPantsIndex != -1)//PANTS ONMOVE 1
				{
					if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				if (iArmArmorIndex != -1)//HAUBERK ONMOVE 1
				{
					if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iBodyArmorIndex != -1)//ARMOR ONMOVE 1
				{
					if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iHelmIndex != -1)//HELM ONMOVE 1
				{
					if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iShieldIndex != -1)
				{
					if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					}
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
			}
			else
			{
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
					}
					break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(fix_x, fix_y, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite70(fix_x, fix_y, _tmp_cFrame, dwTime);
				}
				else if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
				else
				{
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
				}

				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iPantsIndex != -1)//PANTS ONMOVE 2
				{
					if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				if (iArmArmorIndex != -1)//HAUBERK ONMOVE 2
				{
					if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iBodyArmorIndex != -1)//ARMOR ONMOVE 2
				{
					if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				if (iHelmIndex != -1)//HELM ONMOVE 2
				{
					if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iShieldIndex != -1)
				{
					if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					}
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;
						//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iWeaponIndex != -1)
				{
					if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(fix_x, fix_y, _tmp_cFrame, dwTime);
					else
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					}
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
			}

			// Berserk
			if ((_tmp_iStatus & 0x20) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(fix_x, fix_y, _tmp_AdminLevel);
			}


			DrawAngel(40 + (_tmp_cDir - 1), sX + dx + 20, sY + dy - 20, _tmp_cFrame % 4, dwTime);
			CheckActiveAura2(fix_x, fix_y, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX + dx - 10, sY + dy - 70, dwTime);

		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(fix_x, fix_y, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(fix_x, fix_y, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					//			DecriptString(m_cPlayerName);
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(fix_x, fix_y, i, dwTime);
					//			EncriptString(m_cPlayerName);
				}
			}
		}

		//	DecriptString(m_cPlayerName);
		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(fix_x, fix_y, dwTime);
		//EncriptString(m_cPlayerName);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
			{
				/*m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX + dx;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY + dy;*/
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = fix_x;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = fix_y;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}
		_tmp_dx = dx;
		_tmp_dy = dy;
		// Snoopy: Abaddon effects
		if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
		{
			int randFrame = _tmp_iEffectFrame % 12;
			m_pEffectSpr[154]->PutTransSprite70(sX - 50, sY - 50, randFrame, dwTime);
			m_pEffectSpr[155]->PutTransSprite70(sX - 20, sY - 80, randFrame, dwTime);
			m_pEffectSpr[156]->PutTransSprite70(sX + 70, sY - 50, randFrame, dwTime);
			m_pEffectSpr[157]->PutTransSprite70(sX - 30, sY, randFrame, dwTime);
			m_pEffectSpr[158]->PutTransSprite70(sX - 60, sY + 90, randFrame, dwTime);
			m_pEffectSpr[159]->PutTransSprite70(sX + 65, sY + 85, randFrame, dwTime);
			switch (_tmp_cDir) {
			case 1:
				m_pEffectSpr[153]->PutTransSprite70(fix_x, fix_y + 108, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 50, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 2:
				m_pEffectSpr[153]->PutTransSprite70(fix_x, fix_y + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 70, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 3:
				m_pEffectSpr[153]->PutTransSprite70(fix_x, fix_y + 105, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 90, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 4:
				m_pEffectSpr[153]->PutTransSprite70(sX + dx - 35, sY + dy + 100, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 80, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 5:
				m_pEffectSpr[153]->PutTransSprite70(fix_x, fix_y + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 65, sY + dy - 5, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 6:
				m_pEffectSpr[153]->PutTransSprite70(sX + dx + 45, sY + dy + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 31, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 7:
				m_pEffectSpr[153]->PutTransSprite70(sX + dx + 40, sY + dy + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 30, sY + dy + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 8:
				m_pEffectSpr[153]->PutTransSprite70(sX + dx + 20, sY + dy + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX + dx - 20, sY + dy + 16, _tmp_iEffectFrame % 15, dwTime);
				break;
			}
		}

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*	case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
		return FALSE;
		break;
	}
	case DEF_OBJECTRUN:
	{
		
		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114) bInv = TRUE; //Energy-Ball,Wyvern

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iWeaponColor = 0;
			iShieldColor = 0;
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (iWeaponColor == 0) {
				iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (iWeaponColor != 0) iWeaponColor += 15;
			}

			iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (iShieldColor == 0) {
				iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (iShieldColor != 0) iShieldColor += 15;
			}

			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
			iShieldGlare = (_tmp_sAppr4 & 0x0003);

			// New Colors -> ZeroEoyPnk
			TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (TempWeaponColor == 0) {
				TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (TempWeaponColor != 0) TempWeaponColor += 15;
			}

			TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (TempShieldColor == 0) {
				TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (TempShieldColor != 0) TempShieldColor += 15;
			}

			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0)
		{
			//	DecriptString(m_cPlayerName);
			if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
			else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
			//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
			else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
			else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
			else {
				//		EncriptString(m_cPlayerName);
				return FALSE;
			}
			//	EncriptString(m_cPlayerName);
		}

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (4 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 4;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 4;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 4;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 4;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 4;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 4;
			if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
				iWeaponIndex = -1;
			else
			{
				iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 6 + (_tmp_cDir - 1);
			}
			if ((_tmp_sAppr2 & 0x000F) == 0)
				iShieldIndex = -1;
			else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 6;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 4;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 4;
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (4 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 4;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 4;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 4;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 4;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 4;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 4;
			if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
				iWeaponIndex = -1;
			else
			{
				iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 6 + (_tmp_cDir - 1);
			}
			if ((_tmp_sAppr2 & 0x000F) == 0)
				iShieldIndex = -1;
			else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 6;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 4;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 4;
			break;

		default:
			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
		}
		dx = 0;
		dy = 0;
		const bool value = frame_omision;

		switch (_tmp_cDir) {
		case 1: dy = 30 - (_tmp_cFrame << 2) - value; break;
		case 2: dy = 30 - (_tmp_cFrame << 2) - value; dx = (_tmp_cFrame << 2) + value - 30; break;
		case 3: dx = (_tmp_cFrame << 2) + value - 30; break;
		case 4: dx = (_tmp_cFrame << 2) + value - 30; dy = (_tmp_cFrame << 2) + value - 30; break;
		case 5: dy = (_tmp_cFrame << 2) + value - 30; break;
		case 6: dy = (_tmp_cFrame << 2) + value - 30; dx = 30 - (_tmp_cFrame << 2) - value; break;
		case 7: dx = 30 - (_tmp_cFrame << 2) - value; break;
		case 8: dx = 30 - (_tmp_cFrame << 2) - value; dy = 30 - (_tmp_cFrame << 2) - value; break;
		}

		int fix_x = 0;
		int fix_y = 0;

		switch (_tmp_cDir) {
		case 1: fix_x = sX + dx;		 fix_y = sY + dy - value; break;//listo
		case 2: fix_x = sX + dx + value; fix_y = sY + dy - value; break;//listo
		case 3: fix_x = sX + dx + value; fix_y = sY + dy;		  break;//listo
		case 4: fix_x = sX + dx + value; fix_y = sY + dy + value; break;//listo
		case 5: fix_x = sX + dx;		 fix_y = sY + dy + value; break;//listo
		case 6: fix_x = sX + dx - value; fix_y = sY + dy + value; break;//listo
		case 7: fix_x = sX + dx - value; fix_y = sY + dy;		  break;//listo
		case 8: fix_x = sX + dx - value; fix_y = sY + dy - value; break;//listo
		}



		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX + dx, sY + dy, _tmp_cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		if (_tmp_iEffectType != 0)
		{
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(fix_x, fix_y, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (bTrans == FALSE)
		{
			CheckActiveAura(fix_x, fix_y, dwTime, _tmp_sOwnerType);
			if (_cDrawingOrder[_tmp_cDir] == 1)
			{
				if (iWeaponIndex != -1)
				{
					if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(fix_x, fix_y, _tmp_cFrame, dwTime);
					else
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					}
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}

				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
					}
					break;
				}

				if (bInv == TRUE)
					//m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite2(sX+dx, sY+dy, _tmp_cFrame, dwTime);
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
				else
				{
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
				}
				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 0))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iPantsIndex != -1)// PANTS ONRUN 1
				{
					if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iArmArmorIndex != -1)//HAUBERK ONRUN 1
				{
					if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);

						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iBodyArmorIndex != -1)//ARMOR ONRUN 1
				{
					if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iHelmIndex != -1)//HELM ONRUN 1
				{
					if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);

						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 2))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iShieldIndex != -1)
				{
					if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					}
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 1))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
			}
			else
			{
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(fix_x, fix_y, _tmp_cFrame, dwTime);
					}
					break;
				}

				if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite2(fix_x, fix_y, _tmp_cFrame, dwTime);
				else
				{
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
				}

				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);


				if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 0))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					m_pSprite[iUndiesIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iPantsIndex != -1)//PANTS ONRUN 2
				{
					if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				if (iArmArmorIndex != -1)//HAUBERK ONRUN 2
				{
					if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);

						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iBodyArmorIndex != -1)//ARMOR ONRUN 2
				{
					if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				if (iHelmIndex != -1)//HELM ONRUN 2
				{
					if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);

						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 2))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iShieldIndex != -1)
				{
					if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					}
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrderOnRun[_tmp_cDir] == 1))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(fix_x, fix_y, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iWeaponIndex != -1)
				{
					if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(fix_x, fix_y, _tmp_cFrame, dwTime);
					else
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(fix_x, fix_y, _tmp_cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					}
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(fix_x, fix_y, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
			}

			if ((_tmp_iStatus & 0x20) != 0) 	// Berserk
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(fix_x, fix_y, _tmp_AdminLevel);
			}

			DrawAngel(40 + (_tmp_cDir - 1), sX + dx + 20, sY + dy - 20, _tmp_cFrame % 4, dwTime);
			CheckActiveAura2(fix_x, fix_y, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX + dx - 10, sY + dy - 70, dwTime);

		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(fix_x, fix_y, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(fix_x, fix_y, _tmp_sOwnerType, _tmp_iStatus);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					//	DecriptString(m_cPlayerName);
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(fix_x, fix_y, i, dwTime);
					//	EncriptString(m_cPlayerName);
				}
			}
		}

		//DecriptString(m_cPlayerName);
		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(fix_x, fix_y, dwTime);
		//EncriptString(m_cPlayerName);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
			{
				/*	m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX + dx;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY + dy;*/
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = fix_x;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = fix_y;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}
		_tmp_dx = dx;
		_tmp_dy = dy;

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(fix_x, fix_y, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1)
			&& (m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY)
			&& (m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY)
			&& (m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX)
			&& (m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
		return FALSE;
		break;
	}
	case DEF_OBJECTSTOP:
	{

		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 114 || _tmp_sOwnerType == 120) bInv = TRUE; //Energy-Ball, Wyvern
		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iWeaponColor = 0;
			iShieldColor = 0;
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (iWeaponColor == 0) {
				iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (iWeaponColor != 0) iWeaponColor += 15;
			}

			iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (iShieldColor == 0) {
				iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (iShieldColor != 0) iShieldColor += 15;
			}

			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
			iShieldGlare = (_tmp_sAppr4 & 0x0003);

			// New Colors -> ZeroEoyPnk
			TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (TempWeaponColor == 0) {
				TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (TempWeaponColor != 0) TempWeaponColor += 15;
			}

			TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (TempShieldColor == 0) {
				TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (TempShieldColor != 0) TempShieldColor += 15;
			}

			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0)
		{
			//	DecriptString(m_cPlayerName);
			if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
			else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
			//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; // beholder neck
			else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
			else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
			else {
				//		EncriptString(m_cPlayerName);
				return FALSE;
			}
			//	EncriptString(m_cPlayerName);
		}

		// CLEROTH - Single-direction monsters
		switch (_tmp_sOwnerType) {
		case 110: // Air Elemental
			_tmp_cDir = 1; // North
			break;
		case 91: // Snoopy: Gate
			/*if (_tmp_cDir <= 3)*/ _tmp_cDir = 3;
			//else  _tmp_cDir = 5;
			break;
		case 92:
			_tmp_cDir = 1;
			break;
		case 111: // Assasain Officer
			_tmp_cDir = 1;
			break;
		}

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			_tmp_cFrame = _tmp_cFrame / 2;
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (1 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 1;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 1;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 1;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 1;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 1;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 1;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 1 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 1;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 1;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 1;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (0 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 0 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 0;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 0;
			}
			break;

		case 4:
		case 5:
		case 6:
			_tmp_cFrame = _tmp_cFrame / 2;
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0)
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (1 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 1;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 1;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 1;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 1;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 1;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 1;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 1 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 1;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 1;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 1;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (0 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 0 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 0;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 0;
			}
			break;
		default:
			if (_tmp_sAppr2 != 0)
			{
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				_tmp_cFrame = (_tmp_sAppr2 & 0x00FF) - 1;
			}//lalo agregue los 3 else if
			//	else if (_tmp_sOwnerType == 66) iBodyIndex =  DEF_SPRID_MOB  +  (_tmp_sOwnerType - 10 )*8*7 + (0 * 8);
			//	else if (_tmp_sOwnerType == 73) iBodyIndex =  DEF_SPRID_MOB  +  (_tmp_sOwnerType - 10 )*8*7 + (0 * 8);
			//	else if (_tmp_sOwnerType == 81) iBodyIndex =  DEF_SPRID_MOB  +  (_tmp_sOwnerType - 10 )*8*7 + (0 * 8);
			else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
		}

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, _tmp_cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		switch (_tmp_sOwnerType) { // hum? la lumiere en dessous ?
		case 15: // ShopKeeper
		case 19: // Gandalf
		case 20: // Howard
		case 24: // Tom
		case 25: // William
		case 26: // Kenedy
		case 51: // CP
		case 86: // HBT
		case 90: // Gail
		case 129: // market
		case 111: // assa
			m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);
			break;
		case 92:
			_tmp_cFrame = 0;
			break;
		}
		if (_tmp_iEffectType != 0)
		{
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (bTrans == FALSE)
		{
			CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
			if (_cDrawingOrder[_tmp_cDir] == 1)
			{
				if (iWeaponIndex != -1)
				{
					if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(sX, sY, _tmp_cFrame, dwTime);
					else
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					}
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}

				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128://BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
					}
					break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);

				}
				else if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
				else
				{
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
				}

				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iPantsIndex != -1) // PANTS ONSTOP 1
				{
					if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iArmArmorIndex != -1) //HAUBERK ONSTOP 1
				{
					if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);

						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iBodyArmorIndex != -1)//ARMOR ONSTOP 1
				{
					if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iHelmIndex != -1)//HELM ONSTOP 1
				{
					if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);

						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iShieldIndex != -1)
				{
					if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					}
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {		//	lalo glare			   //Logo GM
					case 0: break;
						//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
					case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
			}
			else
			{
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128://BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
					}
					break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);
				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				else if (bInv == TRUE)
				{
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				else
				{
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
				}
				//GPT fix
				int index = iBodyIndex + (_tmp_cDir - 1);
				if (m_pSprite[index] != nullptr) {
					SetRect(&m_rcBodyRect,
						m_pSprite[index]->m_rcBound.left,
						m_pSprite[index]->m_rcBound.top,
						m_pSprite[index]->m_rcBound.right,
						m_pSprite[index]->m_rcBound.bottom);
				}

				//te voy a mostar lo q cambie
				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iPantsIndex != -1)//PANTS ONSTOP 2
				{
					if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);

						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				if (iArmArmorIndex != -1)//HAUBERK ONSTOP 2
				{
					if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);

						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iBodyArmorIndex != -1)//ARMOR ONSTOP 2
				{
					if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);

						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glar
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iHelmIndex != -1)//HELM ONSTOP 2
				{
					if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);

						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iShieldIndex != -1)
				{
					if (bInv) m_pSprite[iShieldIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					}
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;
						//Logo GM
						//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
					case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}

				if (iWeaponIndex != -1)
				{
					if (bInv) m_pSprite[iWeaponIndex]->PutTransSprite25(sX, sY, _tmp_cFrame, dwTime);
					else
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					}
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
			}
			if (_tmp_sOwnerType == 64) // crop
			{
				switch (_tmp_cFrame) {
				case 0: // color effect for crop
					m_pEffectSpr[84]->PutTransSprite(sX + 52, sY + 54, (dwTime % 3000) / 120, dwTime);
					break;
				case 1: // color effect for crop
					m_pEffectSpr[83]->PutTransSprite(sX + 53, sY + 59, (dwTime % 3000) / 120, dwTime);
					break;
				case 2: // color effect for crop
					m_pEffectSpr[82]->PutTransSprite(sX + 53, sY + 65, (dwTime % 3000) / 120, dwTime);
					break;
				}
			}
			// Berserk
			if ((_tmp_iStatus & 0x20) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(sX, sY, _tmp_AdminLevel);
			}

			DrawAngel(40 + (_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame % 4, dwTime);

			CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX - 10, sY - 70, dwTime);

		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					//		DecriptString(m_cPlayerName);
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX, sY, i, dwTime);
					//	EncriptString(m_cPlayerName);
				}
			}
		}

		//DecriptString(m_cPlayerName);
		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);
		//EncriptString(m_cPlayerName);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID)) {
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}
		// Snoopy: Abaddon effects
		if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
		{
			int randFrame = _tmp_cFrame % 12;
			m_pEffectSpr[154]->PutTransSprite70(sX - 50, sY - 50, randFrame, dwTime);
			m_pEffectSpr[155]->PutTransSprite70(sX - 20, sY - 80, randFrame, dwTime);
			m_pEffectSpr[156]->PutTransSprite70(sX + 70, sY - 50, randFrame, dwTime);
			m_pEffectSpr[157]->PutTransSprite70(sX - 30, sY, randFrame, dwTime);
			m_pEffectSpr[158]->PutTransSprite70(sX - 60, sY + 90, randFrame, dwTime);
			m_pEffectSpr[159]->PutTransSprite70(sX + 65, sY + 85, randFrame, dwTime);
			switch (_tmp_cDir) {
			case 1:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 108, _tmp_iEffectFrame % 28, dwTime);//todo igual cambio 153
				m_pEffectSpr[164]->PutTransSprite70(sX - 50, sY + 10, _tmp_iEffectFrame % 15, dwTime);//cambio 164
				break;
			case 2:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 70, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 3:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 105, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 90, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 4:
				m_pEffectSpr[153]->PutTransSprite70(sX - 35, sY + 100, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 80, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 5:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 65, sY - 5, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 6:
				m_pEffectSpr[153]->PutTransSprite70(sX + 45, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 31, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 7:
				m_pEffectSpr[153]->PutTransSprite70(sX + 40, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 30, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 8:
				m_pEffectSpr[153]->PutTransSprite70(sX + 20, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 20, sY + 16, _tmp_iEffectFrame % 15, dwTime);
				break;
			}
		}

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		//GPT fix
		int index = iBodyIndex + (_tmp_cDir - 1);
		if (m_pSprite[index] != nullptr) {
			if ((m_pSprite[index]->m_rcBound.top != -1) &&
				(m_pSprite[index]->m_rcBound.top < msY) &&
				(m_pSprite[index]->m_rcBound.bottom > msY) &&
				(m_pSprite[index]->m_rcBound.left < msX) &&
				(m_pSprite[index]->m_rcBound.right > msX)) return TRUE;
		}

		return FALSE;
		break;
	}

	case DEF_OBJECTDAMAGEMOVE:
	{

		if (_tmp_sOwnerType == 67 || _tmp_sOwnerType == 68 || _tmp_sOwnerType == 69 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 120 || _tmp_sOwnerType == 128) return FALSE;
		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114) bInv = TRUE; //Energy-Ball,Wyvern

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iWeaponColor = 0;
			iShieldColor = 0;
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (iWeaponColor == 0) {
				iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (iWeaponColor != 0) iWeaponColor += 15;
			}

			iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (iShieldColor == 0) {
				iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (iShieldColor != 0) iShieldColor += 15;
			}

			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
			iShieldGlare = (_tmp_sAppr4 & 0x0003);

			// New Colors -> ZeroEoyPnk
			TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (TempWeaponColor == 0) {
				TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (TempWeaponColor != 0) TempWeaponColor += 15;
			}

			TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (TempShieldColor == 0) {
				TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (TempShieldColor != 0) TempShieldColor += 15;
			}

			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0)
		{
			//	DecriptString(m_cPlayerName);
			if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
			else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
			//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
			else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
			else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
			else {
				//		EncriptString(m_cPlayerName);
				return FALSE;
			}
			//	EncriptString(m_cPlayerName);
		}
		cDir = _tmp_cDir;
		switch (_tmp_cDir) {
		case 1: _tmp_cDir = 5; break;
		case 2: _tmp_cDir = 6; break;
		case 3: _tmp_cDir = 7; break;
		case 4: _tmp_cDir = 8; break;
		case 5: _tmp_cDir = 1; break;
		case 6: _tmp_cDir = 2; break;
		case 7: _tmp_cDir = 3; break;
		case 8: _tmp_cDir = 4; break;
		}

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (10 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 10;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 10;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 10;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 10;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 10;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 10;
			if ((_tmp_sAppr2 & 0x000F) == 0)
				iShieldIndex = -1;
			else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 5;
			if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
				iWeaponIndex = -1;
			else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 5 + (_tmp_cDir - 1);
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 10;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 10;
			break;
		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (10 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 10;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 10;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 10;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 10;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 10;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 10;
			if ((_tmp_sAppr2 & 0x000F) == 0)
				iShieldIndex = -1;
			else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 5;
			if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
				iWeaponIndex = -1;
			else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 5 + (_tmp_cDir - 1);
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 10;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 10;
			break;
		default:
			if (_tmp_sOwnerType == 66)      iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
			else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);// Ne devrait pas arriver!
			else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);// Ne devrait pas arriver!
			else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
		}
		dx = 0;
		dy = 0;

		//HB ARG OLD
		/*switch (_tmp_cDir) {
		case 1: dy = 28 - (_tmp_cFrame << 2); break;
		case 2: dy = 28 - (_tmp_cFrame << 2); dx = (_tmp_cFrame << 2) - 28; break;
		case 3: dx = (_tmp_cFrame << 2) - 28; break;
		case 4: dx = (_tmp_cFrame << 2) - 28; dy = (_tmp_cFrame << 2) - 28; break;
		case 5: dy = (_tmp_cFrame << 2) - 28; break;
		case 6: dy = (_tmp_cFrame << 2) - 28; dx = 28 - (_tmp_cFrame << 2); break;
		case 7: dx = 28 - (_tmp_cFrame << 2); break;
		case 8: dx = 28 - (_tmp_cFrame << 2); dy = 28 - (_tmp_cFrame << 2); break;
		}*/


		const bool value = frame_omision;

		switch (_tmp_cDir) {
		case 1: dy = 30 - (_tmp_cFrame << 2) - value; break;
		case 2: dy = 30 - (_tmp_cFrame << 2) - value; dx = (_tmp_cFrame << 2) + value - 30; break;
		case 3: dx = (_tmp_cFrame << 2) + value - 30; break;
		case 4: dx = (_tmp_cFrame << 2) + value - 30; dy = (_tmp_cFrame << 2) + value - 30; break;
		case 5: dy = (_tmp_cFrame << 2) + value - 30; break;
		case 6: dy = (_tmp_cFrame << 2) + value - 30; dx = 30 - (_tmp_cFrame << 2) - value; break;
		case 7: dx = 30 - (_tmp_cFrame << 2) - value; break;
		case 8: dx = 30 - (_tmp_cFrame << 2) - value; dy = 30 - (_tmp_cFrame << 2) - value; break;
		}

		int fix_x = 0;
		int fix_y = 0;

		switch (_tmp_cDir) {
		case 1: fix_x = sX + dx;		 fix_y = sY + dy - value; break;//listo
		case 2: fix_x = sX + dx + value; fix_y = sY + dy - value; break;//listo
		case 3: fix_x = sX + dx + value; fix_y = sY + dy;		  break;//listo
		case 4: fix_x = sX + dx + value; fix_y = sY + dy + value; break;//listo
		case 5: fix_x = sX + dx;		 fix_y = sY + dy + value; break;//listo
		case 6: fix_x = sX + dx - value; fix_y = sY + dy + value; break;//listo
		case 7: fix_x = sX + dx - value; fix_y = sY + dy;		  break;//listo
		case 8: fix_x = sX + dx - value; fix_y = sY + dy - value; break;//listo
		}


		cFrame = _tmp_cFrame;

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX + dx, sY + dy, cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		if (_tmp_iEffectType != 0)
		{
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX + dx, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX + dy, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX + dy, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (bTrans == FALSE)
		{
			CheckActiveAura(sX + dx, sY + dy, dwTime, _tmp_sOwnerType);
			if (_cDrawingOrder[_tmp_cDir] == 1)
			{
				if (iWeaponIndex != -1)
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyv
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, cFrame, dwTime);
					}
					break;
				}

				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, cFrame, dwTime);
				else {
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, cFrame, dwTime);
				}
				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1)
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1)
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}


				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1)
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1) {
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}


				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iShieldIndex != -1)
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;
						//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			else
			{
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128://BlackWyv
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, cFrame, dwTime);
					}
					break;
				}
				if (_tmp_sOwnerType == 35)
					m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, cFrame, dwTime);
				else {
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, cFrame, dwTime);
				}
				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1)
				{
					if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
				}

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1)
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1)
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1)
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1)
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iShieldIndex != -1)
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iWeaponIndex != -1)
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
				}
			}

			if ((_tmp_iStatus & 0x20) != 0) 	// Berserk
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(sX + dx, sY + dy, _tmp_AdminLevel);
			}

			DrawAngel(16 + (_tmp_cDir - 1), sX + dx + 20, sY + dy - 20, cFrame % 4, dwTime);
			CheckActiveAura2(sX + dx, sY + dy, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX + dx - 10, sY + dy - 70, dwTime);

		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(fix_x, fix_y, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(sX + dx, sY + dy, _tmp_sOwnerType, _tmp_iStatus);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					//	DecriptString(m_cPlayerName);
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX + dx, sY + dy, i, dwTime);
					//	EncriptString(m_cPlayerName);
				}
			}
		}

		//DecriptString(m_cPlayerName);
		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX + dx, sY + dy, dwTime);
		//EncriptString(m_cPlayerName);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
			{
				/*m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX + dx;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY + dy;*/
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = fix_x;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = fix_y;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}
		_tmp_dx = dx;
		_tmp_dy = dy;

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
		
		return FALSE;
		break;
	}
	case DEF_OBJECTATTACK:
	{

		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114 || _tmp_sOwnerType == 120) bInv = TRUE; //Energy-Ball,Wyvern

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors)) {
			iWeaponColor = 0;
			iShieldColor = 0;
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else {
			// New Colors -> ZeroEoyPnk
			iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (iWeaponColor == 0) {
				iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (iWeaponColor != 0) iWeaponColor += 15;
			}

			iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (iShieldColor == 0) {
				iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (iShieldColor != 0) iShieldColor += 15;
			}

			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares)) {
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
			iShieldGlare = (_tmp_sAppr4 & 0x0003);

			// New Colors -> ZeroEoyPnk
			TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (TempWeaponColor == 0) {
				TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (TempWeaponColor != 0) TempWeaponColor += 15;
			}

			TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (TempShieldColor == 0) {
				TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (TempShieldColor != 0) TempShieldColor += 15;
			}

			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0) {
			//	DecriptString(m_cPlayerName);
			if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
			else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
			//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
			else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
			else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
			else {
				//		EncriptString(m_cPlayerName);
				return FALSE;
			}
			//EncriptString(m_cPlayerName);
		}
		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if ((_tmp_sAppr2 & 0xF000) != 0) {
				iWeapon = ((_tmp_sAppr2 & 0x0FF0) >> 4);
				if (iWeapon == 0) iAdd = 6;
				if ((iWeapon >= 1) && (iWeapon <= 39)) iAdd = 6;
				if ((iWeapon >= 40) && (iWeapon <= 59)) iAdd = 7;

				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;

				if ((_tmp_sAppr4 & 0x80) == 0) {
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}

				if ((_tmp_sAppr3 & 0x000F) == 0) iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;

				if ((_tmp_sAppr3 & 0x0F00) == 0) iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0) iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;

				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0) iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 4 + (_tmp_cDir - 1);

				if ((_tmp_sAppr2 & 0x000F) == 0) iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 4;

				if ((_tmp_sAppr4 & 0x0F00) == 0) iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;

				if ((_tmp_sAppr3 & 0x00F0) == 0) iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else {
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (5 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 5;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 5;

				if ((_tmp_sAppr4 & 0x80) == 0) {
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0) iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 5;
				}

				if ((_tmp_sAppr3 & 0x000F) == 0) iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 5;

				if ((_tmp_sAppr3 & 0x0F00) == 0) iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 5;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0) iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 5;

				if ((_tmp_sAppr4 & 0x0F00) == 0) iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 5;

				if ((_tmp_sAppr3 & 0x00F0) == 0) iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 5;

				iWeaponIndex = -1;
				iShieldIndex = -1;
			}
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0) {
				iWeapon = ((_tmp_sAppr2 & 0x0FF0) >> 4);
				if (iWeapon == 0) iAdd = 6;
				if ((iWeapon >= 1) && (iWeapon <= 39)) iAdd = 6;
				if ((iWeapon >= 40) && (iWeapon <= 59)) iAdd = 7;

				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;

				if ((_tmp_sAppr4 & 0x80) == 0) {
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0) iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}

				if ((_tmp_sAppr3 & 0x000F) == 0) iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;

				if ((_tmp_sAppr3 & 0x0F00) == 0) iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0) iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;

				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0) iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 4 + (_tmp_cDir - 1);

				if ((_tmp_sAppr2 & 0x000F) == 0) iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 4;

				if ((_tmp_sAppr4 & 0x0F00) == 0) iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;

				if ((_tmp_sAppr3 & 0x00F0) == 0) iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else {
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (5 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 5;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 5;

				if ((_tmp_sAppr4 & 0x80) == 0) {
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0) iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 5;
				}

				if ((_tmp_sAppr3 & 0x000F) == 0) iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 5;

				if ((_tmp_sAppr3 & 0x0F00) == 0) iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 5;

				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0) iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 5;

				if ((_tmp_sAppr4 & 0x0F00) == 0) iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 5;

				if ((_tmp_sAppr3 & 0x00F0) == 0) iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 5;

				iWeaponIndex = -1;
				iShieldIndex = -1;
			}
			break;

		default:
			if (_tmp_sAppr2 != 0) {
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				_tmp_cFrame = _tmp_sAppr2 - 1;
			}
			else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
			else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
		}

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, _tmp_cFrame, _tmp_sOwnerType);
		if (_tmp_iEffectType != 0) {
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}
		EncriptString(m_cCurLocation);

		if (bTrans == FALSE) {
			CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
			if (_cDrawingOrder[_tmp_cDir] == 1) {
				if (iWeaponIndex != -1) {

					if (iWeaponColor == 0) m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);

					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
					if (_tmp_cFrame == 3) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame - 1, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
				}
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // FireWyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows)) {
						if (sX < 50) m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
					}
					break;
				}

				if (_tmp_sOwnerType == 35) m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) { // Abaddon
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				else if (bInv == TRUE) {
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				else {
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
				}

				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);

					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1)) {
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1) {
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1) {
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1) {
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1) {
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (((_tmp_sAppr2 & 0x000F) == 8) && (iShieldGlare == 1)) {
					m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
				}
				else {
					if (iShieldIndex != -1) {
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
						ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
						switch (iShieldGlare) {
						case 0: break;//Logo GM						
							//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);		
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						}
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			else {
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows)) {
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
					}
					break;
				}

				if (_tmp_sOwnerType == 35) m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

				if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) { // Abaddon
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				else if (bInv == TRUE) {
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				else {
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
				}

				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1)) {
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1) {
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1) {
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1) {
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1) {
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iShieldIndex != -1) {
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {
					case 0: break;
						//Logo GM
						//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
					case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iWeaponIndex != -1) {
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
					if (_tmp_cFrame == 3) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame - 1, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
				}
			}

			if ((_tmp_iStatus & 0x20) != 0) // Berserk
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) {
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(sX, sY, _tmp_AdminLevel);
			}

			DrawAngel((_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame % 8, dwTime);
			CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);
			DrawFlag(sX - 10, sY - 70, dwTime);

		}
		else if (strlen(_tmp_cName) > 0) {
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX, sY, i, dwTime);
				}
			}
		}

		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);

		if (_tmp_iChatIndex != NULL) {
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID)) {
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
			}
			else m_pMapData->ClearChatMsg(indexX, indexY);
		}

		// Snoopy: Abaddon effects
		if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) {
			int randFrame = _tmp_cFrame % 12;
			m_pEffectSpr[154]->PutTransSprite70(sX - 50, sY - 50, randFrame, dwTime);
			m_pEffectSpr[155]->PutTransSprite70(sX - 20, sY - 80, randFrame, dwTime);
			m_pEffectSpr[156]->PutTransSprite70(sX + 70, sY - 50, randFrame, dwTime);
			m_pEffectSpr[157]->PutTransSprite70(sX - 30, sY, randFrame, dwTime);
			m_pEffectSpr[158]->PutTransSprite70(sX - 60, sY + 90, randFrame, dwTime);
			m_pEffectSpr[159]->PutTransSprite70(sX + 65, sY + 85, randFrame, dwTime);
			switch (_tmp_cDir) {
			case 1:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 108, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 50, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 2:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 70, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 3:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 105, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 90, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 4:
				m_pEffectSpr[153]->PutTransSprite70(sX - 35, sY + 100, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 80, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 5:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 65, sY - 5, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 6:
				m_pEffectSpr[153]->PutTransSprite70(sX + 45, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 31, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 7:
				m_pEffectSpr[153]->PutTransSprite70(sX + 40, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 30, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 8:
				m_pEffectSpr[153]->PutTransSprite70(sX + 20, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 20, sY + 16, _tmp_iEffectFrame % 15, dwTime);
				break;
			}
		}

		// New Effect Mobs
		switch (_tmp_sOwnerType) {
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;

		return FALSE;
		break;
	}
	case DEF_OBJECTATTACKMOVE:
	{

		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114 || _tmp_sOwnerType == 120) bInv = TRUE; //Energy-Ball,Wyvern

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iWeaponColor = 0;
			iShieldColor = 0;
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (iWeaponColor == 0) {
				iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (iWeaponColor != 0) iWeaponColor += 15;
			}

			iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (iShieldColor == 0) {
				iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (iShieldColor != 0) iShieldColor += 15;
			}

			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
			iShieldGlare = (_tmp_sAppr4 & 0x0003);

			// New Colors -> ZeroEoyPnk
			TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (TempWeaponColor == 0) {
				TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (TempWeaponColor != 0) TempWeaponColor += 15;
			}

			TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (TempShieldColor == 0) {
				TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (TempShieldColor != 0) TempShieldColor += 15;
			}

			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0)
		{
			//	DecriptString(m_cPlayerName);
			if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
			else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
			//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck lalo
			else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
			else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
			else {
				//	EncriptString(m_cPlayerName);
				return FALSE;
			}
			//	EncriptString(m_cPlayerName);
		}

		switch (_tmp_cFrame) {
		case 4:  _tmp_cFrame = 4; break;
		case 5:  _tmp_cFrame = 4; break;
		case 6:  _tmp_cFrame = 4; break;
		case 7:  _tmp_cFrame = 4; break;
		case 8:  _tmp_cFrame = 4; break;
		case 9:  _tmp_cFrame = 4; break;
		case 10: _tmp_cFrame = 5; break;
		case 11: _tmp_cFrame = 6; break;
		case 12: _tmp_cFrame = 7; break;
		}

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if ((_tmp_sAppr2 & 0xF000) != 0) {
				iWeapon = ((_tmp_sAppr2 & 0x0FF0) >> 4);
				if (iWeapon == 0) iAdd = 6;
				if ((iWeapon >= 1) && (iWeapon <= 39)) iAdd = 6;
				if ((iWeapon >= 40) && (iWeapon <= 59)) iAdd = 7;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 4 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 4;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (5 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 5;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 5;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 5;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 5;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 5;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 5;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 5;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 5;
				iWeaponIndex = -1;
				iShieldIndex = -1;
			}
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if ((_tmp_sAppr2 & 0xF000) != 0) {
				iWeapon = ((_tmp_sAppr2 & 0x0FF0) >> 4);
				if (iWeapon == 0) iAdd = 6;
				if ((iWeapon >= 1) && (iWeapon <= 39)) iAdd = 6;
				if ((iWeapon >= 40) && (iWeapon <= 59)) iAdd = 7;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 4 + (_tmp_cDir - 1);
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 4;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
			}
			else
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (5 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 5;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 5;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 5;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 5;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 5;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 5;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 5;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 5;
				iWeaponIndex = -1;
				iShieldIndex = -1;
			}
			break;
		default:
			iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
			iUndiesIndex = -1;
			iHairIndex = -1;
			iBodyArmorIndex = -1;
			iArmArmorIndex = -1;
			iBootsIndex = -1;
			iPantsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
		}
		dx = 0;
		dy = 0;
		if ((_tmp_cFrame >= 1) && (_tmp_cFrame <= 3))
		{
			switch (_tmp_cFrame) {
			case 1: cFrameMoveDots = 26; break;
			case 2: cFrameMoveDots = 16; break;
			case 3: cFrameMoveDots = 0;  break;
			}
			switch (_tmp_cDir) {
			case 1: dy = cFrameMoveDots; break;
			case 2: dy = cFrameMoveDots; dx = -cFrameMoveDots; break;
			case 3: dx = -cFrameMoveDots; break;
			case 4: dx = -cFrameMoveDots; dy = -cFrameMoveDots; break;
			case 5: dy = -cFrameMoveDots; break;
			case 6: dy = -cFrameMoveDots; dx = cFrameMoveDots; break;
			case 7: dx = cFrameMoveDots; break;
			case 8: dx = cFrameMoveDots; dy = cFrameMoveDots; break;
			}
			switch (_tmp_cFrame) {
			case 1: dy++;    break;
			case 2: dy += 2; break;
			case 3: dy++;    break;
			}
			switch (_tmp_cFrame) {
			case 2: bDashDraw = TRUE; cFrameMoveDots = 26; break;
			case 3: bDashDraw = TRUE; cFrameMoveDots = 16; break;
			}
			dsx = 0;
			dsy = 0;
			switch (_tmp_cDir) {
			case 1: dsy = cFrameMoveDots; break;
			case 2: dsy = cFrameMoveDots; dsx = -cFrameMoveDots; break;
			case 3: dsx = -cFrameMoveDots; break;
			case 4: dsx = -cFrameMoveDots; dsy = -cFrameMoveDots; break;
			case 5: dsy = -cFrameMoveDots; break;
			case 6: dsy = -cFrameMoveDots; dsx = cFrameMoveDots; break;
			case 7: dsx = cFrameMoveDots; break;
			case 8: dsx = cFrameMoveDots; dsy = cFrameMoveDots; break;
			}
		}
		else if (_tmp_cFrame > 3)
		{
			dx = 0;
			dy = 0;
		}
		else
		{
			switch (_tmp_cDir) {
			case 1: dy = 32; break;
			case 2: dy = 32; dx = -32; break;
			case 3: dx = -32; break;
			case 4: dx = -32; dy = -32; break;
			case 5: dy = -32; break;
			case 6: dy = -32; dx = 32; break;
			case 7: dx = 32; break;
			case 8: dx = 32; dy = 32; break;
			}
		}

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX + dx, sY + dy, _tmp_cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		if (_tmp_iEffectType != 0) {
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX + dx, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX + dx, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX + dx, sY + dy, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (bTrans == FALSE)
		{
			CheckActiveAura(sX + dx, sY + dy, dwTime, _tmp_sOwnerType);
			if (_cDrawingOrder[_tmp_cDir] == 1)
			{
				if (iWeaponIndex != -1)
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
					if (_tmp_cFrame == 3) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame - 1, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
				}
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;
				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
					}
					break;
				}

				if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
				else {
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
				}
				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);


				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1)) {
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1) {
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1) {
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1) {
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1) {
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iShieldIndex != -1)
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;//lalo glare
						//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			else
			{
				switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
				case 10: // Slime
				case 35: // Energy Sphere
				case 50: // TW
				case 51: // CP
				case 60: // Plant
				case 65: // IceGolem
				case 66: // Wyvern
				case 73: // Fire Wyvern
				case 81: // Abaddon
				case 91: // Gate
				case 92:
				case 120:
				case 128: //BlackWyvern
					break;

				default:
					if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
					{
						if (sX < 50)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX + dx, sY + dy, _tmp_cFrame, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
					}
					break;
				}

				if (bInv == TRUE)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX + dx, sY + dy, _tmp_cFrame, dwTime);
				else {
					if ((_tmp_iStatus & 0x40) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
				}
				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1)) {
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iPantsIndex != -1) {
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iArmArmorIndex != -1) {
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare

					}
				}
				if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iBodyArmorIndex != -1) {
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iHelmIndex != -1)
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}


				if (iShieldIndex != -1)
				{
					if (iShieldColor == 0)
						m_pSprite[iShieldIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iShieldIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
					// ZeroEoyPnk - Fix del glare con armor merien
					ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
					switch (iShieldGlare) {//lalo glare
					case 0: break;		//Logo GM
					case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13 + dx, sY - 34 + dy, 0, dwTime);
						//case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					}
				}

				if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1)) {
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX + dx, sY + dy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}

				if (iWeaponIndex != -1)
				{
					if (iWeaponColor == 0)
						m_pSprite[iWeaponIndex]->PutSpriteFast(sX + dx, sY + dy, _tmp_cFrame, dwTime);
					else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
					DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
					switch (iWeaponGlare) {
					case 0: break;
					case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
					case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
					case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
					case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
					}
					if (_tmp_cFrame == 3) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame - 1, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
				}
			}

			// Berserk
			if ((_tmp_iStatus & 0x20) != 0)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(sX + dx, sY + dy, _tmp_AdminLevel);
			}

			DrawAngel(8 + (_tmp_cDir - 1), sX + dx + 20, sY + dy - 20, _tmp_cFrame % 8, dwTime);

			CheckActiveAura2(sX + dx, sY + dy, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX + dx - 10, sY + dy - 70, dwTime);

			if (bDashDraw == TRUE) {
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dsx, sY + dsy, _tmp_cFrame, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
				if (iWeaponIndex != -1) m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX + dsx, sY + dsy, _tmp_cFrame, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
				if (iShieldIndex != -1) m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX + dsx, sY + dsy, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[10] - (m_wR[0] / 3), m_wG[10] - (m_wG[0] / 3), m_wB[10] - (m_wB[0] / 3), dwTime);
			}
		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX + dx, sY + dy, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(sX + dx, sY + dy, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (m_iPartyStatus != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX + dx, sY + dy, i, dwTime);
				}
			}
		}

		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX + dx, sY + dy, dwTime);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID)) {
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX + dx;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY + dy;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}
		_tmp_dx = dx;
		_tmp_dy = dy;

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX + dx, sY + dy, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;

		return FALSE;
		break;
	}
	case DEF_OBJECTMAGIC:
	{
		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114) bInv = TRUE; //Energy-Ball,Wyvern

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			// New Colors -> ZeroEoyPnk
			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0)
		{
			//DecriptString(m_cPlayerName);
			if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0)
				bInv = TRUE;
			else
			{
				if (_tmp_iChatIndex != NULL)
				{
					if (m_pChatMsgList[_tmp_iChatIndex] != NULL)
					{
						m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
						m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
					}
					else
					{
						m_pMapData->ClearChatMsg(indexX, indexY);
					}
				}
				return FALSE;
			}
			//	EncriptString(m_cPlayerName);
		}

		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (8 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 8;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 8;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 8;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 8;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 8;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 8;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 8;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 8;
			break;
		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;

			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (8 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 8;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 8;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 8;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 8;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 8;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 8;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 8;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 8;
			break;
		}

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, _tmp_cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		if (_tmp_iEffectType != 0)
		{
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (bTrans == FALSE)
		{
			CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
			case 10: // Slime
			case 35: // Energy Sphere
			case 50: // TW
			case 51: // CP
			case 60: // Plant
			case 65: // IceGolem
			case 66: // Wyvern
			case 73: // Fire Wyvern
			case 81: // Abaddon
			case 91: // Gate
			case 92:
			case 120:
			case 128: //BlackWyvern
				break;
			default:
				if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
				{
					if (sX < 50)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				break;
			}

			if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, _tmp_cFrame, dwTime);
			else {
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
			}
			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iPantsIndex != -1) {//PANTS ONMAGIC 1
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
				case 0: break;
				case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iArmArmorIndex != -1)//HAUBERK ONMAGIC 1
			{
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
				case 0: break;
				case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}


			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONMAGIC 1
			{
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
				case 0: break;
				case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}
			if (iHelmIndex != -1)//HELM ONMAGIC 1
			{
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
				case 0: break;
				case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
				case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iMantleIndex != -1)
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 16 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((_tmp_iStatus & 0x20) != 0) 	// Berserk
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(sX, sY, _tmp_AdminLevel);
			}

			DrawAngel(32 + (_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame % 16, dwTime);
			CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX - 10, sY - 70, dwTime);

		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX, sY, i, dwTime);
				}
			}
		}

		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
			{
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
		return FALSE;
		break;
	}
	case DEF_OBJECTDAMAGE:
	{

		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 81 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114 || _tmp_sOwnerType == 120) bInv = TRUE; //Energy-Ball,Wyvern

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iWeaponColor = 0;
			iShieldColor = 0;
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (iWeaponColor == 0) {
				iWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (iWeaponColor != 0) iWeaponColor += 15;
			}

			iShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (iShieldColor == 0) {
				iShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (iShieldColor != 0) iShieldColor += 15;
			}

			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			iWeaponGlare = (_tmp_sAppr4 & 0x000C) >> 2;
			iShieldGlare = (_tmp_sAppr4 & 0x0003);

			// New Colors -> ZeroEoyPnk
			TempWeaponColor = (_tmp_iApprColor & 0xF0000000) >> 28;
			if (TempWeaponColor == 0) {
				TempWeaponColor = (_tmp_iApprColor2 & 0xF0000000) >> 28;
				if (TempWeaponColor != 0) TempWeaponColor += 15;
			}

			TempShieldColor = (_tmp_iApprColor & 0x0F000000) >> 24;
			if (TempShieldColor == 0) {
				TempShieldColor = (_tmp_iApprColor2 & 0x0F000000) >> 24;
				if (TempShieldColor != 0) TempShieldColor += 15;
			}

			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0)
		{
			//	DecriptString(m_cPlayerName);
			if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
			else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
			//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
			else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
			else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
			else {
				//		EncriptString(m_cPlayerName);
				return FALSE;
			}
			//	EncriptString(m_cPlayerName);
		}
		switch (_tmp_sOwnerType) {
		case 91:
			_tmp_cDir = 3;
			break;
		case 92:
			_tmp_cFrame = 0;
			_tmp_cDir = 1;
			break;
		}

		cFrame = _tmp_cFrame;
		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if (cFrame < 4)
			{
				if ((_tmp_sAppr2 & 0xF000) != 0) iAdd = 1;
				else iAdd = 0;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * iAdd + (_tmp_cDir - 1);
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
				iDrawMode = 0;
			}
			else
			{
				cFrame -= 4;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (10 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 10;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 10;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 10;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 10;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 10;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 10;
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_M + (_tmp_sAppr2 & 0x000F) * 8 + 5;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_M + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 5 + (_tmp_cDir - 1);
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 10;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 10;
				iDrawMode = 1;
			}
			break;
		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if (cFrame < 4)
			{
				if ((_tmp_sAppr2 & 0xF000) != 0) iAdd = 1;
				else iAdd = 0;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (iAdd * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + iAdd;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + iAdd;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + iAdd;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + iAdd;
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + iAdd;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * iAdd + (_tmp_cDir - 1);
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + iAdd;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + iAdd;
				iDrawMode = 0;
			}
			else
			{
				cFrame -= 4;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (10 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 10;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 10;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 10;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 10;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 10;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 10;
				if ((_tmp_sAppr2 & 0x000F) == 0)
					iShieldIndex = -1;
				else iShieldIndex = DEF_SPRID_SHIELD_W + (_tmp_sAppr2 & 0x000F) * 8 + 5;
				if (((_tmp_sAppr2 & 0x0FF0) >> 4) == 0)
					iWeaponIndex = -1;
				else iWeaponIndex = DEF_SPRID_WEAPON_W + ((_tmp_sAppr2 & 0x0FF0) >> 4) * 64 + 8 * 5 + (_tmp_cDir - 1);
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 10;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 10;
				iDrawMode = 1;
			}
			break;

		default:
			if (cFrame < 4)
			{
				if (_tmp_sAppr2 != 0)
				{
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					cFrame = _tmp_sAppr2 - 1;
				}
				else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 67) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 68) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 69) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 81) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 91) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 120) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
			}
			else
			{
				cFrame -= 4;
				if (_tmp_sAppr2 != 0)
				{
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					cFrame = _tmp_sAppr2 - 1;
				}
				else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 67) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 68) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 69) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 81) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 91) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (1 * 8);
				else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else if (_tmp_sOwnerType == 120) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);
				else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
			}
			if (_tmp_sOwnerType == 92) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7;

			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iWeaponIndex = -1;
			iShieldIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			iDrawMode = 0;
			break;
		}

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		if (_tmp_iEffectType != 0)
		{
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (bTrans == FALSE)
		{
			CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
			if (iDrawMode == 1) // Etrange, 1 semble impossible avec des mobs !
			{
				if (_cDrawingOrder[_tmp_cDir] == 1)
				{
					if (iWeaponIndex != -1)
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
						DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
						switch (iWeaponGlare) {
						case 0: break;
						case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
						}
					}
					switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
					case 10: // Slime
					case 35: // Energy Sphere
					case 50: // TW
					case 51: // CP
					case 60: // Plant
					case 65: // IceGolem
					case 66: // Wyvern
					case 73: // Fire Wyvern
					case 81: // Abaddon
					case 91: // Gate
					case 92:
					case 120:
					case 128: //BlackWyvern
						break;
					default:
						if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
						{
							if (sX < 50)
								m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, cFrame, dwTime);
							else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, cFrame, dwTime);
						}
						break;
					}
					if (_tmp_sOwnerType == 35)
						m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

					if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
					{
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
					}
					else if (bInv == TRUE)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
					else
					{
						if ((_tmp_iStatus & 0x40) != 0)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
					}
					SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);

					if ((iHairIndex != -1) && (iHelmIndex == -1))
					{
						_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
						m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, iR, iG, iB, dwTime);
					}

					if ((iBootsIndex != -1) && (iSkirtDraw == 1))
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iPantsIndex != -1)
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iArmArmorIndex != -1)
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if ((iBootsIndex != -1) && (iSkirtDraw == 0))
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iBodyArmorIndex != -1)
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iHelmIndex != -1)
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iShieldIndex != -1)
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
						// ZeroEoyPnk - Fix del glare con armor merien
						ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
						switch (iShieldGlare) {//lalo glare
						case 0: break;		//Logo GM
							//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						}
					}

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				else
				{
					switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
					case 10: // Slime
					case 35: // Energy Sphere
					case 50: // TW
					case 51: // CP
					case 60: // Plant
					case 65: // IceGolem
					case 66: // Wyvern
					case 73: // Fire Wyvern
					case 81: // Abaddon
					case 91: // Gate
					case 92:
					case 120:
					case 128: //BlackWyvern
						break;
					default:
						if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
						{
							if (sX < 50)
								m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, cFrame, dwTime);
							else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, cFrame, dwTime);
						}
						break;
					}
					if (_tmp_sOwnerType == 35)
						m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

					if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
					{
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
					}
					else if (bInv == TRUE)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
					else
					{
						if ((_tmp_iStatus & 0x40) != 0)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
					}
					SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);

					if ((iHairIndex != -1) && (iHelmIndex == -1))
					{
						_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
						m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, iR, iG, iB, dwTime);
					}

					if ((iBootsIndex != -1) && (iSkirtDraw == 1))
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
					if (iPantsIndex != -1)
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iArmArmorIndex != -1)
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if ((iBootsIndex != -1) && (iSkirtDraw == 0))
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iBodyArmorIndex != -1)
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iHelmIndex != -1)
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iShieldIndex != -1)
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
						// ZeroEoyPnk - Fix del glare con armor merien
						ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
						switch (iShieldGlare) {//lalo glare
						case 0: break;
							//Logo GM
							//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						}
					}

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iWeaponIndex != -1)
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
						DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
						switch (iWeaponGlare) {
						case 0: break;
						case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
						}
					}
				}

				if ((_tmp_iStatus & 0x20) != 0) 	// Berserk
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -5, -5, dwTime);

				if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
				{
					if ((_tmp_iStatus & 0x00100000) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -50, -50, dwTime);
					if (_tmp_AdminLevel > 0)
						ShowAdmin(sX, sY, _tmp_AdminLevel);
				}

				DrawAngel(16 + (_tmp_cDir - 1), sX + 20, sY - 20, cFrame % 4, dwTime);

				CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

				// Capture The Flag - Angel position Based
				DrawFlag(sX - 10, sY - 70, dwTime);

			}
			else // DrawMode != 1
			{
				if (_cDrawingOrder[_tmp_cDir] == 1)
				{
					if (iWeaponIndex != -1)
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
						DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
						switch (iWeaponGlare) {
						case 0: break;
						case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
						}
					}
					switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
					case 10: // Slime
					case 35: // Energy Sphere
					case 50: // TW
					case 51: // CP
					case 60: // Plant
					case 65: // IceGolem
					case 66: // Wyvern
					case 73: // Fire Wyvern
					case 81: // Abaddon
					case 91: // Gate
					case 92:
					case 120:
					case 128: //BlackWyvern
						break;
					default:
						if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
						{
							if (sX < 50)
								m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
							else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
						}
						break;
					}
					if (_tmp_sOwnerType == 35)
						m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

					if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
					{
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
					}
					else if (bInv == TRUE)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
					else {
						if ((_tmp_iStatus & 0x40) != 0)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
					}
					SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);

					if ((iHairIndex != -1) && (iHelmIndex == -1))
					{
						_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
						m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, iR, iG, iB, dwTime);
					}

					if ((iBootsIndex != -1) && (iSkirtDraw == 1)) {
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iPantsIndex != -1)
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iArmArmorIndex != -1)
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if ((iBootsIndex != -1) && (iSkirtDraw == 0)) {
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iBodyArmorIndex != -1)
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iHelmIndex != -1)
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iShieldIndex != -1)
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
						// ZeroEoyPnk - Fix del glare con armor merien
						ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
						switch (iShieldGlare) {//lalo glare
						case 0: break;
							//Logo GM
							//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						}
					}

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}
				}
				else
				{
					switch (_tmp_sOwnerType) {
					case 10: // Slime
					case 35: // Energy Sphere
					case 50: // TW
					case 51: // CP
					case 60: // Plant
					case 65: // IceGolem
					case 66: // Wyvern
					case 73: // Fire Wyvern
					case 81: // Abaddon
					case 91: // Gate
					case 92:
					case 120:
					case 128: //BlackWyvern
						break;
					default:
						if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
						{
							if (sX < 50)
								m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, cFrame, dwTime);
							else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, cFrame, dwTime);
						}
						break;
					}
					if (_tmp_sOwnerType == 35)
						m_pEffectSpr[0]->PutTransSprite(sX, sY, 1, dwTime);

					if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120) // Abaddon
					{
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
					}
					else if (bInv == TRUE)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
					else {
						if ((_tmp_iStatus & 0x40) != 0)
							m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
						else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
					}

					SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 0))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);

					if ((iHairIndex != -1) && (iHelmIndex == -1))
					{
						_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
						m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, iR, iG, iB, dwTime);
					}

					if ((iBootsIndex != -1) && (iSkirtDraw == 1))
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iPantsIndex != -1)
					{
						if (iPantsColor == 0)
							m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
						LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
						switch (iPantsGlare) {
						case 0: break;
						case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}


					if (iArmArmorIndex != -1)
					{
						if (iArmColor == 0)
							m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
						HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
						switch (iArmGlare) {
						case 0: break;
						case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if ((iBootsIndex != -1) && (iSkirtDraw == 0))
					{
						if (iBootsColor == 0)
							m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
						BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
						switch (iBootsGlare) {
						case 0: break;
						case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iBodyArmorIndex != -1)
					{
						if (iArmorColor == 0)
							m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
						ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
						switch (iArmorGlare) {
						case 0: break;
						case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iHelmIndex != -1)
					{
						if (iHelmColor == 0)
							m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
						HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
						switch (iHelmGlare) {
						case 0: break;
						case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
						case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 2))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iShieldIndex != -1)
					{
						if (iShieldColor == 0)
							m_pSprite[iShieldIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iShieldIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iShieldColor] - m_wR[0], m_wG[iShieldColor] - m_wG[0], m_wB[iShieldColor] - m_wB[0], dwTime);
						// ZeroEoyPnk - Fix del glare con armor merien
						ShieldGlare(TempShieldColor, iShieldIndex, &iShieldGlare);
						switch (iShieldGlare) {//lalo glare
						case 0: break;
							//Logo GM
							//case 1: m_pEffectSpr[45]->PutTransSprite(sX - 13, sY - 34, 0, dwTime);
						case 1: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iShieldIndex]->PutTransSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						}
					}

					if ((iMantleIndex != -1) && (_cMantleDrawingOrder[_tmp_cDir] == 1))
					{
						if (iMantleColor == 0)
							m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
						else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
						MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
						switch (iMantleGlare) {
						case 0: break;
						case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
						case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
						case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
						}
					}

					if (iWeaponIndex != -1)
					{
						if (iWeaponColor == 0)
							m_pSprite[iWeaponIndex]->PutSpriteFast(sX, sY, cFrame, dwTime);
						else m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, cFrame, m_wWR[iWeaponColor] - m_wR[0], m_wWG[iWeaponColor] - m_wG[0], m_wWB[iWeaponColor] - m_wB[0], dwTime);
						DKGlare(TempWeaponColor, iWeaponIndex, &iWeaponGlare);
						switch (iWeaponGlare) {
						case 0: break;
						case 1: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, m_iDrawFlag, 0, 0, dwTime); break; // Red Glare
						case 2: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, 0, m_iDrawFlag, 0, dwTime); break; // Green Glare
						case 3: m_pSprite[iWeaponIndex]->PutTransSpriteRGB(sX, sY, cFrame, 0, 0, m_iDrawFlag, dwTime); break; // Blue Glare
						case 4: m_pSprite[iWeaponIndex]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_sDrawFlag3, m_sDrawFlag3, m_sDrawFlag3, dwTime); break; // Blue Glare
						}
					}
				}

				if ((_tmp_iStatus & 0x20) != 0)	// Berserk
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -5, -5, dwTime);

				if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
				{
					if ((_tmp_iStatus & 0x00100000) != 0)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -50, -50, dwTime);
					if (_tmp_AdminLevel > 0)
						ShowAdmin(sX, sY, _tmp_AdminLevel);
				}

				DrawAngel(16 + (_tmp_cDir - 1), sX + 20, sY - 20, cFrame % 4, dwTime);
				CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

				// Capture The Flag - Angel position Based
				DrawFlag(sX - 10, sY - 70, dwTime);
			}
		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					//	DecriptString(m_cPlayerName);
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX, sY, i, dwTime);
					//	EncriptString(m_cPlayerName);
				}
			}
		}

		//DecriptString(m_cPlayerName);
		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);
		//EncriptString(m_cPlayerName);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
			{
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}
		// Snoopy: Abaddon effects
		if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
		{
			int randFrame = _tmp_cFrame % 12;
			m_pEffectSpr[154]->PutTransSprite70(sX - 50, sY - 50, randFrame, dwTime);
			m_pEffectSpr[155]->PutTransSprite70(sX - 20, sY - 80, randFrame, dwTime);
			m_pEffectSpr[156]->PutTransSprite70(sX + 70, sY - 50, randFrame, dwTime);
			m_pEffectSpr[157]->PutTransSprite70(sX - 30, sY, randFrame, dwTime);
			m_pEffectSpr[158]->PutTransSprite70(sX - 60, sY + 90, randFrame, dwTime);
			m_pEffectSpr[159]->PutTransSprite70(sX + 65, sY + 85, randFrame, dwTime);
			switch (_tmp_cDir) {
			case 1:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 108, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 50, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 2:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 70, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 3:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 105, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 90, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 4:
				m_pEffectSpr[153]->PutTransSprite70(sX - 35, sY + 100, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 80, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 5:
				m_pEffectSpr[153]->PutTransSprite70(sX, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 65, sY - 5, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 6:
				m_pEffectSpr[153]->PutTransSprite70(sX + 45, sY + 95, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 31, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 7:
				m_pEffectSpr[153]->PutTransSprite70(sX + 40, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 30, sY + 10, _tmp_iEffectFrame % 15, dwTime);
				break;
			case 8:
				m_pEffectSpr[153]->PutTransSprite70(sX + 20, sY + 110, _tmp_iEffectFrame % 28, dwTime);
				m_pEffectSpr[164]->PutTransSprite70(sX - 20, sY + 16, _tmp_iEffectFrame % 15, dwTime);
				break;
			}
		}

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;

		return FALSE;
	}
	case DEF_OBJECTGETITEM:
	{

		if (_tmp_sOwnerType == 35 || _tmp_sOwnerType == 73 || _tmp_sOwnerType == 66 || _tmp_sOwnerType == 114) bInv = TRUE; //Energy-Ball,Wyvern

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			// New Colors -> ZeroEoyPnk
			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		if ((_tmp_iStatus & 0x10) != 0)
		{
			//	DecriptString(m_cPlayerName);
			if (_tmp_AdminLevel != 0 && MyAdminLevel == 0) return FALSE;
			else if (memcmp(m_cPlayerName, _tmp_cName, 10) == 0) bInv = TRUE;
			//else if (bCheckItemEquiped("NecklaceOfBeholder") == true) bInv = TRUE; //beholder neck
			else if (_iGetFOE(_tmp_iStatus, _tmp_sOwnerType) == 1) bInv = TRUE;
			else if ((MyAdminLevel >= 2) == true) bInv = TRUE; //AdminVerInvis!
			else {
				//		EncriptString(m_cPlayerName);
				return FALSE;
			}
			//	EncriptString(m_cPlayerName);
		}

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (9 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 9;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 9;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 9;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 9;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 9;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 9;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 9;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 9; 		break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (9 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 9;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 9;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 9;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 9;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 9;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 9;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 9;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 9;
			break;
		default:
			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
		}

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, _tmp_cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		if (_tmp_iEffectType != 0)
		{
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (bTrans == FALSE)
		{
			CheckActiveAura(sX, sY, dwTime, _tmp_sOwnerType);
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
			case 10: // Slime
			case 35: // Energy Sphere
			case 50: // TW
			case 51: // CP
			case 60: // Plant
			case 65: // IceGolem
			case 66: // Wyvern
			case 73: // Fire Wyvern
			case 81: // Abaddon
			case 91: // Gate
			case 92:
			case 120:
			case 128: //BlackWyvern
				break;
			default:
				if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
				{
					if (sX < 50)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, _tmp_cFrame, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, _tmp_cFrame, dwTime);
				}
				break;
			}

			if (bInv == TRUE)
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite2(sX, sY, _tmp_cFrame, dwTime);
			else {
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, _tmp_cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, _tmp_cFrame, dwTime);
			}
			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if (iUndiesIndex != -1)
			{
				if (bInv) m_pSprite[iUndiesIndex]->PutTransSprite2(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
			}

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iPantsIndex != -1)//PANTS ONGETITEM 1
			{
				if (bInv) m_pSprite[iPantsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if (iArmArmorIndex != -1)//HAUBERK ONGETITEM 1
			{
				if (bInv) m_pSprite[iArmArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}


			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (bInv) m_pSprite[iBootsIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONGETITEM 1
			{
				if (bInv) m_pSprite[iBodyArmorIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}
			if (iHelmIndex != -1)//HELM ONGETITEM 1
			{
				if (bInv) m_pSprite[iHelmIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if (iMantleIndex != -1)
			{
				if (bInv) m_pSprite[iMantleIndex]->PutTransSprite25(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
				else
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 4 + _tmp_cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
					}
				}
			}

			if ((_tmp_iStatus & 0x20) != 0) // Berserk
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0 && _tmp_AdminLevel < 90)
					ShowAdmin(sX, sY, _tmp_AdminLevel);
			}

			DrawAngel(40 + (_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame % 4, dwTime);
			CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX - 10, sY - 70, dwTime);

		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX, sY, i, dwTime);
				}
			}
		}

		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
			{
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}
		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
		return FALSE;

		break;
	}
	case DEF_OBJECTDYING:
	{

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
			iHelmGlare = (_tmp_sAppr4 & 0x00EF);
			iArmorGlare = (_tmp_sAppr4 & 0x003F);
			iArmGlare = (_tmp_sAppr4 & 0x000F);
			iPantsGlare = (_tmp_sAppr4 & 0x000E);
			iMantleGlare = (_tmp_sAppr4 & 0x003E);
			iBootsGlare = (_tmp_sAppr4 & 0x00EE);

			// New Colors -> ZeroEoyPnk
			TempArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (TempArmorColor == 0) {
				TempArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (TempArmorColor != 0) TempArmorColor += 15;
			}

			TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (TempMantleColor == 0) {
				TempMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (TempMantleColor != 0) TempMantleColor += 15;
			}

			TempArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (TempArmColor == 0) {
				TempArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (TempArmColor != 0) TempArmColor += 15;
			}

			TempPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (TempPantsColor == 0) {
				TempPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (TempPantsColor != 0) TempPantsColor += 15;
			}

			TempBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (TempBootsColor == 0) {
				TempBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (TempBootsColor != 0) TempBootsColor += 15;
			}

			TempHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (TempHelmColor == 0) {
				TempHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (TempHelmColor != 0) TempHelmColor += 15;
			}
		}

		switch (_tmp_sOwnerType) {
		case 91:
			_tmp_cDir = 3;
			break;
		case 92:
			_tmp_cFrame = 0;
			_tmp_cDir = 1;
			break;
		}

		cFrame = _tmp_cFrame;

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			if (cFrame < 6)
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (0 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 0;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 0;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 0;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 0;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 0;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 0;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 0;
			}
			else
			{
				cFrame -= 6;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (11 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 11;
				iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 11;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 11;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 11;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 11;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 11;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 11;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 11;
			}
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			if (cFrame < 6)
			{
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (0 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 0;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 0;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 0;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 0;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 0;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 0;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 0;
			}
			else
			{
				cFrame -= 6;
				iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (11 * 8);
				iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 11;
				iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 11;
				if ((_tmp_sAppr4 & 0x80) == 0)
				{
					if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
						iBodyArmorIndex = -1;
					else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 11;
				}
				if ((_tmp_sAppr3 & 0x000F) == 0)
					iArmArmorIndex = -1;
				else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 11;
				if ((_tmp_sAppr3 & 0x0F00) == 0)
					iPantsIndex = -1;
				else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 11;
				if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
					iBootsIndex = -1;
				else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 11;
				if ((_tmp_sAppr4 & 0x0F00) == 0)
					iMantleIndex = -1;
				else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 11;
				if ((_tmp_sAppr3 & 0x00F0) == 0)
					iHelmIndex = -1;
				else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 11;
			}
			break;

		default:
			if (cFrame < 4)
			{
				if (_tmp_sAppr2 != 0)
				{
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					cFrame = _tmp_sAppr2 - 1;
				}
				else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 81) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 91) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 120) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (0 * 8);

				if (_tmp_sOwnerType == 92) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7;

				iUndiesIndex = -1;
				iHairIndex = -1;
				iArmArmorIndex = -1;
				iBodyArmorIndex = -1;
				iPantsIndex = -1;
				iBootsIndex = -1;
				iMantleIndex = -1;
				iHelmIndex = -1;
				switch (_tmp_sOwnerType) {
				case 36: // AGT
				case 37: // CGT
				case 38: // MS
				case 39: // DT
				case 40: // ESG
				case 41: // GMG
				case 42: // ManaStone
				case 92:
					if (_tmp_sAppr2 == 0) cFrame = 0;
					break;
				case 51: cFrame = 0; break;
				}
			}
			else
			{
				switch (_tmp_sOwnerType) {
				case 51: cFrame = 0; break;
				default: cFrame -= 4; break;
				}
				if (_tmp_sAppr2 != 0)
				{
					iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
					cFrame = _tmp_sAppr2 - 1;
				}
				else if (_tmp_sOwnerType == 66) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 73) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 81) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 86) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 87) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 89) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 91) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 114) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else if (_tmp_sOwnerType == 120) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				else if (_tmp_sOwnerType == 128) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				else iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);

				if (_tmp_sOwnerType == 92) iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7;

				iUndiesIndex = -1;
				iHairIndex = -1;
				iArmArmorIndex = -1;
				iBodyArmorIndex = -1;
				iPantsIndex = -1;
				iBootsIndex = -1;
				iMantleIndex = -1;
				iHelmIndex = -1;
			}
			break;
		}

		DecriptString(m_cCurLocation);
		if (m_bIsCrusadeMode || CVCEvent || (WWEvent && (memcmp(m_cCurLocation, "FightMap", 8) == 0)) || FuryDayMode || (WWEventII && (memcmp(m_cCurLocation, "WorldMap", 8) == 0))) DrawObjectFOE(sX, sY, cFrame, _tmp_sOwnerType);
		EncriptString(m_cCurLocation);

		if (_tmp_iEffectType != 0)
		{
			switch (_tmp_iEffectType) {
			case 1: m_pEffectSpr[26]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Attack Effect
			case 2: m_pEffectSpr[27]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			case 4: m_pEffectSpr[172]->PutTransSprite(sX, sY, _tmp_iEffectFrame, dwTime); break; // Special Ability: Protect Effect
			}
		}

		if (bTrans == FALSE)
		{
			switch (_tmp_sOwnerType) { // Pas d'ombre pour ces mobs
			case 10: // Slime
			case 35: // Energy Sphere
			case 50: // TW
			case 51: // CP
			case 60: // Plant
			case 65: // IceGolem
			case 66: // Wyvern
			case 73: // Fire Wyvern
			case 81: // Abaddon
			case 91: // Gate
			case 92:
			case 120:
			case 128: //BlackWyvern
				break;
			default:
				if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Shadows))
				{
					if (sX < 50)
						m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSpriteClip(sX, sY, cFrame, dwTime);
					else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutShadowSprite(sX, sY, cFrame, dwTime);
				}
				break;
			}
			if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
				//probando lalo m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
			{
				m_pEffectSpr[152]->PutTransSprite70(sX - 80, sY - 15, _tmp_iEffectFrame % 27, dwTime); // Explosion Abaddon
				m_pEffectSpr[152]->PutTransSprite70(sX, sY - 15, _tmp_iEffectFrame % 27, dwTime);
				m_pEffectSpr[152]->PutTransSprite70(sX - 40, sY, _tmp_iEffectFrame % 27, dwTime);
				m_pEffectSpr[163]->PutTransSprite70(sX - 90, sY - 80, _tmp_iEffectFrame % 12, dwTime); // Ames qui s'envolent
				m_pEffectSpr[160]->PutTransSprite70(sX - 60, sY - 50, _tmp_iEffectFrame % 12, dwTime);
				m_pEffectSpr[161]->PutTransSprite70(sX - 30, sY - 20, _tmp_iEffectFrame % 12, dwTime);
				m_pEffectSpr[162]->PutTransSprite70(sX, sY - 100, _tmp_iEffectFrame % 12, dwTime);
				m_pEffectSpr[163]->PutTransSprite70(sX + 30, sY - 30, _tmp_iEffectFrame % 12, dwTime);
				m_pEffectSpr[162]->PutTransSprite70(sX + 60, sY - 90, _tmp_iEffectFrame % 12, dwTime);
				m_pEffectSpr[163]->PutTransSprite70(sX + 90, sY - 50, _tmp_iEffectFrame % 12, dwTime);
				switch (_tmp_cDir) {
				case 1: m_pEffectSpr[140]->PutTransSprite70(sX, sY, cFrame, dwTime); break; // Abbadon dying
				case 2: m_pEffectSpr[141]->PutTransSprite70(sX, sY, cFrame, dwTime); break; // fixed sprit IDs
				case 3: m_pEffectSpr[142]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 4: m_pEffectSpr[143]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 5: m_pEffectSpr[144]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 6: m_pEffectSpr[145]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 7: m_pEffectSpr[146]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				case 8: m_pEffectSpr[147]->PutTransSprite70(sX, sY, cFrame, dwTime); break;
				}
			}
			else if (_tmp_sOwnerType == 66) m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);
			else if (_tmp_sOwnerType == 73 || _tmp_sOwnerType == 114)
				//	m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSprite(sX, sY, cFrame, dwTime);//lalo desbug
			{
				m_pSprite[33]->PutTransSprite(sX, sY, cFrame, dwTime);
				switch (_tmp_cDir) {
				case 1: m_pEffectSpr[141]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break; // Abbadon qui meurt
				case 2: m_pEffectSpr[142]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 3: m_pEffectSpr[143]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 4: m_pEffectSpr[144]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 5: m_pEffectSpr[145]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 6: m_pEffectSpr[146]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
				case 7: m_pEffectSpr[147]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break;
					//	case 8: m_pEffectSpr[148]->PutTransSprite70(sX, sY, cFrame+8, dwTime); break; //lalodesbug //+8
				case 8: m_pEffectSpr[141]->PutTransSprite70(sX, sY, cFrame + 8, dwTime); break; //due to buggy Sprite nb
				}
			}
			else
			{
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, cFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, cFrame, dwTime);
			}

			SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

			if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);

			if ((iHairIndex != -1) && (iHelmIndex == -1))
			{
				_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
				m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, iR, iG, iB, dwTime);
			}

			if ((iBootsIndex != -1) && (iSkirtDraw == 1))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iPantsIndex != -1)//PANTS ONDYING 1
			{
				if (iPantsColor == 0)
					m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
				else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
				LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
				switch (iPantsGlare) {
				case 0: break;
				case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iArmArmorIndex != -1)//HAUBERK ONDYING 1
			{
				if (iArmColor == 0)
					m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
				else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
				HauberkGlare(TempArmColor, iArmArmorIndex, &iArmGlare);
				switch (iArmGlare) {
				case 0: break;
				case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glar
				case 5: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}


			if ((iBootsIndex != -1) && (iSkirtDraw == 0))
			{
				if (iBootsColor == 0)
					m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
				else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
				BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
				switch (iBootsGlare) {
				case 0: break;
				case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iBodyArmorIndex != -1)//ARMOR ONDYING 1
			{
				if (iArmorColor == 0)
					m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
				else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
				ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
				switch (iArmorGlare) {
				case 0: break;
				case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if (iHelmIndex != -1)//HELM ONDYING 1
			{
				if (iHelmColor == 0)
					m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
				else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
				HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
				switch (iHelmGlare) {
				case 0: break;
				case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break;
				case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}


			if (iMantleIndex != -1)
			{
				if (iMantleColor == 0)
					m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, dwTime);
				else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
				MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
				switch (iMantleGlare) {
				case 0: break;
				case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
				case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
				case 5: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + cFrame, 0, m_sDrawFlag, 0, dwTime); break; // Green Glare
				}
			}

			if ((_tmp_iStatus & 0x20) != 0) // Berserk
				m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -5, -5, dwTime);

			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((_tmp_iStatus & 0x00100000) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, 0, -50, -50, dwTime);
				if (_tmp_AdminLevel > 0)
					ShowAdmin(sX, sY, _tmp_AdminLevel);
			}

			DrawAngel(24 + (_tmp_cDir - 1), sX + 20, sY - 20, _tmp_cFrame, dwTime);
			CheckActiveAura2(sX, sY, dwTime, _tmp_sOwnerType);

			// Capture The Flag - Angel position Based
			DrawFlag(sX - 10, sY - 70, dwTime);

		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus);
			else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					//	DecriptString(m_cPlayerName);
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX, sY, i, dwTime);
					//	EncriptString(m_cPlayerName);
				}
			}
		}

		//	DecriptString(m_cPlayerName);
		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);
		//	EncriptString(m_cPlayerName);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
			{
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
			}
			else
			{
				m_pMapData->ClearChatMsg(indexX, indexY);
			}
		}

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
			(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
		return FALSE;
		break;
	}
	case DEF_OBJECTDEAD:
	{

		if (_tmp_sOwnerType == 66) return FALSE;

		if ((m_cDetailLevel == 0) || (m_cDetailLevel == 3 && !Colors))
		{
			iArmorColor = 0;
			iMantleColor = 0;
			iArmColor = 0;
			iPantsColor = 0;
			iBootsColor = 0;
			iHelmColor = 0;
		}
		else
		{
			// New Colors -> ZeroEoyPnk
			iArmorColor = (_tmp_iApprColor & 0x00F00000) >> 20;
			if (iArmorColor == 0) {
				iArmorColor = (_tmp_iApprColor2 & 0x00F00000) >> 20;
				if (iArmorColor != 0) iArmorColor += 15;
			}

			iMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
			if (iMantleColor == 0) {
				iMantleColor = (_tmp_iApprColor2 & 0x000F0000) >> 16;
				if (iMantleColor != 0) iMantleColor += 15;
			}

			iArmColor = (_tmp_iApprColor & 0x0000F000) >> 12;
			if (iArmColor == 0) {
				iArmColor = (_tmp_iApprColor2 & 0x0000F000) >> 12;
				if (iArmColor != 0) iArmColor += 15;
			}

			iPantsColor = (_tmp_iApprColor & 0x00000F00) >> 8;
			if (iPantsColor == 0) {
				iPantsColor = (_tmp_iApprColor2 & 0x00000F00) >> 8;
				if (iPantsColor != 0) iPantsColor += 15;
			}

			iBootsColor = (_tmp_iApprColor & 0x000000F0) >> 4;
			if (iBootsColor == 0) {
				iBootsColor = (_tmp_iApprColor2 & 0x000000F0) >> 4;
				if (iBootsColor != 0) iBootsColor += 15;
			}

			iHelmColor = (_tmp_iApprColor & 0x0000000F);
			if (iHelmColor == 0) {
				iHelmColor = (_tmp_iApprColor2 & 0x0000000F);
				if (iHelmColor != 0) iHelmColor += 15;
			}
		}

		/*if ((m_cDetailLevel != 0 && m_cDetailLevel != 3) || (m_cDetailLevel == 3 && Glares))
		{
		iHelmGlare = (_tmp_sAppr4 & 0x00EF);
		iArmorGlare = (_tmp_sAppr4 & 0x003F);
		iArmGlare = (_tmp_sAppr4 & 0x000F);
		iPantsGlare = (_tmp_sAppr4 & 0x000E);
		iMantleGlare = (_tmp_sAppr4 & 0x003E);
		iBootsGlare = (_tmp_sAppr4 & 0x00EE);

		TempArmorColor  = (_tmp_iApprColor & 0x00F00000) >> 20;
		TempMantleColor = (_tmp_iApprColor & 0x000F0000) >> 16;
		TempArmColor    = (_tmp_iApprColor & 0x0000F000) >> 12;
		TempPantsColor  = (_tmp_iApprColor & 0x00000F00) >> 8;
		TempBootsColor  = (_tmp_iApprColor & 0x000000F0) >> 4;
		TempHelmColor   = (_tmp_iApprColor & 0x0000000F);
		}*/

		switch (_tmp_sOwnerType) {
		case 91:
			_tmp_cDir = 3;
			break;
		case 92:
			_tmp_cFrame = 0;
			_tmp_cDir = 1;
			break;
		}

		switch (_tmp_sOwnerType) {
		case 1:
		case 2:
		case 3:
			iFrame = 7;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (11 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_M + (_tmp_sAppr1 & 0x000F) * 15 + 11;
			iHairIndex = DEF_SPRID_HAIR_M + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 11;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_M + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 11;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_M + (_tmp_sAppr3 & 0x000F) * 15 + 11;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_M + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 11;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_M + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 11;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_M + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 11;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_M + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 11;
			break;

		case 4:
		case 5:
		case 6:
			if (((_tmp_sAppr3 & 0x0F00) >> 8) == 1) iSkirtDraw = 1;
			iFrame = 7;
			iBodyIndex = 500 + (_tmp_sOwnerType - 1) * 8 * 15 + (11 * 8);
			iUndiesIndex = DEF_SPRID_UNDIES_W + (_tmp_sAppr1 & 0x000F) * 15 + 11;
			iHairIndex = DEF_SPRID_HAIR_W + ((_tmp_sAppr1 & 0x0F00) >> 8) * 15 + 11;
			if ((_tmp_sAppr4 & 0x80) == 0)
			{
				if (((_tmp_sAppr3 & 0xF000) >> 12) == 0)
					iBodyArmorIndex = -1;
				else iBodyArmorIndex = DEF_SPRID_BODYARMOR_W + ((_tmp_sAppr3 & 0xF000) >> 12) * 15 + 11;
			}
			if ((_tmp_sAppr3 & 0x000F) == 0)
				iArmArmorIndex = -1;
			else iArmArmorIndex = DEF_SPRID_BERK_W + (_tmp_sAppr3 & 0x000F) * 15 + 11;
			if ((_tmp_sAppr3 & 0x0F00) == 0)
				iPantsIndex = -1;
			else iPantsIndex = DEF_SPRID_LEGG_W + ((_tmp_sAppr3 & 0x0F00) >> 8) * 15 + 11;
			if (((_tmp_sAppr4 & 0xF000) >> 12) == 0)
				iBootsIndex = -1;
			else iBootsIndex = DEF_SPRID_BOOT_W + ((_tmp_sAppr4 & 0xF000) >> 12) * 15 + 11;
			if ((_tmp_sAppr4 & 0x0F00) == 0)
				iMantleIndex = -1;
			else iMantleIndex = DEF_SPRID_MANTLE_W + ((_tmp_sAppr4 & 0x0F00) >> 8) * 15 + 11;
			if ((_tmp_sAppr3 & 0x00F0) == 0)
				iHelmIndex = -1;
			else iHelmIndex = DEF_SPRID_HEAD_W + ((_tmp_sAppr3 & 0x00F0) >> 4) * 15 + 11;
			break;
		default:
			switch (_tmp_sOwnerType) {
			case 28: // Troll
			case 29: // Ogre
			case 30: // Liche
			case 31: // DD		// les 2 dernieres sont pas bonnes pour un mort !
			case 63: // Frost	// les 2 dernieres sont pas bonnes pour un mort !
				iFrame = 5;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				break;

			case 32: // Uni
			case 33: // WW
			case 43: // LWB
			case 44: // GHK
			case 45: // GHKABS
			case 46: // TK
			case 47: // BG
			case 48: // SK
			case 49: // HC
			case 50: // TW
			case 53: // BB
			case 54: // DE
			case 55: // Rabbit
			case 56: // Cat
			case 57: // Frog
			case 58: // MG
			case 59: // Ettin
			case 60: // Plant
			case 61: // Rudolph
			case 62: // Direboar
			case 64: // Crops  ----------- Crop ici! etonant, pourtant !
			case 65: // IceGolem
			case 70: // Dragon..........Ajouts par Snoopy
			case 71: // Centaur
			case 72: // ClawTurtle
			case 74: // GiantCrayfish
			case 75: // Gi Lizard
			case 76: // Gi Tree
			case 77: // Master Orc
			case 78: // Minaus
			case 79: // Nizie
			case 80: // Tentocle
			case 82: // Sorceress
			case 83: // ATK
			case 84: // MasterElf
			case 85: // DSK
			case 88: // Barbarian
			case 108: //HellDeath
			case 109:
			case 112:
			case 113:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
				iFrame = 7;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				break;

			case 86: // HBT
			case 87: // CT
			case 89: // AGC
				iFrame = 7;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				break;

			case 66: // Wyvern
				iFrame = 15;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				break;

			case 73: // FireWyvern
			case 114: // DeathWyvern
			case 128: //BlackWyvern
				iFrame = 15;//7
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				//	bTrans = TRUE; // Prevents showing hugly corpse
				break;

			case 81: // Abaddon
			case 120://HellAbaddon
				iFrame = 15;//0
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (3 * 8);
				//	bTrans = TRUE; // Prevents showing hugly corpse
				break;

			case 51: // CP
				iFrame = 0;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				break;

			case 52: // GG
				iFrame = 11;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				break;

			case 91: // Gate
				iFrame = 5;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (2 * 8);
				break;

			case 92:
				iFrame = 0;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7;
				break;

			default: // 40*4 (10...27)
				iFrame = 3;
				iBodyIndex = DEF_SPRID_MOB + (_tmp_sOwnerType - 10) * 8 * 7 + (4 * 8);
				break;
			}
			iUndiesIndex = -1;
			iHairIndex = -1;
			iArmArmorIndex = -1;
			iBodyArmorIndex = -1;
			iPantsIndex = -1;
			iBootsIndex = -1;
			iMantleIndex = -1;
			iHelmIndex = -1;
			break;
		}

		if (bTrans == FALSE)
		{
			if (_tmp_cFrame == -1)
			{
				_tmp_cFrame = 7;
				if ((_tmp_iStatus & 0x40) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteRGB(sX, sY, iFrame, m_wR[10] - m_wR[0] / 2, m_wG[10] - m_wG[0] / 2, m_wB[10] - m_wB[0] / 2, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutSpriteFast(sX, sY, iFrame, dwTime);

				SetRect(&m_rcBodyRect, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top,
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right, m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom);

				if (iUndiesIndex != -1) m_pSprite[iUndiesIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);

				if ((iHairIndex != -1) && (iHelmIndex == -1))
				{
					_GetHairColorRGB(((_tmp_sAppr1 & 0x00F0) >> 4), &iR, &iG, &iB);
					m_pSprite[iHairIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, iR, iG, iB, dwTime);
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 1))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					/*BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					}*/
				}

				if (iPantsIndex != -1)
				{
					if (iPantsColor == 0)
						m_pSprite[iPantsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iPantsColor] - m_wR[0], m_wG[iPantsColor] - m_wG[0], m_wB[iPantsColor] - m_wB[0], dwTime);
					/*LegginsGlare(TempPantsColor, iPantsIndex, &iPantsGlare);
					switch (iPantsGlare) {
					case 0: break;
					case 3: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iPantsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					}*/
				}

				if (iArmArmorIndex != -1)
				{
					if (iArmColor == 0)
						m_pSprite[iArmArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmColor] - m_wR[0], m_wG[iArmColor] - m_wG[0], m_wB[iArmColor] - m_wB[0], dwTime);
					/*HauberkGlare(TempArmColor , iArmArmorIndex, &iArmGlare);
					switch (iArmGlare) {
					case 0: break;
					case 3: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iArmArmorIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					}*/
				}

				if ((iBootsIndex != -1) && (iSkirtDraw == 0))
				{
					if (iBootsColor == 0)
						m_pSprite[iBootsIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iBootsColor] - m_wR[0], m_wG[iBootsColor] - m_wG[0], m_wB[iBootsColor] - m_wB[0], dwTime);
					/*BootsGlare(TempBootsColor, iBootsIndex, &iBootsGlare);
					switch (iBootsGlare) {
					case 0: break;
					case 3: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBootsIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					}*/
				}

				if (iBodyArmorIndex != -1)
				{
					if (iArmorColor == 0)
						m_pSprite[iBodyArmorIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iArmorColor] - m_wR[0], m_wG[iArmorColor] - m_wG[0], m_wB[iArmorColor] - m_wB[0], dwTime);
					/*ArmorGlare(TempArmorColor, iBodyArmorIndex, &iArmorGlare);
					switch (iArmorGlare) {
					case 0: break;
					case 3: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iBodyArmorIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					}*/
				}

				if (iHelmIndex != -1)
				{
					if (iHelmColor == 0)
						m_pSprite[iHelmIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iHelmColor] - m_wR[0], m_wG[iHelmColor] - m_wG[0], m_wB[iHelmColor] - m_wB[0], dwTime);
					/*HelmGlare(TempHelmColor, iHelmIndex, &iHelmGlare);
					switch (iHelmGlare) {
					case 0: break;
					case 3: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break;
					case 4: m_pSprite[iHelmIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					}	*/
				}

				if (iMantleIndex != -1)
				{
					if (iMantleColor == 0)
						m_pSprite[iMantleIndex]->PutSpriteFast(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, dwTime);
					else m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY, (_tmp_cDir - 1) * 8 + _tmp_cFrame, m_wR[iMantleColor] - m_wR[0], m_wG[iMantleColor] - m_wG[0], m_wB[iMantleColor] - m_wB[0], dwTime);
					/*MantleGlare(TempMantleColor, iMantleIndex, &iMantleGlare);
					switch (iMantleGlare) {
					case 0: break;
					case 3: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, 0, 0, m_sDrawFlag, dwTime); break; // Green Glare
					case 4: m_pSprite[iMantleIndex]->PutSpriteRGB(sX, sY,  (_tmp_cDir-1) * 8 + _tmp_cFrame, m_sDrawFlag, 0, 0, dwTime); break; // Green Glare
					}*/
				}
			}
			else
				if ((_tmp_iStatus & 0x20) != 0)
					m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, iFrame, -2 * _tmp_cFrame + 5, -2 * _tmp_cFrame - 5, -2 * _tmp_cFrame - 5, dwTime);
				else m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, iFrame, -2 * _tmp_cFrame, -2 * _tmp_cFrame, -2 * _tmp_cFrame, dwTime);

		}
		else if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6)) DrawObjectName(sX, sY, _tmp_cName, _tmp_iStatus, ObjectID);
			else DrawNpcName(sX, sY, _tmp_sOwnerType, _tmp_iStatus, _tmp_wObjectID);
		}

		// NewPartyBar - ZeroEoyPnk
		if (DecriptInt(m_iPartyStatus) != NULL) {
			for (int i = 0; i < DEF_MAXPARTYMEMBERS; i++) {
				if (strcmp(m_stPartyMemberNameList[i].cName, _tmp_cName) == 0) {
					//		DecriptString(m_cPlayerName);
					if ((BigBar != 2 && strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0) || strcmp(m_stPartyMemberNameList[i].cName, m_cPlayerName) != 0)
						PartyBar(sX, sY, i, dwTime);
					//		EncriptString(m_cPlayerName);
				}
			}
		}

		//	DecriptString(m_cPlayerName);
		if (BigBar == 2 && strcmp(m_cPlayerName, _tmp_cName) == 0) MyBar(sX, sY, dwTime);
		//	EncriptString(m_cPlayerName);

		if (_tmp_iChatIndex != NULL)
		{
			if ((m_pChatMsgList[_tmp_iChatIndex] != NULL) && (m_pChatMsgList[_tmp_iChatIndex]->m_iObjectID == _tmp_wObjectID))
			{
				m_pChatMsgList[_tmp_iChatIndex]->m_sX = sX;
				m_pChatMsgList[_tmp_iChatIndex]->m_sY = sY;
			}
			else
			{
				m_pMapData->ClearDeadChatMsg(indexX, indexY);
			}
		}
		// Snoopy: Abaddon effects
		if (_tmp_sOwnerType == 81 || _tmp_sOwnerType == 120)
		{
			Abaddon_corpse(sX, sY); // By Snoopy....
		}
		else if (_tmp_sOwnerType == 73 || _tmp_sOwnerType == 114)
		{//	m_pEffectSpr[35]->PutTransSprite70(sX+120, sY+120, rand(), dwTime); //lalo
			m_pEffectSpr[35]->PutTransSprite70(sX + 20, sY - 15, rand() % 10, dwTime);//35
		}
		else if (_tmp_sOwnerType == 66)
		{//	m_pEffectSpr[35]->PutTransSprite70(sX+120, sY+120, rand(), dwTime); //BUSCAME AKA
			m_pEffectSpr[35]->PutTransSprite70(sX + 20, sY - 15, rand() % 10, dwTime);//35
		}

		switch (_tmp_sOwnerType)
		{
		case 108:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEATH1, COLOR_HELLDEATH2, COLOR_HELLDEATH3, dwTime);
			break;
		case 109:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_LIGHTWORM1, COLOR_LIGHTWORM2, COLOR_LIGHTWORM3, dwTime);
			break;
		case 112:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HOUNDEATH1, COLOR_HOUNDEATH2, COLOR_HOUNDEATH3, dwTime);
			break;
		case 113:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLICHE1, COLOR_HELLICHE2, COLOR_HELLICHE3, dwTime);
			break;
		case 114:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_DEATHWYVERN1, COLOR_DEATHWYVERN2, COLOR_DEATHWYVERN3, dwTime);
			break;
		case 115:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLBUTCHER1, COLOR_HELLBUTCHER2, COLOR_HELLBUTCHER3, dwTime);
			break;
		case 116:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLTROLL1, COLOR_HELLTROLL2, COLOR_HELLTROLL3, dwTime);
			break;
		case 117:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_MOUNTDEATH1, COLOR_MOUNTDEATH2, COLOR_MOUNTDEATH3, dwTime);
			break;
		case 118:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLGOYLE1, COLOR_HELLGOYLE2, COLOR_HELLGOYLE3, dwTime);
			break;
		case 119:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLDEMON1, COLOR_HELLDEMON2, COLOR_HELLDEMON3, dwTime);
			break;
		case 120:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_HELLABBY1, COLOR_HELLABBY2, COLOR_HELLABBY3, dwTime);
			break;
			/*case 128:
			m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->PutTransSpriteRGB(sX, sY, _tmp_cFrame, COLOR_BLACKWYV1, COLOR_BLACKWYV2, COLOR_BLACKWYV3, dwTime);
			break;*/
		default: break;
		}

		if (strlen(_tmp_cName) > 0)
		{
			if ((_tmp_sOwnerType >= 1) && (_tmp_sOwnerType <= 6))
			{
				if ((m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top != -1) &&
					(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.top < msY) &&
					(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.bottom > msY) &&
					(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.left < msX) &&
					(m_pSprite[iBodyIndex + (_tmp_cDir - 1)]->m_rcBound.right > msX)) return TRUE;
			}
		}
		return FALSE;
		break;
	}
	default:
		return FALSE;
		break;
	}

	return FALSE;
}

double CGame::test_request_ping() {
	double ping;
		WSADATA wsaData;
		SOCKET clientSocket;
		sockaddr_in serverAddr;
		char buffer[UDP_BUFFER_SIZE];
		int serverAddrSize = sizeof(serverAddr);

		// Inicializar Winsock
		if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
			std::cerr << "Error al iniciar Winsock" << std::endl;
			return -1;
		}

		// Crear socket
		clientSocket = socket(AF_INET, SOCK_DGRAM, 0);
		if (clientSocket == INVALID_SOCKET) {
			std::cerr << "Error al crear socket" << std::endl;
			WSACleanup();
			return -1;
		}

		// Configurar dirección del servidor
		serverAddr.sin_family = AF_INET;
		serverAddr.sin_addr.s_addr = inet_addr(SERVER_IP);
		serverAddr.sin_port = htons(SERVER_PORT);

		// Preparar mensaje
		buffer[0] = 'P'; // Mensaje mínimo (1 byte)

		// Registrar tiempo de envío
		auto startTime = std::chrono::high_resolution_clock::now();

		// Enviar mensaje
		if (sendto(clientSocket, buffer, UDP_BUFFER_SIZE, 0, (sockaddr*)&serverAddr, serverAddrSize) == SOCKET_ERROR) {
			std::cerr << "Error al enviar mensaje" << std::endl;
			closesocket(clientSocket);
			WSACleanup();
			return -1;
		}

		// Recibir respuesta
		int receivedBytes = recvfrom(clientSocket, buffer, UDP_BUFFER_SIZE, 0, (sockaddr*)&serverAddr, &serverAddrSize);
		if (receivedBytes == SOCKET_ERROR) {
			std::cerr << "Error al recibir respuesta" << std::endl;
		}
		else {
			auto endTime = std::chrono::high_resolution_clock::now();
			// Calcular ping
			auto duration = std::chrono::duration_cast<std::chrono::duration<double>>(endTime - startTime); // Usar 'double' para precisión decimal
			ping = duration.count() * 1000.0; // Convertir a milisegundos

			// Mostrar ping con 2 decimales
			//std::cout << "Ping: " << std::fixed << std::setprecision(2) << ping << " ms" << std::endl;
		}

		closesocket(clientSocket);
		WSACleanup();
		std::this_thread::sleep_for(std::chrono::milliseconds(500)); // Esperar antes de enviar de nuevo

		return ping;
}
